; -------------------------------------------------------------------------
; Rules pertaining to:   Defaulting the Proposed Building Model (excluding Constructions & HVAC)
; CEC Title-24 Residential Energy Code
; -------------------------------------------------------------------------
; Copyright (c) 2012-2014, California Energy Commission
; Copyright (c) 2012-2014, Wrightsoft Corporation
; All rights reserved.
; Redistribution and use in source and binary forms, with or without modification,
; are permitted provided that the following conditions are met:
; - Redistributions of source code must retain the above copyright notice, this
;   list of conditions and the following disclaimer.
; - Redistributions in binary form must reproduce the above copyright notice, this
;   list of conditions, the following disclaimer in the documentation and/or other
;   materials provided with the distribution.
; - Neither the name of the California Energy Commission nor the names of its
;   contributors may be used to endorse or promote products derived from this
;   software without specific prior written permission.
; DISCLAIMER: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
; THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
; NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION,
; WRIGHTSOFT CORPORATION, ITRON, INC. OR ANY OTHER AUTHOR OR COPYRIGHT HOLDER OF
; THIS SOFTWARE (COLLECTIVELY, THE "AUTHORS") BE LIABLE FOR ANY DIRECT, INDIRECT,
; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
; OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
; OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  EACH LICENSEE AND SUBLICENSEE OF THE
; SOFTWARE AGREES NOT TO ASSERT ANY CLAIM AGAINST ANY OF THE AUTHORS RELATING TO
; THIS SOFTWARE, WHETHER DUE TO PERFORMANCE ISSUES, TITLE OR INFRINGEMENT ISSUES,
;STRICT LIABILITY OR OTHERWISE.
; -------------------------------------------------------------------------


;*************************************************************************
RULELIST "ProposedInput" 0 0 0 0
;*************************************************************************

   "Set or increment Proj:DefaultingRounds"     Proj:DefaultingRounds  =         ; SAC 2/3/20
      {  if (IfValidAnd( DefaultingRounds > 0 )==0) then  1
         else  DefaultingRounds + 1  endif  }

   "Set Proj:IsComRuleset"          Proj:IsComRuleset        = {  0  }     ; SAC 10/20/21 (MFam)
   "Set Proj:IsSFamResRuleset"      Proj:IsSFamResRuleset    = {  1  }     ; SAC 10/20/21 (MFam)
   ;--------------------------------------------------------------------
   ; ProposedInput: Analysis and Site Rules
   ;--------------------------------------------------------------------

   "Init Proj:ExEDR_Defaults"    Proj:ExEDR_Defaults  = {  0  }  ; Whether or not Existing EDR defaulting is active for this model - SAC 5/24/17

	"Set Proj:RuleRepoRev"		                        Proj:Action	= {	EvalRulelist( "Set_RuleRepoRev" )  }
	"Set various Code & Program Version properties"		Proj:Action	= {	EvalRulelist( "Default_CodeVersion" )  }

   "Initialize Proj:EnableMixedFuelCompare"     Proj:EnableMixedFuelCompare  =      ; SAC 12/28/21 (MxdFuel)
      {  if (LocalStatus( EnableMixedFuelCompare ) < 0.5) then  0  else  UNCHANGED  endif  }
   "Set Proj:ShowMixedFuelCompare"              Proj:ShowMixedFuelCompare  =
      {  if (IfValidAnd(  EnableMixedFuelCompare > 0.5 )) then  1  else  UNDEFINED  endif  }
;   "Initialize Proj:MixedFuelCompareOpt"        Proj:MixedFuelCompareOpt  =
;      {  if (IfValidAnd(  EnableMixedFuelCompare > 0.5 )) then  0  else  UNDEFINED  endif  }
;   "Set Proj:PerformMixedFuelCompare"           Proj:PerformMixedFuelCompare  =
;      {  if (IfValidAnd(  EnableMixedFuelCompare > 0.5 ) .AND. IfValidAnd( MixedFuelCompareOpt > 0.5 )) then  1  else  0  endif  }

   "Reset Proj:AnalysisType if invalid"      Proj:Action  = {
         if (LocalSymbolInvalid( AnalysisType )) then  EvalRulelist( "ForceReset_AnalysisType" )
         else  UNCHANGED  endif  }

   "Initialize Project Err** Code to 0"
     Proj:ErrorCode = { 0 }

   "Set Proj:CSEinclDHWMFL_EU - lag indicating whether or not CSE results will include the DhwMFL enduse"   ; SAC 2/27/18   ; SAC 10/29/19
      Proj:CSEinclDHWMFL_EU  = {
         if (IfValidAnd( CSEName = "CSE19" ) .OR.
             IfValidAnd( CSEName = "CSE19-860" )) then  1  else  0  endif  }

;   ; SAC 1/25/17 - rules to populate entire model based on summary inputs present in "Model" object
;   "Default model object"        Model:Action = {  EvalRulelist( "Default_Model" )  }
;   "Generate building model"     Proj:Action  = {
;         if (IfValidAnd( EnergyCodeYearNum = 0 )==0 .OR.
;             ComponentCount( Model ) < 1 .OR. ComponentCount( Zone ) > 0) then  UNCHANGED
;         else  EvalRulelist( "GenerateModel" )  endif  }

   "Initialize Proj:EnableResearchMode"         Proj:EnableResearchMode  = {
         if (LocalStatus( EnableResearchMode ) < 0.5) then  0  else  UNCHANGED  endif  }
   "Initialize Proj:AllowNegativeDesignRatings" Proj:AllowNegativeDesignRatings  = {
         if (LocalStatus( AllowNegativeDesignRatings ) < 0.5) then  0  else  UNCHANGED  endif  }   ; SAC 1/11/18
   "Initialize Proj:CalcCO2DesignRatings"       Proj:CalcCO2DesignRatings  = {
         if (LocalStatus( CalcCO2DesignRatings ) < 0.5) then  0  else  UNCHANGED  endif  }   ; SAC 1/27/18
	; no default of Proj:RetainRuleDefaults - Boolean (0/1) to override file save of all rule defaults as user inputs   ; SAC 2/4/16

   "Initialize Proj:ShuffleSFamDHW"    Proj:ShuffleSFamDHW =                           ; SAC 05/13/21   ; default to 0 for 2019, 1 for 2022+ - SAC 06/24/21
      {  if (LocalStatus( ShuffleSFamDHW ) < 0.5)
         then  if (EnergyCodeYearNum < 2022)
               then  0
               else  1  endif
         else  UNCHANGED  endif  }
   "Set Proj:ShuffleSFamDHWMsg"     Proj:ShuffleSFamDHWMsg =      ; SAC 06/24/21
      {  if (IfValidAnd( IsMultiFamily > 0 )==0 .AND. AnalysisType >= 13)
         then  if (EnergyCodeYearNum < 2022 .AND. ShuffleSFamDHW > 0)
               then  Format( "activation of DHW draw profile shuffling, which is invalid for %g compliance analysis", EnergyCodeYearNum )
               else if (EnergyCodeYearNum >= 2022 .AND. ShuffleSFamDHW < 1)
               then  Format( "deactivation of DHW draw profile shuffling, which is required for %g compliance analysis", EnergyCodeYearNum )
               else  UNDEFINED  endif endif
         else  UNDEFINED  endif  }
   "Set Proj:ShuffleSFamDHWNum"        Proj:ShuffleSFamDHWNum =
      {  if (IfValidAnd( IsMultiFamily > 0 )==0 .AND. ShuffleSFamDHW > 0.5) then  5  else  0  endif  }

   "Initialize Proj:EnableRHERS"                Proj:EnableRHERS  =     ; SAC 11/8/19
      {  if (LocalStatus( EnableRHERS ) < 0.5) then  0  else  UNCHANGED  endif  }
   ; Proj:CalcRHERSEnergyRtgIdx - no default
   "Set Proj:RHERSEnabled - flag indicating whether RESNET HERS inputs, calcs & results are enabled"
      Proj:RHERSEnabled  = {  if (EnableRHERS > 0 .AND. IfValidAnd( CalcRHERSEnergyRtgIdx > 0 )) then  1  else  0  endif  }

   ; moved StdDesignFuel & DRtgDesignFuel rules from here down to end of defaulting rules, since now can depend on other model defaulting - SAC 02/05/21

   "Set Proj:AllowStdDesignFuel (iff undefined)"            Proj:AllowStdDesignFuel =              ; SAC 04/02/21
      {  if (LocalStatus( AllowStdDesignFuel         ) < 1) then  0  else  UNCHANGED  endif  }
   "Set Proj:ApplyStdDesignIAQFromTable (iff undefined)"    Proj:ApplyStdDesignIAQFromTable =      ; SAC 04/03/21
      {  if (LocalStatus( ApplyStdDesignIAQFromTable ) < 1) then  0  else  UNCHANGED  endif  }

	"Default Proj:ComplianceReportPDF"			Proj:ComplianceReportPDF	= {	0  }		; SAC 8/14/13
	"Default Proj:ComplianceReportXML"			Proj:ComplianceReportXML	= {	0  }

   "Hardwire Proj:WeatherStation if not EnableResearchMode"    Proj:Action =     ; SAC 08/31/22 (tic #1338)
      {  if (ClimateZone < 1 .OR. AnalysisVersion < 220000) then  UNCHANGED
         else if (EnableResearchMode < 1 .OR. WeatherStation < 1)
         then  EvalRulelist( "ForceDefault_Proj_WeatherStation" )
         else  UNCHANGED  endif endif  }

   "Default Proj:SpecifyWeatherFN"     Proj:SpecifyWeatherFN  = {  0  }    ; SAC 5/17/19
  ; SAC 4/21/19 - added reference to WeatherFileKey property to facilitate alternate weather file batch processing (reserch only)
  ; SAC 5/17/19 - added logic to retain user-specified weather filename for analysis if BypassRuleLimits activated
   "Call subordinate rulelist to setup simulation weather file (Proj:WeatherFileName)"    Proj:Action  =    ; SAC 4/22/19
      {  if (AnalysisType == 0 .AND. LocalStatus( WeatherFileName ) > 5) then  UNCHANGED		; Research mode
         else if (IfValidAnd( BypassRuleLimits > 0 ) .AND. LocalStatus( WeatherFileKey ) > 0 .AND. ClimateZone > 0)
         then  EvalRulelist( "Set_WeatherFileName_ViaKey" )
         else if (IfValidAnd( BypassRuleLimits > 0 ) .AND. IfValidAnd( SpecifyWeatherFN > 0 ) .AND.
                  LocalStatus( WeatherFileName ) > 5) then  UNCHANGED
         else  EvalRulelist( "Default_WeatherFileName" )  endif endif endif  }
   "Set Proj:WeatherFileSetMsg"     Proj:WeatherFileSetMsg  =     ; SAC 6/9/19
      {  UNDEFINED  }
      ;{  if (EnergyCodeYearNum = 2022 .AND. WeatherFileSet > 0)                                             - SAC 8/26/19 - remove limitation on 2022 EDR calcs
      ;   then  "Warning:  EDR results can only be calculated for the '(default)' weather set."
      ;   else  UNDEFINED  endif  }

	"Init Proj:DHWWthrFileName"		Proj:DHWWthrFileName	= {	UNDEFINED  }   ; not defined for CEC Title-24 analysis (DLL-based weather used)
	"Set Proj:DHWHour2to1Mult - based on weekday DHW usage profile hr2/hr1 from ACM ref manual"		Proj:DHWHour2to1Mult	= {	14/8  }		; SAC 4/17/15 - workaround for DHW DLL issue where prop & std results differ (GC 468)

   "Force reset of Proj:StandardsVersion for early/test 2019 projects"    Proj:Action  =     ; SAC 6/7/19 - added logic to cover 2022 rules as well
      {  if (LocalStatus( StandardsVersion ) > 6 .AND.
             ( (IfValidAnd( StandardsVersion = 2017 ) .AND. IfValidAnd( StdDesignBase = 2019 )) .OR.
               (IfValidAnd( StandardsVersion = 2020 ) .AND. IfValidAnd( StdDesignBase = 2022 )) ))
         then  EvalRulelist( "ForceReset_StandardsVersion" )
         else  UNCHANGED  endif  }
	; defaulted via enumerations:  "StandardsVersion",  BEMP_Sym,  1,  0,  0, "",                 0,  0,                           1003, "determines which federal appliance efficiency requirements for cooling & heating equipment apply to this project"   
	"Set Proj:StandardsVerLabel"	Proj:StandardsVerLabel	= {
			switch (StandardsVersion)
				case 2014 :  if (StdDesignBase == 2014) then  " "  else  "valid through December 2014 (with current Federal Air Conditioning efficiency requirements)"  endif
				case 2015 :  "any time (with 2015 Federal Air Conditioning Requirements) and solar credit"
				default   :  " "  ; unrecognized
			endswitch  }

   ; added CALGreen & TDVType defaulting and resets
   "Default Proj:CALGreen"    Proj:CALGreen  = {   0  }
   "Force reset of Proj:TDVType if necessary"   Proj:Action = {
         if (CALGreen = 0 .AND. TDVType > 1)
         then  EvalRulelist( "ForceDefault_TDVType_Std" )
         else if (CALGreen > 0 .AND. TDVType < 2)
         then  EvalRulelist( "ForceDefault_TDVType_CALGreen" )
         else  UNCHANGED  endif endif  }

	"Set Proj:WinOvrhngGraphic"		Proj:WinOvrhngGraphic	= {	"WinOvrhng.jpg"  }
	"Set Proj:WinFinGraphic"			Proj:WinFinGraphic		= {	"WinFin.jpg"  }

	"Set Proj:RunNumber"					Proj:RunNumber				= {	0  }
	"Set Proj:RunID"						Proj:RunID					= {	"User"		}
	"Set Proj:RunIDProcFile"			Proj:RunIDProcFile		= {	" - User"	}
	"Set Proj:RunAbbrev"					Proj:RunAbbrev				= {	"u"			}

   "Set Proj:IsStdRun"        Proj:IsStdRun      = {  if (RunAbbrev == "s" .OR. RunAbbrev == "s2" .OR. RunAbbrev == "s3" .OR.
                                                          RunAbbrev == "S" .OR. RunAbbrev == "S2" .OR. RunAbbrev == "S3")
                                                      then  1  else  0  endif  }     ; SAC 07/18/23 (2025)
   "Set Proj:IsStdOrSMFRun"   Proj:IsStdOrSMFRun = {  if (IsStdRun > 0 .OR. RunAbbrev == "smf" .OR. RunAbbrev == "SMF")
                                                      then  1  else  0  endif  } 

	; default to 'Compliance' - logic designed to facilitate setting/resetting this based on INI settings
	"Default Proj:SimSpeedOption"		Proj:SimSpeedOption		= {	if (LocalStatus( SimSpeedOption ) < 0.5) then  0  else  UNCHANGED  endif  }
	"Default SimSpeedOption-related properties enabling user customization"		Proj:Action	= {	EvalRulelist( "Default_SimSpeedOption" )  }

   "Set Proj:MaxDuctFracArea - Max duct surface area as a fraction of the sum of all zone surface + duct areas"   ; SAC 5/31/17 - tic #621   
      Proj:MaxDuctFracArea     = {  0.45  }
   "Set Proj:DuctInsRValPerInch - Estimate of duct insulation R-value per inch, used to calculate duct surface areas"   ; SAC 5/31/17 - tic #621   
      Proj:DuctInsRValPerInch  = {  3  }

	; SAC 10/7/13 - added to INI-file enabled features
	"Default Proj:EnableRptIncFile"		Proj:EnableRptIncFile		= {	if (LocalStatus( EnableRptIncFile   ) < 0.5) then  0  else  UNCHANGED  endif  }
	"Default Proj:EnableVarFlowOAV"		Proj:EnableVarFlowOAV		= {	if (LocalStatus( EnableVarFlowOAV   ) < 0.5) then  1  else  UNCHANGED  endif  }		; SAC 8/7/14 - turn ON by default
	"Default Proj:EnableFixedFlowOAV"	Proj:EnableFixedFlowOAV		= {	if (LocalStatus( EnableFixedFlowOAV ) < 0.5) then  1  else  UNCHANGED  endif  }

   ; properties managing feature to perform ruleset table replacements @ start of analysis - SAC 12/14/20
   ;      "ReplaceRuleTableFile",   BEMP_Str,  5,  1,  0, "",            0,  0,                           1001, "replace ruleset table path/filename" 
   "default Proj:ReplaceRuleTable[1]"     Proj:ReplaceRuleTable[1] = {  if (LocalStatus( ReplaceRuleTableString[1] ) > 5 .AND. EnableResearchMode > 0) then  ReplaceRuleTableString[1]  else  UNDEFINED  endif  }
   "default Proj:ReplaceRuleTable[2]"     Proj:ReplaceRuleTable[2] = {  if (LocalStatus( ReplaceRuleTableString[2] ) > 5 .AND. EnableResearchMode > 0) then  ReplaceRuleTableString[2]  else  UNDEFINED  endif  }
   "default Proj:ReplaceRuleTable[3]"     Proj:ReplaceRuleTable[3] = {  if (LocalStatus( ReplaceRuleTableString[3] ) > 5 .AND. EnableResearchMode > 0) then  ReplaceRuleTableString[3]  else  UNDEFINED  endif  }
   "default Proj:ReplaceRuleTable[4]"     Proj:ReplaceRuleTable[4] = {  if (LocalStatus( ReplaceRuleTableString[4] ) > 5 .AND. EnableResearchMode > 0) then  ReplaceRuleTableString[4]  else  UNDEFINED  endif  }
   "default Proj:ReplaceRuleTable[5]"     Proj:ReplaceRuleTable[5] = {  if (LocalStatus( ReplaceRuleTableString[5] ) > 5 .AND. EnableResearchMode > 0) then  ReplaceRuleTableString[5]  else  UNDEFINED  endif  }
   "default Proj:ReplaceRuleTableString[1]"  Proj:ReplaceRuleTableString[1] = {  if (ReplaceRuleTable[1] > 0 .AND. EnableResearchMode > 0) then  EnumString( ReplaceRuleTable[1] )  else  UNDEFINED  endif  }
   "default Proj:ReplaceRuleTableString[2]"  Proj:ReplaceRuleTableString[2] = {  if (ReplaceRuleTable[2] > 0 .AND. EnableResearchMode > 0) then  EnumString( ReplaceRuleTable[2] )  else  UNDEFINED  endif  }
   "default Proj:ReplaceRuleTableString[3]"  Proj:ReplaceRuleTableString[3] = {  if (ReplaceRuleTable[3] > 0 .AND. EnableResearchMode > 0) then  EnumString( ReplaceRuleTable[3] )  else  UNDEFINED  endif  }
   "default Proj:ReplaceRuleTableString[4]"  Proj:ReplaceRuleTableString[4] = {  if (ReplaceRuleTable[4] > 0 .AND. EnableResearchMode > 0) then  EnumString( ReplaceRuleTable[4] )  else  UNDEFINED  endif  }
   "default Proj:ReplaceRuleTableString[5]"  Proj:ReplaceRuleTableString[5] = {  if (ReplaceRuleTable[5] > 0 .AND. EnableResearchMode > 0) then  EnumString( ReplaceRuleTable[5] )  else  UNDEFINED  endif  }

   "Default Proj:ReportInclPropOnly - whether or not ReportIncludeFile to be used in Proposed (1) or all (0) runs"   ; SAC 9/4/17
      Proj:ReportInclPropOnly    = {  1  }

	; SAC 6/2/14 - added BypassRuleLimits to properties that can be set from INI-file...
	"Default Proj:BypassRuleLimits"		Proj:BypassRuleLimits		= {	if (LocalStatus( BypassRuleLimits   ) > 0.5) then  UNCHANGED
	                                                                     else if (AnalysisType == 2) then  3    ; CA Res Existing EDR
	                                                                     else  0  endif endif  }
      ; "dbg" Proj:Action = { PostMessageToLog( "Evaluating 'ProposedInput' rulelist w/ BypassRuleLimits = %g", BypassRuleLimits ) }  ; SAC 1/9/19 - debugging live vs. batch processing

   ; SAC 5/10/19 - remove (without resets) user specification of HP AutoSize
   ; SAC 6/21/19 - revised HVACHtPump:AutoSize reset to relax for EnableHPAutosize (as opposed to the more generic BypassRuleLimits)
   "Reset HVACHtPump:AutoSize if not EnableHPAutosize"   HVACHtPump:Action  =
      {  if (IfValidAnd( AutoSize > 0 ) .AND. IfValidAnd( Proj:EnableHPAutosize > 0 )==0)
         then  EvalRulelist( "Blast_HtPump_AutoSize_NoResets", 1 )
         else  UNCHANGED  endif  }

   ; SAC 10/30/16 - added vintage defaulting for Existing EDR runs
   ; Proj:YearBuilt,             Required,   0,    1,   1,    1,  1,  1
   "Default Proj:YearRoof"          Proj:YearRoof        = {
         if (LocalStatus( YearBuilt ) < 1) then  UNDEFINED  else  YearBuilt  endif  }
   "Default Proj:YearWindows"       Proj:YearWindows     = {
         if (LocalStatus( YearBuilt ) < 1) then  UNDEFINED  else  YearBuilt  endif  }
   "Default Proj:YearEnvelope"      Proj:YearEnvelope    = {
         if (LocalStatus( YearBuilt ) < 1) then  UNDEFINED  else  YearBuilt  endif  }
   "Default Proj:YearAppliances"    Proj:YearAppliances  = {
         if (LocalStatus( YearBuilt ) < 1) then  UNDEFINED  else  YearBuilt  endif  }
   "Default Proj:YearLighting"      Proj:YearLighting    = {
         if (LocalStatus( YearBuilt ) < 1) then  UNDEFINED  else  YearBuilt  endif  }
   "Default Proj:YearHVAC"          Proj:YearHVAC        = {
         if (LocalStatus( YearBuilt ) < 1) then  UNDEFINED  else  YearBuilt  endif  }
   "Default Proj:YearWaterHtg"      Proj:YearWaterHtg    = {
         if (LocalStatus( YearBuilt ) < 1) then  UNDEFINED  else  YearBuilt  endif  }

   "Default ExEDR Proj:DfltExWin* properties"    Proj:Action  = {
         if (IfValidAnd( Proj:ExEDR_Defaults > 0 ))
         then  EvalRulelist( "ExEDRDefault_Proj_DfltWinProperties" )
         else  UNCHANGED  endif  }

   ; SAC 11/3/15 - ensure DHWCalcMethod = "CSE" for all runs where BypassRuleLimits not activated
   ; SAC 7/29/18 - removed all logic pertaining to DHWCalcMethod (related to transition from T24DHW DLLs to CSE)
	"Hardwire Proj:DHWCalcMethod to 'CSE' if BypassRuleLimits missing or < 2"	Proj:Action		= {
											if (IfValidAnd( DHWCalcMethod = 1 )) then  UNCHANGED
											else	EvalRulelist( "ForceDefault_DHWCalcMethod_CSE" )  endif  }

	"Set Proj:ResultSummary[1] based on EUseSummary:ProjAssignFirst"		Proj:ResultSummary[1]	= {	if (LocalCompAssigned( ResultSummary[1] ) > 0) then  UNCHANGED
																																		else	MaxAllComp( EUseSummary:ProjAssignFirst )  endif  }		; SAC 3/3/16 - tic #609

	"default iff undefined EUseSummary:ResultsAnalysisVer"   EUseSummary:ResultsAnalysisVer = {  if (LocalStatus( ResultsAnalysisVer ) > 0) then  UNCHANGED  else  0  endif  }  ; SAC 11/28/22
	"default iff undefined EUseSummary:AllOrientations"      EUseSummary:AllOrientations    = {  if (LocalStatus( AllOrientations    ) > 0) then  UNCHANGED  else  0  endif  }

;	mjb 4/24/14	- Additions Alone params defaulted
	"Default Proj:IsAddAlone"			Proj:IsAddAlone			= {	0	}
	"Default Proj:AdditionCFAFrac"	Proj:AdditionCFAFrac		= {	1	}
	"Force resets for non-New Cons (necessary for third party analysis)"		Proj:Action	= {	if (RunScope == 1 .OR. (IsAddAlone == 0 .AND. AdditionCFAFrac == 1)) then  UNCHANGED
																															else	EvalRulelist( "ForceDefault_IsAddAlone_AddFrac" )  endif  }

   "Force reset of Proj:NoDwellingUnit if needed"  Proj:Action =
      {  if (IfValidAnd( NoDwellingUnit > 0 )==0 .OR. RunScope > 1 .OR. IsAddAlone > 0) then  UNCHANGED
         else  EvalRulelist( "Blast_Proj_NoDwellingUnit" )  endif  }
   "Default Proj:NoDwellingUnit - whether this model includes no dwelling units"    Proj:NoDwellingUnit = { 0 }      ; SAC 07/05/23 (tic #1351)
   "Reset SFamADUType, NumBedrooms and/or NumAddBedrooms if NoDwellingUnit"         Proj:Action =              ; SAC 07/05/23 (tic #1351)
      {  if (NoDwellingUnit > 0 .AND. (SFamADUType > 0 .OR. IfValidAnd( NumBedrooms > 0 ) .OR. IfValidAnd( NumAddBedrooms > 0 )))
         then  EvalRulelist( "NoDwellingUnit_ResetADUType_NumBedrooms" )
         else  UNCHANGED  endif  }

  ; SAC 2/9/15 - flag documenting requirement of alterations including at least 2 categories of upgraded component(s)
	"Default Proj:AlterIncl2Categs"	Proj:AlterIncl2Categs	= {	0	}

	"Default Proj:ProjInclKitchen"	Proj:ProjInclKitchen  = {
	      if (RunScope == 1 .AND. IsAddAlone == 0) then  1  else  0  endif  }     ; SAC 3/8/19 (tic #1085)

; mjb 9/30/14 - Default HVACSysStatus for IsAddAlone = 1
	"Conditional Default Zone:HVACSysStatus"			Zone:HVACSysStatus			= {	if (Proj:IsAddAlone > 0.5) then 	3 else UNCHANGED endif	}		; HVACSysStatus set to NEW if IsAddAlone


   ;--------------------------------------------------------------------
   ; ProposedInput: Season Change Temperature & 
   ;--------------------------------------------------------------------

   "Force reset of SeasonChangeSetpt and/or FanVentLockoutTemp if not BypassRuleLimits or EnableResearchMode"  Proj:Action  =    ; SAC 2/7/20
      {  if (IfValidAnd( BypassRuleLimits > 0 ) .OR. IfValidAnd( EnableResearchMode > 0 )) then  UNCHANGED
         else if (LocalStatus( SeasonChangeSetpt ) < 5 .AND. LocalStatus( FanVentLockoutTemp )) then  UNCHANGED
         else  EvalRulelist( "ForceReset_SeasonFanVentTemps" )  endif endif  }
	"Default Proj:SeasonChangeSetpt"		Proj:SeasonChangeSetpt	= {	60  }		; SAC 4/3/14
	"Default Proj:FanVentLockoutTemp"	Proj:FanVentLockoutTemp	= {	68  }		; SAC 4/8/14	- SAC 4/23/14 - updated default from 66 -> 68 (per Bruce request)

   ;--------------------------------------------------------------------
	; SAC 3/23/15 - moved up here ABOVE DesignRating rules since this setting effects setting of AllowDesignRating
	"Default Proj:IsMultiFamily"			Proj:IsMultiFamily    	= {	0  }

   "Set Proj:CSEVentAvailZonal - whether to model zone-level vent control"    Proj:CSEVentAvailZonal =      ; SAC 7/12/20 - toggle ON for all MFam models starting in ver 2019.2.0
      {  if (IsMultiFamily .AND. IfValidAnd( AnalysisVersion >= 220000 )) then  1  else  0  endif  }
   "Set Proj:NResLeakageRatio - ratio of NRes surface leakage (per ft2) / Res surface leakage"     Proj:NResLeakageRatio =    ; SAC 7/12/20
      {  if (CSEVentAvailZonal) then  1.8  else  UNDEFINED  endif  }
   "Set Proj:IntSurfHoleSzRatio[1] - ratio of hole size / wall size for int surfaces (1-between Res units)"    Proj:IntSurfHoleSzRatio[1] =     ; SAC 7/13/20
      {  0.0005  }
   "Set Proj:IntSurfHoleSzRatio[2] - ratio of hole size / wall size for int surfaces (2-other than between Res units)"     Proj:IntSurfHoleSzRatio[2] =     ; SAC 7/13/20
      {  0.0005  }
   ; multiplier on natural ventilation wind pressure coefficient by number of window orientations (1-4)
   "Set Proj:NatVentWindPresCoefMult[1] - 1 window orientation"   Proj:NatVentWindPresCoefMult[1] = {  1  }       ; SAC 7/13/20
   "Set Proj:NatVentWindPresCoefMult[2] - 2 window orientations"  Proj:NatVentWindPresCoefMult[2] = {  1  }
   "Set Proj:NatVentWindPresCoefMult[3] - 3 window orientations"  Proj:NatVentWindPresCoefMult[3] = {  1  }
   "Set Proj:NatVentWindPresCoefMult[4] - 4 window orientations"  Proj:NatVentWindPresCoefMult[4] = {  1  }

   ; moved rule to set Proj:DefaultIAQFanPwr into separate rulelist to be called in multiple spots - SAC 08/27/20
   "Set Proj:DefaultIAQFanPwr via rulelist"  Proj:Action = {  EvalRulelist( "Set_Proj_DefaultIAQFanPwr" )  }

; SAC 4/15/15 - added Proj:MultiFamilyType and related properties
	; Proj:MultiFamilyType - defaults to "Other" via Enums definitions
	"Blast Proj:MultiFamilyType if not set to 'Other' - pending final implementation plans/design"		; SAC 4/28/15 - disable initial duplex/townhome options (issue 508/365)
			Proj:Action		= {	if (MultiFamilyType != 3) then  EvalRulelist( "ForceReset_MultiFamilyType" )  else  UNCHANGED  endif  }

	"Set Proj:IsMFamDuplex"			Proj:IsMFamDuplex			= {	if (IsMultiFamily > 0.5 .AND.  MultiFamilyType == 1) then  1  else  0  endif  }
	"Set Proj:IsMFamTownhm"			Proj:IsMFamTownhm			= {	if (IsMultiFamily > 0.5 .AND.  MultiFamilyType == 2) then  1  else  0  endif  }  
	"Set Proj:IsMFamDupOrTownhm"	Proj:IsMFamDupOrTownhm	= {	if (IsMultiFamily > 0.5 .AND. (MultiFamilyType == 1 .OR. MultiFamilyType == 2)) then  1  else  0  endif  }  

	"Set Proj:BuildingTypeRpt"		Proj:BuildingTypeRpt		= {	if (IsMultiFamily < 0.5) then  "Single Family"
																					else	switch (MultiFamilyType)
																								case  1 :	"Duplex (multifamily)"
																								case  2 :	"Townhomes (multifamily)"
																								case  3 :	"Multifamily"
																								default :	UNDEFINED
																							endswitch  endif  }

   "Set Proj:BldgTypeTblStr - Building type string used in code look-up tables (T24RClimateZoneCodeBase:*)"  ; SAC 6/5/17
      Proj:BldgTypeTblStr   = {  if (IsMultiFamily < 0.5)
                                 then  "SingleFam"
                                 else  "MultiFam"  endif  }   ; possibly expand to incl. Duplex &/or TownHome in future...


   ;--------------------------------------------------------------------
   ; ProposedInput: Default for Standard Design Code Baseline
	; mjb 1/12/15 - needed for Design Rating calcs
   ;--------------------------------------------------------------------
; SAC 3/23/15 - removed default here, since we set 2013/2016 default via separate 2013/2016 Enum definitions
;	"Default Proj:StdDesignBase"			Proj:StdDesignBase		= {	2013  }		; ensures proper defaulting for ruleset-specific standard design

; SAC 11/17/15 - add rule to default Proj:StandardsVersion only in the case it is undefined, which can happen following a ruleset switch due to reset of Proj:StdDesignBase
	"Default Proj:StandardsVersion"		Proj:StandardsVersion	= {	if (LocalStatus( StandardsVersion ) < 1 .AND. LocalStatus( StdDesignBase ) > 0)
																							then	switch (StdDesignBase)
																										case  2013 :  2015		; T-24 2013
																										case  2016 :  2017		; T-24 2016
																										case  2019 :  2020		; T-24 2019
																										case  2022 :  2023		; T-24 2022 - SAC 6/7/19
																										case  2025 :  2026		; T-24 2025 - SAC 11/13/22
																										case  2008 :  2010		; T-24 2008
																										case  2006 :  2007		; IECC 2006
																										default :  UNCHANGED		; error
																									endswitch
																							else	UNCHANGED  endif  }

   ; SAC 3/23/15 - prevent design rating calcs for multi-family, additions/alterations or addition alone runs
	"Set Proj:CompCodeBase - keeps track of the initial StdDesignBase - not changed to design rating base during analysis"
			Proj:CompCodeBase	= {	if (RunNumber < 1) then  StdDesignBase  else  UNCHANGED  endif  }

	; SAC 4/13/16 - IntGainsMethod used to differentiate between 2013 & 2016 CA-24 internal gains
	"Set Proj:IntGainsMethod"	Proj:IntGainsMethod	= {	if (StdDesignBase < 2016 .OR. DRtgRefRunID == 2014) then  2013
																			else	2016  endif  }

   "Set Proj:TDVTableName - name of TDV data table used to calculate EDR2 compliance results"   Proj:TDVTableName  =       ; SAC 6/10/19 - 2022
;      {  if (EnergyCodeYearNum = 2022 .AND. (EDR2Metric = 2 .OR. EDR2Metric = 12))   ; SAC 3/3/20 - mod to remove EDR2Metric option from 2022 analysis (just single TDV/SrcEnergy/CO2 per ruleset binary)
      {  if (EnergyCodeYearNum >= 2022)
         then  "TDVM02Table"
         else  "TDVTable"
         endif  }

   "Set Proj:TDVTableCols[1] - column of Elec multipliers in TDV data table"     Proj:TDVTableCols[1]  = {  ((ClimateZone-1) * 3) + 1  }         ; SAC 5/3/20 (FlexibilityCredit)
   "Set Proj:TDVTableCols[2] - column of NGas multipliers in TDV data table"     Proj:TDVTableCols[2]  = {  ((ClimateZone-1) * 3) + 2  }
   "Set Proj:TDVTableCols[3] - column of Othr multipliers in TDV data table"     Proj:TDVTableCols[3]  = {  ((ClimateZone-1) * 3) + 3  }

   "Set Proj:EDR1TableName - name of hourly CZ/Fuel multiplier table used to calculate EDR1 compliance results"   Proj:EDR1TableName  =       ; SAC 6/10/19 - 2022   ; SAC 9/17/19
      {  if (EnergyCodeYearNum >= 2022)
         then  "T24SrcEnergyTable"
         else  UNDEFINED
         endif  }

   "Set Proj:TDVMult_Elec"    Proj:TDVMult_Elec    =        ; SAC 8/23/19 - multipliers to enable 2022+ TDV & SrcEnergy tables to remain in original (E3) units
      {  switch (TDVTableName)
            case "TDVM02Table" :  1/3.413
            default            :  1.0      endswitch  }
   "Set Proj:TDVMult_Fuel"    Proj:TDVMult_Fuel    =
      {  switch (TDVTableName)
            case "TDVM02Table" :  0.01
            default            :  1.0    endswitch  }
   "Set Proj:SrcMult_Elec"    Proj:SrcMult_Elec   =
      {  if (LocalStatus( EDR1TableName ) < 1) then  UNDEFINED
         else  switch (EDR1TableName)
                  case "T24SrcEnergyTable" :  1/3.413
                  default                  :  1.0      endswitch  endif  }
   "Set Proj:SrcMult_Fuel"    Proj:SrcMult_Fuel   =
      {  if (LocalStatus( EDR1TableName ) < 1) then  UNDEFINED
         else  switch (EDR1TableName)
                  case "T24SrcEnergyTable" :  0.01
                  default                  :  1.0   endswitch  endif  }

   "Set Proj:TDVSecMult_Elec"    Proj:TDVSecMult_Elec    =        ; SAC 8/26/19 - multipliers to enable flexible secondary (CO2/GHG-based adders) TDV & SrcEnergy tables units
      {  1/3.413  }     ; update w/ logic similar to above if/when secondary TDV (CO2/GHG-based adders) table switched units
   "Set Proj:TDVSecMult_Fuel"    Proj:TDVSecMult_Fuel    =
      {  0.01     }
   "Set Proj:SrcSecMult_Elec"    Proj:SrcSecMult_Elec   =
      {  if (LocalStatus( EDR1TableName ) < 1) then  UNDEFINED
         else  1/3.413  endif  }     ; update w/ logic similar to above if/when secondary Src Energy (CO2/GHG-based adders) table switched units
   "Set Proj:SrcSecMult_Fuel"    Proj:SrcSecMult_Fuel   =
      {  if (LocalStatus( EDR1TableName ) < 1) then  UNDEFINED
         else  0.01     endif  }

   "Set Proj:TrackSrcEnergy - whether or not Source Energy results are being tracked"     Proj:TrackSrcEnergy  =        ; SAC 6/11/19 - 2022
      {  if (LocalStatus( EDR1TableName ) < 1) then  0
         else if (strlen( EDR1TableName ) > 0) then  1  else  0  endif endif  }

   "Set Proj:HrlyNEMTableName - name hourly NEM (NEM3+) data table used to value onsite generation exports to grid"     Proj:HrlyNEMTableName  =      ; SAC 05/16/23 (NEM3)  ; SAC 05/18/23 (NEM3)
      {  if (NetEnergyMeteringType > 2)
         then  "HrlyNEMTable"
         else  "none"  endif  }
   "Set Proj:HrlyNEMTableCol"       Proj:HrlyNEMTableCol  = 
      {  if (NetEnergyMeteringType > 2)
         then  ClimateZone
         else  0  endif  }
   "Default Proj:NEMGrossUpPctInp"     Proj:NEMGrossUpPctInp  =     ; SAC 05/25/23 (NEM3)
      {  if (NetEnergyMeteringType > 2)
         then  6.6
         else  0  endif  }
   "Set Proj:NEMGrossUpFactor"         Proj:NEMGrossUpFactor  =  
      {  if (NetEnergyMeteringType > 2)
         then  NEMGrossUpPctInp/100
         else  0  endif  }
; TO DO - only allow user input w/ EnableResearchMode once calcs finalized
   ;      then  if (EnableResearchMode > 0)
   ;            then  NEMGrossUpPctInp/100
   ;            else  0.066  endif

   "Set Proj:TDVEDRFuelMultMetric - string identifying set of TDV fuel adjustment mutlipliers used in design rating calcs"   Proj:TDVEDRFuelMultMetric  =     ; SAC 6/25/19 - 2022  - SAC 7/8/19 - added No Fuel Adj options
      {  if (EnergyCodeYearNum = 2019 .AND. IfValidAnd( AnalysisVersion <= 190101 ))
         then  "ver19.1.0"
         else  "-"  endif  }
      ; SAC 8/31/19 - fuel adjustment mults removed from 2022 analysis
      ;{  if (EnergyCodeYearNum = 2022)
      ;   then  if (WeatherFileSet > 0) then  "-"
      ;         else  switch (EDR2Metric)
      ;                  case  0 :  "TDV_0"
      ;                  case 10 :  "none"
      ;                  case  2 :  "TDV_2"
      ;                  case 12 :  "none"
      ;                  default :  "-"
      ;               endswitch  endif
      ;   else  "-"
      ;   endif  }
   "Set Proj:SrcEDRFuelMultMetric - string identifying set of SrcEnergy fuel adjustment mutlipliers used in design rating calcs"   Proj:SrcEDRFuelMultMetric  =     ; SAC 6/25/19 - 2022
      {  if (EnergyCodeYearNum >= 2022)
         then  if (WeatherFileSet > 0) then  "-"
               else  "Src_5"  endif
         else  "-"
         endif  }

;"store BEMProc details"		Proj:Action = {  StoreBEMProc( "PropInput", 0 )  }
;"debugging" Proj:Action = { MessageBox( "checking before setting Proj:AllowDesignRating:\n   IsMultiFamily = %g\n   RunScope = %g\n   IsAddAlone = %g\n   CompCodeBase = %g\n   BypassRuleLimits = %g", IsMultiFamily, RunScope, IsAddAlone, ValidOr( CompCodeBase, -1 ), ValidOr( BypassRuleLimits, -1 ) ) }
	"Default Proj:EnableEDR"	Proj:EnableEDR		= {	if (LocalStatus( EnableEDR ) < 0.5) then  0  else  UNCHANGED  endif  }
	; SAC 10/6/16 - turn off *DesignRating* settings for 2019 analysis  - SAC 4/5/17 - toggled back on for 2019
	"Set Proj:AllowDesignRating"
	   Proj:AllowDesignRating	= {	if (EnableEDR) then  1
	                                 else if (RunScope == 1 .AND. IsAddAlone < 0.5 .AND.
	                                           IfValidAnd( CompCodeBase > 2015 ) .AND. IfValidAnd( CompCodeBase < 2025 ))
                                    then  1  else  0  endif endif  }
	"Blast Proj:DesignRatingCalcs if user-specified as Yes when not allowed -or- set to No but doing Existing EDR or 2019 NewCons analysis"
      Proj:Action	= {
         if ( LocalStatus( DesignRatingCalcs ) > 6 .AND.
              ( ( AnalysisType == 2 .OR.
                  (IfValidAnd( EnergyCodeYearNum >= 2019 ) .AND. RunScope == 1 .AND. IsAddAlone < 0.5) ) .AND.
                AllowDesignRating > 0.5 .AND. IfValidAnd( DesignRatingCalcs < 0.5 ) ) .OR.
              ( AllowDesignRating < 0.5 .AND. IfValidAnd( DesignRatingCalcs > 0.5 ) ) )
         then  EvalRulelist( "ForceDefault_DesignRatingCalcs" )  else  UNCHANGED  endif  }
	"Default Proj:DesignRatingCalcs"
	   Proj:DesignRatingCalcs	= {
         if (AllowDesignRating < 0.5) then  0
         else if (AnalysisType == 2)
         then  1    ; CA Res Existing EDR
         else if (IfValidAnd( EnergyCodeYearNum >= 2019 ) .AND. RunScope == 1 .AND. IsAddAlone < 0.5)
         then  1    ; CA Res 2019 New Cons
         else  0  endif endif endif  }
	"Default Proj:DesignRatingBase"		Proj:DesignRatingBase	= 		   ; default design rating base is 'IECC2006' / SAC 3/8/16 - updated default to 'RESNET2014'  ; set to '0' for 2025+ - SAC 07/20/23
      {  if (IfValidAnd( CompCodeBase >= 2025 ))
         then  0
         else  2014  endif  }
	"Call subordinate rulelist to override Proj:DesignRatingBase when appropriate"		; SAC 3/21/16
	   Proj:Action		= {	if (AllowDesignRating > 0.5 .AND. DesignRatingCalcs > 0.5 .AND.
	                            DesignRatingBase != 2014 .AND. IfValidAnd( BypassRuleLimits >= 3 )==0 .AND.
                               IfValidAnd( CompCodeBase < 2025 ))
									then	EvalRulelist( "ForceDefault_DesignRatingBase_RESNET2014" )
									else	UNCHANGED  endif  }
	   ; SAC 12/19/17 - switched input tab name from 'Analysis' to 'EDR/PV' (per request from CEC-LF)
	"Set Proj:DRtgResultsMsg"				Proj:DRtgResultsMsg		=
   ; DEPRECATED - refer to replacement properties EUseSummary:HideEDRs & EUseSummary:EDRMsg - SAC 6/26/19
	   {  if (EnergyCodeYearNum >= 2019 .AND. AllowDesignRating < 0.5)
	      then  Format( "Design Rating calcs not yet implemented for %g analysis.", EnergyCodeYearNum )  ; SAC 10/6/16 - 2019 msg
         else if (AllowDesignRating < 0.5)
         then  "Design Rating calcs currently available only for single family new construction analysis."
         else if (DesignRatingCalcs < 0.5)
         then  "Design Rating calcs must be toggled on in EDR/PV tab of Project data to view results here."
         else  UNDEFINED  endif endif endif  }
	"Set Proj:DRtgRefRunID"					Proj:DRtgRefRunID			= {	if (AllowDesignRating > 0.5 .AND. RunAbbrev == "dr") then  DesignRatingBase  else  0  endif  }		; SAC 3/9/16 - added to facilitate RESNET2014 rules

	"Default Proj:DRtgLtgCredit"			Proj:DRtgLtgCredit		= {	0  }
	"Default Proj:DRtgLtgReduction"		Proj:DRtgLtgReduction	= {	0  }
	"Blast Proj:DRtgLtg* if not allowed"	Proj:Action	= {	if ((AllowDesignRating < 0.5 .OR. DesignRatingCalcs < 0.5 .OR. IfValidAnd( BypassRuleLimits >= 3 )==0) .AND.
																					 (DRtgLtgCredit > 0.5 .OR. DRtgLtgReduction > 0))			then  EvalRulelist( "ForceDefault_DRtgLighting" )
																				else if (DRtgLtgCredit < 0.5 .AND. DRtgLtgReduction > 0)		then  EvalRulelist( "ForceDefault_DRtgLightingReduction" )
																				else  UNCHANGED  endif endif  }

   "Default Proj:AllowExcessPVEDR - Allow Excess PV Generation EDR Credit"   ; whether or not to allow excess PV generation (above cap based on proposed design electric use) to factor into EDR credit (toggle ON for Santa Monica EDR calcs)
      Proj:AllowExcessPVEDR  = {  0  }
;   "Set Proj:AllowExcessPVEDRMsg"      Proj:AllowExcessPVEDRMsg  = {         ; message warning user of invalid EDR results when toggled off
;         if (EnergyCodeYearNum = 2016 .AND. AllowExcessPVEDR > 0)
;         then  "Warning: Allowing excess PV generation in EDR credit will invalidate CEC EDR result"
;         else  UNDEFINED  endif  }

   "Default Proj:SpecifyTargetDRtg - whether or not specify a target/desired Energy Design Rating (by scaling PV system size(s))"  ; SAC 4/10/17
      Proj:SpecifyTargetDRtg  = {  0  }
   ; no default for Proj:TargetDesignRtgInp,  Prescribed,   0,    1,   1,    1,  1,  1  BEMP_Flt "%"  "Target Design Rating (100 * Prop / DesignRtg TDV)"    


   ;--------------------------------------------------------------------
   ; ProposedInput: Building Rules
   ;--------------------------------------------------------------------

;   "Default Proj:BuildingType"			Proj:BuildingType    	= {	xx  }
	"Default Proj:ZonalControl"			Proj:ZonalControl    	= {	0  }
;   "Default Proj:Description"			Proj:Description     	= {	xx  }

	"Set Proj:ZoneLabel"				Proj:ZoneLabel			= {	if (ZonalControl > 0.5) then  "Living Zone & Area / Unit:"  else  "            Zone & Area / Unit:"  endif  }
;	"Set Proj:ZoneLabel"				Proj:ZoneLabel			= {	if (ZonalControl > 0.5) then  "Living Zone:"  else  "         Zone:"  endif  }
;	"Set Proj:FloorAreaLabel"		Proj:FloorAreaLabel	= {	if (ZonalControl > 0.5) then  "Living Area:"  else  "   Floor Area:"  endif  }

; SAC 1/7/13 - moved ACH50 defaulting down BELOW system duct rules, so that presence of ducts in unconditioned space is known
;   "Default Proj:ACH50"						Proj:ACH50           	= {	7.6  }

;   "Default Proj:InsulConsQuality"		Proj:InsulConsQuality	= {	xx  }  - defaulted via symbol definitions
   "Default Proj:NumBedrooms"				Proj:NumBedrooms     	=     ; SAC 5/1/13 - added default since should require input for multifamily buildings  ; NoDwellingUnit - SAC 07/05/23 (tic #1351)
      {  if (IfValidAnd( NoDwellingUnit > 0 )) then  0  else  1  endif  }
	"Default Proj:NumAddBedrooms"			Proj:NumAddBedrooms		= {	0  }	; SAC 12/28/15 - added
	"Set Proj:NumBedrmsLabel"				Proj:NumBedrmsLabel		= {	if (RunScope == 1 .AND. IsAddAlone > 0.5)
																							then	"Num of Existing Bedrooms:"
																							else	"Num of Bedrooms (incl. ADU):"  endif  }
	"Set Proj:SimNumBedrooms"				Proj:SimNumBedrooms		= {	if (RunScope == 1 .AND. IsAddAlone > 0.5)
																							then	NumAddBedrooms
																							else	NumBedrooms  endif  }

; SAC 5/21/13 - moved down & revised to include sum of all MFam units...
;   "Default Proj:NumDwellingUnits"		Proj:NumDwellingUnits	= {	1  }
   "Default Proj:AllOrientations"		Proj:AllOrientations 	= {	0  }
   ; SAC 12/8/15 - tic 512 ensure wall orientations are reported as 0/90/180/270 for all orientation runs
   "Force default of Proj:FrontOrientation"	Proj:Action			= {	if (AllOrientations > 0.5 .AND. IfValidAnd( FrontOrientation != 0 ) .AND. IfValidAnd( RunNumber > 0 )==0)
   																						then	EvalRulelist( "ForceDefault_FrontOrientation" )
   																						else  UNCHANGED  endif  }
   "Default Proj:FrontOrientation"		Proj:FrontOrientation	= {	0  }
	
; RCG 5/31/17 - Force reset Proj:AllOrientations
	"Force Reset Project:AllOrientations"	Proj:Action	=	{	if	(Proj:RunScope == 2 .AND. Proj:AllOrientations == 1 )
																												then	EvalRulelist( "ForceReset_AllOrientations", 1)
																												else if	(Proj:RunScope == 1 .AND. Proj:IsAddAlone == 1 )
																												then	EvalRulelist( "ForceReset_AllOrientations", 1)
																												else	UNCHANGED
																												endif	endif	}

   "Force reset of user-defined NatGasAvailable flag for 2019+ analysis"   ; SAC 2/28/18 (tic #992)
      Proj:Action  = {
         if (IfValidAnd( EnergyCodeYearNum >= 2019 ) .AND. LocalStatus( NatGasAvailable ) > 4)
         then  EvalRulelist( "ForceReset_Proj_NatGasAvailable" )
         else  UNCHANGED  endif  }
	"Default Proj:NatGasAvailable"		Proj:NatGasAvailable		= {	1  }
; SAC 11/9/15 - added Proj:GasType - allow to default via enumerations
	"Default Proj:GasType"					Proj:GasType				= {	if (NatGasAvailable > 0.5) then  1  else  2  endif  }		; force default - relying exclusively on enumeration defaulting not working here
   "RE-Default Proj:NatGasAvailable if user chooses GasType = Propane"     Proj:NatGasAvailable =     ; SAC 09/01/20 (tic #1066)
      {  if (GasType == 2) then  0  else  UNCHANGED  endif  }

	"Set Proj:FuelTDVLabel"					Proj:FuelTDVLabel			= {	if (StandardsVersion > 2016 .OR. 	; SAC 11/9/15
	                                                                      (IfValidAnd( EnergyCodeYearNum >= 2019 ) .AND. StandardsVersion = 2014))  ; SAC 2/28/18 (tic #992)
																							then	if (GasType == 1) then  "Natural Gas"  else  "Other"  endif
																							else if (NatGasAvailable > 0.5) then  "Natural Gas"  else  "Other"  endif endif  }

	; SAC 11/9/15 - moved setting of Proj:Fuel_Have* flags from CSE_Sim rulelsit to here and elsewhere (to support 2016 analysis)
	"Set flag - Proj:Fuel_HaveElec"		Proj:Fuel_HaveElec		= {	1 }
	"Set flag - Proj:Fuel_HaveNatGas"	Proj:Fuel_HaveNatGas		= {	if (StandardsVersion > 2016 .OR.		; SAC 11/9/15
	                                                                      (IfValidAnd( EnergyCodeYearNum >= 2019 ) .AND. StandardsVersion = 2014))  ; SAC 2/28/18 (tic #992)
																							then	if (GasType == 1) then  1  else  0  endif
																							else if (Proj:NatGasAvailable > 0.5) then  1  else  0  endif endif  }
	"Set flag - Proj:Fuel_HaveOther"		Proj:Fuel_HaveOther		= {	if (Fuel_HaveNatGas > 0.5) then  0  else  1  endif  }

   "Default Proj:HasGarage"				Proj:HasGarage				= {	0  }			; default to no attached garage" 
; SAC 9/9/12 - removed properties that are duplicated in the Attic object
;   "Default Proj:AtticVentFrac"			Proj:AtticVentFrac		= {	1/300  }		; ratio of free area of attic vents to attic floor area
;   "Default Proj:AtticVentFracHi"		Proj:AtticVentFracHi		= {	0.3  }		; fraction of the attic vent area located in the upper part of the attic
   "Default Proj:InsulRValPerInch[1] - blown"	Proj:InsulRValPerInch[1]	= {	2.6  }		; insulation R-value per inch, used to calculate blown ceiling insulation thickness within & above joists" 
   "Default Proj:InsulRValPerInch[2] - roof"		Proj:InsulRValPerInch[2]	= {	3.714  }		; insulation R-value per inch, used to calculate roof insulation thickness within & below joists" 

	; ICQEnclCavInsMult factors based on CavityIns2.xlsx from BW 7/16/12
   ; SAC 7/20/17 - split out StdICQEnclCavInsMult as separate property to avoid excessive table look-ups w/ new logic pertaining to QII excluded from non-new Zone surfaces (tic #775)
   "Set Proj:StdICQEnclCavInsMult"     Proj:StdICQEnclCavInsMult  = {  T24RClimateZoneCodeBase:StdICQEnclCavInsMult( "ClimateZone", Proj:ClimateZone, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )  }
	; SAC 1/13/13 - switched Improved multiplier from 0.9 to 1.0
	"Set Proj:ICQEnclCavInsMult"			Proj:ICQEnclCavInsMult	= {	switch (Local( InsulConsQuality ))		; Mulitplier used to adjust conduction of cavity insulation layer
																								case 2 :  1.0		; Yes/Improved
																								default:  StdICQEnclCavInsMult		; No/Standard (or other)
																							endswitch  }
   "Default Proj:ApplRefrigEffMethod[1]"		Proj:ApplRefrigEffMethod[1] 	= {	1  }
   "Default Proj:ApplDishUsageMethod[1]"		Proj:ApplDishUsageMethod[1] 	= {	1  }

	"Set Proj:Ltg_FracPort"		Proj:Ltg_FracPort		= {	if (Proj:DRtgRefRunID == 2014) then  1.0		; SAC 3/10/16 - RESNET
																			else  0.22  endif   }
	"Set Proj:Ltg_PwrAdjMult"	Proj:Ltg_PwrAdjMult	= {	0.625  }

  ; SAC 2/25/17 - new properties added from Com to facilitate Azimuth calcs/reporting
	"Set Proj:BldgNAng"           Proj:BldgNAng          = {    ; Bldg:NAngVector in Com
         0  }
; TO DO - keep BldgNAng @ constant 0 until we decide how to relate Bldg vs. True azimuth
;	      if (FrontOrientation = 0) then  0
;	      else  360 - FrontOrientation  endif  }
	"Set Proj:BldgNRad"           Proj:BldgNRad          = {    ; Bldg:NRad in Com
	      BldgNAng * (3.14159265359/180)  }

	"Set Proj:BldgUnitVectorNi"   Proj:BldgUnitVectorNi  = {    ; Bldg:UnitVectorNi in Com - X coordinate of unit vector defining true north
      if (BldgNAng < 0) then
         POSTERROR("FrontOrientation Must be greater than or equal to 0 deg")
      else if (BldgNAng < 90) then
         SQRT( ((TAN(BldgNRad))**2)/(1+(TAN(BldgNRad))**2) )
      else if (BldgNAng =  90) then    1 
      else if (BldgNAng < 180) then
         SQRT( ((TAN(BldgNRad))**2)/(1+(TAN(BldgNRad))**2) )
      else if (BldgNAng = 180) then  0 
      else if (BldgNAng < 270) then
        -SQRT( ((TAN(BldgNRad))**2)/(1+(TAN(BldgNRad))**2) )
      else if (BldgNAng = 270) then   -1
      else if (BldgNAng < 360) then
        -SQRT( ((TAN(BldgNRad))**2)/(1+(TAN(BldgNRad))**2) )
      else  POSTERROR("FrontOrientation Must be Less than 360 deg")
      endif endif endif endif endif endif endif endif  }

	"Set Proj:BldgUnitVectorNj"   Proj:BldgUnitVectorNj  = {    ; Bldg:UnitVectorNj in Com - Y coordinate of unit vector defining true north
      if (BldgNAng < 0) then
         POSTERROR("FrontOrientation Must be greater than or equal to 0 deg")
      else if (BldgNAng <  90) then
         SQRT(1/(1+(TAN(BldgNRad))**2))
      else if (BldgNAng =  90) then  0
      else if (BldgNAng < 180) then
        -SQRT(1/(1+(TAN(BldgNRad))**2))
      else if (BldgNAng = 180) then -1
      else if (BldgNAng < 270) then
        -SQRT(1/(1+(TAN(BldgNRad))**2))
      else if (BldgNAng = 270) then  0
      else if (BldgNAng < 360) then
         SQRT(1/(1+(TAN(BldgNRad))**2))
      else  POSTERROR("FrontOrientation Must be Less than 360 deg")
      endif endif endif endif endif endif endif endif  }


  ; SAC 2/22/17 - PolyLp defaulting
   "Default PolyLp data"   PolyLp:Action  = {
         if (LocalStatus(Area) > 0) then  UNCHANGED
         else  EvalRulelist( "Default_PolyLp", 1 )  endif  }

   "Set Proj:HavePVGeomObjects (which impacts PV array inputs)"  
         Proj:HavePVGeomObjects = {  if (ComponentCount( PVArrayGeom ) < 1) then  0  else  1  endif  }
   "Set Proj:HaveShadeObjects (which impacts PV array inputs)"  
         Proj:HaveShadeObjects  = {  if (ComponentCount( Shade ) < 1) then  0  else  1  endif  }

   "Set PVArrayGeom:ChildPolyLpRef"    PVArrayGeom:ChildPolyLpRef  = {  MaxChildComp( PolyLp:Area )  }  ; SAC 3/3/17
   "Set Shade:ChildPolyLpRef"          Shade:ChildPolyLpRef        = {  MaxChildComp( PolyLp:Area )  }  ; SAC 2/24/17

   ; SAC 10/25/16 - new rulelist to default CAHP properties
   "Default CAHP properties"
      Proj:Action = {   EvalRulelist( "ProposedInput_CAHP" )  }

   ; SAC 10/25/16 - new rulelist to default DHW systems, heaters & simulation properties
   "Default DHW systems, heaters & simulation properties"
      Proj:Action = {   EvalRulelist( "ProposedInput_DHWEquipment" )  }

   "Default IAQFan properties"      ; fix evaluation order issue by moving IAQFan defaulting prior to Shell - SAC 7/21/20 (tic #1174)
      Proj:Action = {  EvalRulelist( "Default_HVAC_IAQFan" )  }

   ; SAC 10/25/16 - new rulelist to default shell (zones, dwelling units, crawl spaces) properties
   "Default shell (zones, dwelling units, crawl spaces) properties"
      Proj:Action = {   EvalRulelist( "ProposedInput_Shell" )  }

   ; SAC 9/3/19 - added to facilitate new MFam prototypes including common spaces (MFamProto)
   "Default OtherZone (MF common area) properties"
      Proj:Action = {   if (EnergyCodeYearNum < 2019) then  UNCHANGED
                        else  EvalRulelist( "ProposedInput_OtherZone" )  endif  }

   ; PRIOR location of PV defaulting rules, before moved down below HVAC defaulting - SAC 07/20/23

   ; SAC 4/14/15 - call subordinate rulelist to evaluate ALL Attic defaulting
	"Perform Attic defaulting"		Attic:Action	= {	EvalRulelist( "Default_Attic", 1 )  }

   ; SAC 10/24/16 - new rulelist to default cool vent, IAQ & internal gains properties
   "Default cool vent, IAQ & internal gains properties"
      Proj:Action = {   EvalRulelist( "ProposedInput_CoolVent_IAQ_IntGains" )  }

   ; SAC 10/24/16 - new rulelist to default Garage properties
   "Default Garage properties"
      Proj:Action = {   EvalRulelist( "ProposedInput_Garage" )  }

   ; SAC 5/15/17 - added compressed R-value selections - R-val = (SymVal-mod(SymVal,10))/100  (tic #761)  - SAC 5/18/18 - COPIED rule here to evaluate before EAA_Shell rules (tic #798)
   "Set Cons:CavityLayerRVal (incl. compressed R-vals)"     Cons:CavityLayerRVal  = {
         if (CavityLayer = 100401) then  0
         else if (CavityLayer > 200 .AND. CavityLayer < 100001)
         then  (CavityLayer - mod( CavityLayer, 10 )) / 100
         else   CavityLayer  endif endif  }

   ; SAC 7/20/17 - split single rulelist into two - Shell moved up to HERE from below, before Construction defaulting
   "Default EAA (existing-addition-alteration) Shell properties"
      Proj:Action = {   EvalRulelist( "ProposedInput_EAA_Shell" )  }

   ; SAC 10/24/16 - new rulelist to default Construction (incl. attic edge) properties
   "Default Construction (incl. attic edge) properties"
      Proj:Action = {   EvalRulelist( "ProposedInput_Constructions" )  }

   ; SAC 10/24/16 - new rulelist to default shell surfaces & inter-zone area properties
   "Default shell surfaces & inter-zone area properties"
      Proj:Action = {   EvalRulelist( "ProposedInput_SurfacesAndInterZoneAreas" )  }

   ; SAC 10/24/16 - new rulelist to default misc CSE shell properties
   "Default misc CSE shell properties"
      Proj:Action = {   EvalRulelist( "ProposedInput_CSE_Shell" )  }

   ; SAC 10/24/16 - new rulelist to default attic & cool vent properties
   "Default attic & cool vent properties"
      Proj:Action = {   EvalRulelist( "ProposedInput_Shell_AtticAndCoolVent" )  }

   ; SAC 10/24/16 - new rulelist to default laundry properties
   "Default laundry properties"
      Proj:Action = {   EvalRulelist( "ProposedInput_Loads_Laundry" )  }

   ; SAC 10/24/16 - new rulelist to default zone height, HVAC & cool vent properties
   "Default zone height, HVAC & cool vent properties"
      Proj:Action = {   EvalRulelist( "ProposedInput_HVAC" )  }

;   "Reset any past Compact Distrib settings"    DHWSys:Action  = {
;         if (CompactDistrib < 1 .AND. IfValidAnd( CompactFactor < 1 ))
;         then  EvalRulelist( "ProposedInput_DHWCompactDistribution_Blast" )
;         else  UNCHANGED  endif  }   ; SAC 1/8/19
   ; SAC 12/4/18 - rules needed to process DHW Compact Distribution qualification
   "Determine DHW Compact Distribution qualification"
      Proj:Action = {   EvalRulelist( "ProposedInput_DHWCompactDistribution" )  }
                     ;   if (SFamCompactDistrib > 0)
                     ;   then  EvalRulelist( "ProposedInput_DHWCompactDistribution" )
                     ;   else  UNCHANGED  endif  }

   ; MOVED PV defaulting rules down here from above HVAC defaulting to accommodate 2025 prescrip PV defaulting dependent on EER2 - SAC 07/20/23
   ; SAC 10/24/16 - new rulelist to default photovoltaic (PV) system properties
	; SAC 10/6/16 - allow PV sim regardless of *DesignRating* settings for 2019 analysis
   "Set Proj:AllowPVWInputs"     Proj:AllowPVWInputs = {
         if (EnergyCodeYearNum >= 2019) then  1
         else if (AllowDesignRating > 0.5 .AND. DesignRatingCalcs > 0.5)
         then  1  else  0  endif endif  }
   "Default photovoltaic (PV) system properties"
      Proj:Action = {   EvalRulelist( "ProposedInput_PVSystem" )  }

   ; SAC 10/24/16 - new rulelist to default PV compliance credit (2013/16) properties
   "Default PV compliance credit (2013/16) properties"
      Proj:Action = {   EvalRulelist( "ProposedInput_PVCompCredit" )  }

   "Force reset of SpecifyTargetDRtg when Reduced PV Requirement specified -OR- version 2022.0.6 or later"  ; SAC 2/7/18 - (tic #974)  ; SAC 03/08/22
      Proj:Action = {   if (SpecifyTargetDRtg > 0 .AND. ((AnalysisVersion >= 220060 .AND. IfValidAnd( EnableResearchMode > 0 )==0) .OR.
                                                         IfValidAnd( ReducedPVReq > 0 )))
                        then  EvalRulelist( "ForceOff_SpecifyTargetDRtg" )
                        else  UNCHANGED  endif  }

   ; SAC 12/27/17 - moved following rule up from LoadModelAdjustments rulelist since EnableResearchMode not set at that point
   "Check for invalid BatteryControl options"      ; SAC 12/12/17 - alert user if invalid BattCtrl option is selected 
      Proj:Action  = {
         if (LocalStatus( AllowBattInputs ) < 1 .AND. IfValidAnd( BattMaxCap > 0 ) .AND. EnableResearchMode != 1 .AND. BatteryControl > 98)
         then  switch (BatteryControl)
                  case  99 :  MessageBox( "Program option (INI file) EnableResearchMode must be activated for BatteryControl '- specify -'.\n\nToggle on EnableResearchMode and reload project or select a different BatteryControl option." )
                  case 100 :  MessageBox( "Program option (INI file) EnableResearchMode must be activated for BatteryControl Best Case/Advanced Control (old).\n\nToggle on EnableResearchMode and reload project or select a different BatteryControl option." )
                  default  :  UNCHANGED
               endswitch
         else  UNCHANGED  endif  }
   "Set Proj:AdvBattTDVPkDayVal"    Proj:AdvBattTDVPkDayVal  = {  10 / ValidOr( TDVMult_Elec, 1 )  }    ; SAC 7/28/19 - new CSE advanced battery simulation (34.12 for Com)   / SAC 8/29/19 - incorporate TDVMult_Elec to account for TDV units (2022+)
   "Blast Proj:BattDRNumRankedDays if user-specified but not EnableResearchMode"    Proj:Action =        ; SAC 03/30/21 (tic #1266)
      {  if (LocalStatus( BattDRNumRankedDays ) > 5 .AND. EnableResearchMode < 1)
         then  EvalRulelist( "Blast_Proj_BattDRNumRankedDays" )
         else  UNCHANGED  endif  }
   "Default Proj:BattDRNumRankedDays - # of ranked (TDV) days to operate in TDVPeakSave mode"      ; SAC 3/4/20
      Proj:BattDRNumRankedDays  = {  20  }

               ; SAC 12/17/17 - added TDVSummerPkFirstHr to enable TOU BatteryControl expression to vary by CZ (tic #941)
   "Default Proj:TDVSummerPkFirstHr"  Proj:TDVSummerPkFirstHr  = {
         T24RClimateZoneCodeBase:SummerPkFirstHr( "ClimateZone", Proj:ClimateZone, "CodeBase", Proj:CompCodeBase )  }

; APB 3/30/22 - add standalone battery if no PV (tic #1319)
; APB 05/11/2022 - allow standalone batt inputs with community solar (tic #1319)
   ; allow ReducedPVReqValue to impact setting of AllowStandaloneBattInputs only when ReducedPVReq > 0 (toggled on) - SAC 07/21/23
   ; toggle OFF access to StandAloneBatt for 2025 research version - SAC 10/10/23 (2025)
   "Default Proj:AllowStandaloneBattInputs"     Proj:AllowStandaloneBattInputs = {  
      if (IfValidAnd( Proj:AnalysisVersion >= 250008 )) then  0
      else if (IfValidAnd( Proj:AnalysisVersion >= 220000 ) .AND. ( (IfValidAnd( ReducedPVReq > 0 ) .AND. IfValidAnd( ReducedPVReqValue == 0 )) .OR.
                                                                     IfValidAnd( PVWDCSysTotal == 0 ) .OR. IfValidAnd( CommunitySolarProjID > 0 )) )
      then 1  else  0  endif endif }   ; Turn off by default

   ; SAC 12/14/16 - new rulelist to default Battery system properties
   ; SAC 4/27/17 - updated logic for 2016 EDR mods
   ; SAC 6/28/17 - alter logic to allow battery inputs in 2016 even when AllowExcessPVEDR > 0 (LF e-mail 6/26/17)
   ; APB 3/30/22 - add logic to allow standalone battery if no PV (tic #1319)
   "Set Proj:AllowBattInputs"    Proj:AllowBattInputs = {
      if (IfValidAnd( AllowPVWInputs > 0 ) .AND. (IfValidAnd( PVWDCSysTotal > 0 ) .OR. IfValidAnd( AllowStandaloneBattInputs == 1 )) .AND.
          EnergyCodeYearNum >= 2016)
      then  1
      else  0  endif  }
   "Default Battery properties"
      Proj:Action = {   if (EnergyCodeYearNum >= 2016)
                        then  EvalRulelist( "ProposedInput_Battery" )
                        else  UNCHANGED  endif  }

   ; SAC 12/10/17 - revised TDRtg messages into array
   "Set Proj:TargetDRtgInpMsg[1]"      Proj:TargetDRtgInpMsg[1]  = {
         if (IfValidAnd( ReducedPVReq > 0 ))
         then  "Target EDR not available with Reduced PV Requirement"
         else if (IfValidAnd( AllowDesignRating  > 0.5 ) .AND. IfValidAnd( DesignRatingCalcs > 0.5 ) .AND.
                  IfValidAnd( SpecifyTargetDRtg  > 0.5 ))
         then  if (IfValidAnd( PVWDCSysTotal > 0 )==0)
               then  "PV system must be entered below for Target EDR"
               else if (IfValidAnd( ScalePropPVResults > 0.5 ) .AND. IfValidAnd( MaxPropPVRatioInp > 0 ) .AND.
                        LocalStatus( TargetDesignRtgInp ) > 0)
               then  if (EnergyCodeYearNum == 2016)
                     then  Format( "May be superceded by Max PV Gen Ratio of %g", MaxPropPVRatioInp )
                     else  Format( "May be superceded by Max PV Gen Ratio of %g (Battery tab)", MaxPropPVRatioInp )
                     endif
               else  "Target EDR lengthens analysis runtime"  endif endif
         else  UNDEFINED  endif endif  }
   "Set Proj:TargetDRtgInpMsg[2]"      Proj:TargetDRtgInpMsg[2]  = {
         if (IfValidAnd( AllowDesignRating  > 0.5 ) .AND. IfValidAnd( DesignRatingCalcs > 0.5 ) .AND.
             IfValidAnd( SpecifyTargetDRtg  > 0.5 ))
         then  if (IfValidAnd( PVWDCSysTotal > 0 )==0)
               then  "Target EDR lengthens analysis runtime"
               else if (IfValidAnd( ScalePropPVResults > 0.5 ) .AND. IfValidAnd( MaxPropPVRatioInp > 0 ) .AND.
                        LocalStatus( TargetDesignRtgInp ) > 0)
               then  "Target EDR lengthens analysis runtime"
               else  UNDEFINED  endif endif
         else  UNDEFINED  endif  }

   "Init Proj:TargetDRtgIterNum"
      Proj:TargetDRtgIterNum  = {   if (LocalStatus( TargetDRtgIterNum ) > 0) then  UNCHANGED  else  0  endif  }
   "Set Proj:TargetDRtgMaxIter - max number of times we will iterate to achieve the target design rating"  ; SAC 4/11/17
      Proj:TargetDRtgMaxIter  = {   if (LocalStatus( TargetDRtgMaxIter ) > 0) then  UNCHANGED  else  4  endif  }
   ; END OF - MOVED PV defaulting rules down here from above HVAC defaulting to accommodate 2025 prescrip PV defaulting dependent on EER2 - SAC 07/20/23


   ;--------------------------------------------------------------------
   ; ProposedInput: Final Calcs
   ;--------------------------------------------------------------------
	"Set ExtWall:ChildAreaSum => Sum of child window & door areas"    ; SAC 5/22/12 - added to fix CBECCbug003 from BW 5/18/12
		ExtWall:ChildAreaSum		= {	SumChildren( Win:TotAreaInclMult[1] ) + SumChildren( Door:Area )  }

	"Set ExtWall:NetWallArea => gross wall area minus sum of child window & door area" 
		ExtWall:NetWallArea		= {	Local( Area ) - Local( ChildAreaSum )  }

	"Set ExtWall:FramingFactor => fraction of gross wall area that includes frame" 
		ExtWall:FramingFactor	= {	LocalRef( Construction:FramingFactor )  }

	"Set IntWall:ChildAreaSum => Sum of child door areas"    ; SAC 5/8/15 - added in conjunction w/ fix to issue 585
		IntWall:ChildAreaSum		= {	SumChildren( Door:Area )  }
	"Set IntWall:NetWallArea => gross wall area minus sum of child door area" 		; SAC 11/3/14 - added to fix rule eval error (GC issue 394)
		IntWall:NetWallArea		= {	Local( Area ) - ValidOr( ChildAreaSum, 0 )  }

; mjb	2/19/14	added array element designation (needed for reporting consistent with Window reporting)
	"Set CathedralCeiling:ChildAreaSum => Sum of child skylight areas"    ; SAC 5/22/12 - added to fix CBECCbug003 from BW 5/18/12
		CathedralCeiling:ChildAreaSum[1]		= {	SumChildren( Skylt:TotAreaInclMult[1] )  }

	"Set CathedralCeiling:NetWallArea => gross ceiling area minus sum of child skylight area" 
		CathedralCeiling:NetWallArea		= {	Local( Area ) - Local( ChildAreaSum[1] )  }

	"Set CathedralCeiling:FramingFactor => fraction of gross ceiling area that includes frame" 
		CathedralCeiling:FramingFactor	= {	LocalRef( Construction:FramingFactor )  }

	"Set InteriorCeiling:FramingFactor => fraction of gross ceiling area that includes frame" 
		InteriorCeiling:FramingFactor	= {	LocalRef( Construction:FramingFactor )  }

	"Set UndWall:FramingFactor => fraction of gross wall area that includes frame" 
		UndWall:FramingFactor	= {	LocalRef( Construction:FramingFactor )  }

	"Set IntWall:FramingFactor => fraction of gross wall area that includes frame" 
		IntWall:FramingFactor	= {	LocalRef( Construction:FramingFactor )  }

	"Set ExteriorFloor:FramingFactor => fraction of gross floor area that includes frame" 
		ExteriorFloor:FramingFactor	= {	LocalRef( Construction:FramingFactor )  }

	"Set FloorOverCrawl:FramingFactor => fraction of gross floor area that includes frame" 
		FloorOverCrawl:FramingFactor	= {	LocalRef( Construction:FramingFactor )  }

	"Set InteriorFloor:FramingFactor => fraction of gross floor area that includes frame" 
		InteriorFloor:FramingFactor	= {	LocalRef( Construction:FramingFactor )  }

	"Set UndFloor:FramingFactor => fraction of gross floor area that includes frame" 
		UndFloor:FramingFactor	= {	0 }  ; LocalRef( Construction:FramingFactor )  }

	; SAC 5/22/12 - added properties used in range checks to ensure that (parent) net wall areas don't go negative (CBECCbug003 5/18/12)
	"Set Win:MaxArea"				Win:MaxArea			= {	if (Local( Multiplier ) > 0.0001)
																		then	(Parent( NetWallArea ) + Local( TotAreaInclMult[1] )) / Local( Multiplier )
																		else	100000  endif  }
	"Set Win:MaxHeight"			Win:MaxHeight		= {	if (LocalStatus( Area ) < 5 .AND. IfValidAnd( Width > 0.0001 ) .AND. IfValidAnd( Multiplier > 0.0001 ))
																		then	(Parent( NetWallArea ) + Local( TotAreaInclMult[1] )) / (Local( Width ) * Local( Multiplier ))
																		else	100000  endif  }
	"Set Win:MaxWidth"			Win:MaxWidth		= {	if (LocalStatus( Area ) < 5 .AND. IfValidAnd( Height > 0.0001 ) .AND. IfValidAnd( Multiplier > 0.0001 ))
																		then	(Parent( NetWallArea ) + Local( TotAreaInclMult[1] )) / (Local( Height ) * Local( Multiplier ))
																		else	100000  endif  }
	"Set Win:MaxMultiplier"		Win:MaxMultiplier	= {	if (ValidOr( Area, 0 ) > 0.0001)
																		then	(Parent( NetWallArea ) + Local( TotAreaInclMult[1] )) / Local( Area )
																		else	100000  endif  }

	; SAC 4/7/13 - properties referenced in range checks to ensure that (parent) net roof areas don't go negative
	"Set Skylt:MaxArea"			Skylt:MaxArea			= {	if (Local( Multiplier ) > 0.0001)
																			then	(Parent( NetWallArea ) + Local( TotAreaInclMult )) / Local( Multiplier )
																			else	100000  endif  }
	"Set Skylt:MaxMultiplier"	Skylt:MaxMultiplier	= {	if (Local( Area ) > 0.0001)
																			then	(Parent( NetWallArea ) + Local( TotAreaInclMult )) / Local( Area )
																			else	100000  endif  }

	; SAC 5/24/12 - added properties used in range checks to ensure that (parent) net wall areas don't go negative (CBECCbug003 5/18/12)
	"Set Door:MaxArea"			Door:MaxArea		= {	Parent( NetWallArea ) + Local( Area )  }

	; SAC 7/18/13 - added new boolean indicating whether or not DHW systems are defined (& assigned to zones?) (and should be modeled)
; PERHAPS REPLACE w/ "SumAll( Zone:DHWFloorArea ) > 0"
;	"Set Proj:ModelingDHW"		Proj:ModelingDHW	= {	if (SumAll( DHWSys:NumDHWHeaters ) > 0) then  1  else  0  endif  }		- SAC 10/7/15 - replaced w/ below to ensure that the DHWSys objects are actually assigned to zones or DUTs
	"Set Proj:ModelingDHW"		Proj:ModelingDHW	= {	if (SumAcrossIf( DHWSys:TotNumDHWHeaters, DHWSys:FloorAreaServed[1] > 0 ) > 0) then  1  else  0  endif  }


   ; SAC 10/24/16 - new rulelist to default EAA (existing-addition-alteration) properties
   ; SAC 7/20/17 - split single rulelist into two - Shell moved up above, HVAC remaining here
   "Default EAA (existing-addition-alteration) properties"
      Proj:Action = {   EvalRulelist( "ProposedInput_EAA_HVAC" )  }

																							
   ;--------------------------------------------------------------------
   ; ProposedInput: Defaulting of HVAC & DHW reporting object properties
   ;--------------------------------------------------------------------
  ; mjb  4/21/14 - "Mech1" replaced with "SCSysRpt" in data model
	"Default SCSysRpt properties - general"		SCSysRpt:Action	= {	EvalRulelist( "Default_SCSysReportObject", 1 )  }
;	"Default SCSysRpt properties - general"		SCSysRpt:Action	= {	if (ParentComponentType() == "HVACSys" .OR. ParentComponentType() == "DwellUnit")
;																								then  EvalRulelist( "Default_SCSysReportObject", 1 )
;																								else	UNCHANGED  endif  }

	"Default DHWSysRpt properties - general"		DHWSysRpt:Action	= {	     if (ParentComponentType() == "DHWSys") then  EvalRulelist( "Default_DHWSysReportObject_DHWSysParent", 1 )
																								else if (ParentComponentType() == "DwellUnit" .AND. LocalCompAssigned( DHWSysRef )) then  EvalRulelist( "Default_DHWSysReportObject_DwellUnitParent", 1 )
																								else  UNCHANGED  endif endif  }

   ; SAC 10/24/16 - new rulelist to default project-wide DHW properties
   "Default project-wide DHWSys assignments and areas by category"
      Proj:Action = {   EvalRulelist( "ProposedInput_DHW_Project" )  }

; SAC 12/4/13 - added UI control labels for HVAC & DHW system assignments
;	"Set Zone:UILabel_HVACSys[1]"		Zone:UILabel_HVACSys[1]	= {	     if (Proj:IsMultiFamily > 0.5 .OR.
;																						         Proj:RunScope == 1) then  "       HVAC System:"
;																						else if (HVACSysStatus == 3) then  "New HVAC System:"
;																						else if (HVACSysStatus == 2) then  "Altered HVAC Sys:"
;																															  else  "Existing HVAC Sys:"  endif endif endif  }
;	mjb	9/30/14 - mod label for IsAddAlone
	"Set Zone:UILabel_HVACSys[1]"		Zone:UILabel_HVACSys[1]	= {	     if (Proj:IsMultiFamily > 0.5 .OR.
																									(Proj:RunScope == 1 .AND. Proj:IsAddAlone < 1)) then  "       HVAC System:"
																						else if (HVACSysStatus == 3) then  "New HVAC System:"
																						else if (HVACSysStatus == 2) then  "Altered HVAC Sys:"
																															  else  "Existing HVAC Sys:"  endif endif endif  }
	"Set Zone:UILabel_HVACSys[2]"		Zone:UILabel_HVACSys[2]	= {	if (Proj:IsMultiFamily < 0.5 .AND. Proj:RunScope == 2 .AND. HVACSysStatus == 2 .AND. HVACSysVerified) then  "Existing HVAC Sys:"  else  " "  endif  }

	"Set Zone:UILabel_DHWSys1[1]"		Zone:UILabel_DHWSys1[1]	= {	     if (Proj:IsMultiFamily > 0.5 .OR.
																						         Proj:RunScope == 1) then  "       DHW System 1:"
																						else if (DHWSys1Status == 3) then  "New DHW System 1:"
																						else if (DHWSys1Status == 2) then  "Altered DHW Sys 1:"
																															  else  "Existing DHW Sys 1:"  endif endif endif  }
	"Set Zone:UILabel_DHWSys1[2]"		Zone:UILabel_DHWSys1[2]	= {	if (Proj:IsMultiFamily < 0.5 .AND. Proj:RunScope == 2 .AND. DHWSys1Status == 2 .AND. DHWSys1Verified) then  "Existing DHW Sys 1:"  else  " "  endif  }

   ; removed second DHWSys assignment to Zone - SAC 07/20/21
	;"Set Zone:UILabel_DHWSys2[1]"		Zone:UILabel_DHWSys2[1]	= {	     if (Proj:IsMultiFamily > 0.5) then  " "
	;																					else if (Proj:RunScope == 1) then  "       DHW System 2:"
	;																					else if (DHWSys2Status == 3) then  "New DHW System 2:"
	;																					else if (DHWSys2Status == 2) then  "Altered DHW Sys 2:"
	;																														  else  "Existing DHW Sys 2:"  endif endif endif endif  }
	;"Set Zone:UILabel_DHWSys2[2]"		Zone:UILabel_DHWSys2[2]	= {	if (Proj:IsMultiFamily < 0.5 .AND. Proj:RunScope == 2 .AND. DHWSys2Status == 2 .AND. DHWSys2Verified) then  "Existing DHW Sys 2:"  else  " "  endif  }

  ; SAC 1/6/16 - RESET Proj:Fuel_HaveOther flag if it was set to 0 but there are Propane use selections (and the ruleset version is < 2016) (tic 374)
	"Set flag - Proj:Fuel_HaveOther"		Proj:Fuel_HaveOther		= {	if (Fuel_HaveOther < 0.5 .AND. StandardsVersion < 2016)
																							then	if (IsMultiFamily < 0.5 .AND. ((Appl_HaveDryer[1] > 0.5 .AND. ApplDryerFuel[1] = 3) .OR.
																																			 (Appl_HaveCook[ 1] > 0.5 .AND. ApplCookFuel[ 1] = 3))) then  1
																									else if (SumAll( DHWHeater:AreaServedByFuel[3] ) > 1 .OR. SumAll( DHWHeater:AreaServedByFuel[5] ) > 1) then  1
																									else  UNCHANGED  endif endif
																							else	UNCHANGED  endif  }

   ;--------------------------------------------------------------------
   ; ProposedInput: PreCooling property defaulting  - SAC 4/3/17
   ;--------------------------------------------------------------------
   "Default PreCooling properties"     Proj:Action	= {	EvalRulelist( "Default_PreCooling" )  }

   ;--------------------------------------------------------------------
   ; ProposedInput: Determine whether Proposed Flexibility run is required during analysis
   ;--------------------------------------------------------------------
   "Init Proj:PropFlexRunReqd"      Proj:PropFlexRunReqd  = {
         if (EnergyCodeYearNum < 2019 .OR. RunScope != 1 .OR. AnalysisType < 13 .OR.
             IsAddAlone > 0.5 .OR. IfValidAnd( PreCl_DataValid > 0 )==0 .OR.
             IfValidAnd( UsePreCooling > 0 )==0)
         then  0
         else  1  endif  }
   "Default Proj:PropFlexFrac"      Proj:PropFlexFrac  = {  0.3  }
   "Set Proj:IsPropFlexRun"         Proj:IsPropFlexRun  = {
         if (PropFlexRunReqd = 0 .OR. LocalStatus( RunAbbrev ) < 1) then  0
         else  switch (RunAbbrev)
                    case "pfx"   :  1
                    case "pfx-N" :  1
                    case "pfx-E" :  1
                    case "pfx-S" :  1
                    case "pfx-W" :  1
                    default      :  0
               endswitch  endif  }

   ;--------------------------------------------------------------------
   ; ProposedInput: default StdPeakCoolElecLimitMult
   ;--------------------------------------------------------------------
   "Blast Proj:StdPeakCoolElecLimitMult if user-specified but not EnableResearchMode"    Proj:Action =      ; SAC 08/08/23 (2025)
      {  if (LocalStatus( StdPeakCoolElecLimitMult ) > 5 .AND. EnableResearchMode < 1)
         then  EvalRulelist( "Blast_Proj_StdPeakCoolElecLimitMult" )
         else  UNCHANGED  endif  }
   "Default Proj:StdPeakCoolElecLimitMult - mult on StdPeakCoolElec to determine compliance margin" 
      Proj:StdPeakCoolElecLimitMult  = {  T24RClimateZoneCodeBase:StdPkCoolElecLimitMult( "ClimateZone", Proj:ClimateZone, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )  }   ; updated to look-up table - SAC 08/14/23

   ;--------------------------------------------------------------------
   ; ProposedInput: Determine whether Standard Mixed Fuel run is required during analysis
   ;--------------------------------------------------------------------
   "Init Proj:StdMixedFuelRunReqd"    Proj:StdMixedFuelRunReqd  = {  0  }
   "Eval rules to determine Proj:StdMixedFuelRunReqd"   Proj:Action  =        ; revised logic to turn OFF SMF run in 2025+ - SAC 07/17/23 (2025)
      {  if (EnergyCodeYearNum < 2019 .OR. EnergyCodeYearNum >= 2025 .OR. AnalysisType < 13 .OR.
             RunScope != 1 .OR. IsAddAlone > 0.5)
         then  UNCHANGED
         else  EvalRulelist( "Default_StandardMixedFuel" )  endif  }

   "Set Proj:NumPrelimStdRuns - # of standard model runs (performed prior to Proposed) required in analysis"   Proj:NumPrelimStdRuns  =   ; SAC 07/17/23 (2025)  ; switched back to 0 due to Std fan power dependence on PrelimProp run(s) - SAC 07/20/23 (2025)
      {  0  }
   "Set Proj:NumStdRuns - # of standard model runs"      Proj:NumStdRuns =       ; SAC 07/20/23 (2025)
      {  if (EnergyCodeYearNum >= 2025 .AND. AnalysisType >= 13 .AND.
             RunScope == 1 .AND. IsAddAlone < 0.5)
         then  3
         else  1  endif  }

   ;--------------------------------------------------------------------  SAC 12/29/17
   ; ProposedInput: Determine whether Preliminary Proposed run is required during analysis
   ;--------------------------------------------------------------------
   ; SAC 1/11/18 - added logic to ensure AllOrientation runs cause PrelimProp runs regardless of PV presence
   ; added logic to ensure that PrelimProp run is performed if 2022+ HVAC systems are AutoSized and therefore calced sizes are needed to determine std design fan powers - SAC 03/11/21  ; SAC 03/15/21
   "Set Proj:PrelimPropRunReqd - flag indicating whether a preliminary proposed run is needed"   
      Proj:PrelimPropRunReqd  = {
         if (EnergyCodeYearNum < 2019 .OR. AnalysisType < 13 .OR.
             ( IfValidAnd( PVWDCSysTotal > 0 )==0 .AND. AllOrientations = 0 .AND.
               (IfValidAnd( AnalysisVersion < 220000 ) .OR. SumAll( HVACSys:PropHtPumpAutoSz ) < 0.1) ))
         then  0
         else  1  endif  }

   ; SAC 4/3/17 - PreCooling (and future formula that rely on TDV data...)
   ; SAC 4/17/17 - moved here and included logic to handle HPWH DR systems
   ; SAC 4/25/17 - revised to FORCE value of '1' in case user input of '0' preventing this flag from being toggled on
   ; SAC 12/11/17 - ensure CSE_WriteTDV forced on for runs w/ batteries w/ control other than 'Basic'
   ; SAC 12/17/17 - revsied again to cause CSE_WriteTDV for ANY battery run (to enable test/debug reporting)
   ; SAC 1/10/20 - added logic to ensure TDV data written for all models containing WHF objects (needed for new FANVENTAVAIL expression) (tic #1175)
   "Ensure Proj:CSE_WriteTDV toggled ON when needed"     Proj:Action  = {
         if ((IfValidAnd( PreCl_DataValid > 0 ) .AND. IfValidAnd( IsPropFlexRun > 0 )) .OR.
             SumAcrossIf( DHWSys:NumDHWHeaters, DHWSys:DemRespValid > 0 ) > 0 .OR.
             (AllowBattInputs > 0 .AND. IfValidAnd( BattMaxCap > 0 )) .OR.
             (UnitClVentOption > 0 .AND. IfValidAnd( AnalysisVersion > 190101 )))
         then  EvalRulelist( "ForceOn_CSE_WriteTDV" )
         else  UNCHANGED  endif  }
   "Default Proj:CSE_WriteTDV to undef when not needed"     Proj:CSE_WriteTDV  = {
         if ((IfValidAnd( PreCl_DataValid > 0 )==0 .OR. IfValidAnd( IsPropFlexRun > 0 )==0) .AND.
             SumAcrossIf( DHWSys:NumDHWHeaters, DHWSys:DemRespValid > 0 )==0 .AND.
             (AllowBattInputs < 1 .OR. IfValidAnd( BattMaxCap > 0 )==0) .AND.
             (UnitClVentOption = 0 .OR. IfValidAnd( AnalysisVersion <= 190101 )))
         then  UNDEFINED
         else  UNCHANGED  endif  }
   ;      if (IfValidAnd( CSE_WriteTDV > 0 )) then  UNCHANGED
   ;      else if (IfValidAnd( PreCl_DataValid > 0 )) then  1
   ;      else if (SumAcrossIf( DHWSys:NumDHWHeaters, DHWSys:DemandResponseFlag = 2 ) > 0 ) then  1
   ;      else  UNCHANGED  endif endif endif  }

   ; SAC 2/28/18 - added flag and various rulelists to track whether model IsAllElectric (tic #992)
   "Reset Proj:IsAllElectric flag"     Proj:IsAllElectric  = {
         if (MaxAll( Zone:Appl_CookGain[2] ) > 0.01 .OR. MaxAll( Zone:Appl_DryerGain[2] ) > 0.01 .OR.
             MaxAll( Zone:Appl_CookGain[3] ) > 0.01 .OR. MaxAll( Zone:Appl_DryerGain[3] ) > 0.01 .OR.
             MaxAll( OtherZone:Appl_CookGain[2] ) > 0.01 .OR. MaxAll( OtherZone:Appl_DryerGain[2] ) > 0.01 .OR.
             MaxAll( OtherZone:Appl_CookGain[3] ) > 0.01 .OR. MaxAll( OtherZone:Appl_DryerGain[3] ) > 0.01)
         then  0
         else  1  endif  }
   "Check SFam HVAC equip in setting Proj:IsAllElectric flag"     HVACSys:Action  = {
         if (Proj:IsMultiFamily > 0.5 .OR. Proj:IsAllElectric = 0 .OR. HaveHeating < 0.5 .OR.
             Type == 2 .OR. FloorAreaServed[1] < 1 .OR. LocalStatus( HeatSysTypeAbbrev ) < 1)
         then  UNCHANGED
         else if (T24RHeatingEquipment:UseElec( "CodeBase", Proj:StdDesignBase, "StdVer", Proj:StandardsVersion, "SysType", HeatSysTypeAbbrev ) < 0.5)
         then  EvalRulelist( "ForceOff_Proj_IsAllElectric" )
         else  UNCHANGED  endif endif  }
   "Check MFam HVAC equip in setting Proj:IsAllElectric flag"     DwellUnitType:Action  = {
         if (Proj:IsMultiFamily < 0.5 .OR. Proj:IsAllElectric = 0 .OR. AssignedDUFlrArea < 0.5 .OR.
             HVACSysType == 2)
         then  UNCHANGED
         else if (T24RHeatingEquipment:UseElec( "CodeBase", Proj:StdDesignBase, "StdVer", Proj:StandardsVersion, "SysType", HeatEqpTypeAbbrev ) < 0.5)
         then  EvalRulelist( "ForceOff_Proj_IsAllElectric" )
         else  UNCHANGED  endif endif  }
   "Check DHW equip in setting Proj:IsAllElectric flag"           DHWHeater:Action  = {
         if (Proj:IsAllElectric = 0 .OR. IfValidAnd( FloorAreaServed > 1 )==0 .OR.
             HeaterElementType != 1)
         then  UNCHANGED
         else  EvalRulelist( "ForceOff_Proj_IsAllElectric" )
         endif  }
   "Set Proj:GasTypeRpt - type of fossil fuel used on site (or 'All Electric') (for reporting purposes)"   ; SAC 2/28/18 (tic #992)
      Proj:GasTypeRpt  = {
         if (IsAllElectric > 0)
         then  "All Electric"
         else  EnumString( GasType )
         endif  }


   ;--------------------------------------------------------------------
   ; ProposedInput: RESNET CA-HERS
   ;--------------------------------------------------------------------
   "Default RESNET CA-HERS data"     Proj:Action =
      {  if (IfValidAnd( RHERSEnabled > 0 )==0) then  UNCHANGED
         else  EvalRulelist( "ProposedInput_HERS" )  endif  }


   ;-------------------------------------------------------------------- SAC 11/15/19
   ; ProposedInput: UI Dialog Tabs
   ;--------------------------------------------------------------------
   "Set Proj:NumUIDialogTabs - number of dialog tabs to display in the user interface"   Proj:NumUIDialogTabs =
      {  if (IfValidAnd( Proj:AnalysisVersion >= 190101 )==0) then  UNDEFINED
         else if (Proj:AnalysisVersion < 220000)
         then  if (IfValidAnd( RHERSEnabled > 0 ))   ; 2019
               then  13
               else  12  endif
         else  if (IfValidAnd( RHERSEnabled > 0 ))   ; 2022
               then  13
               else  12  endif
         endif endif  }


   ;--------------------------------------------------------------------
   ; ProposedInput: misc model contents flags
   ;--------------------------------------------------------------------
   ; revised rule logic to NOT reset AllowCntrlElecDHWSlrPVCred flag to 0 when defaulting Std model, fixing bug where models w/out attic never get credit - SAC 10/29/20
   "Set Proj:AllowCntrlElecDHWSlrPVCred - flag value indicating model includes PV and excludes solar thermal (DHW)"   Proj:AllowCntrlElecDHWSlrPVCred =     ; SAC 5/2/20 (FlexibilityCredit)
      {  if (IsStdOrSMFRun) then  UNCHANGED
         else  if (IfValidAnd( PVWDCSysTotal > 0 ) .AND. SumAll( DHWSolarSys:FloorAreaServed ) < 1 .AND.
                   SumAcrossIf( DHWSys:FloorAreaServed, DHWSys:CentralElecDHW > 0 ) > 1 .AND.
                   SumAcrossIf( DHWSys:FloorAreaServed, DHWSys:CentralElecDHW = 0 ) < (0.05 * SumAcrossIf( DHWSys:FloorAreaServed, DHWSys:CentralElecDHW > 0 )))
               then  1
               else  0  endif
         endif  }
     ; {  if (IfValidAnd( PVWDCSysTotal > 0 ) .AND. SumAll( DHWSolarSys:FloorAreaServed ) < 1 .AND.
     ;        SumAcrossIf( DHWSys:FloorAreaServed, DHWSys:CentralElecDHW > 0 ) > 1 .AND.
     ;        SumAcrossIf( DHWSys:FloorAreaServed, DHWSys:CentralElecDHW = 0 ) < (0.05 * SumAcrossIf( DHWSys:FloorAreaServed, DHWSys:CentralElecDHW > 0 )) .AND.
     ;        (Proj:RunAbbrev == "p" .OR. Proj:RunAbbrev == "p-N" .OR. Proj:RunAbbrev == "p-E" .OR. 
     ;         Proj:RunAbbrev == "u" .OR. Proj:RunAbbrev == "p-S" .OR. Proj:RunAbbrev == "p-W"))
     ;    then  1  else  0  endif  }
   "Default Proj:TakeCntrlElecDHWSlrPVCred - flag to apply efficiency credit for all-electric central DHW & PV models"  Proj:TakeCntrlElecDHWSlrPVCred =    ; SAC 5/6/20 (FlexibilityCredit)
      {  if (AllowCntrlElecDHWSlrPVCred < 1) then  UNDEFINED
         else  0  endif  }


   ;--------------------------------------------------------------------
   ; ProposedInput: Blast all LayerParams objects following ProposedInput defaulting
   ;--------------------------------------------------------------------

; SAC 3/17/14 - to be REMOVED
; "store BEMProc details"		Proj:Action = {  StoreBEMProc( "Before LayerParams-Mat cleanup", 0 )  }

	"Blast all LayerParams objects"			Proj:Action	= {	DeleteAllComps( LayerParams )  }
	"Blast Mats marked for deletion"			Mat:Action	= {	if (IfValidAnd( MarkForDeletion == 1 )) then  DeleteComp()  else  UNCHANGED  endif  }		; SAC 3/17/14
;	"Blast Mats not referenced by Cons:*"	Mat:Action	= {	if (CountRefs( Cons:CavityPathMats ) < 1 .AND. CountRefs( Cons:FramePathMats ) < 1) then  DeleteComp()  else  UNCHANGED  endif  }		; SAC 3/21/14

; SAC 3/17/14 - to be REMOVED
; "store BEMProc details"		Proj:Action = {  StoreBEMProc( "After LayerParams-Mat cleanup", 0 )  }
; "debug"		Proj:Action	= {	MessageBox( "LayerParams-Mat cleanup done." )  }

; SAC 2/2/15 - new rulelist evaluation calls to ensure that AirNet ELA properties are defaulted in ProposedInput - ONLY FOR BypassRuleLimits
; tweaked rules to summarize model & default AirNet stuff for version >= 2019.2.0 (for MFam AirNet research/testing) - SAC 7/13/20
;	"evaluate ...SummarizeModel rules when in BypassRuleLimits mode"	Proj:Action	= {	if (BypassRuleLimits < 0.5) then  UNCHANGED
	"evaluate ...SummarizeModel rules when in BypassRuleLimits mode"	Proj:Action	= {	if (BypassRuleLimits < 0.5 .AND. IfValidAnd( Proj:AnalysisVersion >= 190200 )==0) then  UNCHANGED
																													else  EvalRulelist( "Reporting_SummarizeModel" )  endif  }
	"evaluate ...CSE_AirNet_ELA rules when in BypassRuleLimits mode"	Proj:Action	= {	if (BypassRuleLimits < 0.5 .AND. IfValidAnd( Proj:AnalysisVersion >= 190200 )==0) then  UNCHANGED
																													else  EvalRulelist( "Default_CSE_AirNet_ELA" )  endif  }

; SAC 11/11/16 - enable user-specification of CSE simulation reports
   "Default Proj:CSERpt_ZnDataDump"    Proj:CSERpt_ZnDataDump    = {  0  }
   "Default Proj:CSERpt_HVACDescrip"   Proj:CSERpt_HVACDescrip   = {  0  }
   "Default Proj:CSERpt_ZnEnergy"      Proj:CSERpt_ZnEnergy      = {  0  }
   "Default Proj:CSERpt_HtPumpHtg"     Proj:CSERpt_HtPumpHtg     = {  0  }    ; SAC 11/01/20
   "Default Proj:CSERpt_Mtr_All"       Proj:CSERpt_Mtr_All       = {  0  }
   "Default Proj:CSERpt_Mtr_Elec"      Proj:CSERpt_Mtr_Elec      = { 
         if (CSERpt_Mtr_All < 1) then  0  else  1  endif  }
   "Default Proj:CSERpt_Mtr_NGas"      Proj:CSERpt_Mtr_NGas      = {
         if (CSERpt_Mtr_All < 1 .OR. Fuel_HaveNatGas < 1) then  0  else  1  endif  }
   "Default Proj:CSERpt_Mtr_Othr"      Proj:CSERpt_Mtr_Othr      = {
         if (CSERpt_Mtr_All < 1 .OR. Fuel_HaveOther  < 1) then  0  else  1  endif  }
                                                                
   "Default Proj:CSERpt_ZnEnergy_DD"  Proj:CSERpt_ZnEnergy_DD  = {  0  }
   "Default Proj:CSERpt_Mtr_All_DD"   Proj:CSERpt_Mtr_All_DD   = {  0  }
   "Default Proj:CSERpt_Mtr_Elec_DD"  Proj:CSERpt_Mtr_Elec_DD  = {
         if (CSERpt_Mtr_All_DD < 1) then  0  else  1  endif  }
   "Default Proj:CSERpt_Mtr_NGas_DD"  Proj:CSERpt_Mtr_NGas_DD  = {
         if (CSERpt_Mtr_All_DD < 1 .OR. Fuel_HaveNatGas < 1) then  0  else  1  endif  }
   "Default Proj:CSERpt_Mtr_Othr_DD"  Proj:CSERpt_Mtr_Othr_DD  = {
         if (CSERpt_Mtr_All_DD < 1 .OR. Fuel_HaveOther  < 1) then  0  else  1  endif  }
                                                                
   "Default Proj:CSERpt_ZnEnergy_CD"  Proj:CSERpt_ZnEnergy_CD  = {  0  }
   "Default Proj:CSERpt_Mtr_All_CD"   Proj:CSERpt_Mtr_All_CD   = {  0  }
   "Default Proj:CSERpt_Mtr_Elec_CD"  Proj:CSERpt_Mtr_Elec_CD  = {
         if (CSERpt_Mtr_All_CD < 1) then  0  else  1  endif  }
   "Default Proj:CSERpt_Mtr_NGas_CD"  Proj:CSERpt_Mtr_NGas_CD  = {
         if (CSERpt_Mtr_All_CD < 1 .OR. Fuel_HaveNatGas < 1) then  0  else  1  endif  }
   "Default Proj:CSERpt_Mtr_Othr_CD"  Proj:CSERpt_Mtr_Othr_CD  = {
         if (CSERpt_Mtr_All_CD < 1 .OR. Fuel_HaveOther  < 1) then  0  else  1  endif  }
                                                                
   "Default Proj:CSERpt_ZnEnergy_HD"  Proj:CSERpt_ZnEnergy_HD  = {  0  }
   "Default Proj:CSERpt_Mtr_All_HD"   Proj:CSERpt_Mtr_All_HD   = {  0  }
   "Default Proj:CSERpt_Mtr_Elec_HD"  Proj:CSERpt_Mtr_Elec_HD  = {
         if (CSERpt_Mtr_All_HD < 1) then  0  else  1  endif  }
   "Default Proj:CSERpt_Mtr_NGas_HD"  Proj:CSERpt_Mtr_NGas_HD  = {
         if (CSERpt_Mtr_All_HD < 1 .OR. Fuel_HaveNatGas < 1) then  0  else  1  endif  }
   "Default Proj:CSERpt_Mtr_Othr_HD"  Proj:CSERpt_Mtr_Othr_HD  = {
         if (CSERpt_Mtr_All_HD < 1 .OR. Fuel_HaveOther  < 1) then  0  else  1  endif  }

   ; moved StdDesignFuel & DRtgDesignFuel rules down from above since now can depend on other model defaulting - SAC 02/05/21
   "Set Proj:NumProposedHPWHs - # of active/assigned (& new) HPWHs in proposed model"     ; SAC 02/05/21   ; add DHWSys:IsNewAssignedAWHP sum - SAC 12/12/22 (tic #1318)
      Proj:NumProposedHPWHs = {  SumAll( DHWHeater:IsNewAssignedHPWH ) +
                                 SumAll( DHWSys:IsNewAssignedAWHP    )  }

   ; SAC 6/13/20 (2022AllElecStd) - SAC 6/18/20   ; SAC 12/29/21 (MxdFuel)
   ; removed EnableResearchMode dependence for 2022+ analysis - SAC 02/24/22
   ; revised to prevent StdDesignFuel adjustments for Additions analysis - SAC 10/04/22 (tic #1295)
   "Set Proj:AllowStdDesignFuel - StdDesignFuel availability flag (0-not allowed, 1-allowed, 2-by use)"  Proj:AllowStdDesignFuel =  
      {  if (IfValidAnd( ShowMixedFuelCompare > 0 ) .AND. AnalysisType > 13)
         then  1
         else if (IfValidAnd( AnalysisVersion >= 220000 ) .AND. RunScope == 1 .AND. IsAddAlone < 0.5)
         then  if (StdDesignFuel >= 3)
               then  2     ; allow specification of fuel by use - SAC 7/2/20 (2022AllElecStd)
               else  1  endif
         else  0  endif endif  }
   "Set Proj:StdDesignFuel"      Proj:StdDesignFuel =          ; SAC 12/30/21 (MxdFuel)
      {  if (IfValidAnd( ShowMixedFuelCompare > 0 ) .AND. AnalysisType > 13)
         then  switch (AnalysisType)
                  case  14 :  2     ; "Mixed Fuel Baseline Comparison"    -> "Force Mixed Fuel"
                  case  15 :  1     ; "All Electric Baseline Comparison"  -> "Force All Electric" 
                  default  :  UNCHANGED
               endswitch
         else  UNCHANGED  endif  }

   "switch old AllElecStdDesign input to StdDesignFuel (if allowed & specified)"    Proj:Action =     ; SAC 6/18/20 (2022AllElecStd)
      {  if (AllowStdDesignFuel .AND. IfValidAnd( AllElecStdDesign > 0 ))
         then  EvalRulelist( "Force_StdDesignFuel_AllElectric" )  else  UNCHANGED  endif  }
   "hardwire StdDesignFuel options based on '2022 Final' selections"     Proj:Action =                ; SAC 02/05/21
      {  if (AllowStdDesignFuel .AND. StdDesignFuel >= 11)
         then  EvalRulelist( "Force_StdDesignFuel_2022Final" )  else  UNCHANGED  endif  }
;      {  if (IfValidAnd( ShowMixedFuelCompare > 0 ) .AND. AnalysisType == 14)        ; SAC 12/29/21 (MxdFuel)
;         then  EvalRulelist( "Force_StdDesignFuel_MixedFuel" )
;         else if (AllowStdDesignFuel .AND. StdDesignFuel >= 11)
;         then  EvalRulelist( "Force_StdDesignFuel_2022Final" )  else  UNCHANGED  endif endif  }

   ; removed EnableResearchMode dependence for 2022+ analysis - SAC 02/24/22
   "Set Proj:AllowDRtgDesignFuel - DRtgDesignFuel availability flag (0-not allowed, 1-allowed, 2-by use)"   Proj:AllowDRtgDesignFuel =    ; SAC 01/16/21
      {  if ((EnableResearchMode > 0 .OR. IfValidAnd( AnalysisVersion >= 220000 )) .AND.
             IfValidAnd( AnalysisVersion >= 190200 ) .AND. RunScope == 1)
         then  if (DRtgDesignFuel >= 3)
               then  2     ; specification of fuel by use
               else  1  endif
         else  0  endif  }
   "hardwire DRtgDesignFuel options based on '2022 Final' selections"    Proj:Action =                       ; SAC 02/05/21
      {  if (AllowDRtgDesignFuel .AND. DRtgDesignFuel >= 11)
         then  EvalRulelist( "Force_DRtgDesignFuel_2022Final" )  else  UNCHANGED  endif  }

   "Default Proj:StdDesignFuel_Ckg"    Proj:StdDesignFuel_Ckg =      ; SAC 01/19/21
      {  if (AllowStdDesignFuel > 0 .AND. LocalStatus( StdDesignFuel_App ) > 5)
         then  StdDesignFuel_App  else  "Electricity"  endif  }
   "Default Proj:StdDesignFuel_Dry"    Proj:StdDesignFuel_Dry = 
      {  if (AllowStdDesignFuel > 0)
         then  StdDesignFuel_Ckg  else  UNCHANGED  endif  }

   "Default Proj:DRtgDesignFuel_Ckg"   Proj:DRtgDesignFuel_Ckg =     ; SAC 01/19/21
      {  if (AllowDRtgDesignFuel > 0 .AND. LocalStatus( DRtgDesignFuel_App ) > 5)
         then  DRtgDesignFuel_App  else  "Electricity"  endif  }
   "Default Proj:DRtgDesignFuel_Dry"   Proj:DRtgDesignFuel_Dry = 
      {  if (AllowDRtgDesignFuel > 0)
         then  DRtgDesignFuel_Ckg  else  UNCHANGED  endif  }

   "Default Proj:StdDesignCompactDistrib - whether to apply 2019 DHW compact distribution standard design settings"       ; SAC 01/22/21
      Proj:StdDesignCompactDistrib  = {   if (AllowStdDesignFuel > 0) then  0
                                          else  UNDEFINED  endif  }
   ; Proj:StdDesignCompactDistVal - no default - SAC 01/27/21
   "Set Proj:StdDesignCompactDistYear - Title24 code year to base DHW compact distribution table look-ups on" 
      Proj:StdDesignCompactDistYear = {   if (AllowStdDesignFuel > 0 .AND. IfValidAnd( StdDesignCompactDistrib > 0 )) then  2019
                                          else  StdDesignBase  endif  }
                        ;"dbg" Proj:Action = { PostMessageToLog( "just set StdDesignCompactDistYear to %g (ProposedInput)", StdDesignCompactDistYear ) }
   "Default Proj:StdDesignDrnWtrHtRecov - whether to apply 2019 drain water heat recovery standard design settings" 
      Proj:StdDesignDrnWtrHtRecov   = {   if (AllowStdDesignFuel > 0) then  0
                                          else  UNDEFINED  endif  }
   "Set Proj:StdDesignDrnWtrHtRecYear - Title24 code year to base drain water heat recovery table look-ups on" 
      Proj:StdDesignDrnWtrHtRecYear = {   if (AllowStdDesignFuel > 0 .AND. IfValidAnd( StdDesignDrnWtrHtRecov > 0 )) then  2019
                                          else  StdDesignBase  endif  }
   ; Proj:StdDesignCompactDistYear & Proj:StdDesignDrnWtrHtRecYear ALSO set @ top of 'BudgetConversion_DHW' rulelist - SAC 01/22/21

   "Default Proj:StdDesignHPWHLocOverride - whether to override the standard design HPWH location to the largest conditioned zone"     ; SAC 01/22/21
      Proj:StdDesignHPWHLocOverride = {   if (AllowStdDesignFuel > 0) then  0
                                          else  UNDEFINED  endif  }

   "Default Proj:StdDesignWinPerfAdjust - whether to adjust the standard design window performance settings"         ; SAC 01/22/21
      Proj:StdDesignWinPerfAdjust = {     if (AllowStdDesignFuel > 0) then  0
                                          else  UNDEFINED  endif  }
   "Set Proj:StdDesignWinAdj_Ufactor - adjustment to the standard design window U-factor" 
      Proj:StdDesignWinAdj_Ufactor = {    if (AllowStdDesignFuel > 0 .AND. IfValidAnd( StdDesignWinPerfAdjust > 0 )) then  -0.1
                                          else  UNDEFINED  endif  }
   "Set Proj:StdDesignWinAdj_SHGC - adjustment to the standard design window SHGC" 
      Proj:StdDesignWinAdj_SHGC = {       if (AllowStdDesignFuel > 0 .AND. IfValidAnd( StdDesignWinPerfAdjust > 0 )) then  -0.03
                                          else  UNDEFINED  endif  }

   "Set Proj:SMFFollowsStdDesignFuel - override the standard mixed fuel run w/ customized standard design fuel options"    ; SAC 02/01/21
      Proj:SMFFollowsStdDesignFuel = {  0  }
; end of rules related to custom Std and DRtg run fuel and features - SAC 02/05/21


   "Set Proj:CSERpt_HaveReports"    Proj:CSERpt_HaveReports = {
         if ( ( CSERpt_ZnDataDump > 0 .OR. CSERpt_ZnEnergy .OR.
                CSERpt_ZnEnergy_HD > 0 .OR. CSERpt_ZnEnergy_CD > 0 .OR. CSERpt_ZnEnergy_DD > 0 ) .AND.
              ( IfValidAnd( CondFloorArea > 1 ) .OR. IfValidAnd( HasGarage > 0 ) .OR.
                SumAll( Attic:FloorArea ) > 1 ) ) then  1
         else if (CSERpt_HVACDescrip > 0 .AND. SumAll( HVACSys:FloorAreaServed ) > 0) then  1
         else if (CSERpt_HtPumpHtg > 0 .AND. SumAll( HVACHtPump:FloorAreaServed ) > 0) then  1
         else if (CSERpt_Mtr_All > 0 .OR. CSERpt_Mtr_All_HD > 0 .OR.
                  CSERpt_Mtr_All_CD > 0 .OR. CSERpt_Mtr_All_DD > 0) then  1
         else if (Fuel_HaveElec > 0 .AND. (CSERpt_Mtr_Elec > 0 .OR.
                    CSERpt_Mtr_Elec_HD > 0 .OR. CSERpt_Mtr_Elec_CD > 0 .OR. CSERpt_Mtr_Elec_DD > 0)) then  1
         else if (Fuel_HaveNatGas > 0 .AND. (CSERpt_Mtr_NGas > 0 .OR.
                    CSERpt_Mtr_NGas_HD > 0 .OR. CSERpt_Mtr_NGas_CD > 0 .OR. CSERpt_Mtr_NGas_DD > 0)) then  1
         else if (Fuel_HaveOther > 0 .AND. (CSERpt_Mtr_Othr > 0 .OR.
                    CSERpt_Mtr_Othr_HD > 0 .OR. CSERpt_Mtr_Othr_CD > 0 .OR. CSERpt_Mtr_Othr_DD > 0)) then  1
         else  0  endif endif endif endif endif endif endif  }

   ; model adjustments that require first round of defaulting to have been executed first - SAC 2/3/20
   "Remove inputs related to DwellUnitType:DHWSolFrac*"     DwellUnitType:Action  =       ; SAC 2/3/20 (tic #1198)
      {  if (IfValidAnd( Proj:AnalysisVersion >= 190102 )==0 .OR. IfValidAnd( Proj:DefaultingRounds > 1 ) .OR.
             IfValidAnd( Proj:EnableResearchMode > 0 )) then  UNCHANGED
         else if (DHWSolFracType > 0 .OR. IfValidAnd( DHWSolFracAnn > 0 ) .OR.
                  IfValidAnd( DHWSolFracMon[1]  > 0 ) .OR. IfValidAnd( DHWSolFracMon[2]  > 0 ) .OR. IfValidAnd( DHWSolFracMon[3]  > 0 ) .OR.
                  IfValidAnd( DHWSolFracMon[4]  > 0 ) .OR. IfValidAnd( DHWSolFracMon[5]  > 0 ) .OR. IfValidAnd( DHWSolFracMon[6]  > 0 ) .OR.
                  IfValidAnd( DHWSolFracMon[7]  > 0 ) .OR. IfValidAnd( DHWSolFracMon[8]  > 0 ) .OR. IfValidAnd( DHWSolFracMon[9]  > 0 ) .OR.
                  IfValidAnd( DHWSolFracMon[10] > 0 ) .OR. IfValidAnd( DHWSolFracMon[11] > 0 ) .OR. IfValidAnd( DHWSolFracMon[12] > 0 ))
         then  EvalRulelist( "Blast_DwellUnitType_DHWSolFrac", 1 )
         else  UNCHANGED  endif endif  }

   "Remove inputs related to DHWSys:SolFrac*"     DHWSys:Action  =       ; SAC 2/3/20 (tic #1198)
      {  if (IfValidAnd( Proj:AnalysisVersion >= 190102 )==0 .OR. IfValidAnd( Proj:DefaultingRounds > 1 ) .OR.
             IfValidAnd( Proj:EnableResearchMode > 0 )) then  UNCHANGED
         else if (SolFracType > 0 .OR. IfValidAnd( SolFracAnn > 0 ) .OR.
                  IfValidAnd( SolFracMon[1]  > 0 ) .OR. IfValidAnd( SolFracMon[2]  > 0 ) .OR. IfValidAnd( SolFracMon[3]  > 0 ) .OR.
                  IfValidAnd( SolFracMon[4]  > 0 ) .OR. IfValidAnd( SolFracMon[5]  > 0 ) .OR. IfValidAnd( SolFracMon[6]  > 0 ) .OR.
                  IfValidAnd( SolFracMon[7]  > 0 ) .OR. IfValidAnd( SolFracMon[8]  > 0 ) .OR. IfValidAnd( SolFracMon[9]  > 0 ) .OR.
                  IfValidAnd( SolFracMon[10] > 0 ) .OR. IfValidAnd( SolFracMon[11] > 0 ) .OR. IfValidAnd( SolFracMon[12] > 0 ))
         then  EvalRulelist( "Blast_DHWSys_DHWSolFrac", 1 )
         else  UNCHANGED  endif endif  }

   "Warn user of presence of OtherZone objects in 2019 model when BRL or RM not activated"   Proj:Action  =       ; SAC 2/14/20 - install check & user message for 2019 models containing OtherZones
      {  if (IfValidAnd( AnalysisVersion >= 220000 ) .OR. IfValidAnd( DefaultingRounds > 1 ) .OR.
             IfValidAnd( EnableResearchMode > 0 ) .OR. IfValidAnd( BypassRuleLimits > 0 )) then  UNCHANGED
         else if (ComponentCount( OtherZone ) < 1) then  UNCHANGED
         else if (IfValidAnd( BypassMessageBoxes > 0 ))
         then  PostMessageToLog( "%g OtherZone objects exist in the building description. Analysis cannot be performed on buildings with OtherZones unless EnableResearchMode or BypassRuleLimits are activated.", ComponentCount( OtherZone ) )
         else  MessageBox(       "%g OtherZone objects exist in the building description. Analysis cannot be performed on buildings with OtherZones unless EnableResearchMode or BypassRuleLimits are activated.", ComponentCount( OtherZone ) )
         endif endif endif  }

   "Warn user of presence of an assigned, new or altered, Non-UEF rated HPWHs in 2022+ model"   DHWHeater:Action  =        ; SAC 02/16/23 (tic #1347)
      {  if (IfValidAnd( Proj:AnalysisVersion >= 220000 )==0 .OR. IfValidAnd( Proj:DefaultingRounds == 3 )==0) then  UNCHANGED
         else if (IfValidAnd( HeaterElementType = 5 )==0 .OR. IfValidAnd( HPWHCategory = 4 )==0 .OR. IfValidAnd( IsExisting = 0 )==0 .OR. IfValidAnd( FloorAreaServed > 0 )==0) then  UNCHANGED
         else if (IfValidAnd( Proj:BypassMessageBoxes > 0 ))
         then  PostMessageToLog( "Warning:  DHWHeater '%s' is specified as a non-UEF rated HPWH which is only valid for Existing (not new or altered) equipment.", Name )
         else  MessageBox(       "DHWHeater '%s' is specified as a non-UEF rated HPWH which is only valid for Existing (not new or altered) equipment.", Name )
         endif endif endif  }

   "Temporarily remove SimStandaloneBatt Battery for 2025 research versions"     Proj:Action =     ; SAC 10/10/23
      {  if (EnergyCodeYearNum >= 2025 .AND. IfValidAnd( BattMaxCap > 0 ) .AND.
             LocalStatus( SimStandaloneBatt ) > 4 .AND. IfValidAnd( SimStandaloneBatt > 0 ) .AND.
             IfValidAnd( BEMVersion < 12 ) .AND. IfValidAnd( DefaultingRounds = 1 ))
         then  EvalRulelist( "Force_Proj_SimStandaloneBatt" )
         else  UNCHANGED  endif  }
   "Temporarily hard-wire Battery Control to Basic for 2025.0.4"     Proj:Action =     ; SAC 08/02/23   ; allow BatteryControl when RuleRepoRev > 2416 - SAC 09/18/23   ; moved OUT of LoadModelAdjustments since RuleRepoRev not yet set there - SAC 10/05/23
      {  if (EnergyCodeYearNum >= 2025 .AND. IfValidAnd( BatteryControl > 1 ) .AND.
             IfValidAnd( RuleRepoRev > 2416 ) .AND. IfValidAnd( DefaultingRounds > 1 ))
         then  EvalRulelist( "Force_Proj_BatteryControlToBasic" )
         else  UNCHANGED  endif  }

   "Remove user input toggling OFF BattGridHarmCredit from older project files"     Proj:Action =     ; SAC 10/10/23
      {  if (LocalStatus( BattGridHarmCredit ) > 4 .AND. IfValidAnd( BattGridHarmCredit = 0 ) .AND.
             IfValidAnd( BEMVersion < 12 ) .AND. IfValidAnd( DefaultingRounds = 1 ))
         then  EvalRulelist( "Blast_Proj_BattGridHarmCredit" )
         else  UNCHANGED  endif  }

   "UI settings for Analysis Options confirmation dialog"   Proj:Action = {  EvalRulelist( "ConfirmAnalysisOptions_UI" )  }   ; SAC 6/11/20 (CommunitySolar)

; SAC 2/17/20 - fix Fan Efficacy problems w/ the loaded run
;   "Force fix to Fan Efficacy errors"     Proj:Action  =
;      {  if (IfValidAnd( DefaultingRounds != 2 )) then  UNCHANGED
;         else if (IfValidAnd( IsMultiFamily > 0 ))
;         then  EvalRulelist( "FIX_2019FanEfficacy_MFam" )
;         else  EvalRulelist( "FIX_2019FanEfficacy_SFam" )  endif endif  }

END
;*************************************************************************

;************************************************************************* SAC 08/27/20
RULELIST "Set_Proj_DefaultIAQFanPwr" 0 0 0 0
   "Default Proj:IAQSupInletsAccessible - supply air filters, outside air inlets, and H/ERV recovery cores are readily accessible"     ; SAC 01/20/21 (tic #1243)
      Proj:IAQSupInletsAccessible = {  0  }
   "Set Proj:IAQSupInletsAccessMsg"    Proj:IAQSupInletsAccessMsg =        ; SAC 01/21/21 (tic #1243)   ; updated label - SAC 10/28/21 (tic #1282)
      {  if (IAQSupInletsAccessible == 0)
         then  "Supply air filters, inlets and H/ERV cores must be accessible to receive IAQ compliance credit"
         else  UNDEFINED  endif  }
      ;   then  "Inaccessible inlets/filters/cores will prevent any compliance credit for efficient IAQ systems"

   "Default Proj:IAQHasFID - system has FID"       ; SAC 08/22/21 (tic #1243)
      Proj:IAQHasFID = {  0  }

   "Set Proj:MaxStdIAQCFMRatio"     Proj:MaxStdIAQCFMRatio = 
      {  if (IfValidAnd( AnalysisVersion >= 190200 ))
         then  1.25     ; max std IAQ CFM 110% of min required (tic #1243) - SAC 01/20/21 / switched from 110% to 125% for 2019.2.0-RC - SAC 08/18/21 (tic #1243)
         else  1.5  endif  }

   ; SAC 2/25/20 - revised default IAQ fan power from 0.25 to 0.3 for SFam and 0.6 for MFam in 2019.2.0+ (tic #1174)
   ; revised logic to default MFam to 0.3 for IAQ other than Balanced - SAC 7/21/20 (tic #1174)
   "Set Proj:DefaultIAQFanPwr"   Proj:DefaultIAQFanPwr  =               ; revised DefaultIAQFanPwr unbal 0.3->0.35 & bal 0.6->0.7 - SAC 01/19/21 (tic #1243) 
      {  if (IfValidAnd( AnalysisVersion >= 190200 )==0) then  0.25
         else if (IsMultiFamily)
         then  if (IfValidAnd( MostDUIAQ_Balanced = 0 ))
               then  0.35  else  0.7  endif
         else  0.35  endif endif  }
END
;*************************************************************************

; SAC 3/21/16 - added rulelist to force defaulting of DesignRatingBase to 'RESNET2014'
;*************************************************************************
RULELIST "ForceDefault_DesignRatingBase_RESNET2014" 1 0 0 0
	"Force Proj:DesignRatingBase to 'RESNET2014'"	Proj:DesignRatingBase	= {	2014  }
END
;*************************************************************************

; SAC 3/23/15 - rulelist to force toggling OFF design rating calcs when they are not allowed
;*************************************************************************
RULELIST "ForceDefault_DesignRatingCalcs" 1 0 0 0
	"Force default Proj:DesignRatingCalcs"		Proj:DesignRatingCalcs	= {	0  }
END
;*************************************************************************

; SAC SAC 4/8/15 - rulelist to force toggling OFF design rating lighting credit inputs
;*************************************************************************
RULELIST "ForceDefault_DRtgLighting" 1 0 0 0
	"Force default Proj:DRtgLtgCredit"			Proj:DRtgLtgCredit		= {	0  }
	"Force default Proj:DRtgLtgReduction"		Proj:DRtgLtgReduction	= {	0  }
END
;*************************************************************************
RULELIST "ForceDefault_DRtgLightingReduction" 1 0 0 0
	"Force default Proj:DRtgLtgReduction"		Proj:DRtgLtgReduction	= {	0  }
END
;*************************************************************************

; SAC 4/10/15 - force reset of addition alone flag/value when RunScope NOT New Cons
;*************************************************************************
RULELIST "ForceDefault_IsAddAlone_AddFrac" 1 0 0 0
	"Force default Proj:IsAddAlone"			Proj:IsAddAlone			= {	0	} 
	"Force default Proj:AdditionCFAFrac"	Proj:AdditionCFAFrac		= {	1	} 
	"Force reset Proj:AddAloneExistArea"	Proj:AddAloneExistArea	= {	UNDEFINED  }		; SAC 12/28/15
	"Force reset Proj:AddAloneAddedArea"	Proj:AddAloneAddedArea	= {	UNDEFINED  }
END
;*************************************************************************

;*************************************************************************
RULELIST "ForceReset_SeasonFanVentTemps" 1 0 0 0
;*************************************************************************
	"Reset Proj:SeasonChangeSetpt"	Proj:SeasonChangeSetpt	= {	UNDEFINED  }      ; SAC 2/7/20
	"Reset Proj:FanVentLockoutTemp"	Proj:FanVentLockoutTemp	= {	UNDEFINED  }
END
;*************************************************************************

; SAC 4/28/15 - rulelist to force reset or Proj:MultiFamilyType (and post warning message to log) - pending final implementation plans/design
;*************************************************************************
RULELIST "ForceReset_MultiFamilyType" 1 0 0 0
;*************************************************************************
	"Post warning to log"	Proj:Action	= {	PostWarning( "Proj:MultiFamilyType setting of '%s' replaced with default selection 'Other' pending final duplex/townhome analysis implementation.", EnumString( MultiFamilyType ) )  }
	"Force default of Proj:MultiFamilyType"	Proj:MultiFamilyType	= {	3  }
END
;*************************************************************************

; SAC 11/3/15 - rulelist to force default of DHWCalcMethod = "CSE" (for all runs where BypassRuleLimits not activated)
;*************************************************************************
RULELIST "ForceDefault_DHWCalcMethod_CSE" 1 0 0 0
;*************************************************************************
	"Post warning to log for Proj:DHWCalcMethod change"	Proj:Action	= {	PostWarning( "Proj:DHWCalcMethod setting of '%s' replaced with default selection 'CSE'.", EnumString( DHWCalcMethod ) )  }
	"Force default of Proj:DHWCalcMethod to 'CSE'"		Proj:DHWCalcMethod	= {	"CSE"  }
END
;*************************************************************************

; SAC 4/25/17 - revised to FORCE value of '1' in case user input of '0' preventing this flag from being toggled on
;*************************************************************************
RULELIST "ForceOn_CSE_WriteTDV" 1 0 0 1
   "Toggle ON Proj:CSE_WriteTDV"    Proj:CSE_WriteTDV  = {  1  }
END
;*************************************************************************

; SAC 12/8/15 - tic 512 ensure wall orientations are reported as 0/90/180/270 for all orientation runs
;*************************************************************************
RULELIST "ForceDefault_FrontOrientation" 1 0 0 0
;*************************************************************************
   "Default Proj:FrontOrientation"		Proj:FrontOrientation	= {	0  }
END
;*************************************************************************

; SAC 5/24/17 - rulelist to force reset of Proj:AnalysisType (applicable to ruleset switches, such as to/from ExEDR)
;*************************************************************************
RULELIST "ForceReset_AnalysisType" 1 0 0 0
;*************************************************************************
   "Force reset of Proj:AnalysisType"  Proj:AnalysisType  = {  UNDEFINED  }
END
;*************************************************************************

; SAC 3/22/17 - rulelist to force reset of Proj:StandardsVersion (to update early/research 2019 runs (using 2016 ruleset) from 2017 -> 2020)
;*************************************************************************
RULELIST "ForceReset_StandardsVersion" 1 0 0 0
;*************************************************************************
   "Force reset of Proj:StandardsVersion"    Proj:StandardsVersion  = {  UNDEFINED  }
END
;*************************************************************************

;*************************************************************************  ; SAC 2/28/18 (tic #992)
RULELIST "ForceOff_Proj_IsAllElectric" 1 0 0 0
   "Toggle Off Proj:IsAllElectric"     Proj:IsAllElectric  = {  0  }
END
;*************************************************************************  ; SAC 2/28/18 (tic #992)
RULELIST "ForceReset_Proj_NatGasAvailable" 1 0 0 1
   "Blast Proj:NatGasAvailable"        Proj:NatGasAvailable  = {  UNDEFINED  }
END
;*************************************************************************

;*************************************************************************  ; SAC 07/05/23 (tic #1351)
RULELIST "NoDwellingUnit_ResetADUType_NumBedrooms"  1 0 0 0
   "Reset Proj:SFamADUType"         Proj:SFamADUType     = {  0  }
   "Reset Proj:NumBedrooms"         Proj:NumBedrooms     = {  0  }
   "Reset Proj:NumAddBedrooms"      Proj:NumAddBedrooms  = {  0  }
END
;*************************************************************************

;*************************************************************************
RULELIST "Default_PolyLp"  0 0 0 0
;*************************************************************************
   "Default PolyLp data"   PolyLp:Area  = {  if (LocalStatus(Area) > 0) then  UNCHANGED
                                             else  InitializePolyLoop()  endif  }

; SAC 7/12/18 - moved to BEMProc source code
;   "Set PolyLp:TiltAngle"   PolyLp:TiltAngle  = {  ; Tilt angle (in degrees, 0-horizontal, 90-vertical)
;      if (LocalStatus( UnitVectorOk ) < 1) then  UNDEFINED
;      else if (UnitVectorOk ==  1) then    0
;      else if (UnitVectorOk == -1) then  180
;      else  ACOS( UnitVectorOk ) * 180/3.14159265395
;      endif endif endif  }
;
;   "Set PolyLp:Azimuth"   PolyLp:Azimuth = {  ; Azimuth of PolyLp (0=N, 90=E, ...)
;      if (LocalStatus( UnitVectorPi ) < 1 .OR.
;          LocalStatus( UnitVectorPj ) < 1) then  UNDEFINED
;      else if (( UnitVectorPi * Proj:BldgUnitVectorNi +
;                 UnitVectorPj * Proj:BldgUnitVectorNj ) = 1 )
;      then    0  ; due north
;      else if (( UnitVectorPi * Proj:BldgUnitVectorNi +
;                 UnitVectorPj * Proj:BldgUnitVectorNj ) = -1 )
;      then  180  ; due south
;      else if (( Proj:BldgUnitVectorNi * UnitVectorPj -
;                 Proj:BldgUnitVectorNj * UnitVectorPi ) < 0 )
;      then       ; postive rotation 
;                 ACOS( UnitVectorPi * Proj:BldgUnitVectorNi +
;                       UnitVectorPj * Proj:BldgUnitVectorNj ) * 180/3.14159265359
;      else       ; negative rotation
;         360 - ( ACOS( UnitVectorPi * Proj:BldgUnitVectorNi +
;                       UnitVectorPj * Proj:BldgUnitVectorNj ) * 180/3.14159265359 )
;      endif endif endif endif  }

;  ; adjust UpAzimuth for past-vertical UpAngle
;   "Adjust PolyLp:UpAzimuth for past-vertical UpAngle"   PolyLp:UpAzimuth = {
;      if (IfValidAnd( UpAngle > 90 ))
;      then  if (IfValidAnd( UpAzimuth < 180))
;            then  180 + UpAzimuth
;            else  UpAzimuth - 180  endif
;      else  UNCHANGED  endif  }
;  ; adjust UpAngle for past-vertical UpAngle
;   "Adjust PolyLp:UpAngle for past-vertical value"   PolyLp:UpAngle = {
;      if (IfValidAnd( UpAngle > 90 ))
;      then  180 - UpAngle
;      else  UNCHANGED  endif  }

END
;*************************************************************************

;*************************************************************************  ; SAC 10/5/19 - ported from NRes rules (MFamProto)
RULELIST "Default_Schedules"  0 0 0 0
;*************************************************************************
; SchDay
   "Default SchDay:Hr[2]"     SchDay:Hr[2]   = {  if (Type == 4) then  UNCHANGED  else if (LocalStatus( Hr[1]  ) > 0) then  Hr[1]   else  UNDEFINED  endif endif  }
   "Default SchDay:Hr[3]"     SchDay:Hr[3]   = {  if (Type == 4) then  UNCHANGED  else if (LocalStatus( Hr[2]  ) > 0) then  Hr[2]   else  UNDEFINED  endif endif  }
   "Default SchDay:Hr[4]"     SchDay:Hr[4]   = {  if (Type == 4) then  UNCHANGED  else if (LocalStatus( Hr[3]  ) > 0) then  Hr[3]   else  UNDEFINED  endif endif  }
   "Default SchDay:Hr[5]"     SchDay:Hr[5]   = {  if (Type == 4) then  UNCHANGED  else if (LocalStatus( Hr[4]  ) > 0) then  Hr[4]   else  UNDEFINED  endif endif  }
   "Default SchDay:Hr[6]"     SchDay:Hr[6]   = {  if (Type == 4) then  UNCHANGED  else if (LocalStatus( Hr[5]  ) > 0) then  Hr[5]   else  UNDEFINED  endif endif  }
   "Default SchDay:Hr[7]"     SchDay:Hr[7]   = {  if (Type == 4) then  UNCHANGED  else if (LocalStatus( Hr[6]  ) > 0) then  Hr[6]   else  UNDEFINED  endif endif  }
   "Default SchDay:Hr[8]"     SchDay:Hr[8]   = {  if (Type == 4) then  UNCHANGED  else if (LocalStatus( Hr[7]  ) > 0) then  Hr[7]   else  UNDEFINED  endif endif  }
   "Default SchDay:Hr[9]"     SchDay:Hr[9]   = {  if (Type == 4) then  UNCHANGED  else if (LocalStatus( Hr[8]  ) > 0) then  Hr[8]   else  UNDEFINED  endif endif  }
   "Default SchDay:Hr[10]"    SchDay:Hr[10]  = {  if (Type == 4) then  UNCHANGED  else if (LocalStatus( Hr[9]  ) > 0) then  Hr[9]   else  UNDEFINED  endif endif  }
   "Default SchDay:Hr[11]"    SchDay:Hr[11]  = {  if (Type == 4) then  UNCHANGED  else if (LocalStatus( Hr[10] ) > 0) then  Hr[10]  else  UNDEFINED  endif endif  }
   "Default SchDay:Hr[12]"    SchDay:Hr[12]  = {  if (Type == 4) then  UNCHANGED  else if (LocalStatus( Hr[11] ) > 0) then  Hr[11]  else  UNDEFINED  endif endif  }
   "Default SchDay:Hr[13]"    SchDay:Hr[13]  = {  if (Type == 4) then  UNCHANGED  else if (LocalStatus( Hr[12] ) > 0) then  Hr[12]  else  UNDEFINED  endif endif  }
   "Default SchDay:Hr[14]"    SchDay:Hr[14]  = {  if (Type == 4) then  UNCHANGED  else if (LocalStatus( Hr[13] ) > 0) then  Hr[13]  else  UNDEFINED  endif endif  }
   "Default SchDay:Hr[15]"    SchDay:Hr[15]  = {  if (Type == 4) then  UNCHANGED  else if (LocalStatus( Hr[14] ) > 0) then  Hr[14]  else  UNDEFINED  endif endif  }
   "Default SchDay:Hr[16]"    SchDay:Hr[16]  = {  if (Type == 4) then  UNCHANGED  else if (LocalStatus( Hr[15] ) > 0) then  Hr[15]  else  UNDEFINED  endif endif  }
   "Default SchDay:Hr[17]"    SchDay:Hr[17]  = {  if (Type == 4) then  UNCHANGED  else if (LocalStatus( Hr[16] ) > 0) then  Hr[16]  else  UNDEFINED  endif endif  }
   "Default SchDay:Hr[18]"    SchDay:Hr[18]  = {  if (Type == 4) then  UNCHANGED  else if (LocalStatus( Hr[17] ) > 0) then  Hr[17]  else  UNDEFINED  endif endif  }
   "Default SchDay:Hr[19]"    SchDay:Hr[19]  = {  if (Type == 4) then  UNCHANGED  else if (LocalStatus( Hr[18] ) > 0) then  Hr[18]  else  UNDEFINED  endif endif  }
   "Default SchDay:Hr[20]"    SchDay:Hr[20]  = {  if (Type == 4) then  UNCHANGED  else if (LocalStatus( Hr[19] ) > 0) then  Hr[19]  else  UNDEFINED  endif endif  }
   "Default SchDay:Hr[21]"    SchDay:Hr[21]  = {  if (Type == 4) then  UNCHANGED  else if (LocalStatus( Hr[20] ) > 0) then  Hr[20]  else  UNDEFINED  endif endif  }
   "Default SchDay:Hr[22]"    SchDay:Hr[22]  = {  if (Type == 4) then  UNCHANGED  else if (LocalStatus( Hr[21] ) > 0) then  Hr[21]  else  UNDEFINED  endif endif  }
   "Default SchDay:Hr[23]"    SchDay:Hr[23]  = {  if (Type == 4) then  UNCHANGED  else if (LocalStatus( Hr[22] ) > 0) then  Hr[22]  else  UNDEFINED  endif endif  }
   "Default SchDay:Hr[24]"    SchDay:Hr[24]  = {  if (Type == 4) then  UNCHANGED  else if (LocalStatus( Hr[23] ) > 0) then  Hr[23]  else  UNDEFINED  endif endif  }

   "Default SchDay:Key[2]"    SchDay:Key[2]   = {  if (Type < 4) then  UNCHANGED  else if (LocalStatus( Key[1]  ) > 0) then  Key[1]   else  UNDEFINED  endif endif  }
   "Default SchDay:Key[3]"    SchDay:Key[3]   = {  if (Type < 4) then  UNCHANGED  else if (LocalStatus( Key[2]  ) > 0) then  Key[2]   else  UNDEFINED  endif endif  }
   "Default SchDay:Key[4]"    SchDay:Key[4]   = {  if (Type < 4) then  UNCHANGED  else if (LocalStatus( Key[3]  ) > 0) then  Key[3]   else  UNDEFINED  endif endif  }
   "Default SchDay:Key[5]"    SchDay:Key[5]   = {  if (Type < 4) then  UNCHANGED  else if (LocalStatus( Key[4]  ) > 0) then  Key[4]   else  UNDEFINED  endif endif  }
   "Default SchDay:Key[6]"    SchDay:Key[6]   = {  if (Type < 4) then  UNCHANGED  else if (LocalStatus( Key[5]  ) > 0) then  Key[5]   else  UNDEFINED  endif endif  }
   "Default SchDay:Key[7]"    SchDay:Key[7]   = {  if (Type < 4) then  UNCHANGED  else if (LocalStatus( Key[6]  ) > 0) then  Key[6]   else  UNDEFINED  endif endif  }
   "Default SchDay:Key[8]"    SchDay:Key[8]   = {  if (Type < 4) then  UNCHANGED  else if (LocalStatus( Key[7]  ) > 0) then  Key[7]   else  UNDEFINED  endif endif  }
   "Default SchDay:Key[9]"    SchDay:Key[9]   = {  if (Type < 4) then  UNCHANGED  else if (LocalStatus( Key[8]  ) > 0) then  Key[8]   else  UNDEFINED  endif endif  }
   "Default SchDay:Key[10]"   SchDay:Key[10]  = {  if (Type < 4) then  UNCHANGED  else if (LocalStatus( Key[9]  ) > 0) then  Key[9]   else  UNDEFINED  endif endif  }
   "Default SchDay:Key[11]"   SchDay:Key[11]  = {  if (Type < 4) then  UNCHANGED  else if (LocalStatus( Key[10] ) > 0) then  Key[10]  else  UNDEFINED  endif endif  }
   "Default SchDay:Key[12]"   SchDay:Key[12]  = {  if (Type < 4) then  UNCHANGED  else if (LocalStatus( Key[11] ) > 0) then  Key[11]  else  UNDEFINED  endif endif  }
   "Default SchDay:Key[13]"   SchDay:Key[13]  = {  if (Type < 4) then  UNCHANGED  else if (LocalStatus( Key[12] ) > 0) then  Key[12]  else  UNDEFINED  endif endif  }
   "Default SchDay:Key[14]"   SchDay:Key[14]  = {  if (Type < 4) then  UNCHANGED  else if (LocalStatus( Key[13] ) > 0) then  Key[13]  else  UNDEFINED  endif endif  }
   "Default SchDay:Key[15]"   SchDay:Key[15]  = {  if (Type < 4) then  UNCHANGED  else if (LocalStatus( Key[14] ) > 0) then  Key[14]  else  UNDEFINED  endif endif  }
   "Default SchDay:Key[16]"   SchDay:Key[16]  = {  if (Type < 4) then  UNCHANGED  else if (LocalStatus( Key[15] ) > 0) then  Key[15]  else  UNDEFINED  endif endif  }
   "Default SchDay:Key[17]"   SchDay:Key[17]  = {  if (Type < 4) then  UNCHANGED  else if (LocalStatus( Key[16] ) > 0) then  Key[16]  else  UNDEFINED  endif endif  }
   "Default SchDay:Key[18]"   SchDay:Key[18]  = {  if (Type < 4) then  UNCHANGED  else if (LocalStatus( Key[17] ) > 0) then  Key[17]  else  UNDEFINED  endif endif  }
   "Default SchDay:Key[19]"   SchDay:Key[19]  = {  if (Type < 4) then  UNCHANGED  else if (LocalStatus( Key[18] ) > 0) then  Key[18]  else  UNDEFINED  endif endif  }
   "Default SchDay:Key[20]"   SchDay:Key[20]  = {  if (Type < 4) then  UNCHANGED  else if (LocalStatus( Key[19] ) > 0) then  Key[19]  else  UNDEFINED  endif endif  }
   "Default SchDay:Key[21]"   SchDay:Key[21]  = {  if (Type < 4) then  UNCHANGED  else if (LocalStatus( Key[20] ) > 0) then  Key[20]  else  UNDEFINED  endif endif  }
   "Default SchDay:Key[22]"   SchDay:Key[22]  = {  if (Type < 4) then  UNCHANGED  else if (LocalStatus( Key[21] ) > 0) then  Key[21]  else  UNDEFINED  endif endif  }
   "Default SchDay:Key[23]"   SchDay:Key[23]  = {  if (Type < 4) then  UNCHANGED  else if (LocalStatus( Key[22] ) > 0) then  Key[22]  else  UNDEFINED  endif endif  }
   "Default SchDay:Key[24]"   SchDay:Key[24]  = {  if (Type < 4) then  UNCHANGED  else if (LocalStatus( Key[23] ) > 0) then  Key[23]  else  UNDEFINED  endif endif  }

   "Set SchDay:SingleVal - flag indicating every hour equal"     SchDay:SingleVal =    ; SAC 12/10/20    
      {  if (Type < 4 .AND. LocalStatus( Hr[1] ) > 0)
         then  if (Hr[1] == Hr[ 2] .AND. Hr[1] == Hr[ 3] .AND. Hr[1] == Hr[ 4] .AND. Hr[1] == Hr[ 5] .AND. Hr[1] == Hr[ 6] .AND.
                   Hr[1] == Hr[ 7] .AND. Hr[1] == Hr[ 8] .AND. Hr[1] == Hr[ 9] .AND. Hr[1] == Hr[10] .AND. Hr[1] == Hr[11] .AND.
                   Hr[1] == Hr[12] .AND. Hr[1] == Hr[13] .AND. Hr[1] == Hr[14] .AND. Hr[1] == Hr[15] .AND. Hr[1] == Hr[16] .AND.
                   Hr[1] == Hr[17] .AND. Hr[1] == Hr[18] .AND. Hr[1] == Hr[19] .AND. Hr[1] == Hr[20] .AND. Hr[1] == Hr[21] .AND.
                   Hr[1] == Hr[22] .AND. Hr[1] == Hr[23] .AND. Hr[1] == Hr[24] )
               then  1  else  UNDEFINED  endif
         else if (Type == 4 .AND. LocalStatus( Key[1] ) > 0)
         then  if (Key[1] == Key[ 2] .AND. Key[1] == Key[ 3] .AND. Key[1] == Key[ 4] .AND. Key[1] == Key[ 5] .AND. Key[1] == Key[ 6] .AND.
                   Key[1] == Key[ 7] .AND. Key[1] == Key[ 8] .AND. Key[1] == Key[ 9] .AND. Key[1] == Key[10] .AND. Key[1] == Key[11] .AND.
                   Key[1] == Key[12] .AND. Key[1] == Key[13] .AND. Key[1] == Key[14] .AND. Key[1] == Key[15] .AND. Key[1] == Key[16] .AND.
                   Key[1] == Key[17] .AND. Key[1] == Key[18] .AND. Key[1] == Key[19] .AND. Key[1] == Key[20] .AND. Key[1] == Key[21] .AND.
                   Key[1] == Key[22] .AND. Key[1] == Key[23] .AND. Key[1] == Key[24] )
               then  1  else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }

   "Set SchDay:CSEinput"      SchDay:CSEinput =    ; SAC 12/10/20
      {  if (Type < 4 .AND. LocalStatus( Hr[1] ) > 0)
         then  if (IfValidAnd( SingleVal > 0 )) then  Format( "%g", Hr[1] )
               else  Format( "hourval( %g, %g, %g, %g, %g, %g, %g, %g, %g, %g, %g, %g, %g, %g, %g, %g, %g, %g, %g, %g, %g, %g, %g, %g )",
                              Hr[ 1], Hr[ 2], Hr[ 3], Hr[ 4], Hr[ 5], Hr[ 6], Hr[ 7], Hr[ 8], Hr[ 9], Hr[10], Hr[11], Hr[12],
                              Hr[13], Hr[14], Hr[15], Hr[16], Hr[17], Hr[18], Hr[19], Hr[20], Hr[21], Hr[22], Hr[23], Hr[24] )
               endif
         else if (Type == 4 .AND. LocalStatus( Key[1] ) > 0)
         then  if (IfValidAnd( SingleVal > 0 )) then  Key[1]
               else  Format( "hourval( %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s )",
                              Key[ 1], Key[ 2], Key[ 3], Key[ 4], Key[ 5], Key[ 6], Key[ 7], Key[ 8], Key[ 9], Key[10], Key[11], Key[12],
                              Key[13], Key[14], Key[15], Key[16], Key[17], Key[18], Key[19], Key[20], Key[21], Key[22], Key[23], Key[24] )
               endif
         else  UNDEFINED  endif endif  }

; SchWeek
   "Default SchWeek:SchDaySunRef"      SchWeek:SchDaySunRef  = {
		     if (LocalCompAssigned( SchDayWERef    )) then  SchDayWERef    
		else if (LocalCompAssigned( SchDayAllRef   )) then  SchDayAllRef   
		else if (LocalCompAssigned( SchDayHolRef   )) then  SchDayHolRef   
		else if (LocalCompAssigned( SchDayHtgDDRef )) then  SchDayHtgDDRef 
		else if (LocalCompAssigned( SchDaySatRef   )) then  SchDaySatRef   
		else if (LocalCompAssigned( SchDayWDRef    )) then  SchDayWDRef    
		else if (LocalCompAssigned( SchDayFriRef   )) then  SchDayFriRef   
		else if (LocalCompAssigned( SchDayThuRef   )) then  SchDayThuRef   
		else if (LocalCompAssigned( SchDayWedRef   )) then  SchDayWedRef   
		else if (LocalCompAssigned( SchDayTueRef   )) then  SchDayTueRef   
		else if (LocalCompAssigned( SchDayMonRef   )) then  SchDayMonRef   
		else if (LocalCompAssigned( SchDayClgDDRef )) then  SchDayClgDDRef 
		else  UNDEFINED  endif endif endif endif endif endif endif endif endif endif endif endif  }
   "Default SchWeek:SchDayMonRef"      SchWeek:SchDayMonRef  = {
		     if (LocalCompAssigned( SchDayWDRef    )) then  SchDayWDRef    
		else if (LocalCompAssigned( SchDayAllRef   )) then  SchDayAllRef   
		else if (LocalCompAssigned( SchDayTueRef   )) then  SchDayTueRef   
		else if (LocalCompAssigned( SchDayWedRef   )) then  SchDayWedRef   
		else if (LocalCompAssigned( SchDayThuRef   )) then  SchDayThuRef   
		else if (LocalCompAssigned( SchDayFriRef   )) then  SchDayFriRef   
		else if (LocalCompAssigned( SchDayClgDDRef )) then  SchDayClgDDRef 
		else if (LocalCompAssigned( SchDaySatRef   )) then  SchDaySatRef   
		else if (LocalCompAssigned( SchDayWERef    )) then  SchDayWERef    
		else if (LocalCompAssigned( SchDaySunRef   )) then  SchDaySunRef   
		else if (LocalCompAssigned( SchDayHolRef   )) then  SchDayHolRef   
		else if (LocalCompAssigned( SchDayHtgDDRef )) then  SchDayHtgDDRef 
		else  UNDEFINED  endif endif endif endif endif endif endif endif endif endif endif endif  }
   "Default SchWeek:SchDayTueRef"      SchWeek:SchDayTueRef  = {
		if (LocalCompAssigned( SchDayMonRef   )) then  SchDayMonRef   
		else  UNDEFINED  endif  }
   "Default SchWeek:SchDayWedRef"      SchWeek:SchDayWedRef  = {
		if (LocalCompAssigned( SchDayTueRef   )) then  SchDayTueRef   
		else  UNDEFINED  endif  }
   "Default SchWeek:SchDayThuRef"      SchWeek:SchDayThuRef  = {
		if (LocalCompAssigned( SchDayWedRef   )) then  SchDayWedRef   
		else  UNDEFINED  endif  }
   "Default SchWeek:SchDayFriRef"      SchWeek:SchDayFriRef  = {
		if (LocalCompAssigned( SchDayThuRef   )) then  SchDayThuRef   
		else  UNDEFINED  endif  }
   "Default SchWeek:SchDaySatRef"      SchWeek:SchDaySatRef  = {
		if (LocalCompAssigned( SchDaySunRef   )) then  SchDaySunRef   
		else  UNDEFINED  endif  }
   "Default SchWeek:SchDayHolRef"      SchWeek:SchDayHolRef  = {
		if (LocalCompAssigned( SchDaySunRef   )) then  SchDaySunRef   
		else  UNDEFINED  endif  }
   "Default SchWeek:SchDayClgDDRef"    SchWeek:SchDayClgDDRef  = {
		if (LocalCompAssigned( SchDayMonRef   )) then  SchDayMonRef   
		else  UNDEFINED  endif  }
   "Default SchWeek:SchDayHtgDDRef"    SchWeek:SchDayHtgDDRef  = {
		if (LocalCompAssigned( SchDayHolRef   )) then  SchDayHolRef   
		else  UNDEFINED  endif  }

; SchWeek
   "Default Sch:EndMonth[1]"     Sch:EndMonth[1]  = {
		if (LocalCompAssigned(  SchWeekRef[1] )) then  12  else  UNDEFINED  endif  }
   "Default Sch:EndMonth[2]"     Sch:EndMonth[2]  = {
		if (LocalCompAssigned(  SchWeekRef[2] )) then  12  else  UNDEFINED  endif  }
   "Default Sch:EndMonth[3]"     Sch:EndMonth[3]  = {
		if (LocalCompAssigned(  SchWeekRef[3] )) then  12  else  UNDEFINED  endif  }
   "Default Sch:EndMonth[4]"     Sch:EndMonth[4]  = {
		if (LocalCompAssigned(  SchWeekRef[4] )) then  12  else  UNDEFINED  endif  }
   "Default Sch:EndMonth[5]"     Sch:EndMonth[5]  = {
		if (LocalCompAssigned(  SchWeekRef[5] )) then  12  else  UNDEFINED  endif  }
   "Default Sch:EndMonth[6]"     Sch:EndMonth[6]  = {
		if (LocalCompAssigned(  SchWeekRef[6] )) then  12  else  UNDEFINED  endif  }
   "Default Sch:EndMonth[7]"     Sch:EndMonth[7]  = {
		if (LocalCompAssigned(  SchWeekRef[7] )) then  12  else  UNDEFINED  endif  }
   "Default Sch:EndMonth[8]"     Sch:EndMonth[8]  = {
		if (LocalCompAssigned(  SchWeekRef[8] )) then  12  else  UNDEFINED  endif  }
   "Default Sch:EndMonth[9]"     Sch:EndMonth[9]  = {
		if (LocalCompAssigned(  SchWeekRef[9] )) then  12  else  UNDEFINED  endif  }

   "Default Sch:EndDay[1]"    Sch:EndDay[1]  = {
		if (LocalCompAssigned( SchWeekRef[1] ) == 0) then  UNDEFINED
		else  switch (Local( EndMonth[1] ))
					case  2 : 28	case  4 : 30	case 6 : 30		case 9 : 30
					case 11 : 30	default : 31
				endswitch  endif  }
   "Default Sch:EndDay[2]"    Sch:EndDay[2]  = {
		if (LocalCompAssigned( SchWeekRef[2] ) == 0) then  UNDEFINED
		else  switch (Local( EndMonth[2] ))
					case  2 : 28	case  4 : 30	case 6 : 30		case 9 : 30
					case 11 : 30	default : 31
				endswitch  endif  }
   "Default Sch:EndDay[3]"    Sch:EndDay[3]  = {
		if (LocalCompAssigned( SchWeekRef[3] ) == 0) then  UNDEFINED
		else  switch (Local( EndMonth[3] ))
					case  2 : 28	case  4 : 30	case 6 : 30		case 9 : 30
					case 11 : 30	default : 31
				endswitch  endif  }
   "Default Sch:EndDay[4]"    Sch:EndDay[4]  = {
		if (LocalCompAssigned( SchWeekRef[4] ) == 0) then  UNDEFINED
		else  switch (Local( EndMonth[4] ))
					case  2 : 28	case  4 : 30	case 6 : 30		case 9 : 30
					case 11 : 30	default : 31
				endswitch  endif  }
   "Default Sch:EndDay[5]"    Sch:EndDay[5]  = {
		if (LocalCompAssigned( SchWeekRef[5] ) == 0) then  UNDEFINED
		else  switch (Local( EndMonth[5] ))
					case  2 : 28	case  4 : 30	case 6 : 30		case 9 : 30
					case 11 : 30	default : 31
				endswitch  endif  }
   "Default Sch:EndDay[6]"    Sch:EndDay[6]  = {
		if (LocalCompAssigned( SchWeekRef[6] ) == 0) then  UNDEFINED
		else  switch (Local( EndMonth[6] ))
					case  2 : 28	case  4 : 30	case 6 : 30		case 9 : 30
					case 11 : 30	default : 31
				endswitch  endif  }
   "Default Sch:EndDay[7]"    Sch:EndDay[7]  = {
		if (LocalCompAssigned( SchWeekRef[7] ) == 0) then  UNDEFINED
		else  switch (Local( EndMonth[7] ))
					case  2 : 28	case  4 : 30	case 6 : 30		case 9 : 30
					case 11 : 30	default : 31
				endswitch  endif  }
   "Default Sch:EndDay[8]"    Sch:EndDay[8]  = {
		if (LocalCompAssigned( SchWeekRef[8] ) == 0) then  UNDEFINED
		else  switch (Local( EndMonth[8] ))
					case  2 : 28	case  4 : 30	case 6 : 30		case 9 : 30
					case 11 : 30	default : 31
				endswitch  endif  }
   "Default Sch:EndDay[9]"    Sch:EndDay[9]  = {
		if (LocalCompAssigned( SchWeekRef[9] ) == 0) then  UNDEFINED
		else  switch (Local( EndMonth[9] ))
					case  2 : 28	case  4 : 30	case 6 : 30		case 9 : 30
					case 11 : 30	default : 31
				endswitch  endif  }

   "Default Sch:NumWeeks"     Sch:NumWeeks  = {
		     if (IfValidAnd( EndMonth[20] > 0 ) .AND. IfValidAnd( EndDay[20] > 0 ) .AND. LocalCompAssigned( SchWeekRef[20] )) then  52
		else if (IfValidAnd( EndMonth[19] > 0 ) .AND. IfValidAnd( EndDay[19] > 0 ) .AND. LocalCompAssigned( SchWeekRef[19] )) then  19
		else if (IfValidAnd( EndMonth[18] > 0 ) .AND. IfValidAnd( EndDay[18] > 0 ) .AND. LocalCompAssigned( SchWeekRef[18] )) then  18
		else if (IfValidAnd( EndMonth[17] > 0 ) .AND. IfValidAnd( EndDay[17] > 0 ) .AND. LocalCompAssigned( SchWeekRef[17] )) then  17
		else if (IfValidAnd( EndMonth[16] > 0 ) .AND. IfValidAnd( EndDay[16] > 0 ) .AND. LocalCompAssigned( SchWeekRef[16] )) then  16
		else if (IfValidAnd( EndMonth[15] > 0 ) .AND. IfValidAnd( EndDay[15] > 0 ) .AND. LocalCompAssigned( SchWeekRef[15] )) then  15
		else if (IfValidAnd( EndMonth[14] > 0 ) .AND. IfValidAnd( EndDay[14] > 0 ) .AND. LocalCompAssigned( SchWeekRef[14] )) then  14
		else if (IfValidAnd( EndMonth[13] > 0 ) .AND. IfValidAnd( EndDay[13] > 0 ) .AND. LocalCompAssigned( SchWeekRef[13] )) then  13
		else if (IfValidAnd( EndMonth[12] > 0 ) .AND. IfValidAnd( EndDay[12] > 0 ) .AND. LocalCompAssigned( SchWeekRef[12] )) then  12
		else if (IfValidAnd( EndMonth[11] > 0 ) .AND. IfValidAnd( EndDay[11] > 0 ) .AND. LocalCompAssigned( SchWeekRef[11] )) then  11
		else if (IfValidAnd( EndMonth[10] > 0 ) .AND. IfValidAnd( EndDay[10] > 0 ) .AND. LocalCompAssigned( SchWeekRef[10] )) then  10
		else if (IfValidAnd( EndMonth[ 9] > 0 ) .AND. IfValidAnd( EndDay[ 9] > 0 ) .AND. LocalCompAssigned( SchWeekRef[ 9] )) then   9
		else if (IfValidAnd( EndMonth[ 8] > 0 ) .AND. IfValidAnd( EndDay[ 8] > 0 ) .AND. LocalCompAssigned( SchWeekRef[ 8] )) then   8
		else if (IfValidAnd( EndMonth[ 7] > 0 ) .AND. IfValidAnd( EndDay[ 7] > 0 ) .AND. LocalCompAssigned( SchWeekRef[ 7] )) then   7
		else if (IfValidAnd( EndMonth[ 6] > 0 ) .AND. IfValidAnd( EndDay[ 6] > 0 ) .AND. LocalCompAssigned( SchWeekRef[ 6] )) then   6
		else if (IfValidAnd( EndMonth[ 5] > 0 ) .AND. IfValidAnd( EndDay[ 5] > 0 ) .AND. LocalCompAssigned( SchWeekRef[ 5] )) then   5
		else if (IfValidAnd( EndMonth[ 4] > 0 ) .AND. IfValidAnd( EndDay[ 4] > 0 ) .AND. LocalCompAssigned( SchWeekRef[ 4] )) then   4
		else if (IfValidAnd( EndMonth[ 3] > 0 ) .AND. IfValidAnd( EndDay[ 3] > 0 ) .AND. LocalCompAssigned( SchWeekRef[ 3] )) then   3
		else if (IfValidAnd( EndMonth[ 2] > 0 ) .AND. IfValidAnd( EndDay[ 2] > 0 ) .AND. LocalCompAssigned( SchWeekRef[ 2] )) then   2
		else if (IfValidAnd( EndMonth[ 1] > 0 ) .AND. IfValidAnd( EndDay[ 1] > 0 ) .AND. LocalCompAssigned( SchWeekRef[ 1] )) then   1
		else  0  endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif  }

   "Set Sch:CSEinput via sub-rulelist (for certain sch descriptions)"      Sch:Action =    ; SAC 12/11/20
      {  if (Description == 1 .AND. NumWeeks == 12)
         then  EvalRulelist( "SetupSch_CSEInput_MonthlyWDWE", 1 )
         else  UNCHANGED  endif  }
END
;*************************************************************************  SAC 12/11/20
RULELIST "SetupSch_CSEInput_MonthlyWDWE"  1 0 0 0
   "Set Sch:CSEinput start"         Sch:CSEinput = {  FormatNL( "$isWeHol ? choose1( $month,    // %s\n", "weekends/holidays" )  }
   "Set Sch:CSEinput WE Jan-Jun"    Sch:CSEinput =
      {  if (IfValidAnd( SchWeekRef[1]:SchDayWERef:SingleVal > 0 ) .AND. IfValidAnd( SchWeekRef[2]:SchDayWERef:SingleVal > 0 ) .AND.
             IfValidAnd( SchWeekRef[3]:SchDayWERef:SingleVal > 0 ) .AND. IfValidAnd( SchWeekRef[4]:SchDayWERef:SingleVal > 0 ) .AND.
             IfValidAnd( SchWeekRef[5]:SchDayWERef:SingleVal > 0 ) .AND. IfValidAnd( SchWeekRef[6]:SchDayWERef:SingleVal > 0 ))
         then  CSEinput + FormatNL( "         %s, %s, %s, %s, %s, %s,   // jan-jun\n",    
                                       SchWeekRef[1]:SchDayWERef:CSEinput,  SchWeekRef[2]:SchDayWERef:CSEinput,
                                       SchWeekRef[3]:SchDayWERef:CSEinput,  SchWeekRef[4]:SchDayWERef:CSEinput,
                                       SchWeekRef[5]:SchDayWERef:CSEinput,  SchWeekRef[6]:SchDayWERef:CSEinput )
         else  CSEinput + FormatNL( "         %s,   // jan\n         %s,   // feb\n         %s,   // mar\n         %s,   // apr\n         %s,   // may\n         %s,   // jun\n",
                                       SchWeekRef[1]:SchDayWERef:CSEinput,  SchWeekRef[2]:SchDayWERef:CSEinput,
                                       SchWeekRef[3]:SchDayWERef:CSEinput,  SchWeekRef[4]:SchDayWERef:CSEinput,
                                       SchWeekRef[5]:SchDayWERef:CSEinput,  SchWeekRef[6]:SchDayWERef:CSEinput )
         endif  }
   "Set Sch:CSEinput WE Jul-Dec"    Sch:CSEinput =
      {  if (IfValidAnd( SchWeekRef[7]:SchDayWERef:SingleVal > 0 ) .AND. IfValidAnd( SchWeekRef[8]:SchDayWERef:SingleVal > 0 ) .AND.
             IfValidAnd( SchWeekRef[9]:SchDayWERef:SingleVal > 0 ) .AND. IfValidAnd( SchWeekRef[10]:SchDayWERef:SingleVal > 0 ) .AND.
             IfValidAnd( SchWeekRef[11]:SchDayWERef:SingleVal > 0 ) .AND. IfValidAnd( SchWeekRef[12]:SchDayWERef:SingleVal > 0 ))
         then  CSEinput + FormatNL( "         %s, %s, %s, %s, %s, %s )  // jul-Dec\n",    
                                       SchWeekRef[ 7]:SchDayWERef:CSEinput,  SchWeekRef[ 8]:SchDayWERef:CSEinput,
                                       SchWeekRef[ 9]:SchDayWERef:CSEinput,  SchWeekRef[10]:SchDayWERef:CSEinput,
                                       SchWeekRef[11]:SchDayWERef:CSEinput,  SchWeekRef[12]:SchDayWERef:CSEinput )
         else  CSEinput + FormatNL( "         %s,   // jul\n         %s,   // aug\n         %s,   // sep\n         %s,   // oct\n         %s,   // nov\n         %s )  // dec\n",
                                       SchWeekRef[ 7]:SchDayWERef:CSEinput,  SchWeekRef[ 8]:SchDayWERef:CSEinput,
                                       SchWeekRef[ 9]:SchDayWERef:CSEinput,  SchWeekRef[10]:SchDayWERef:CSEinput,
                                       SchWeekRef[11]:SchDayWERef:CSEinput,  SchWeekRef[12]:SchDayWERef:CSEinput )
         endif  }
   "Set Sch:CSEinput begin WDs"     Sch:CSEinput = {  CSEinput + FormatNL( "       : choose1( $month,    // %s\n", "weekdays" )  }
   "Set Sch:CSEinput WE Jan-Jun"    Sch:CSEinput =
      {  if (IfValidAnd( SchWeekRef[1]:SchDayWDRef:SingleVal > 0 ) .AND. IfValidAnd( SchWeekRef[2]:SchDayWDRef:SingleVal > 0 ) .AND.
             IfValidAnd( SchWeekRef[3]:SchDayWDRef:SingleVal > 0 ) .AND. IfValidAnd( SchWeekRef[4]:SchDayWDRef:SingleVal > 0 ) .AND.
             IfValidAnd( SchWeekRef[5]:SchDayWDRef:SingleVal > 0 ) .AND. IfValidAnd( SchWeekRef[6]:SchDayWDRef:SingleVal > 0 ))
         then  CSEinput + FormatNL( "         %s, %s, %s, %s, %s, %s,   // jan-jun\n",    
                                       SchWeekRef[1]:SchDayWDRef:CSEinput,  SchWeekRef[2]:SchDayWDRef:CSEinput,
                                       SchWeekRef[3]:SchDayWDRef:CSEinput,  SchWeekRef[4]:SchDayWDRef:CSEinput,
                                       SchWeekRef[5]:SchDayWDRef:CSEinput,  SchWeekRef[6]:SchDayWDRef:CSEinput )
         else  CSEinput + FormatNL( "         %s,   // jan\n         %s,   // feb\n         %s,   // mar\n         %s,   // apr\n         %s,   // may\n         %s,   // jun\n",
                                       SchWeekRef[1]:SchDayWDRef:CSEinput,  SchWeekRef[2]:SchDayWDRef:CSEinput,
                                       SchWeekRef[3]:SchDayWDRef:CSEinput,  SchWeekRef[4]:SchDayWDRef:CSEinput,
                                       SchWeekRef[5]:SchDayWDRef:CSEinput,  SchWeekRef[6]:SchDayWDRef:CSEinput )
         endif  }
   "Set Sch:CSEinput WE Jul-Dec"    Sch:CSEinput =
      {  if (IfValidAnd( SchWeekRef[7]:SchDayWDRef:SingleVal > 0 ) .AND. IfValidAnd( SchWeekRef[8]:SchDayWDRef:SingleVal > 0 ) .AND.
             IfValidAnd( SchWeekRef[9]:SchDayWDRef:SingleVal > 0 ) .AND. IfValidAnd( SchWeekRef[10]:SchDayWDRef:SingleVal > 0 ) .AND.
             IfValidAnd( SchWeekRef[11]:SchDayWDRef:SingleVal > 0 ) .AND. IfValidAnd( SchWeekRef[12]:SchDayWDRef:SingleVal > 0 ))
         then  CSEinput + FormatNL( "         %s, %s, %s, %s, %s, %s )  // jul-Dec\n",    
                                       SchWeekRef[ 7]:SchDayWDRef:CSEinput,  SchWeekRef[ 8]:SchDayWDRef:CSEinput,
                                       SchWeekRef[ 9]:SchDayWDRef:CSEinput,  SchWeekRef[10]:SchDayWDRef:CSEinput,
                                       SchWeekRef[11]:SchDayWDRef:CSEinput,  SchWeekRef[12]:SchDayWDRef:CSEinput )
         else  CSEinput + FormatNL( "         %s,   // jul\n         %s,   // aug\n         %s,   // sep\n         %s,   // oct\n         %s,   // nov\n         %s )  // dec",
                                       SchWeekRef[ 7]:SchDayWDRef:CSEinput,  SchWeekRef[ 8]:SchDayWDRef:CSEinput,
                                       SchWeekRef[ 9]:SchDayWDRef:CSEinput,  SchWeekRef[10]:SchDayWDRef:CSEinput,
                                       SchWeekRef[11]:SchDayWDRef:CSEinput,  SchWeekRef[12]:SchDayWDRef:CSEinput )
         endif  }
END
;*************************************************************************


;	RCG 5/31/17 - Force reset Proj:AllOrientations
;*************************************************************************
RULELIST "ForceReset_AllOrientations" 1 0 0 0
;*************************************************************************
	"Reset Proj:AllOrientations"	Proj:AllOrientations	=	{	0	}																												
END
;*************************************************************************


;*************************************************************************
RULELIST "Default_WeatherFileName" 1 0 0 0
  ; SAC 8/29/13 - appended 'b' onto filenames, distinguishing this set (assembled in March 2012) from previous/bogus set
  ; SAC 6/8/19 - added WeatherFileSet to facilitate 2022 research
  ; updated logic for new 2025 WeatherFileSet value of 2520 (to differentiate from 2022) - SAC 02/10/23
   "Set Proj:WeatherFileName"      Proj:WeatherFileName = {
         if (WeatherFileSet < 1)
         then  switch (Global( Proj:ClimateZone ))
                  case   1 :   "CTZ01S13b.CSW"
                  case   2 :   "CTZ02S13b.CSW"
                  case   3 :   "CTZ03S13b.CSW"
                  case   4 :   "CTZ04S13b.CSW"
                  case   5 :   "CTZ05S13b.CSW"
                  case   6 :   "CTZ06S13b.CSW"
                  case   7 :   "CTZ07S13b.CSW"
                  case   8 :   "CTZ08S13b.CSW"
                  case   9 :   "CTZ09S13b.CSW"
                  case  10 :   "CTZ10S13b.CSW"
                  case  11 :   "CTZ11S13b.CSW"
                  case  12 :   "CTZ12S13b.CSW"
                  case  13 :   "CTZ13S13b.CSW"
                  case  14 :   "CTZ14S13b.CSW"
                  case  15 :   "CTZ15S13b.CSW"
                  case  16 :   "CTZ16S13b.CSW"
                  default  :   Format( "<unknown wthr file mapping for Proj:ClimateZone = %.0f>", Global( Proj:ClimateZone ) )
               endswitch
         else  switch (Global( Proj:WeatherFileSet ))
                  case  2207 :  Format( "STYP07\CA_%s_STYP07.epw", T24RCZWeatherMapping:WSta( "EnergyCodeYr", EnergyCodeYearNum, "ClimateZone", ClimateZone ) )
                  case  2212 :  Format( "STYP12\CA_%s_STYP12.epw", T24RCZWeatherMapping:WSta( "EnergyCodeYr", EnergyCodeYearNum, "ClimateZone", ClimateZone ) )
                  case  2220 :  Format( "STYP20\CA_%s_STYP20.epw",           T24RCZWeatherMapping:WSta( "EnergyCodeYr", EnergyCodeYearNum, "ClimateZone", ClimateZone ) )
                  case  2520 :  Format( "2025\USA_CA_%s_TMY_2000-2020K.epw", T24RCZWeatherMapping:WSta( "EnergyCodeYr", EnergyCodeYearNum, "ClimateZone", ClimateZone ) )
                  default    :  Format( "<unknown wthr file mapping for Proj:WeatherFileSet = %.0f>", Global( Proj:ClimateZone ) )
               endswitch
         endif  }
END
;*************************************************************************  SAC 4/22/19
RULELIST "Set_WeatherFileName_ViaKey" 1 0 0 1
   "Set Proj:WeatherFileName to WeatherFileKey"    Proj:WeatherFileName  = {  WeatherFileKey  }
  ; SAC 4/21/19 - added rules to make substitutions based on WeatherFileKey (reserch only)
	"Set Proj:WeatherFileName - substitute [CTZ]"   Proj:WeatherFileName = {
            switch (ClimateZone)
               case   1 :  ReplaceInString( "[CTZ]", "01" )
					case   2 :	ReplaceInString( "[CTZ]", "02" )
					case   3 :	ReplaceInString( "[CTZ]", "03" )
					case   4 :	ReplaceInString( "[CTZ]", "04" )
					case   5 :	ReplaceInString( "[CTZ]", "05" )
					case   6 :	ReplaceInString( "[CTZ]", "06" )
					case   7 :	ReplaceInString( "[CTZ]", "07" )
					case   8 :	ReplaceInString( "[CTZ]", "08" )
					case   9 :	ReplaceInString( "[CTZ]", "09" )
					case  10 :	ReplaceInString( "[CTZ]", "10" )
					case  11 :	ReplaceInString( "[CTZ]", "11" )
					case  12 :	ReplaceInString( "[CTZ]", "12" )
					case  13 :	ReplaceInString( "[CTZ]", "13" )
					case  14 :	ReplaceInString( "[CTZ]", "14" )
					case  15 :	ReplaceInString( "[CTZ]", "15" )
					case  16 :	ReplaceInString( "[CTZ]", "16" )
					default :	UNCHANGED
				endswitch  }
	"Set Proj:WeatherFileRplc[1]"		Proj:WeatherFileRplc[1] = {  T24RCZWeatherMapping:WSta( "EnergyCodeYr", EnergyCodeYearNum, "ClimateZone", ClimateZone )  }
	"Set Proj:WeatherFileName - substitute [WSta]"     Proj:WeatherFileName    = {
            if (LocalStatus( WeatherFileRplc[1] ) > 0)
            then  ReplaceInString( "[WSta]", WeatherFileRplc[1] )
            else  UNCHANGED  endif  }
   "Log message re: weather file being used for analysis"   Proj:Action  =
      {  if (LocalStatus( WeatherFileRplc[1] ) < 1 .OR. RunAbbrev == "u") then  UNCHANGED
         else  PostMessageToLog( "   Simulation weather file (based on WeatherFileKey):  %s", WeatherFileName )  endif  }
END
;*************************************************************************


; SAC 6/28/17 - new rulelist to handle model adjustments immediately following LoadModel (project file open) action
;*************************************************************************
RULELIST "LoadModelAdjustments" 1 0 0 0
;*************************************************************************
   ; added eval of generic SVN & code version rules referenced by subsequent rules... - SAC 3/2/18
	"Set Proj:RuleRepoRev"		                        Proj:Action	= {	EvalRulelist( "Set_RuleRepoRev" )  }
	"Set various Code & Program Version properties"		Proj:Action	= {	EvalRulelist( "Default_CodeVersion" )  }

   "backward compat for EWall Cons:WallExtFinishLayer = 'R4 Synthetic Stucco'"   ; SAC 6/28/17 - (tic #761)
      Cons:Action  = {
         if (CanAssignTo == 0 .AND. WallExtFinishLayer == 100103)      ; ExtWall where WallExtFinishLayer = 'R4 Synthetic Stucco'
         then  if (Type == 0 .OR. Type == 1 .OR. Type == 5)   ; two-path ExtWall
               then  EvalRulelist( "ForceUpdate_Cons_WallExtFinish_2Path_R4Synthetic", 1 )
               else  EvalRulelist( "ForceUpdate_Cons_WallExtFinish_1Path_R4Synthetic", 1 )  endif
         else if ((CanAssignTo == 5 .OR. CanAssignTo == 9) .AND. FlrExtFinishLayer == 100103)   ; ExtFlr where FlrExtFinishLayer = 'R4 Synthetic Stucco'
         then  if (Type == 25) 
               then  EvalRulelist( "ForceUpdate_Cons_FlrExtFinish_1Path_R4Synthetic", 1 )
               else  EvalRulelist( "ForceUpdate_Cons_FlrExtFinish_2Path_R4Synthetic", 1 )  endif
         else  UNCHANGED  endif endif  }

   "backward compat for EWall Cons:CavityLayer = 'R 19' combined with 2x6 framing"   ; SAC 6/28/17 - (tic #761)
      Cons:Action  = {
         if (IfValidAnd( Proj:BEMVersion > 5 ) .OR. LocalStatus( CanAssignTo ) < 1) then  UNCHANGED
         else if ( ( ( (CanAssignTo == 0 .OR. CanAssignTo == 10 .OR. CanAssignTo == 20) .AND. (Type = 0 .OR. Type = 1)) .OR.   ; framed Ext/Int/Und Walls
                     ( (CanAssignTo == 2 .OR. CanAssignTo == 6) .AND. (Type = 10 .OR. Type = 11 .OR. Type = 12)) .OR.      ; framed Cath/Int Ceilings
                     ( (CanAssignTo == 4 .OR. CanAssignTo == 5) .AND. (Type = 20 .OR. Type = 23)) ) .AND.    ; framed Int/Ext Flrs
                   CavityLayer == 19 .AND. FrameLayer >= 600 .AND. FrameLayer <= 699 )
         then  EvalRulelist( "ForceUpdate_Cons_R19_2x6_Compressed", 1 )
         else  UNCHANGED  endif endif  }

   "backward compat for AtticRoof Cons:CavInsulOverFrame to ensure consistency w/ past releases"   ; SAC 7/10/17 - (tic #856)
      Cons:Action  = {
         if (IfValidAnd( Proj:BEMVersion > 5 ) .OR. LocalStatus( CanAssignTo ) < 1) then  UNCHANGED
         else if (CanAssignTo == 1 .AND. LocalStatus( CavInsulOverFrame ) < 7)
         then  EvalRulelist( "ForceUpdate_Cons_CavInsulOverFrame_On", 1 )
         else  UNCHANGED  endif endif  }

   "reset Attic:Status of 'Altered Roof Surface' to Altered for 2022+ analysis"     Attic:Action =    ; SAC 01/09/23 (tic #1302)
      {  if (IfValidAnd( Proj:EnergyCodeYearNum	>= 2022 ) && Status == 4)
         then  EvalRulelist( "ForceUpdate_Attic_Status_AlteredRoofSurface", 1 )
         else  UNCHANGED  endif  }

   "Delete Mat objects with invalid ConductivityQII (=0)"   ; SAC 10/11/17 - prune invalid Mat objects related to addition of compressed insulation Cons layers (tic #902)
      Mat:Action  = {
         if (IfValidAnd( ConductivityQII = 0 )) then  DeleteComp()
         else  UNCHANGED  endif  }

;"dbg" Proj:Action = { MessageBox( "Proj:EnergyCodeYearNum status = %g, Proj:BEMVersion status = %g", GlobalStatus( Proj:EnergyCodeYearNum ), GlobalStatus( Proj:BEMVersion ) ) }
   "Address re-characterization of DHWHeater:TankType 'Consumer Instantaneous (UEF)-New' -> 'Consumer Instantaneous (UEF)'"  ; SAC 3/1/18 (tic #993)
      DHWHeater:Action  = {
         if (HeaterElementType == 1 .AND. TankType == 10 .AND. IfValidAnd( Proj:EnergyCodeYearNum >= 2019 ) .AND.
             IfValidAnd( Proj:BEMVersion >= 7 )==0 .AND. LocalStatus( InputRating ) > 6)
         then  EvalRulelist( "GasDHWHeater_ConvertToNew_ConsumerInstantaneousUEF", 1 )
         else  UNCHANGED  endif  }

   "Transform old DHWSys:RecircPumpHP & Eff to roughly consistent RecircPumpPwr"    DHWSys:Action  =     ; SAC 2/11/20 (tic #862)
      {  if (LocalStatus( RecircPumpHP ) > 0 .OR. LocalStatus( RecircPumpEff ) > 0)
         then  EvalRulelist( "TransformOld_DHWSys_RecircPump", 1 )
         else  UNCHANGED  endif  }

   "Force Setting of new DHWSys:CentralRecircType based on prior CentralDHW & MFamDistType inputs"    DHWSys:Action =      ; SAC 02/13/21 (tic #1260 & #1220)
      {  if (IfValidAnd( Proj:AnalysisVersion >= 190200 ) .AND.
             (LocalStatus( CentralDHW ) > 5 .OR. LocalStatus( MFamDistType ) > 5))
         then  EvalRulelist( "Switch_DHWSys_CentralDHW_MFamDistType_to_CentralRecircType", 1 ) 
         else  UNCHANGED endif  }

   "Warn user of change to 'Advanced DR Control' BatteryControl simulation mechanism"  Proj:Action =        ; SAC 03/30/21 (tic #1266)
      {  if (IfValidAnd( Proj:BEMVersion <= 8 ) .AND. IfValidAnd( BattMaxCap > 0 ) .AND. BatteryControl == 101)
         then  PostWarning( "Expect differences in analysis results due to 'Advanced DR Control' battery simulation updated to new algorithm that better adapts to variations in TDV data." )
         else  UNCHANGED  endif  }

   "Hardwire Proj:SFamCDSpecFixDists for old SFam models w/ compact distribution"         Proj:Action =              ; SAC 09/29/21 (tic #1277)
      {  if (IfValidAnd( Proj:BEMVersion <= 9 ) .AND. IfValidAnd( IsMultiFamily > 0 )==0 .AND.
             SFamCompactDistrib > 0 .AND. IfValidAnd( SFamUserSpecCmpctDist > 0 )==0)
         then  EvalRulelist( "TransformOld_Proj_SFamCDSpecFixDists" )
         else  UNCHANGED  endif  }
   "Hardwire DwellUnitType:CDSpecFixDists for old MFam models w/ compact distribution"    DwellUnitType:Action =     ; SAC 09/29/21 (tic #1277)
      {  if (IfValidAnd( Proj:BEMVersion <= 9 ) .AND. IfValidAnd( Proj:IsMultiFamily > 0 ) .AND.
             CompactDistrib > 0 .AND. IfValidAnd( UsrSpecCmpctDist > 0 )==0)
         then  EvalRulelist( "TransformOld_DwellUnitType_CDSpecFixDists", 1 )
         else  UNCHANGED  endif  }

   "Hardwire HVACCool:EffMetric for old models"    HVACCool:Action =       ; SAC 08/30/22 (tic #1331)
      {  if (IfValidAnd( Proj:BEMVersion <= 10 ) .AND. LocalStatus( EffMetric ) < 5)
         then  EvalRulelist( "TransformOld_HVACCool_EffMetric", 1 )
         else  UNCHANGED  endif  }
   "Hardwire HVACHtPump:EffMetric for old models"  HVACHtPump:Action = 
      {  if (IfValidAnd( Proj:BEMVersion <= 10 ) .AND. LocalStatus( EffMetric ) < 5)
         then  EvalRulelist( "TransformOld_HVACHtPump_EffMetric", 1 )
         else  UNCHANGED  endif  }

   "Store combined PV+Battery results to special EUseSummary array for display in 2025+ UI"     Proj:Action =     ; SAC 06/07/23
      {  if (EnergyCodeYearNum >= 2025 .AND.
             SumAcrossIf( EUseSummary:PropElecCarbon[1], EUseSummary:ResultsAnalysisVer < 250003 ) > 0)
         then  EvalRulelist( "EUseSummary_CombinePVBatteryResults" )
         else  UNCHANGED  endif  }

; removed forced IAQFan power defaulting in latest round of 19.2.0 mods - SAC 7/20/20 (tic #1174)
;   "Force new default IAQFan:WperCFMIAQ values (of 0.25) to allow new SFam/MFam inputs to be used"    IAQFan:Action  =     ; SAC 2/12/20 (tic #1174)
;      {  if (IfValidAnd( WperCFMIAQ = 0.25 ) .AND. IfValidAnd( Proj:AnalysisVersion >= 190200 ) .AND.
;             IfValidAnd( Proj:BEMVersion > 1 ) .AND. IfValidAnd( Proj:BEMVersion < 8 ))
;         then  EvalRulelist( "ForceNewDefault_IAQFan_WperCFMIAQ", 1 )
;         else  UNCHANGED  endif  }

;   "TESTING new Psych_HAProps() function"    Proj:Action =        ; SAC 05/26/21
;      {  EvalRulelist( "Test_Psych_HAProps" )  }
END
;*************************************************************************


; rulelist to handle model adjustments immediately following LoadModel (project file open) action - but only for projects loaded into CBECC UI - SAC 07/21/21
;*************************************************************************
RULELIST "CBECCInterfacePrep" 1 0 0 0
;*************************************************************************
   "blast Zone:DHWSys2, AltDHWSys2 or exDHWSys2 assignment if present (starting in v2019.2.0)"     Zone:Action =
      {  if (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .OR.
             IfValidAnd( Proj:IsMultiFamily > 0.5 )) then  UNCHANGED
         else if (DHWSys2Status == 3 .AND. LocalCompAssigned(    DHWSys2 ) > 0)  ;  New
         then  EvalRulelist( "Blast_Zone_DHWSys2", 1 )
         else if (DHWSys2Status == 2 .AND. LocalCompAssigned( AltDHWSys2 ) > 0)  ;  Altered
         then  EvalRulelist( "Blast_Zone_AltDHWSys2", 1 )
         else if (DHWSys2Status == 1 .AND. LocalCompAssigned(  exDHWSys2 ) > 0)  ;  Existing
         then  EvalRulelist( "Blast_Zone_exDHWSys2", 1 )
         else  UNCHANGED  endif endif endif endif  }
END
;*************************************************************************

;************************************************************************* SAC 07/05/23 (tic #1351)
RULELIST "Blast_Proj_NoDwellingUnit" 1 0 0 1
   "blast Proj:NoDwellingUnit"      Proj:NoDwellingUnit = {  UNDEFINED  }
END
;*************************************************************************

;*************************************************************************
RULELIST "Blast_Zone_DHWSys2" 1 0 0 0
   "post warning to log"      Zone:Action     = {  PostWarning( "Removing assignment of new DHWSys #2 '%s' from zone '%s':  multiple DHW system assignments per zone no longer allowed in compliance analysis.", DHWSys2:Name, Name )  }
   "blast Zone:DHWSys2"       Zone:DHWSys2    = {  UNDEFINED  }
END
;*************************************************************************
RULELIST "Blast_Zone_AltDHWSys2" 1 0 0 0
   "post warning to log"      Zone:Action     = {  PostWarning( "Removing assignment of altered DHWSys #2 '%s' from zone '%s':  multiple DHW system assignments per zone no longer allowed in compliance analysis.", AltDHWSys2:Name, Name )  }
   "blast Zone:AltDHWSys2"    Zone:AltDHWSys2 = {  UNDEFINED  }
END
;*************************************************************************
RULELIST "Blast_Zone_exDHWSys2" 1 0 0 0
   "post warning to log"      Zone:Action     = {  PostWarning( "Removing assignment of existing DHWSys #2 '%s' from zone '%s':  multiple DHW system assignments per zone no longer allowed in compliance analysis.", exDHWSys2:Name, Name )  }
   "blast Zone:exDHWSys2"     Zone:exDHWSys2  = {  UNDEFINED  }
END
;*************************************************************************


;*************************************************************************
RULELIST "ForceDefault_CodeVersion_RptGenUI" 1 0 0 0
;*************************************************************************
	"Blast Proj:RptGenUIVer"     	Proj:RptGenUIVer     	= {	UNDEFINED  }
	"Blast Proj:RptGenUIApp"     	Proj:RptGenUIApp     	= {	UNDEFINED  }
   "Redefault RptGenUI properties"  Proj:Action  = {  EvalRulelist( "Default_CodeVersion_RptGenUI" )  }
END
;*************************************************************************


;************************************************************************* SAC 01/09/23 (tic #1302)
RULELIST "ForceUpdate_Attic_Status_AlteredRoofSurface" 1 0 1 0
   "post message to log if pertinent"  Attic:Action =
      {  if (Proj:RunScope == 2 .OR. (Proj:RunScope == 1 .AND. IfValidAnd( Proj:IsAddAlone > 0.5 )))
         then  PostMessageToLog( "Warning:  Attic '%s' Status updated from 'Altered Roof Surface' to 'Altered' due to code changes starting in 2022.", Name )
         else  UNCHANGED  endif  }
   "force Attic:Status to Altered"    Attic:Status = {  "Altered"  }
END
;*************************************************************************


;*************************************************************************
RULELIST "ForceDefault_TDVType_Std" 1 0 0 0
   "Redefault Proj:TDVType to std set"  Proj:TDVType  = {  1  }  ; => "TDV"
END
;*************************************************************************
RULELIST "ForceDefault_TDVType_CALGreen" 1 0 0 0
   "Redefault Proj:TDVType to CALGreen selection"  Proj:TDVType  = {  4  }  ; => "High-RESOLVE 30 MMT"
END
;*************************************************************************


;************************************************************************* SAC 08/31/22 (tic #1338)
RULELIST "ForceDefault_Proj_WeatherStation" 1 0 0 0
   "Set Proj:WeatherStation"     Proj:WeatherStation =
      {  switch (ClimateZone)
            case   1 :  109    ;  "CZ1  (Arcata)"        -> "CALIFORNIA REDWOOD COAST"
            case   2 :  185    ;  "CZ2  (Santa Rosa)"    -> "SONOMA COUNTY AP"
            case   3 :  152    ;  "CZ3  (Oakland)"       -> "OAKLAND INTL"
            case   4 :  174    ;  "CZ4  (San Jose)"      -> "SAN JOSE INTL"
            case   5 :  182    ;  "CZ5  (Santa Maria)"   -> "SANTA MARIA"
            case   6 :  187    ;  "CZ6  (Torrance)"      -> "TORRANCE-MUNI-AP"
            case   7 :  172    ;  "CZ7  (San Diego)"     -> "SAN DIEGO INTL"
            case   8 :  122    ;  "CZ8  (Fullerton)"     -> "FULLERTON"
            case   9 :  125    ;  "CZ9  (Burbank)"       -> "HOLLYWOOD BURBANK"
            case  10 :  166    ;  "CZ10  (Riverside)"    -> "RIVERSIDE"
            case  11 :  164    ;  "CZ11  (Red Bluff)"    -> "RED BLUFF"
            case  12 :  167    ;  "CZ12  (Sacramento)"   -> "SACRAMENTO EXECUTIVE"
            case  13 :  121    ;  "CZ13  (Fresno)"       -> "FRESNO YOSEMITE"
            case  14 :  158    ;  "CZ14  (Palmdale)"     -> "PALMDALE"
            case  15 :  157    ;  "CZ15  (Palm Springs)" -> "PALM SPRINGS"
            case  16 :  105    ;  "CZ16  (Blue Canyon)"  -> "BLUE CANYON"
            default  :  UNCHANGED
         endswitch  }
END
;*************************************************************************


;*************************************************************************  ; SAC 2/7/18 - Force reset of SpecifyTargetDRtg when Reduced PV Requirement specified (tic #974)
RULELIST "ForceOff_SpecifyTargetDRtg" 1 0 0 0
   "Redefault Proj:SpecifyTargetDRtg"  Proj:SpecifyTargetDRtg  = {  0  }
END
;*************************************************************************


;*************************************************************************  ; SAC 5/10/19
RULELIST "Blast_HtPump_AutoSize_NoResets" 1 0 0 1
   "post message regarding reset"  HVACHtPump:Action  = {
         PostMessageToLog( "Removing specification of HVACHtPump '%s' AutoSize due to EnableHPAutosize being deactivated.", Name )  }     ; SAC 6/21/19
   "Blast HVACHtPump:AutoSize"  HVACHtPump:AutoSize  = {  0  }
END
;*************************************************************************


;************************************************************************* SAC 2/3/20 (tic #1198)
RULELIST  "Blast_DwellUnitType_DHWSolFrac"  1 0 0 1
; bail on reporting warning here - don't know @ this point if the solar fracs are actually used (requires HVAC sys that also serves as wtr htr)
;   "Post message to log if inputs being removed would have impacted analysis"   DwellUnitType:Action  =
;      {  if (HtEqpUsedAsDHWHtr > 0 .AND. DHWSolFracType == 1 .AND. IfValidAnd( DHWSolFracAnn > 0 ))
;         then  PostWarning( "DwellUnitType '%s' includes annual solar fraction inputs that are no longer supported (and are being removed from the model).", Name )
;         else if (DHWSolFracType == 2 .AND. ( IfValidAnd( DHWSolFracMon[1]  > 0 ) .OR. IfValidAnd( DHWSolFracMon[2]  > 0 ) .OR. IfValidAnd( DHWSolFracMon[3]  > 0 ) .OR.
;                                              IfValidAnd( DHWSolFracMon[4]  > 0 ) .OR. IfValidAnd( DHWSolFracMon[5]  > 0 ) .OR. IfValidAnd( DHWSolFracMon[6]  > 0 ) .OR.
;                                              IfValidAnd( DHWSolFracMon[7]  > 0 ) .OR. IfValidAnd( DHWSolFracMon[8]  > 0 ) .OR. IfValidAnd( DHWSolFracMon[9]  > 0 ) .OR.
;                                              IfValidAnd( DHWSolFracMon[10] > 0 ) .OR. IfValidAnd( DHWSolFracMon[11] > 0 ) .OR. IfValidAnd( DHWSolFracMon[12] > 0 ) ))
;         then  
;         else  UNCHANGED  endif endif  }
   "Blast DwellUnitType:DHWSolFracType"       DwellUnitType:DHWSolFracType    = {  0  }
   "Blast DwellUnitType:DHWSolFracAnn"        DwellUnitType:DHWSolFracAnn     = {  UNDEFINED  }
   "Blast DwellUnitType:DHWSolFracMon[1]"     DwellUnitType:DHWSolFracMon[1]  = {  UNDEFINED  }
   "Blast DwellUnitType:DHWSolFracMon[2]"     DwellUnitType:DHWSolFracMon[2]  = {  UNDEFINED  }
   "Blast DwellUnitType:DHWSolFracMon[3]"     DwellUnitType:DHWSolFracMon[3]  = {  UNDEFINED  }
   "Blast DwellUnitType:DHWSolFracMon[4]"     DwellUnitType:DHWSolFracMon[4]  = {  UNDEFINED  }
   "Blast DwellUnitType:DHWSolFracMon[5]"     DwellUnitType:DHWSolFracMon[5]  = {  UNDEFINED  }
   "Blast DwellUnitType:DHWSolFracMon[6]"     DwellUnitType:DHWSolFracMon[6]  = {  UNDEFINED  }
   "Blast DwellUnitType:DHWSolFracMon[7]"     DwellUnitType:DHWSolFracMon[7]  = {  UNDEFINED  }
   "Blast DwellUnitType:DHWSolFracMon[8]"     DwellUnitType:DHWSolFracMon[8]  = {  UNDEFINED  }
   "Blast DwellUnitType:DHWSolFracMon[9]"     DwellUnitType:DHWSolFracMon[9]  = {  UNDEFINED  }
   "Blast DwellUnitType:DHWSolFracMon[10]"    DwellUnitType:DHWSolFracMon[10] = {  UNDEFINED  }
   "Blast DwellUnitType:DHWSolFracMon[11]"    DwellUnitType:DHWSolFracMon[11] = {  UNDEFINED  }
   "Blast DwellUnitType:DHWSolFracMon[12]"    DwellUnitType:DHWSolFracMon[12] = {  UNDEFINED  }
END
;*************************************************************************

;************************************************************************* SAC 2/3/20 (tic #1198)
RULELIST  "Blast_DHWSys_DHWSolFrac"  1 0 0 1
   "Post message to log if inputs being removed would have impacted analysis"   DHWSys:Action  =
      {  if (SolFracType == 1 .AND. IfValidAnd( SolFracAnn > 0 ))
         then  PostWarning( "DHWSys '%s' includes annual solar fraction inputs that are no longer supported (and are being removed). Assign a DHWSolarSys to this DHWSys to achieve solar savings.", Name )
         else if (SolFracType == 2 .AND. ( IfValidAnd( SolFracMon[1]  > 0 ) .OR. IfValidAnd( SolFracMon[2]  > 0 ) .OR. IfValidAnd( SolFracMon[3]  > 0 ) .OR.
                                           IfValidAnd( SolFracMon[4]  > 0 ) .OR. IfValidAnd( SolFracMon[5]  > 0 ) .OR. IfValidAnd( SolFracMon[6]  > 0 ) .OR.
                                           IfValidAnd( SolFracMon[7]  > 0 ) .OR. IfValidAnd( SolFracMon[8]  > 0 ) .OR. IfValidAnd( SolFracMon[9]  > 0 ) .OR.
                                           IfValidAnd( SolFracMon[10] > 0 ) .OR. IfValidAnd( SolFracMon[11] > 0 ) .OR. IfValidAnd( SolFracMon[12] > 0 ) ))
         then  PostWarning( "DHWSys '%s' includes monthly solar fraction inputs that are no longer supported (and are being removed). Assign a DHWSolarSys to this DHWSys to achieve solar savings.", Name )
         else  UNCHANGED  endif endif  }
   "Blast DHWSys:SolFracType"       DHWSys:SolFracType    = {  0  }
   "Blast DHWSys:SolFracAnn"        DHWSys:SolFracAnn     = {  UNDEFINED  }
   "Blast DHWSys:SolFracMon[1]"     DHWSys:SolFracMon[1]  = {  UNDEFINED  }
   "Blast DHWSys:SolFracMon[2]"     DHWSys:SolFracMon[2]  = {  UNDEFINED  }
   "Blast DHWSys:SolFracMon[3]"     DHWSys:SolFracMon[3]  = {  UNDEFINED  }
   "Blast DHWSys:SolFracMon[4]"     DHWSys:SolFracMon[4]  = {  UNDEFINED  }
   "Blast DHWSys:SolFracMon[5]"     DHWSys:SolFracMon[5]  = {  UNDEFINED  }
   "Blast DHWSys:SolFracMon[6]"     DHWSys:SolFracMon[6]  = {  UNDEFINED  }
   "Blast DHWSys:SolFracMon[7]"     DHWSys:SolFracMon[7]  = {  UNDEFINED  }
   "Blast DHWSys:SolFracMon[8]"     DHWSys:SolFracMon[8]  = {  UNDEFINED  }
   "Blast DHWSys:SolFracMon[9]"     DHWSys:SolFracMon[9]  = {  UNDEFINED  }
   "Blast DHWSys:SolFracMon[10]"    DHWSys:SolFracMon[10] = {  UNDEFINED  }
   "Blast DHWSys:SolFracMon[11]"    DHWSys:SolFracMon[11] = {  UNDEFINED  }
   "Blast DHWSys:SolFracMon[12]"    DHWSys:SolFracMon[12] = {  UNDEFINED  }
END
;*************************************************************************

;************************************************************************* SAC 2/11/20 (tic #862)
RULELIST  "TransformOld_DHWSys_RecircPump"  1 0 1 1

   "Post transform message to project log"   DHWSys:Action  =
      {  if (LocalStatus( RecircPumpPwr ) > 4) then  UNCHANGED   ; no msg or transform if RecircPumpPwr already user-specified
         else if (IfValidAnd( RecircPumpHP = 0.5 ) .AND. IfValidAnd( RecircPumpEff = 0.6 ))  ; old oversized defaults not overridden by user
         then  PostMessageToLog( "DHWSys '%s' updated to replace recirculation pump HP & Efficiency with new Power (W) input of equivalent electric use. Recommend review of pump power as old defaults were found to be substantially too large.", Name )
         else  PostMessageToLog( "DHWSys '%s' updated to replace recirculation pump HP & Efficiency with new Power (W) input of equivalent electric use.", Name )
         endif endif  }

   "Transform DHWSys:RecircPumpHP & RecircPumpEff into RecircPumpPwr Iif not already user-defined)"    DHWSys:RecircPumpPwr  =
      {  if (LocalStatus( RecircPumpPwr ) > 4 .OR. IfValidAnd( RecircPumpHP > 0 )==0 .OR.
             IfValidAnd( RecircPumpEff > 0 )==0)
         then  UNCHANGED
         else  746 * RecircPumpHP / RecircPumpEff
         endif  }

   "Blast DHWSys:RecircPumpHP"      DHWSys:RecircPumpHP   = {  UNDEFINED  }
   "Blast DHWSys:RecircPumpEff"     DHWSys:RecircPumpEff  = {  UNDEFINED  }
END
;*************************************************************************

;************************************************************************* SAC 09/29/21 (tic #1277)
RULELIST  "TransformOld_Proj_SFamCDSpecFixDists"  1 0 1 1
   "Hardwire Proj:SFamCDSpecFixDists to 1 for old models"   Proj:SFamCDSpecFixDists = {  1  }
END
;************************************************************************* SAC 09/29/21 (tic #1277)
RULELIST  "TransformOld_DwellUnitType_CDSpecFixDists"  1 0 1 1
   "Hardwire DwellUnitType:CDSpecFixDists to 1 for old models"    DwellUnitType:CDSpecFixDists = {  1  }
END
;*************************************************************************

;************************************************************************* SAC 08/30/22 (tic #1331)
RULELIST  "TransformOld_HVACCool_EffMetric"  1 0 1 1
   "Hardwire HVACCool:EffMetric to old metrics for old models"    HVACCool:EffMetric = {  1  }
END
;*************************************************************************
RULELIST  "TransformOld_HVACHtPump_EffMetric"  1 0 1 1
   "Hardwire HVACHtPump:EffMetric to old metrics for old models"  HVACHtPump:EffMetric = {  1  }
END
;*************************************************************************


; removed forced IAQFan power defaulting in latest round of 19.2.0 mods - SAC 7/20/20 (tic #1174)
;;************************************************************************* SAC 2/12/20 (tic #1174)
;RULELIST  "ForceNewDefault_IAQFan_WperCFMIAQ"  1 0 0 1
;   "Default IAQFan:WperCFMIAQ"		IAQFan:WperCFMIAQ     =
;      {  if (IfValidAnd( Proj:IsMultiFamily > 0 ))
;         then  0.6
;         else  0.3  endif  }
;   "Post ForceNewDefault_IAQFan_WperCFMIAQ message to project log"   IAQFan:Action  =
;      {  PostMessageToLog( "IAQFan '%s' updated to replace old program default of 0.25 W/CFM w/ new default of %g.", Name, WperCFMIAQ )  }
;END
;;*************************************************************************

;************************************************************************* SAC 6/11/20 (CommunitySolar)
RULELIST  "ConfirmAnalysisOptions_UI"  1 0 0 1
   "Set Proj:ConfirmAnalOpts - flag determining whether or not to display the Analysis Options confirmation dialog in the UI"   Proj:ConfirmAnalOpts =
      {  if (IfValidAnd( PVWDCSysTotal > 0 ))
         then  if (IfValidAnd( CommunitySolarProjID > 0 ))
               then  0    ; DON'T confirm for Community Solar models
               else if ( (IfValidAnd( SpecifyTargetDRtg > 0 )    .AND. IfValidAnd( TargetDesignRtgInp > -200 )) .OR.
                         (IfValidAnd( SpecifyTargetDRtg > 0 )==0 .AND. IfValidAnd( PVSizeOption > 0 )) )
               then  1
               else  0  endif endif
         else  0  endif  }
   "Set Proj:ConfirmAnalOptsID"     Proj:ConfirmAnalOptsID  = {  186  }
   "Set Proj:ConfirmAnalOptsHt"     Proj:ConfirmAnalOptsHt  = {  280  }
   "Set Proj:ConfirmAnalOptsWd"     Proj:ConfirmAnalOptsWd  = {  500  }
END
;*************************************************************************

;************************************************************************* SAC 6/18/20 (2022AllElecStd)
RULELIST  "Force_StdDesignFuel_AllElectric"  1 0 1 1
   "Hardwire Proj:StdDesignFuel to 'Force All Electric'"    Proj:StdDesignFuel = {  1  }
   "Blast Proj:AllElecStdDesign"    Proj:AllElecStdDesign = {  UNDEFINED  }
END
; ;************************************************************************* SAC 12/29/21 (MxdFuel)
; RULELIST  "Force_StdDesignFuel_MixedFuel"  1 0 1 1
;    "Set Proj:StdDesignFuel_Ckg"     Proj:StdDesignFuel_Ckg  = {  "Gas"  }
;    "Set Proj:StdDesignFuel_Dry"     Proj:StdDesignFuel_Dry  = {  "Gas"  }
;    "Set Proj:StdDesignFuel_HVAC"    Proj:StdDesignFuel_HVAC = {  "Gas"  }
;    "Set Proj:StdDesignFuel_DHW"     Proj:StdDesignFuel_DHW  = {  "Gas"  }
; 
;    "Set Proj:StdDesignCompactDistrib"     Proj:StdDesignCompactDistrib  = {  0  }
;    "Set Proj:StdDesignCompactDistVal"     Proj:StdDesignCompactDistVal  = {  UNDEFINED  }
; 
;    "Set Proj:StdDesignDrnWtrHtRecov"      Proj:StdDesignDrnWtrHtRecov   = {  0  }
;    "Set Proj:StdDesignHPWHLocOverride"    Proj:StdDesignHPWHLocOverride = {  0  }
;    "Set Proj:StdDesignWinPerfAdjust"      Proj:StdDesignWinPerfAdjust   = {  0  }
; 
; ; no IAQ changes (??)
; ;   "Set Proj:StdDesignIAQType[1]"         Proj:StdDesignIAQType[1]  =  
; ;   "Set Proj:StdDesignIAQFanPwr[1]"       Proj:StdDesignIAQFanPwr[1]  =
; ;   "Set Proj:StdIAQHtRec_SRE[1]"          Proj:StdIAQHtRec_SRE[1]  =
; ;   "Set Proj:StdIAQHtRec_ASRE[1]"         Proj:StdIAQHtRec_ASRE[1]  =
; END
;************************************************************************* SAC 6/18/20 (2022AllElecStd)
RULELIST  "Force_StdDesignFuel_2022Final"  1 0 1 1
   ; expanded T24RCustomStandardDesign look-ups to include Proj:IsAddAlone - SAC 10/03/22 (tic #1295)   - ABORTED addition of Proj:IsAddAlone - SAC 10/03/22 (tic #1295)
   "Set Proj:StdDesignFuel_Ckg"     Proj:StdDesignFuel_Ckg =
      {  T24RCustomStandardDesign:Cooking( "StdOption", EnumString( StdDesignFuel ), "BldgType", Proj:BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone )  }
   "Set Proj:StdDesignFuel_Dry"     Proj:StdDesignFuel_Dry = 
      {  T24RCustomStandardDesign:Dryer(   "StdOption", EnumString( StdDesignFuel ), "BldgType", Proj:BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone )  }
   "Set Proj:StdDesignFuel_HVAC"    Proj:StdDesignFuel_HVAC =
      {  T24RCustomStandardDesign:HVAC(    "StdOption", EnumString( StdDesignFuel ), "BldgType", Proj:BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone )  }
   "Set Proj:StdDesignFuel_DHW"     Proj:StdDesignFuel_DHW = 
      {  T24RCustomStandardDesign:DHW(     "StdOption", EnumString( StdDesignFuel ), "BldgType", Proj:BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone )  }

   "Set Proj:StdDesignCompactDistrib"     Proj:StdDesignCompactDistrib  = 
      {  switch (T24RCustomStandardDesign:CompactDHW( "StdOption", EnumString( StdDesignFuel ), "BldgType", Proj:BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone ))
            case   0 :  0
            default  :  1
         endswitch  }
   "Set Proj:StdDesignCompactDistVal"     Proj:StdDesignCompactDistVal  = 
      {  if (StdDesignCompactDistrib == 0) then  UNDEFINED
         else if (T24RCustomStandardDesign:CompactDHW( "StdOption", EnumString( StdDesignFuel ), "BldgType", Proj:BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone ) == -1)
         then  T24RClimateZoneCodeBase:ElecDHWCompactFactor( "ClimateZone", ClimateZone, "CodeBase", 2019, "BldgType", BldgTypeTblStr )
         else  T24RCustomStandardDesign:CompactDHW( "StdOption", EnumString( StdDesignFuel ), "BldgType", Proj:BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone )
         endif endif  }

   "Set Proj:StdDesignDrnWtrHtRecov"      Proj:StdDesignDrnWtrHtRecov   =
      {  T24RCustomStandardDesign:DrnWtrHtRec( "StdOption", EnumString( StdDesignFuel ), "BldgType", Proj:BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone )  }
   "Set Proj:StdDesignHPWHLocOverride"    Proj:StdDesignHPWHLocOverride =
      {  T24RCustomStandardDesign:HPWHLoc(     "StdOption", EnumString( StdDesignFuel ), "BldgType", Proj:BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone )  }
   "Set Proj:StdDesignWinPerfAdjust"      Proj:StdDesignWinPerfAdjust   =
      {  T24RCustomStandardDesign:WindowPerf(  "StdOption", EnumString( StdDesignFuel ), "BldgType", Proj:BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone )  }

   "Set Proj:StdDesignIAQType[1]"         Proj:StdDesignIAQType[1]  =            ; SAC 04/02/21   ; MostUserDUIAQ_Exhaust - SAC 04/03/21
      {  if (  (IfValidAnd( MostUserDUIAQ_Exhaust > 0 ) .OR. IfValidAnd( IAQSupInletsAccessible > 0 )) .AND.
               T24RCustomStandardDesign:IAQType(        "StdOption", EnumString( StdDesignFuel ), "BldgType", Proj:BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone ) != "default")
         then  T24RCustomStandardDesign:IAQType(        "StdOption", EnumString( StdDesignFuel ), "BldgType", Proj:BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone )
         else if (LocalStatus( StdDesignIAQType[1] ) > 4)
         then  UNCHANGED  else  UNDEFINED  endif endif  }
   "Set Proj:StdDesignIAQFanPwr[1]"       Proj:StdDesignIAQFanPwr[1]  =
      {  if (  (IfValidAnd( MostUserDUIAQ_Exhaust > 0 ) .OR. IfValidAnd( IAQSupInletsAccessible > 0 )) .AND.
               T24RCustomStandardDesign:IAQFanPwr(      "StdOption", EnumString( StdDesignFuel ), "BldgType", Proj:BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone ) > 0)
         then  T24RCustomStandardDesign:IAQFanPwr(      "StdOption", EnumString( StdDesignFuel ), "BldgType", Proj:BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone )
         else  UNDEFINED  endif  }
   "Set Proj:StdIAQHtRec_SRE[1]"          Proj:StdIAQHtRec_SRE[1]  =
      {  if (  (IfValidAnd( MostUserDUIAQ_Exhaust > 0 ) .OR. IfValidAnd( IAQSupInletsAccessible > 0 )) .AND.
               T24RCustomStandardDesign:IAQHtRecovSRE(  "StdOption", EnumString( StdDesignFuel ), "BldgType", Proj:BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone ) > 0)
         then  T24RCustomStandardDesign:IAQHtRecovSRE(  "StdOption", EnumString( StdDesignFuel ), "BldgType", Proj:BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone )
         else if (LocalStatus( StdIAQHtRec_SRE[1] ) > 4)
         then  UNCHANGED  else  UNDEFINED  endif endif  }
   "Set Proj:StdIAQHtRec_ASRE[1]"         Proj:StdIAQHtRec_ASRE[1]  =
      {  if (  (IfValidAnd( MostUserDUIAQ_Exhaust > 0 ) .OR. IfValidAnd( IAQSupInletsAccessible > 0 )) .AND.
               T24RCustomStandardDesign:IAQHtRecovASRE( "StdOption", EnumString( StdDesignFuel ), "BldgType", Proj:BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone ) > 0)
         then  T24RCustomStandardDesign:IAQHtRecovASRE( "StdOption", EnumString( StdDesignFuel ), "BldgType", Proj:BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone )
         else if (LocalStatus( StdIAQHtRec_ASRE[1] ) > 4)
         then  UNCHANGED  else  UNDEFINED  endif endif  }
END
;*************************************************************************
RULELIST  "Force_DRtgDesignFuel_2022Final"  1 0 1 1
   ; revised each setting to be 'Proposed' for MFam models - SAC 04/08/21
   "Set Proj:DRtgDesignFuel_Ckg"    Proj:DRtgDesignFuel_Ckg  =
      {  if (IsMultiFamily) then  "Proposed"  else  "Gas"  endif  }
   "Set Proj:DRtgDesignFuel_Dry"    Proj:DRtgDesignFuel_Dry  =
      {  if (IsMultiFamily) then  "Proposed"  else  "Gas"  endif  }
   "Set Proj:DRtgDesignFuel_HVAC"   Proj:DRtgDesignFuel_HVAC =
      {  if (IsMultiFamily) then  "Proposed"  else  "Gas"  endif  }
   "Set Proj:DRtgDesignFuel_DHW"    Proj:DRtgDesignFuel_DHW  =
      {  if (IsMultiFamily) then  "Proposed"  else  "Gas"  endif  }
END
;*************************************************************************

;************************************************************************* SAC 03/30/21 (tic #1266)
RULELIST  "Blast_Proj_BattDRNumRankedDays"  1 0 0 0
   "Blast Proj:BattDRNumRankedDays"    Proj:BattDRNumRankedDays  = {  UNDEFINED  }
END
;*************************************************************************

;************************************************************************* SAC 10/10/23 (2025)
RULELIST  "Force_Proj_SimStandaloneBatt"  1 0 0 0
   "post message to log re: prevent standalone batt"  Proj:Action   = {  PostMessageToLog( "Toggling off Standalone Battery for 2025 research analysis" )  }
   "force Proj:SimStandaloneBatt off"        Proj:SimStandaloneBatt = {  0  }
END
;************************************************************************* SAC 08/02/23 (2025)
RULELIST  "Force_Proj_BatteryControlToBasic"  1 0 0 0
   "post message to log re: forcing batt ctrl to Basic" Proj:Action = { PostMessageToLog( "Switching Battery Control from '%s' to 'Basic' for 2025 research analysis", EnumString( BatteryControl ) ) }
   "force Proj:BatteryControl to Basic"   Proj:BatteryControl = {  1  }
END
;************************************************************************* SAC 10/10/23 (2025)
RULELIST  "Blast_Proj_BattGridHarmCredit"  1 0 0 0
   "post message to log re: removal of user toggling off self utilization credit"   Proj:Action = { PostMessageToLog( "Removing user setting toggling off self utilization credit" ) }
   "blast Proj:BattGridHarmCredit"     Proj:BattGridHarmCredit = {  UNDEFINED  }
END
;*************************************************************************

;************************************************************************* SAC 08/08/23 (2025)
RULELIST  "Blast_Proj_StdPeakCoolElecLimitMult"  1 0 0 0
   "Blast Proj:StdPeakCoolElecLimitMult"    Proj:StdPeakCoolElecLimitMult  = {  UNDEFINED  }
END
;*************************************************************************


;************************************************************************* SAC 05/26/21
RULELIST  "Test_Psych_HAProps"  1 0 0 0
   " " Proj:Action = { PostMessageToLog( "Testing Psych_HAProps function:" ) }
   " " Proj:Action = { PostMessageToLog( "   Psych_HAProps(    DPT, DBT, 75 F, HumRat,  60 gr/lb ) = %g  (=? ~53)",  Psych_HAProps( "DPT",    "DBT", 75, "HumRat",  60 ) ) }
   " " Proj:Action = { PostMessageToLog( "   Psych_HAProps(    DPT, DBT, 95 F, HumRat, 100 gr/lb ) = %g  (=? ~67)",  Psych_HAProps( "DPT",    "DBT", 95, "HumRat", 100 ) ) }
   " " Proj:Action = { PostMessageToLog( "   Psych_HAProps(     RH, DBT, 75 F, HumRat,  60 gr/lb ) = %g  (=? ~.45)", Psych_HAProps(  "RH",    "DBT", 75, "HumRat",  60 ) ) }
   " " Proj:Action = { PostMessageToLog( "   Psych_HAProps( HumRat, DBT, 90 F, RH,    0.45       ) = %g  (=? ~95)",  Psych_HAProps( "HumRat", "DBT", 90, "RH",    0.45 ) ) }
   " " Proj:Action = { PostMessageToLog( "   Psych_HAProps(     RH, DBT, 75 F, DPT,     35 F     ) = %g  (=? ~.23)", Psych_HAProps(  "RH",    "DBT", 75, "DPT",     35 ) ) }
   " " Proj:Action = { PostMessageToLog( "   Psych_HAProps(     RH, DBT, 75 F, DPT,     35 F,  27 in.hg  ) = %g",    Psych_HAProps(  "RH",    "DBT", 75, "DPT",     35, 27 ) ) }
   " " Proj:Action = {  if (Psych_HAPropsValid(  "RH",    "DBT", 75, "WBT",     35 )==0)
                        then  PostMessageToLog( "   Psych_HAProps(     RH, DBT, 75 F, WBT,     35 F     ) (invalid result)" )
                        else  PostMessageToLog( "   Psych_HAProps(     RH, DBT, 75 F, WBT,     35 F     ) should have returned invalid result" )  endif  }
   " " Proj:Action = {  if (Psych_HAPropsValid(  "RH",    "DBT", 75, "DPT"         )==0)
                        then  PostMessageToLog( "   Psych_HAProps(     RH, DBT, 75 F, DPT               ) (too few args)" )
                        else  PostMessageToLog( "   Psych_HAProps(     RH, DBT, 75 F, DPT               ) should have returned too few args" )  endif  }
   " " Proj:Action = {  if (Psych_HAPropsValid(  "RH",    "DBT", 75, "DPT",     35, "Press" )==0)
                        then  PostMessageToLog( "   Psych_HAProps(     RH, DBT, 75 F, DPT,     35 F  Press   ) (invalid 6th arg)" )
                        else  PostMessageToLog( "   Psych_HAProps(     RH, DBT, 75 F, DPT,     35 F  Press   ) should have returned invalid 6th arg" )  endif  }
   " " Proj:Action = {  if (Psych_HAPropsValid(  "RH",    "DBT", 75, "DPT",     35, 27, 27 )==0)
                        then  PostMessageToLog( "   Psych_HAProps(     RH, DBT, 75 F, DPT,     35 F  27  27   ) (too many args)" )
                        else  PostMessageToLog( "   Psych_HAProps(     RH, DBT, 75 F, DPT,     35 F  27  27   ) should have returned too many args" )  endif  }
   " " Proj:Action = {  if (Psych_HAPropsValid(  "RH",    "DBT", -20, "WBT",     35 )==0)
                        then  PostMessageToLog( "   Psych_HAProps(     RH, DBT, -20 F, WBT,     35 F     ) (DBT too low)" )
                        else  PostMessageToLog( "   Psych_HAProps(     RH, DBT, -20 F, WBT,     35 F     ) should have returned DBT too low" )  endif  }
   " " Proj:Action = {  if (Psych_HAPropsValid(  "RH",    "DBT", 220, "WBT",     35 )==0)
                        then  PostMessageToLog( "   Psych_HAProps(     RH, DBT, 220 F, WBT,     35 F     ) (DBT too high)" )
                        else  PostMessageToLog( "   Psych_HAProps(     RH, DBT, 220 F, WBT,     35 F     ) should have returned DBT too high" )  endif  }
   " " Proj:Action = {  if (Psych_HAPropsValid(  "RH",    "DB",  75, "WBT",     35 )==0)
                        then  PostMessageToLog( "   Psych_HAProps(     RH, DB,   75 F, WBT,     35 F     ) (invalid 2nd arg)" )
                        else  PostMessageToLog( "   Psych_HAProps(     RH, DB,   75 F, WBT,     35 F     ) should have returned invalid 2nd arg" )  endif  }
END
;*************************************************************************



;*************************************************************************
;*************************************************************************

ENDFILE














