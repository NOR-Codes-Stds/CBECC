; -------------------------------------------------------------------------
; Rules pertaining to:   Prep For and Clean-up After each CSE Energy Simulation
; CEC Title-24 Residential Energy Code
; -------------------------------------------------------------------------
; Copyright (c) 2012-2014, California Energy Commission
; Copyright (c) 2012-2014, Wrightsoft Corporation
; All rights reserved.
; Redistribution and use in source and binary forms, with or without modification,
; are permitted provided that the following conditions are met:
; - Redistributions of source code must retain the above copyright notice, this
;   list of conditions and the following disclaimer.
; - Redistributions in binary form must reproduce the above copyright notice, this
;   list of conditions, the following disclaimer in the documentation and/or other
;   materials provided with the distribution.
; - Neither the name of the California Energy Commission nor the names of its
;   contributors may be used to endorse or promote products derived from this
;   software without specific prior written permission.
; DISCLAIMER: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
; THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
; NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION,
; WRIGHTSOFT CORPORATION, ITRON, INC. OR ANY OTHER AUTHOR OR COPYRIGHT HOLDER OF
; THIS SOFTWARE (COLLECTIVELY, THE "AUTHORS") BE LIABLE FOR ANY DIRECT, INDIRECT,
; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
; OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
; OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  EACH LICENSEE AND SUBLICENSEE OF THE
; SOFTWARE AGREES NOT TO ASSERT ANY CLAIM AGAINST ANY OF THE AUTHORS RELATING TO
; THIS SOFTWARE, WHETHER DUE TO PERFORMANCE ISSUES, TITLE OR INFRINGEMENT ISSUES,
; STRICT LIABILITY OR OTHERWISE.
; -------------------------------------------------------------------------

; SAC 10/24/16 - new rulelist to default misc CSE shell properties
;*************************************************************************
RULELIST "ProposedInput_CSE_Shell" 0 0 0 0
;*************************************************************************
   ;--------------------------------------------------------------------
   ; ProposedInput: cseSURFACE Rules
   ;--------------------------------------------------------------------
			;            "sfType",            BEMP_Sym,  - symbol defaulted
			;            "UI_Con",            BEMP_Sym,  - symbol defaulted

;	"Set cseSURFACE:sfCon"
;		cseSURFACE:sfCon 		= {	Local( UI_Con )  }

			;            "sfArea",            BEMP_Flt,  1, "ft2",    - no default

	"Default cseSURFACE:sfTilt"
		cseSURFACE:sfTilt		= {	switch (Local( sfType ))
												case  1:  180    ; Floor
												case  3:    0    ; Ceiling
												default:   90    ; Wall or IntMass*
											endswitch  }

	"Default cseSURFACE:sfAzm"
		cseSURFACE:sfAzm		= {	if (Local( sfTilt ) != 0 .AND. Local( sfTilt ) != 180)
											then  0  else  UNDEFINED  endif  }

			;            "sfExAbs",           BEMP_Flt,  - no default ?
			;            "sfModel",           BEMP_Sym,  - symbol defaulted

   ;--------------------------------------------------------------------
   ; ProposedInput: cseWINDOW Rules   (Windows simulated via CSE)
   ;--------------------------------------------------------------------
			;            "wnHeight",          BEMP_Flt,  1, "ft",   - no default
			;            "wnWidth",           BEMP_Flt,  1, "ft",   - no default

	"Default cseWINDOW:wnArea"
		cseWINDOW:wnArea		= {	if (Local( wnHeight ) > 0 .AND. Local( wnWidth ) > 0)
										then  Local( wnHeight ) * Local( wnWidth )  else  UNDEFINED  endif  }

			;            "wnModel",           BEMP_Sym,  - symbol defaulted

	"Default cseWINDOW:wnMult"
		cseWINDOW:wnMult		= {	1  }

	"Default cseWINDOW:wnFMult"
		cseWINDOW:wnFMult		= {	1  }

			;            "wnUnfrc",           BEMP_Flt,  1, "Btuh/ft2-°F",   - no default
			;            "wnSHGC",            BEMP_Flt,  1, "",              - no default

	"Default cseWINDOW:wnNGlz"  ; based on logic present in default CSE files
		cseWINDOW:wnNGlz		= {	if (Local( wnUnfrc ) > 0.8) then  1  else  2  endif  }

	"Default cseWINDOW:wnDirtLoss"
		cseWINDOW:wnDirtLoss	= {	0.1  }

			;            "wnExShd",           BEMP_Sym,  - symbol defaulted
			;            "wnInShd",           BEMP_Sym,  - symbol defaulted

   ;--------------------------------------------------------------------
   ; ProposedInput: DOOR Rules
   ;--------------------------------------------------------------------
			;            "drArea",            BEMP_Flt,  1, "ft2",           - no default
			;            "drU",               BEMP_Flt,  1, "Btuh/ft2-°F",   - no default

END
;*************************************************************************


;*************************************************************************
RULELIST "CSE_SimulationPrep" 1 0 0 1
;   Rules which are executed immediately prior to performing a CSE simulation
;*************************************************************************

;"dbg" Proj:Action = { PostMessageToLog( "in CSE_SimulationPrep rulelist for run %s, deleting some objects (now Including cseEXPORTFILEs)", Proj:RunAbbrev ) }
	"Blast all cseIZXFER components"						Proj:Action	= {	DeleteAllComps( cseIZXFER )  }
	"Blast all cseAFMETER components"					Proj:Action	= {	DeleteAllComps( cseAFMETER )  }  ; SAC 09/17/20 (tic #1247)
	"Blast all cseEXPORTFILE components"			   Proj:Action = {	DeleteAllComps( cseEXPORTFILE )  }     ; SAC 03/12/21
	"Blast all cseDESCOND components"			      Proj:Action = {	DeleteAllComps( cseDESCOND )  }        ; SAC 09/02/22

	"Perform CSE simulation engine defaulting"		Proj:Action = {	EvalRulelist( "CSE_Defaulting_Project" )  }

	"Setup CSE Construction/Layers/Materials data"	Proj:Action	= {	EvalRulelist( "CSE_SimulationPrep_Cons" )  }		; SAC 5/16/16


	; Create meters for tracking electric and fuel use
	"Create site-wide Elec meter"			Proj:CSE_ElecMETER		= {	if (Local( Fuel_HaveElec   ) < 0.5) then  UNDEFINED
																							else  CreateComp( cseMETER, "MtrElec" )  endif  }
	"Create site-wide NatGas meter"		Proj:CSE_NatGasMETER		= {	if (Local( Fuel_HaveNatGas ) < 0.5) then  UNDEFINED
																							else  CreateComp( cseMETER, "MtrNatGas" )  endif  }
	"Create site-wide <other> meter"		Proj:CSE_OtherFuelMETER	= {	if (Local( Fuel_HaveOther  ) < 0.5) then  UNDEFINED
																							else  CreateComp( cseMETER, "MtrOther" )  endif  }


   "Set Proj:WriteAirFlowMtr[1] - whether or not to write CSE AFMETER[1]"        Proj:WriteAirFlowMtr[1]   =   ; SAC 10/01/20 (tic #1247)
      {  if (SumAcrossIf(   Zone:AirFlowMeter,   Zone:AirFlowMeter = 1 ) > 0 .OR. SumAcrossIf(  OtherZone:AirFlowMeter,  OtherZone:AirFlowMeter = 1 ) > 0 .OR.
             SumAcrossIf( Garage:AirFlowMeter, Garage:AirFlowMeter = 1 ) > 0 .OR. SumAcrossIf( CrawlSpace:AirFlowMeter, CrawlSpace:AirFlowMeter = 1 ) > 0 .OR.
             SumAcrossIf(  Attic:AirFlowMeter,  Attic:AirFlowMeter = 1 ) > 0 ) then  1  else  0  endif  }
   "Set Proj:WriteAirFlowMtr[2] - whether or not to write CSE AFMETER[2]"        Proj:WriteAirFlowMtr[2]   =  
      {  if (SumAcrossIf(   Zone:AirFlowMeter,   Zone:AirFlowMeter = 2 ) > 0 .OR. SumAcrossIf(  OtherZone:AirFlowMeter,  OtherZone:AirFlowMeter = 2 ) > 0 .OR.
             SumAcrossIf( Garage:AirFlowMeter, Garage:AirFlowMeter = 2 ) > 0 .OR. SumAcrossIf( CrawlSpace:AirFlowMeter, CrawlSpace:AirFlowMeter = 2 ) > 0 .OR.
             SumAcrossIf(  Attic:AirFlowMeter,  Attic:AirFlowMeter = 2 ) > 0 ) then  1  else  0  endif  }
   "Set Proj:WriteAirFlowMtr[3] - whether or not to write CSE AFMETER[3]"        Proj:WriteAirFlowMtr[3]   =  
      {  if (SumAcrossIf(   Zone:AirFlowMeter,   Zone:AirFlowMeter = 3 ) > 0 .OR. SumAcrossIf(  OtherZone:AirFlowMeter,  OtherZone:AirFlowMeter = 3 ) > 0 .OR.
             SumAcrossIf( Garage:AirFlowMeter, Garage:AirFlowMeter = 3 ) > 0 .OR. SumAcrossIf( CrawlSpace:AirFlowMeter, CrawlSpace:AirFlowMeter = 3 ) > 0 .OR.
             SumAcrossIf(  Attic:AirFlowMeter,  Attic:AirFlowMeter = 3 ) > 0 ) then  1  else  0  endif  }
   "Set Proj:WriteAirFlowMtr[4] - whether or not to write CSE AFMETER[4]"        Proj:WriteAirFlowMtr[4]   =  
      {  if (SumAcrossIf(   Zone:AirFlowMeter,   Zone:AirFlowMeter = 4 ) > 0 .OR. SumAcrossIf(  OtherZone:AirFlowMeter,  OtherZone:AirFlowMeter = 4 ) > 0 .OR.
             SumAcrossIf( Garage:AirFlowMeter, Garage:AirFlowMeter = 4 ) > 0 .OR. SumAcrossIf( CrawlSpace:AirFlowMeter, CrawlSpace:AirFlowMeter = 4 ) > 0 .OR.
             SumAcrossIf(  Attic:AirFlowMeter,  Attic:AirFlowMeter = 4 ) > 0 ) then  1  else  0  endif  }
   "Set Proj:WriteAirFlowMtr[5] - whether or not to write CSE AFMETER[5]"        Proj:WriteAirFlowMtr[5]   =  
      {  if (SumAcrossIf(   Zone:AirFlowMeter,   Zone:AirFlowMeter = 5 ) > 0 .OR. SumAcrossIf(  OtherZone:AirFlowMeter,  OtherZone:AirFlowMeter = 5 ) > 0 .OR.
             SumAcrossIf( Garage:AirFlowMeter, Garage:AirFlowMeter = 5 ) > 0 .OR. SumAcrossIf( CrawlSpace:AirFlowMeter, CrawlSpace:AirFlowMeter = 5 ) > 0 .OR.
             SumAcrossIf(  Attic:AirFlowMeter,  Attic:AirFlowMeter = 5 ) > 0 ) then  1  else  0  endif  }
   "Set Proj:WriteAirFlowMtr[6] - whether or not to write CSE AFMETER[6]"        Proj:WriteAirFlowMtr[6]   =  
      {  if (SumAcrossIf(   Zone:AirFlowMeter,   Zone:AirFlowMeter = 6 ) > 0 .OR. SumAcrossIf(  OtherZone:AirFlowMeter,  OtherZone:AirFlowMeter = 6 ) > 0 .OR.
             SumAcrossIf( Garage:AirFlowMeter, Garage:AirFlowMeter = 6 ) > 0 .OR. SumAcrossIf( CrawlSpace:AirFlowMeter, CrawlSpace:AirFlowMeter = 6 ) > 0 .OR.
             SumAcrossIf(  Attic:AirFlowMeter,  Attic:AirFlowMeter = 6 ) > 0 ) then  1  else  0  endif  }
   "Set Proj:WriteAirFlowMtr[7] - whether or not to write CSE AFMETER[7]"        Proj:WriteAirFlowMtr[7]   =  
      {  if (SumAcrossIf(   Zone:AirFlowMeter,   Zone:AirFlowMeter = 7 ) > 0 .OR. SumAcrossIf(  OtherZone:AirFlowMeter,  OtherZone:AirFlowMeter = 7 ) > 0 .OR.
             SumAcrossIf( Garage:AirFlowMeter, Garage:AirFlowMeter = 7 ) > 0 .OR. SumAcrossIf( CrawlSpace:AirFlowMeter, CrawlSpace:AirFlowMeter = 7 ) > 0 .OR.
             SumAcrossIf(  Attic:AirFlowMeter,  Attic:AirFlowMeter = 7 ) > 0 ) then  1  else  0  endif  }
   "Set Proj:WriteAirFlowMtr[8] - whether or not to write CSE AFMETER[8]"        Proj:WriteAirFlowMtr[8]   =  
      {  if (SumAcrossIf(   Zone:AirFlowMeter,   Zone:AirFlowMeter = 8 ) > 0 .OR. SumAcrossIf(  OtherZone:AirFlowMeter,  OtherZone:AirFlowMeter = 8 ) > 0 .OR.
             SumAcrossIf( Garage:AirFlowMeter, Garage:AirFlowMeter = 8 ) > 0 .OR. SumAcrossIf( CrawlSpace:AirFlowMeter, CrawlSpace:AirFlowMeter = 8 ) > 0 .OR.
             SumAcrossIf(  Attic:AirFlowMeter,  Attic:AirFlowMeter = 8 ) > 0 ) then  1  else  0  endif  }
   "Set Proj:WriteAirFlowMtr[9] - whether or not to write CSE AFMETER[9]"        Proj:WriteAirFlowMtr[9]   =  
      {  if (SumAcrossIf(   Zone:AirFlowMeter,   Zone:AirFlowMeter = 9 ) > 0 .OR. SumAcrossIf(  OtherZone:AirFlowMeter,  OtherZone:AirFlowMeter = 9 ) > 0 .OR.
             SumAcrossIf( Garage:AirFlowMeter, Garage:AirFlowMeter = 9 ) > 0 .OR. SumAcrossIf( CrawlSpace:AirFlowMeter, CrawlSpace:AirFlowMeter = 9 ) > 0 .OR.
             SumAcrossIf(  Attic:AirFlowMeter,  Attic:AirFlowMeter = 9 ) > 0 ) then  1  else  0  endif  }
   "Set Proj:WriteAirFlowMtr[10] - whether or not to write CSE AFMETER[10]"        Proj:WriteAirFlowMtr[10]   =  
      {  if (SumAcrossIf(   Zone:AirFlowMeter,   Zone:AirFlowMeter = 10 ) > 0 .OR. SumAcrossIf(  OtherZone:AirFlowMeter,  OtherZone:AirFlowMeter = 10 ) > 0 .OR.
             SumAcrossIf( Garage:AirFlowMeter, Garage:AirFlowMeter = 10 ) > 0 .OR. SumAcrossIf( CrawlSpace:AirFlowMeter, CrawlSpace:AirFlowMeter = 10 ) > 0 .OR.
             SumAcrossIf(  Attic:AirFlowMeter,  Attic:AirFlowMeter = 10 ) > 0 ) then  1  else  0  endif  }

   "Set Proj:WriteAirFlowMtr[11] - whether or not to write CSE AFMETER[11]"        Proj:WriteAirFlowMtr[11]   =   ; SAC 11/12/20 (tic #1247)
      {  if (SumAcrossIf(   Zone:AirFlowMeter,   Zone:AirFlowMeter = 11 ) > 0 .OR. SumAcrossIf(  OtherZone:AirFlowMeter,  OtherZone:AirFlowMeter = 11 ) > 0 .OR.
             SumAcrossIf( Garage:AirFlowMeter, Garage:AirFlowMeter = 11 ) > 0 .OR. SumAcrossIf( CrawlSpace:AirFlowMeter, CrawlSpace:AirFlowMeter = 11 ) > 0 .OR.
             SumAcrossIf(  Attic:AirFlowMeter,  Attic:AirFlowMeter = 11 ) > 0 ) then  1  else  0  endif  }
   "Set Proj:WriteAirFlowMtr[12] - whether or not to write CSE AFMETER[12]"        Proj:WriteAirFlowMtr[12]   =  
      {  if (SumAcrossIf(   Zone:AirFlowMeter,   Zone:AirFlowMeter = 12 ) > 0 .OR. SumAcrossIf(  OtherZone:AirFlowMeter,  OtherZone:AirFlowMeter = 12 ) > 0 .OR.
             SumAcrossIf( Garage:AirFlowMeter, Garage:AirFlowMeter = 12 ) > 0 .OR. SumAcrossIf( CrawlSpace:AirFlowMeter, CrawlSpace:AirFlowMeter = 12 ) > 0 .OR.
             SumAcrossIf(  Attic:AirFlowMeter,  Attic:AirFlowMeter = 12 ) > 0 ) then  1  else  0  endif  }
   "Set Proj:WriteAirFlowMtr[13] - whether or not to write CSE AFMETER[13]"        Proj:WriteAirFlowMtr[13]   =  
      {  if (SumAcrossIf(   Zone:AirFlowMeter,   Zone:AirFlowMeter = 13 ) > 0 .OR. SumAcrossIf(  OtherZone:AirFlowMeter,  OtherZone:AirFlowMeter = 13 ) > 0 .OR.
             SumAcrossIf( Garage:AirFlowMeter, Garage:AirFlowMeter = 13 ) > 0 .OR. SumAcrossIf( CrawlSpace:AirFlowMeter, CrawlSpace:AirFlowMeter = 13 ) > 0 .OR.
             SumAcrossIf(  Attic:AirFlowMeter,  Attic:AirFlowMeter = 13 ) > 0 ) then  1  else  0  endif  }
   "Set Proj:WriteAirFlowMtr[14] - whether or not to write CSE AFMETER[14]"        Proj:WriteAirFlowMtr[14]   =  
      {  if (SumAcrossIf(   Zone:AirFlowMeter,   Zone:AirFlowMeter = 14 ) > 0 .OR. SumAcrossIf(  OtherZone:AirFlowMeter,  OtherZone:AirFlowMeter = 14 ) > 0 .OR.
             SumAcrossIf( Garage:AirFlowMeter, Garage:AirFlowMeter = 14 ) > 0 .OR. SumAcrossIf( CrawlSpace:AirFlowMeter, CrawlSpace:AirFlowMeter = 14 ) > 0 .OR.
             SumAcrossIf(  Attic:AirFlowMeter,  Attic:AirFlowMeter = 14 ) > 0 ) then  1  else  0  endif  }
   "Set Proj:WriteAirFlowMtr[15] - whether or not to write CSE AFMETER[15]"        Proj:WriteAirFlowMtr[15]   =  
      {  if (SumAcrossIf(   Zone:AirFlowMeter,   Zone:AirFlowMeter = 15 ) > 0 .OR. SumAcrossIf(  OtherZone:AirFlowMeter,  OtherZone:AirFlowMeter = 15 ) > 0 .OR.
             SumAcrossIf( Garage:AirFlowMeter, Garage:AirFlowMeter = 15 ) > 0 .OR. SumAcrossIf( CrawlSpace:AirFlowMeter, CrawlSpace:AirFlowMeter = 15 ) > 0 .OR.
             SumAcrossIf(  Attic:AirFlowMeter,  Attic:AirFlowMeter = 15 ) > 0 ) then  1  else  0  endif  }
   "Set Proj:WriteAirFlowMtr[16] - whether or not to write CSE AFMETER[16]"        Proj:WriteAirFlowMtr[16]   =  
      {  if (SumAcrossIf(   Zone:AirFlowMeter,   Zone:AirFlowMeter = 16 ) > 0 .OR. SumAcrossIf(  OtherZone:AirFlowMeter,  OtherZone:AirFlowMeter = 16 ) > 0 .OR.
             SumAcrossIf( Garage:AirFlowMeter, Garage:AirFlowMeter = 16 ) > 0 .OR. SumAcrossIf( CrawlSpace:AirFlowMeter, CrawlSpace:AirFlowMeter = 16 ) > 0 .OR.
             SumAcrossIf(  Attic:AirFlowMeter,  Attic:AirFlowMeter = 16 ) > 0 ) then  1  else  0  endif  }
   "Set Proj:WriteAirFlowMtr[17] - whether or not to write CSE AFMETER[17]"        Proj:WriteAirFlowMtr[17]   =  
      {  if (SumAcrossIf(   Zone:AirFlowMeter,   Zone:AirFlowMeter = 17 ) > 0 .OR. SumAcrossIf(  OtherZone:AirFlowMeter,  OtherZone:AirFlowMeter = 17 ) > 0 .OR.
             SumAcrossIf( Garage:AirFlowMeter, Garage:AirFlowMeter = 17 ) > 0 .OR. SumAcrossIf( CrawlSpace:AirFlowMeter, CrawlSpace:AirFlowMeter = 17 ) > 0 .OR.
             SumAcrossIf(  Attic:AirFlowMeter,  Attic:AirFlowMeter = 17 ) > 0 ) then  1  else  0  endif  }
   "Set Proj:WriteAirFlowMtr[18] - whether or not to write CSE AFMETER[18]"        Proj:WriteAirFlowMtr[18]   =  
      {  if (SumAcrossIf(   Zone:AirFlowMeter,   Zone:AirFlowMeter = 18 ) > 0 .OR. SumAcrossIf(  OtherZone:AirFlowMeter,  OtherZone:AirFlowMeter = 18 ) > 0 .OR.
             SumAcrossIf( Garage:AirFlowMeter, Garage:AirFlowMeter = 18 ) > 0 .OR. SumAcrossIf( CrawlSpace:AirFlowMeter, CrawlSpace:AirFlowMeter = 18 ) > 0 .OR.
             SumAcrossIf(  Attic:AirFlowMeter,  Attic:AirFlowMeter = 18 ) > 0 ) then  1  else  0  endif  }
   "Set Proj:WriteAirFlowMtr[19] - whether or not to write CSE AFMETER[19]"        Proj:WriteAirFlowMtr[19]   =  
      {  if (SumAcrossIf(   Zone:AirFlowMeter,   Zone:AirFlowMeter = 19 ) > 0 .OR. SumAcrossIf(  OtherZone:AirFlowMeter,  OtherZone:AirFlowMeter = 19 ) > 0 .OR.
             SumAcrossIf( Garage:AirFlowMeter, Garage:AirFlowMeter = 19 ) > 0 .OR. SumAcrossIf( CrawlSpace:AirFlowMeter, CrawlSpace:AirFlowMeter = 19 ) > 0 .OR.
             SumAcrossIf(  Attic:AirFlowMeter,  Attic:AirFlowMeter = 19 ) > 0 ) then  1  else  0  endif  }
   "Set Proj:WriteAirFlowMtr[20] - whether or not to write CSE AFMETER[20]"        Proj:WriteAirFlowMtr[20]   =  
      {  if (SumAcrossIf(   Zone:AirFlowMeter,   Zone:AirFlowMeter = 20 ) > 0 .OR. SumAcrossIf(  OtherZone:AirFlowMeter,  OtherZone:AirFlowMeter = 20 ) > 0 .OR.
             SumAcrossIf( Garage:AirFlowMeter, Garage:AirFlowMeter = 20 ) > 0 .OR. SumAcrossIf( CrawlSpace:AirFlowMeter, CrawlSpace:AirFlowMeter = 20 ) > 0 .OR.
             SumAcrossIf(  Attic:AirFlowMeter,  Attic:AirFlowMeter = 20 ) > 0 ) then  1  else  0  endif  }

   "Set Proj:AirFlowMtrVolume[1] - volume of zones assigned to CSE AFMETER[1]"   Proj:AirFlowMtrVolume[1]  =      ; SAC 12/02/20
      {  if (WriteAirFlowMtr[1] < 1) then  UNDEFINED
         else  SumAcrossIf(   Zone:Volume,   Zone:AirFlowMeter = 1  ) + SumAcrossIf(  OtherZone:Volume,  OtherZone:AirFlowMeter = 1  ) +
               SumAcrossIf( Garage:Volume, Garage:AirFlowMeter = 1  ) + SumAcrossIf( CrawlSpace:Volume, CrawlSpace:AirFlowMeter = 1  ) +
               SumAcrossIf(  Attic:Volume,  Attic:AirFlowMeter = 1  )   endif  }
   "Set Proj:AirFlowMtrVolume[2] - volume of zones assigned to CSE AFMETER[2]"   Proj:AirFlowMtrVolume[2]  = 
      {  if (WriteAirFlowMtr[2] < 1) then  UNDEFINED
         else  SumAcrossIf(   Zone:Volume,   Zone:AirFlowMeter = 2  ) + SumAcrossIf(  OtherZone:Volume,  OtherZone:AirFlowMeter = 2  ) +
               SumAcrossIf( Garage:Volume, Garage:AirFlowMeter = 2  ) + SumAcrossIf( CrawlSpace:Volume, CrawlSpace:AirFlowMeter = 2  ) +
               SumAcrossIf(  Attic:Volume,  Attic:AirFlowMeter = 2  )   endif  }
   "Set Proj:AirFlowMtrVolume[3] - volume of zones assigned to CSE AFMETER[3]"   Proj:AirFlowMtrVolume[3]  = 
      {  if (WriteAirFlowMtr[3] < 1) then  UNDEFINED
         else  SumAcrossIf(   Zone:Volume,   Zone:AirFlowMeter = 3  ) + SumAcrossIf(  OtherZone:Volume,  OtherZone:AirFlowMeter = 3  ) +
               SumAcrossIf( Garage:Volume, Garage:AirFlowMeter = 3  ) + SumAcrossIf( CrawlSpace:Volume, CrawlSpace:AirFlowMeter = 3  ) +
               SumAcrossIf(  Attic:Volume,  Attic:AirFlowMeter = 3  )   endif  }
   "Set Proj:AirFlowMtrVolume[4] - volume of zones assigned to CSE AFMETER[4]"   Proj:AirFlowMtrVolume[4]  = 
      {  if (WriteAirFlowMtr[4] < 1) then  UNDEFINED
         else  SumAcrossIf(   Zone:Volume,   Zone:AirFlowMeter = 4  ) + SumAcrossIf(  OtherZone:Volume,  OtherZone:AirFlowMeter = 4  ) +
               SumAcrossIf( Garage:Volume, Garage:AirFlowMeter = 4  ) + SumAcrossIf( CrawlSpace:Volume, CrawlSpace:AirFlowMeter = 4  ) +
               SumAcrossIf(  Attic:Volume,  Attic:AirFlowMeter = 4  )   endif  }
   "Set Proj:AirFlowMtrVolume[5] - volume of zones assigned to CSE AFMETER[5]"   Proj:AirFlowMtrVolume[5]  = 
      {  if (WriteAirFlowMtr[5] < 1) then  UNDEFINED
         else  SumAcrossIf(   Zone:Volume,   Zone:AirFlowMeter = 5  ) + SumAcrossIf(  OtherZone:Volume,  OtherZone:AirFlowMeter = 5  ) +
               SumAcrossIf( Garage:Volume, Garage:AirFlowMeter = 5  ) + SumAcrossIf( CrawlSpace:Volume, CrawlSpace:AirFlowMeter = 5  ) +
               SumAcrossIf(  Attic:Volume,  Attic:AirFlowMeter = 5  )   endif  }
   "Set Proj:AirFlowMtrVolume[6] - volume of zones assigned to CSE AFMETER[6]"   Proj:AirFlowMtrVolume[6]  = 
      {  if (WriteAirFlowMtr[6] < 1) then  UNDEFINED
         else  SumAcrossIf(   Zone:Volume,   Zone:AirFlowMeter = 6  ) + SumAcrossIf(  OtherZone:Volume,  OtherZone:AirFlowMeter = 6  ) +
               SumAcrossIf( Garage:Volume, Garage:AirFlowMeter = 6  ) + SumAcrossIf( CrawlSpace:Volume, CrawlSpace:AirFlowMeter = 6  ) +
               SumAcrossIf(  Attic:Volume,  Attic:AirFlowMeter = 6  )   endif  }
   "Set Proj:AirFlowMtrVolume[7] - volume of zones assigned to CSE AFMETER[7]"   Proj:AirFlowMtrVolume[7]  = 
      {  if (WriteAirFlowMtr[7] < 1) then  UNDEFINED
         else  SumAcrossIf(   Zone:Volume,   Zone:AirFlowMeter = 7  ) + SumAcrossIf(  OtherZone:Volume,  OtherZone:AirFlowMeter = 7  ) +
               SumAcrossIf( Garage:Volume, Garage:AirFlowMeter = 7  ) + SumAcrossIf( CrawlSpace:Volume, CrawlSpace:AirFlowMeter = 7  ) +
               SumAcrossIf(  Attic:Volume,  Attic:AirFlowMeter = 7  )   endif  }
   "Set Proj:AirFlowMtrVolume[8] - volume of zones assigned to CSE AFMETER[8]"   Proj:AirFlowMtrVolume[8]  = 
      {  if (WriteAirFlowMtr[8] < 1) then  UNDEFINED
         else  SumAcrossIf(   Zone:Volume,   Zone:AirFlowMeter = 8  ) + SumAcrossIf(  OtherZone:Volume,  OtherZone:AirFlowMeter = 8  ) +
               SumAcrossIf( Garage:Volume, Garage:AirFlowMeter = 8  ) + SumAcrossIf( CrawlSpace:Volume, CrawlSpace:AirFlowMeter = 8  ) +
               SumAcrossIf(  Attic:Volume,  Attic:AirFlowMeter = 8  )   endif  }
   "Set Proj:AirFlowMtrVolume[9] - volume of zones assigned to CSE AFMETER[9]"   Proj:AirFlowMtrVolume[9]  = 
      {  if (WriteAirFlowMtr[9] < 1) then  UNDEFINED
         else  SumAcrossIf(   Zone:Volume,   Zone:AirFlowMeter = 9  ) + SumAcrossIf(  OtherZone:Volume,  OtherZone:AirFlowMeter = 9  ) +
               SumAcrossIf( Garage:Volume, Garage:AirFlowMeter = 9  ) + SumAcrossIf( CrawlSpace:Volume, CrawlSpace:AirFlowMeter = 9  ) +
               SumAcrossIf(  Attic:Volume,  Attic:AirFlowMeter = 9  )   endif  }
   "Set Proj:AirFlowMtrVolume[10] - volume of zones assigned to CSE AFMETER[10]" Proj:AirFlowMtrVolume[10] = 
      {  if (WriteAirFlowMtr[10] < 1) then  UNDEFINED
         else  SumAcrossIf(   Zone:Volume,   Zone:AirFlowMeter = 10 ) + SumAcrossIf(  OtherZone:Volume,  OtherZone:AirFlowMeter = 10 ) +
               SumAcrossIf( Garage:Volume, Garage:AirFlowMeter = 10 ) + SumAcrossIf( CrawlSpace:Volume, CrawlSpace:AirFlowMeter = 10 ) +
               SumAcrossIf(  Attic:Volume,  Attic:AirFlowMeter = 10 )   endif  }

   "Set Proj:AirFlowMtrVolume[11] - volume of zones assigned to CSE AFMETER[11]" Proj:AirFlowMtrVolume[11] = 
      {  if (WriteAirFlowMtr[11] < 1) then  UNDEFINED
         else  SumAcrossIf(   Zone:Volume,   Zone:AirFlowMeter = 11 ) + SumAcrossIf(  OtherZone:Volume,  OtherZone:AirFlowMeter = 11 ) +
               SumAcrossIf( Garage:Volume, Garage:AirFlowMeter = 11 ) + SumAcrossIf( CrawlSpace:Volume, CrawlSpace:AirFlowMeter = 11 ) +
               SumAcrossIf(  Attic:Volume,  Attic:AirFlowMeter = 11 )   endif  }
   "Set Proj:AirFlowMtrVolume[12] - volume of zones assigned to CSE AFMETER[12]" Proj:AirFlowMtrVolume[12] = 
      {  if (WriteAirFlowMtr[12] < 1) then  UNDEFINED
         else  SumAcrossIf(   Zone:Volume,   Zone:AirFlowMeter = 12 ) + SumAcrossIf(  OtherZone:Volume,  OtherZone:AirFlowMeter = 12 ) +
               SumAcrossIf( Garage:Volume, Garage:AirFlowMeter = 12 ) + SumAcrossIf( CrawlSpace:Volume, CrawlSpace:AirFlowMeter = 12 ) +
               SumAcrossIf(  Attic:Volume,  Attic:AirFlowMeter = 12 )   endif  }
   "Set Proj:AirFlowMtrVolume[13] - volume of zones assigned to CSE AFMETER[13]" Proj:AirFlowMtrVolume[13] = 
      {  if (WriteAirFlowMtr[13] < 1) then  UNDEFINED
         else  SumAcrossIf(   Zone:Volume,   Zone:AirFlowMeter = 13 ) + SumAcrossIf(  OtherZone:Volume,  OtherZone:AirFlowMeter = 13 ) +
               SumAcrossIf( Garage:Volume, Garage:AirFlowMeter = 13 ) + SumAcrossIf( CrawlSpace:Volume, CrawlSpace:AirFlowMeter = 13 ) +
               SumAcrossIf(  Attic:Volume,  Attic:AirFlowMeter = 13 )   endif  }
   "Set Proj:AirFlowMtrVolume[14] - volume of zones assigned to CSE AFMETER[14]" Proj:AirFlowMtrVolume[14] = 
      {  if (WriteAirFlowMtr[14] < 1) then  UNDEFINED
         else  SumAcrossIf(   Zone:Volume,   Zone:AirFlowMeter = 14 ) + SumAcrossIf(  OtherZone:Volume,  OtherZone:AirFlowMeter = 14 ) +
               SumAcrossIf( Garage:Volume, Garage:AirFlowMeter = 14 ) + SumAcrossIf( CrawlSpace:Volume, CrawlSpace:AirFlowMeter = 14 ) +
               SumAcrossIf(  Attic:Volume,  Attic:AirFlowMeter = 14 )   endif  }
   "Set Proj:AirFlowMtrVolume[15] - volume of zones assigned to CSE AFMETER[15]" Proj:AirFlowMtrVolume[15] = 
      {  if (WriteAirFlowMtr[15] < 1) then  UNDEFINED
         else  SumAcrossIf(   Zone:Volume,   Zone:AirFlowMeter = 15 ) + SumAcrossIf(  OtherZone:Volume,  OtherZone:AirFlowMeter = 15 ) +
               SumAcrossIf( Garage:Volume, Garage:AirFlowMeter = 15 ) + SumAcrossIf( CrawlSpace:Volume, CrawlSpace:AirFlowMeter = 15 ) +
               SumAcrossIf(  Attic:Volume,  Attic:AirFlowMeter = 15 )   endif  }
   "Set Proj:AirFlowMtrVolume[16] - volume of zones assigned to CSE AFMETER[16]" Proj:AirFlowMtrVolume[16] = 
      {  if (WriteAirFlowMtr[16] < 1) then  UNDEFINED
         else  SumAcrossIf(   Zone:Volume,   Zone:AirFlowMeter = 16 ) + SumAcrossIf(  OtherZone:Volume,  OtherZone:AirFlowMeter = 16 ) +
               SumAcrossIf( Garage:Volume, Garage:AirFlowMeter = 16 ) + SumAcrossIf( CrawlSpace:Volume, CrawlSpace:AirFlowMeter = 16 ) +
               SumAcrossIf(  Attic:Volume,  Attic:AirFlowMeter = 16 )   endif  }
   "Set Proj:AirFlowMtrVolume[17] - volume of zones assigned to CSE AFMETER[17]" Proj:AirFlowMtrVolume[17] = 
      {  if (WriteAirFlowMtr[17] < 1) then  UNDEFINED
         else  SumAcrossIf(   Zone:Volume,   Zone:AirFlowMeter = 17 ) + SumAcrossIf(  OtherZone:Volume,  OtherZone:AirFlowMeter = 17 ) +
               SumAcrossIf( Garage:Volume, Garage:AirFlowMeter = 17 ) + SumAcrossIf( CrawlSpace:Volume, CrawlSpace:AirFlowMeter = 17 ) +
               SumAcrossIf(  Attic:Volume,  Attic:AirFlowMeter = 17 )   endif  }
   "Set Proj:AirFlowMtrVolume[18] - volume of zones assigned to CSE AFMETER[18]" Proj:AirFlowMtrVolume[18] = 
      {  if (WriteAirFlowMtr[18] < 1) then  UNDEFINED
         else  SumAcrossIf(   Zone:Volume,   Zone:AirFlowMeter = 18 ) + SumAcrossIf(  OtherZone:Volume,  OtherZone:AirFlowMeter = 18 ) +
               SumAcrossIf( Garage:Volume, Garage:AirFlowMeter = 18 ) + SumAcrossIf( CrawlSpace:Volume, CrawlSpace:AirFlowMeter = 18 ) +
               SumAcrossIf(  Attic:Volume,  Attic:AirFlowMeter = 18 )   endif  }
   "Set Proj:AirFlowMtrVolume[19] - volume of zones assigned to CSE AFMETER[19]" Proj:AirFlowMtrVolume[19] = 
      {  if (WriteAirFlowMtr[19] < 1) then  UNDEFINED
         else  SumAcrossIf(   Zone:Volume,   Zone:AirFlowMeter = 19 ) + SumAcrossIf(  OtherZone:Volume,  OtherZone:AirFlowMeter = 19 ) +
               SumAcrossIf( Garage:Volume, Garage:AirFlowMeter = 19 ) + SumAcrossIf( CrawlSpace:Volume, CrawlSpace:AirFlowMeter = 19 ) +
               SumAcrossIf(  Attic:Volume,  Attic:AirFlowMeter = 19 )   endif  }
   "Set Proj:AirFlowMtrVolume[20] - volume of zones assigned to CSE AFMETER[20]" Proj:AirFlowMtrVolume[20] = 
      {  if (WriteAirFlowMtr[20] < 1) then  UNDEFINED
         else  SumAcrossIf(   Zone:Volume,   Zone:AirFlowMeter = 20 ) + SumAcrossIf(  OtherZone:Volume,  OtherZone:AirFlowMeter = 20 ) +
               SumAcrossIf( Garage:Volume, Garage:AirFlowMeter = 20 ) + SumAcrossIf( CrawlSpace:Volume, CrawlSpace:AirFlowMeter = 20 ) +
               SumAcrossIf(  Attic:Volume,  Attic:AirFlowMeter = 20 )   endif  }

   "Create Proj:CSE_AirFlowMETERs[1] if doing detailed Infiltration reporting"   Proj:CSE_AirFlowMETERs[1] =      ; SAC 09/17/20 (tic #1247)    - SAC 10/01/20
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. WriteAirFlowMtr[1] < 1) then  UNDEFINED
         else  CreateComp( cseAFMETER, "AirFlowMtr-1" )  endif  }
   "Create Proj:CSE_AirFlowMETERs[2] if doing detailed Infiltration reporting"   Proj:CSE_AirFlowMETERs[2] =  
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. WriteAirFlowMtr[2] < 1) then  UNDEFINED
         else  CreateComp( cseAFMETER, "AirFlowMtr-2" )  endif  }
   "Create Proj:CSE_AirFlowMETERs[3] if doing detailed Infiltration reporting"   Proj:CSE_AirFlowMETERs[3] =  
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. WriteAirFlowMtr[3] < 1) then  UNDEFINED
         else  CreateComp( cseAFMETER, "AirFlowMtr-3" )  endif  }
   "Create Proj:CSE_AirFlowMETERs[4] if doing detailed Infiltration reporting"   Proj:CSE_AirFlowMETERs[4] =  
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. WriteAirFlowMtr[4] < 1) then  UNDEFINED
         else  CreateComp( cseAFMETER, "AirFlowMtr-4" )  endif  }
   "Create Proj:CSE_AirFlowMETERs[5] if doing detailed Infiltration reporting"   Proj:CSE_AirFlowMETERs[5] =  
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. WriteAirFlowMtr[5] < 1) then  UNDEFINED
         else  CreateComp( cseAFMETER, "AirFlowMtr-5" )  endif  }
   "Create Proj:CSE_AirFlowMETERs[6] if doing detailed Infiltration reporting"   Proj:CSE_AirFlowMETERs[6] =  
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. WriteAirFlowMtr[6] < 1) then  UNDEFINED
         else  CreateComp( cseAFMETER, "AirFlowMtr-6" )  endif  }
   "Create Proj:CSE_AirFlowMETERs[7] if doing detailed Infiltration reporting"   Proj:CSE_AirFlowMETERs[7] =  
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. WriteAirFlowMtr[7] < 1) then  UNDEFINED
         else  CreateComp( cseAFMETER, "AirFlowMtr-7" )  endif  }
   "Create Proj:CSE_AirFlowMETERs[8] if doing detailed Infiltration reporting"   Proj:CSE_AirFlowMETERs[8] =  
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. WriteAirFlowMtr[8] < 1) then  UNDEFINED
         else  CreateComp( cseAFMETER, "AirFlowMtr-8" )  endif  }
   "Create Proj:CSE_AirFlowMETERs[9] if doing detailed Infiltration reporting"   Proj:CSE_AirFlowMETERs[9] =  
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. WriteAirFlowMtr[9] < 1) then  UNDEFINED
         else  CreateComp( cseAFMETER, "AirFlowMtr-9" )  endif  }
   "Create Proj:CSE_AirFlowMETERs[10] if doing detailed Infiltration reporting"   Proj:CSE_AirFlowMETERs[10] =  
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. WriteAirFlowMtr[10] < 1) then  UNDEFINED
         else  CreateComp( cseAFMETER, "AirFlowMtr-10" )  endif  }

   "Create Proj:CSE_AirFlowMETERs[11] if doing detailed Infiltration reporting"   Proj:CSE_AirFlowMETERs[11] =      ; SAC 11/12/20 (tic #1247)
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. WriteAirFlowMtr[11] < 1) then  UNDEFINED
         else  CreateComp( cseAFMETER, "AirFlowMtr-11" )  endif  }
   "Create Proj:CSE_AirFlowMETERs[12] if doing detailed Infiltration reporting"   Proj:CSE_AirFlowMETERs[12] =  
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. WriteAirFlowMtr[12] < 1) then  UNDEFINED
         else  CreateComp( cseAFMETER, "AirFlowMtr-12" )  endif  }
   "Create Proj:CSE_AirFlowMETERs[13] if doing detailed Infiltration reporting"   Proj:CSE_AirFlowMETERs[13] =  
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. WriteAirFlowMtr[13] < 1) then  UNDEFINED
         else  CreateComp( cseAFMETER, "AirFlowMtr-13" )  endif  }
   "Create Proj:CSE_AirFlowMETERs[14] if doing detailed Infiltration reporting"   Proj:CSE_AirFlowMETERs[14] =  
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. WriteAirFlowMtr[14] < 1) then  UNDEFINED
         else  CreateComp( cseAFMETER, "AirFlowMtr-14" )  endif  }
   "Create Proj:CSE_AirFlowMETERs[15] if doing detailed Infiltration reporting"   Proj:CSE_AirFlowMETERs[15] =  
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. WriteAirFlowMtr[15] < 1) then  UNDEFINED
         else  CreateComp( cseAFMETER, "AirFlowMtr-15" )  endif  }
   "Create Proj:CSE_AirFlowMETERs[16] if doing detailed Infiltration reporting"   Proj:CSE_AirFlowMETERs[16] =  
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. WriteAirFlowMtr[16] < 1) then  UNDEFINED
         else  CreateComp( cseAFMETER, "AirFlowMtr-16" )  endif  }
   "Create Proj:CSE_AirFlowMETERs[17] if doing detailed Infiltration reporting"   Proj:CSE_AirFlowMETERs[17] =  
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. WriteAirFlowMtr[17] < 1) then  UNDEFINED
         else  CreateComp( cseAFMETER, "AirFlowMtr-17" )  endif  }
   "Create Proj:CSE_AirFlowMETERs[18] if doing detailed Infiltration reporting"   Proj:CSE_AirFlowMETERs[18] =  
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. WriteAirFlowMtr[18] < 1) then  UNDEFINED
         else  CreateComp( cseAFMETER, "AirFlowMtr-18" )  endif  }
   "Create Proj:CSE_AirFlowMETERs[19] if doing detailed Infiltration reporting"   Proj:CSE_AirFlowMETERs[19] =  
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. WriteAirFlowMtr[19] < 1) then  UNDEFINED
         else  CreateComp( cseAFMETER, "AirFlowMtr-19" )  endif  }
   "Create Proj:CSE_AirFlowMETERs[20] if doing detailed Infiltration reporting"   Proj:CSE_AirFlowMETERs[20] =  
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. WriteAirFlowMtr[20] < 1) then  UNDEFINED
         else  CreateComp( cseAFMETER, "AirFlowMtr-20" )  endif  }

	"Setup CSE Zones and Internal Gains data"		Proj:Action	= {	EvalRulelist( "CSE_SimulationPrep_Zones_IntGains" )  }		; SAC 5/16/16

; SAC 4/14/16 - MOVED UP HERE from below so that DHWSYS objects in place to be referenced by gain objects during their setup
	"Init Proj:CSE_DHWSizingRunReqd"	Proj:CSE_DHWSizingRunReqd	= {	0  }		; SAC 07/01/21
	"Init Proj:CSE_DHWPreRunReqd"	   Proj:CSE_DHWPreRunReqd	   = {	0  }		; SAC 3/22/16
	; Create and setup CSE DHW objects - SAC 7/6/15
   ; SAC 7/29/18 - removed all logic pertaining to DHWCalcMethod (related to transition from T24DHW DLLs to CSE)
	"Setup CSE DHW objects"			Proj:Action		= {	EvalRulelist( "CSE_SimulationPrep_DHW" )  }

	"Setup CSE Zones and Internal Gains data - part2"		Proj:Action	= {	EvalRulelist( "CSE_SimulationPrep_Zones_IntGains_part2" )  }		; SAC 5/16/16

	"Setup CSE Surface data"										Proj:Action	= {	EvalRulelist( "CSE_SimulationPrep_Surfaces" )  }		; SAC 5/16/16

	"Setup CSE Internal Mass data"								Proj:Action	= {	EvalRulelist( "CSE_SimulationPrep_IntMass" )  }			; SAC 5/16/16

	"Setup CSE HVAC & AirNet data"								Proj:Action	= {	EvalRulelist( "CSE_SimulationPrep_HVAC" )  }				; SAC 5/16/16


	; Create and setup CSE PVARRAY objects - SAC 1/27/16
	; SAC 10/6/16 - allow PV sim regardless of *DesignRating* settings for 2019 analysis
	"Delete all csePVARRAY objects"		      Proj:Action = {  DeleteAllComps( csePVARRAY )  }
   "Delete any/all PolyLp children of Proj"  Proj:Action = {  DeleteChildren( PolyLp )  }    ; past UI-defined PVArray PolyLp objects - SAC 3/4/17
   ; revised logic to include Std Design PV system for 2019+ codes - SAC 1/9/18   ; prevent generating PV inputs when setting PV results via scaling fixed results - SAC 7/16/20
	"Setup CSE csePVARRAY objects"		      Proj:Action	= {
         if ( (EnergyCodeYearNum < 2019 .AND.
               (IfValidAnd( AllowDesignRating > 0.5 )==0 .OR. IfValidAnd( DesignRatingCalcs > 0.5 )==0)) .OR.
              IfValidAnd( PVWDCSysTotal > 0 )==0 )
         then  UNCHANGED
         else if (((Proj:RunAbbrev == "s"  .OR. Proj:RunAbbrev == "S" .OR. Proj:RunAbbrev == "smf") .AND. EnergyCodeYearNum < 2019) .OR.
                    Proj:RunAbbrev == "dr" .OR. Proj:RunAbbrev == "DR")
         then  UNCHANGED		; prevent PVARRAY in std (<2019) and design rtg runs
         else if (Proj:RunAbbrev != "s" .AND. Proj:RunAbbrev != "S" .AND. Proj:RunAbbrev != "smf" .AND.
                  CommunitySolarProjID > 0 .AND. CommunitySolarSim == 0) then  UNCHANGED
         else	EvalRulelist( "CSE_SimulationPrep_PV" )  endif endif endif  }


   ; Create and setup CSE BATTERY object - SAC 12/14/16
   "Delete all cseBATTERY objects"         Proj:Action = {  DeleteAllComps( cseBATTERY )  }
   "Delete CSE IMPORTFILE object used to support simulation of battery control"  Proj:BattCtrlImportFile  = {
         if (LocalCompAssigned( BattCtrlImportFile )) then  DeleteComp()  else  UNCHANGED  endif  }
   ; SAC 4/28/17 - revised logic to enable battery simulation in 2016 runs
   ; APB 3/30/22 - add logic to allow standalone battery if no PV (tic #1319)
   "Create and setup cseBATTERY object"   Proj:Action = {
         if ( (IfValidAnd( PVWDCSysTotal > 0 )==0 .AND. IfValidAnd( SimStandaloneBatt > 0 )==0 ) .OR. IfValidAnd( SimulateBattery > 0 )==0 .OR. 
         (IfValidAnd( SimulateBattery > 0 ) .AND. IfValidAnd( AllowBattRoundTripEff == 1) .AND. IfValidAnd( BattRoundTripEff < 0.8))) ; APB 03/30/22 - Add logic to not simulate BATTERY if roundtrip efficiency < 80% (tic #1319)
         then  UNCHANGED
         else if (Proj:RunAbbrev == "s"  .OR. Proj:RunAbbrev == "S" .OR. Proj:RunAbbrev == "smf" .OR.
                  Proj:RunAbbrev == "dr" .OR. Proj:RunAbbrev == "DR")
         then  UNCHANGED      ; prevent BATTERY in std and design rtg runs (??)
         else  EvalRulelist( "CSE_SimulationPrep_Battery" )  endif endif  }

  ; SAC 2/24/17 - cseSHADEX object to representing building and site shades (separate from window shades)
   "Delete all cseSHADEX objects"   Proj:Action    = {	DeleteAllComps( cseSHADEX )  }
   "Create CSE cseSHADEX objects from Shades"   Shade:SimShade = {
         if (Type < 1 .OR. LocalCompAssigned( ChildPolyLpRef ) < 1) then  UNDEFINED
         else  CreateComp( cseSHADEX, "sx-" + substr( Name, 0, 53 ) )  endif  }
   "Set Shade:SimShade:sxMounting"  Shade:SimShade:sxMounting  = {   Type  }
   "Set Shade:SimShade:sxVertices"  Shade:SimShade:sxVertices  = {   ChildPolyLpRef  }

  ; SAC 3/2/17 - cseSHADEX object to representing building and site PVArrayGeom objects
   "Create CSE cseSHADEX objects from PVArrayGeoms"   PVArrayGeom:SimShade = {
         if (LocalCompAssigned( ChildPolyLpRef ) < 1 .OR. IfValidAnd( NumPVArrayRefs > 0 )==0) then  UNDEFINED
         else  CreateComp( cseSHADEX, "sx-" + substr( Name, 0, 53 ) )  endif  }
   "Set PVArrayGeom:SimShade:sxMounting"  PVArrayGeom:SimShade:sxMounting  = {   IsBldgAttached+1  }  ; 1=>Site, 2=>Bldg
   "Set PVArrayGeom:SimShade:sxVertices"  PVArrayGeom:SimShade:sxVertices  = {   ChildPolyLpRef  }

  ; Create and default EXPORT definitions to output hourly energy use results
; SAC 1/29/20 - TO RESTORE (??)
;   "Create Proj:CSE_EnergyUseFile"  Proj:CSE_EnergyUseFile  = {   CreateComp( cseEXPORTFILE, "xf-hrlyenergyuse" )  }    ; SAC 1/28/20 (tic #1013)
;   "Set Proj:CSE_EnergyUseFile:xfFileName"   Proj:CSE_EnergyUseFile:xfFileName  =
;      {  ValidOr( ProjFileNameNoExt, "" ) + ValidOr( RunIDProcFile, "" ) + ".csv"  }
   "Create site-wide Elec export"         Proj:CSE_ElecEXPORT			= {	if (LocalCompAssigned( CSE_ElecMETER ) < 0.5) then  UNDEFINED
																									else  CreateComp( cseEXPORT, "ExportElec" )  endif  }
	"Create site-wide NatGas export"			Proj:CSE_NatGasEXPORT		= {	if (LocalCompAssigned( CSE_NatGasMETER ) < 0.5) then  UNDEFINED
																									else  CreateComp( cseEXPORT, "ExportNatGas" )  endif  }
	"Create site-wide <other> export"		Proj:CSE_OtherFuelEXPORT	= {	if (LocalCompAssigned( CSE_OtherFuelMETER ) < 0.5) then  UNDEFINED
																									else  CreateComp( cseEXPORT, "ExportOther" )  endif  }

;   "Set Proj:CSE_ElecEXPORT:exExportfile"    Proj:CSE_ElecEXPORT:exExportfile    = {  CSE_EnergyUseFile:Name  }
   "Set Proj:CSE_ElecEXPORT:exExportfile"    Proj:CSE_ElecEXPORT:exExportfile    = {  "Primary"  }
	"Set Proj:CSE_ElecEXPORT:exType"				Proj:CSE_ElecEXPORT:exType				= {	"MTR"     }
	"Set Proj:CSE_ElecEXPORT:exFreq"				Proj:CSE_ElecEXPORT:exFreq				= {	"HOUR"    }
	"Set Proj:CSE_ElecEXPORT:exMeter"			Proj:CSE_ElecEXPORT:exMeter			= {	Local( CSE_ElecMETER )  }
	"Set Proj:CSE_ElecEXPORT:exBtuSf"			Proj:CSE_ElecEXPORT:exBtuSf			= {	1000      }
	"Set Proj:CSE_ElecEXPORT:exDayBeg_x"		Proj:CSE_ElecEXPORT:exDayBeg_x		= {	"Jan 1"   }
	"Set Proj:CSE_ElecEXPORT:exDayEnd_x"		Proj:CSE_ElecEXPORT:exDayEnd_x		= {	"Dec 31"  }

;   "Set Proj:CSE_NatGasEXPORT:exExportfile"  Proj:CSE_NatGasEXPORT:exExportfile  = {  CSE_EnergyUseFile:Name  }
   "Set Proj:CSE_NatGasEXPORT:exExportfile"  Proj:CSE_NatGasEXPORT:exExportfile  = {  "Primary"  }
	"Set Proj:CSE_NatGasEXPORT:exType"			Proj:CSE_NatGasEXPORT:exType			= {	"MTR"     }
	"Set Proj:CSE_NatGasEXPORT:exFreq"			Proj:CSE_NatGasEXPORT:exFreq			= {	"HOUR"    }
	"Set Proj:CSE_NatGasEXPORT:exMeter"			Proj:CSE_NatGasEXPORT:exMeter			= {	Local( CSE_NatGasMETER )  }
	"Set Proj:CSE_NatGasEXPORT:exBtuSf"			Proj:CSE_NatGasEXPORT:exBtuSf			= {	1000      }
	"Set Proj:CSE_NatGasEXPORT:exDayBeg_x"		Proj:CSE_NatGasEXPORT:exDayBeg_x		= {	"Jan 1"   }
	"Set Proj:CSE_NatGasEXPORT:exDayEnd_x"		Proj:CSE_NatGasEXPORT:exDayEnd_x		= {	"Dec 31"  }

;   "Set Proj:CSE_OtherFuelEXPORT:exExportfile" Proj:CSE_OtherFuelEXPORT:exExportfile = {  CSE_EnergyUseFile:Name  }
   "Set Proj:CSE_OtherFuelEXPORT:exExportfile" Proj:CSE_OtherFuelEXPORT:exExportfile = {  "Primary"  }
	"Set Proj:CSE_OtherFuelEXPORT:exType"		Proj:CSE_OtherFuelEXPORT:exType		= {	"MTR"     }
	"Set Proj:CSE_OtherFuelEXPORT:exFreq"		Proj:CSE_OtherFuelEXPORT:exFreq		= {	"HOUR"    }
	"Set Proj:CSE_OtherFuelEXPORT:exMeter"		Proj:CSE_OtherFuelEXPORT:exMeter		= {	Local( CSE_OtherFuelMETER )  }
	"Set Proj:CSE_OtherFuelEXPORT:exBtuSf"		Proj:CSE_OtherFuelEXPORT:exBtuSf		= {	1000      }
	"Set Proj:CSE_OtherFuelEXPORT:exDayBeg_x"	Proj:CSE_OtherFuelEXPORT:exDayBeg_x	= {	"Jan 1"   }
	"Set Proj:CSE_OtherFuelEXPORT:exDayEnd_x"	Proj:CSE_OtherFuelEXPORT:exDayEnd_x	= {	"Dec 31"  }

; in the future, only export Std run SSF if in research mode: (Proj:RunAbbrev == "s" .AND. EnableResearchMode > 0)
   "Setup DHWSolarSys SSF export for Proposed model"  Proj:Action  =    ; SAC 1/28/20 - (tic #1013)
      {  if (ComponentCount( cseDHWSOLARSYS ) > 0 .AND.
             (Proj:RunAbbrev == "p" .OR. Proj:RunAbbrev == "p-N" .OR. Proj:RunAbbrev == "p-E" .OR. 
              Proj:RunAbbrev == "u" .OR. Proj:RunAbbrev == "p-S" .OR. Proj:RunAbbrev == "p-W" .OR.
              (Proj:RunAbbrev == "s")))
         then  EvalRulelist( "CSE_Project_SetupSolarSysSSFExport" )
         else  UNCHANGED  endif  }

   "Setup HVAC Capacity export for ALL models"     Proj:Action  =    ; SAC 03/12/21
      {  if (SumAll( HVACSys:FloorAreaServed[1] ) > 0)
         then  EvalRulelist( "CSE_Project_SetupHVACCapacityExport" )
         else  UNCHANGED  endif  }

   "Setup Zone UMLHs export if needed"    Proj:Action  =    ; SAC 03/24/22
      {  if (SumAll( Zone:TrackUMLHs ) > 0)
         then  EvalRulelist( "CSE_Project_SetupZoneUMLHsExport" )
         else  UNCHANGED  endif  }

   ; SAC 11/17/16 - rules to prep Zone for ZEB single day reporting
   "Set CeilingBelowAttic:AtcAirNetHoleSize"   CeilingBelowAttic:AtcAirNetHoleSize = {
         if (IfValidAnd( CeilAirNetIZXFER:izALo > 0)==0) then  -1
         else  CeilAirNetIZXFER:izALo  endif  }
   "Set Zone:ClgMaxAtcANHoleRef"   Zone:ClgMaxAtcANHoleRef = {
         if (MaxChild( CeilingBelowAttic:AtcAirNetHoleSize ) <= 0) then  UNDEFINED
         else  MaxChildComp( CeilingBelowAttic:AtcAirNetHoleSize )  endif  }
   "Set OtherZone:ClgMaxAtcANHoleRef"   OtherZone:ClgMaxAtcANHoleRef =        ; SAC 9/19/19 - OtherZone (MFamProto)
      {  if (MaxChild( CeilingBelowAttic:AtcAirNetHoleSize ) <= 0) then  UNDEFINED
         else  MaxChildComp( CeilingBelowAttic:AtcAirNetHoleSize )  endif  }

   ; SAC 11/13/16 - specification of user-selected Reports
	"Delete all cseREPORTCOL objects"	Proj:Action = {	DeleteAllComps( cseREPORTCOL )  }
	"Delete all cseREPORT objects"		Proj:Action = {	DeleteAllComps( cseREPORT )  }
   "Reset any HVACSys:HaveCSERpt_HVAC flags"    HVACSys:HaveCSERpt_HVAC = {  UNDEFINED  }
   "Setup CSE Reports"     Proj:Action = {   if (CSERpt_HaveReports < 1) then  UNCHANGED
                                             else  EvalRulelist( "CSE_SimulationPrep_Reports" )  endif  }

;   0, cseEXPORT:exType,  -1
;   2,              1,    "ZEB"
;   2,              2,    "ZST"
;   2,              3,    "MTR"
;   2,              4,    "AH"
;   2,              5,    "UDT"
;   2,              6,    "SUM"
;   
;   0, cseEXPORT:exFreq,  -1
;   2,              1,    "YEAR"
;   2,              2,    "MONTH"
;   2,              3,    "DAY"
;   2,              4,    "HOUR"
;   2,              5,    "HOURANDSUB"
;   2,              6,    "SUBHOUR"

; SAC 8/28/12 - added Zone Data Dump reports:
;;	"Create conditioned zone ZDD report"		Zone:ZoneRpt	= {	if (Type >= 10) then  UNDEFINED
;;																						else  CreateComp( cseREPORT, Name + "-ZDD" )  endif  }
;;	"Set cond zone ZDD report type"		Zone:ZoneRpt:rpType	= {	"ZDD"  }
;;	"Set cond zone ZDD report zone"		Zone:ZoneRpt:rpZone	= {	CSE_ZONE:Name  }
;	"Create zone ZDD report"						Zone:ZoneRpt	= {	if (LocalCompAssigned( CSE_ZONE ) == 0) then  UNDEFINED
;																						else  CreateComp( cseREPORT, Name + "-ZDD" )  endif  }
;	"Set zone ZDD report type"				Zone:ZoneRpt:rpType	= {	"ZDD"  }
;	"Set zone ZDD report zone"				Zone:ZoneRpt:rpZone	= {	CSE_ZONE:Name  }
;
;	"Create attic zone ZDD report"				Attic:ZoneRpt	= {	if (LocalCompAssigned( CSE_ZONE ) == 0) then  UNDEFINED
;																						else  CreateComp( cseREPORT, Name + "-ZDD" )  endif  }
;	"Set attic zone ZDD report type"		Attic:ZoneRpt:rpType	= {	"ZDD"  }
;	"Set attic zone ZDD report zone"		Attic:ZoneRpt:rpZone	= {	CSE_ZONE:Name  }
;
;	"Create garage zone ZDD report"				Garage:ZoneRpt		= {	if (LocalCompAssigned( CSE_ZONE ) == 0) then  UNDEFINED
;																							else  CreateComp( cseREPORT, Name + "-ZDD" )  endif  }
;	"Set garage zone ZDD report type"	Garage:ZoneRpt:rpType	= {	"ZDD"  }
;	"Set garage zone ZDD report zone"	Garage:ZoneRpt:rpZone	= {	CSE_ZONE:Name  }
;
;	"Create crawl space zone ZDD report"				CrawlSpace:ZoneRpt	= {	if (LocalCompAssigned( CSE_ZONE ) == 0) then  UNDEFINED
;																										else  CreateComp( cseREPORT, Name + "-ZDD" )  endif  }
;	"Set crawl space zone ZDD report type"		CrawlSpace:ZoneRpt:rpType	= {	"ZDD"  }
;	"Set crawl space zone ZDD report zone"		CrawlSpace:ZoneRpt:rpZone	= {	CSE_ZONE:Name  }

;	"Setup for deletion of Report eb - type"	Proj:DeleteCompType[30]	= {	"Report"  }		- SAC 9/8/15 - remove from CSE input due to this moving up toward top (via engine source code)
;	"Setup for deletion of Report eb - name"	Proj:DeleteCompName[30]	= {	"eb"  }

   ; detect and sum number of DHW-Zone connections - SAC 7/7/20 (CHPWH)
   "Set cseDHWSOLARSYS:HasZoneConnection"    cseDHWSOLARSYS:HasZoneConnection  =
      {  if (LocalCompAssigned( swTankZone )) then  1  else  UNDEFINED  endif  }
   "Set cseDHWHEATER:HasZoneConnection"      cseDHWHEATER:HasZoneConnection  =
      {  if (LocalCompAssigned( whZone ) .OR. LocalCompAssigned( whASHPSrcZn )) then  1  else  UNDEFINED  endif  }
   "Set cseDHWLOOPHEATER:HasZoneConnection"  cseDHWLOOPHEATER:HasZoneConnection  =
      {  if (LocalCompAssigned( whZone ) .OR. LocalCompAssigned( whASHPSrcZn )) then  1  else  UNDEFINED  endif  }
   "Set Proj:CSE_DHW_ZoneConnections"        Proj:CSE_DHW_ZoneConnections  =
      {  SumAll( cseDHWSOLARSYS:HasZoneConnection ) + SumAll( cseDHWHEATER:HasZoneConnection ) +
         SumAll( cseDHWLOOPHEATER:HasZoneConnection )  }

   "call rulelist to export IZXFER object data"    Proj:Action =        ; SAC 7/13/20
      {  if (IfValidAnd( CSEInpRpt_AirNetDetails > 0 )==0) then  UNCHANGED
         else  EvalRulelist( "ExportFile_AirNetDetails" )  endif  }

   "call rulelist to export Infiltration (AFMeter) data-1"       Proj:Action =     ; SAC 09/17/20 (tic #1247)   - SAC 10/01/20 (tic #1247)
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. LocalCompAssigned( CSE_AirFlowMETERs[1] ) < 1) then  UNCHANGED
         else  EvalRulelist( "SetupCSEExportFile_Infiltration_1" )  endif  }
   "call rulelist to export Infiltration (AFMeter) data-2"       Proj:Action =     ; SAC 10/01/20 (tic #1247)
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. LocalCompAssigned( CSE_AirFlowMETERs[2] ) < 1) then  UNCHANGED
         else  EvalRulelist( "SetupCSEExportFile_Infiltration_2" )  endif  }
   "call rulelist to export Infiltration (AFMeter) data-3"       Proj:Action = 
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. LocalCompAssigned( CSE_AirFlowMETERs[3] ) < 1) then  UNCHANGED
         else  EvalRulelist( "SetupCSEExportFile_Infiltration_3" )  endif  }
   "call rulelist to export Infiltration (AFMeter) data-4"       Proj:Action = 
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. LocalCompAssigned( CSE_AirFlowMETERs[4] ) < 1) then  UNCHANGED
         else  EvalRulelist( "SetupCSEExportFile_Infiltration_4" )  endif  }
   "call rulelist to export Infiltration (AFMeter) data-5"       Proj:Action = 
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. LocalCompAssigned( CSE_AirFlowMETERs[5] ) < 1) then  UNCHANGED
         else  EvalRulelist( "SetupCSEExportFile_Infiltration_5" )  endif  }
   "call rulelist to export Infiltration (AFMeter) data-6"       Proj:Action =      ; SAC 10/19/20 (tic #1247)
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. LocalCompAssigned( CSE_AirFlowMETERs[6] ) < 1) then  UNCHANGED
         else  EvalRulelist( "SetupCSEExportFile_Infiltration_6" )  endif  }
   "call rulelist to export Infiltration (AFMeter) data-7"       Proj:Action = 
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. LocalCompAssigned( CSE_AirFlowMETERs[7] ) < 1) then  UNCHANGED
         else  EvalRulelist( "SetupCSEExportFile_Infiltration_7" )  endif  }
   "call rulelist to export Infiltration (AFMeter) data-8"       Proj:Action = 
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. LocalCompAssigned( CSE_AirFlowMETERs[8] ) < 1) then  UNCHANGED
         else  EvalRulelist( "SetupCSEExportFile_Infiltration_8" )  endif  }
   "call rulelist to export Infiltration (AFMeter) data-9"       Proj:Action = 
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. LocalCompAssigned( CSE_AirFlowMETERs[9] ) < 1) then  UNCHANGED
         else  EvalRulelist( "SetupCSEExportFile_Infiltration_9" )  endif  }
   "call rulelist to export Infiltration (AFMeter) data-10"       Proj:Action = 
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. LocalCompAssigned( CSE_AirFlowMETERs[10] ) < 1) then  UNCHANGED
         else  EvalRulelist( "SetupCSEExportFile_Infiltration_10" )  endif  }

   "call rulelist to export Infiltration (AFMeter) data-11"       Proj:Action =     ; SAC 11/12/20 (tic #1247)
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. LocalCompAssigned( CSE_AirFlowMETERs[11] ) < 1) then  UNCHANGED
         else  EvalRulelist( "SetupCSEExportFile_Infiltration_11" )  endif  }
   "call rulelist to export Infiltration (AFMeter) data-12"       Proj:Action = 
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. LocalCompAssigned( CSE_AirFlowMETERs[12] ) < 1) then  UNCHANGED
         else  EvalRulelist( "SetupCSEExportFile_Infiltration_12" )  endif  }
   "call rulelist to export Infiltration (AFMeter) data-13"       Proj:Action = 
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. LocalCompAssigned( CSE_AirFlowMETERs[13] ) < 1) then  UNCHANGED
         else  EvalRulelist( "SetupCSEExportFile_Infiltration_13" )  endif  }
   "call rulelist to export Infiltration (AFMeter) data-14"       Proj:Action = 
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. LocalCompAssigned( CSE_AirFlowMETERs[14] ) < 1) then  UNCHANGED
         else  EvalRulelist( "SetupCSEExportFile_Infiltration_14" )  endif  }
   "call rulelist to export Infiltration (AFMeter) data-15"       Proj:Action = 
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. LocalCompAssigned( CSE_AirFlowMETERs[15] ) < 1) then  UNCHANGED
         else  EvalRulelist( "SetupCSEExportFile_Infiltration_15" )  endif  }
   "call rulelist to export Infiltration (AFMeter) data-16"       Proj:Action = 
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. LocalCompAssigned( CSE_AirFlowMETERs[16] ) < 1) then  UNCHANGED
         else  EvalRulelist( "SetupCSEExportFile_Infiltration_16" )  endif  }
   "call rulelist to export Infiltration (AFMeter) data-17"       Proj:Action = 
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. LocalCompAssigned( CSE_AirFlowMETERs[17] ) < 1) then  UNCHANGED
         else  EvalRulelist( "SetupCSEExportFile_Infiltration_17" )  endif  }
   "call rulelist to export Infiltration (AFMeter) data-18"       Proj:Action = 
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. LocalCompAssigned( CSE_AirFlowMETERs[18] ) < 1) then  UNCHANGED
         else  EvalRulelist( "SetupCSEExportFile_Infiltration_18" )  endif  }
   "call rulelist to export Infiltration (AFMeter) data-19"       Proj:Action = 
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. LocalCompAssigned( CSE_AirFlowMETERs[19] ) < 1) then  UNCHANGED
         else  EvalRulelist( "SetupCSEExportFile_Infiltration_19" )  endif  }
   "call rulelist to export Infiltration (AFMeter) data-20"       Proj:Action = 
      {  if (IfValidAnd( CSERpt_Infiltration > 0 )==0 .OR. LocalCompAssigned( CSE_AirFlowMETERs[20] ) < 1) then  UNCHANGED
         else  EvalRulelist( "SetupCSEExportFile_Infiltration_20" )  endif  }

   "call rulelist to setup CSV exports of hourly RSYS output"     cseRSYS:Action =        ; SAC 12/09/20
      {  if (IfValidAnd( Proj:CSERpt_AllRSysHrly > 0 )==0) then  UNCHANGED
         else  EvalRulelist( "ExportFile_HourlyRSYSOutput", 1 )  endif  }

END


;*************************************************************************
RULELIST "CSE_Defaulting_Project" 1 0 0 1
;*************************************************************************
	"Create cseTOP component (if none exists)"	Proj:Action = {	if (ComponentCount( cseTOP ) > 0) then  UNCHANGED
																						else  CreateComp( cseTOP, "CSE run" )  endif  }

	"Default cseTOP:repHdrL"		cseTOP:repHdrL	= {	if (strlen( Global( Proj:RunTitle ) ) > 0) then  Global( Proj:RunTitle )
																		else if (strlen( Global( Proj:SimReportHeader ) ) > 0) then  Proj:SimReportHeader
																		else  "CA Res Simulation"  endif endif  }

   ; SAC 4/22/19 - revised to remove any leading directory/path info, since 
	;"Default cseTOP:wfName"			cseTOP:wfName	= {	Global( Proj:WeatherFileName )  }
	"Default cseTOP:wfName"			cseTOP:wfName	= {	Format( "%s.%s", SplitPath( Global( Proj:WeatherFileName ), 3 ), SplitPath( Global( Proj:WeatherFileName ), 4 ) )  }

   "Set cseTOP:runTitle - written to report footers, export headers, and in the title lines of INP, LOG, and ERR reports"     ; SAC 10/05/20
      cseTOP:runTitle = {  if (GlobalStatus( Proj:RunTitle ) > 0)
                           then  Format( "%s  /  %s  /  %s", Proj:RunTitle, Proj:RunID, Proj:ProjFileName )
                           else  Format( "(RunTitle not specified)  /  %s  /  %s", Proj:RunID, Proj:ProjFileName )  endif  }
   "Set cseTOP:runTitle (2) - concatenate Path"     ; SAC 10/05/20
      cseTOP:runTitle = {  if (GlobalStatus( Proj:ProcessingPath ) > 0) then  runTitle + "  /  " + Proj:ProcessingPath
                           else if (GlobalStatus( Proj:ModelPath ) > 0) then  runTitle + "  /  " + Proj:ModelPath
                           else if (GlobalStatus( Proj:BatchPath ) > 0) then  runTitle + "  /  " + Proj:BatchPath
                           else  UNCHANGED  endif endif endif  }
   "Set cseTOP:runTitle (3) - replace any backslashes w/ forward to ensure not interpretted as formatting chars"     ; SAC 10/05/20
      cseTOP:runTitle = {  ReplaceInString( "\", "/" )  }
;   "Set cseTOP:runTitle (2) - concatenate Path"     ; SAC 10/05/20
;      cseTOP:runTitle = {  if (GlobalStatus( Proj:ProcessingPath ) > 0) then  runTitle + Format( "  /  %s", Proj:ProcessingPath )
;                           else if (GlobalStatus( Proj:ModelPath ) > 0) then  runTitle + Format( "  /  %s", Proj:ModelPath )
;                           else if (GlobalStatus( Proj:BatchPath ) > 0) then  runTitle + Format( "  /  %s", Proj:BatchPath )
;                           else  UNCHANGED  endif endif endif  }
; removed as not effecting export CSV header as expected - SAC 10/05/20
;   "Set cseTOP:runSerial - serial # for the simulation. Increments on each run in a session; appears in report footers"       ; SAC 10/05/20
;      cseTOP:runSerial = { if (IfValidAnd( Proj:RunNumber >= 0 )) then  Proj:RunNumber  else  UNDEFINED  endif  }

;	"Default cseTOP:begDay=Jan 1                     //
;	"Default cseTOP:endDay=Dec 31                    //
	"Default cseTOP:ebTolHour"		cseTOP:ebTolHour	= {	0.001  }
	"Default cseTOP:ebTolDay"     cseTOP:ebTolDay	= {	0.001  }
	"Default cseTOP:ebTolMon"     cseTOP:ebTolMon	= {	0.001  }
	"Default cseTOP:ebTolSubHr"   cseTOP:ebTolSubHr	= {	0.001  }

;	"Default cseTOP:jan1DOW"		cseTOP:jan1DOW		= {	"TUE"  }
   ; SAC 7/29/18 - removed all logic pertaining to DHWCalcMethod (related to transition from T24DHW DLLs to CSE)
	"Default cseTOP:jan1DOW"      cseTOP:jan1DOW		= {	"THU"  }

	; SAC 1/15/15 - call subordinate rulelists to setup simulation speed inputs based on Proj:SimSpeedOption
	"Setup simulation speed settings"	Proj:Action	= {	switch (SimSpeedOption)
																				case  0 :  EvalRulelist( "CSE_SimSpeedOption_Compliance" )
																				case  1 :  EvalRulelist( "CSE_SimSpeedOption_Quick"      )
																				case  2 :  EvalRulelist( "CSE_SimSpeedOption_Custom"     )
																				default :  UNCHANGED
																			endswitch  }

;	"Default cseTOP:skyModel"     cseTOP:skyModel	= {	"anisotropic"  }
;	"Default cseTOP:dflExH"			cseTOP:dflExH		= {	5.158  }					; Exterior combined surface coefficient for regular walls  (5.160 for FL vs. 5.158 for BESTEST ???)
;	"Default cseTOP:windF"			cseTOP:windF		= {	0.25   }					; site located exactly at weather station with wind at 0.2m below top of building
  ; SAC 1/13/13 - write out Proj:FrontOrientation as cseTOP:bldgAzm
	"Default cseTOP:bldgAzm"		cseTOP:bldgAzm		= {   Proj:FrontOrientation  }

   ; SAC 7/29/18 - removed all logic pertaining to DHWCalcMethod (related to transition from T24DHW DLLs to CSE)
	"Default cseTOP:dt"           cseTOP:dt			= {	"YES"  }
; file I/O must be altered to output these items w/OUT bounding double quotes
;	"Default cseTOP:dtBegDay"     cseTOP:dtBegDay	= {	"Mar 08"  }		; 2009 calendar "In 2009, daylight saving time began at 2:00 a.m. (02:00) on Sunday, March 8, and it ended at 2:00 a.m. (02:00) on Sunday, November 1."
;	"Default cseTOP:dtEndDay"     cseTOP:dtEndDay	= {	"Nov 01"  }

; SAC 12/6/16 - inserted some new run ID #defines up top
   ;   <RunDateFmt>10:27, Wed, Sep 14, 2016</RunDateFmt>
   ;   <RunID>User</RunID>
   ;   <AnalysisType>Proposed and Standard</AnalysisType>
   ;   <CompCodeBase>CA2016</CompCodeBase>
   ;   <StdDesignBase>CA2016</StdDesignBase>
   ;   <StandardsVersion>Compliance 2017</StandardsVersion>
   ;   <DesignRatingBase>RESNET2014</DesignRatingBase>
	"Set Proj:CSE_DefineName[1]"		Proj:CSE_DefineName[1]		= {	"RunDateFmt"  }
	"Set Proj:CSE_DefineType[1]"		Proj:CSE_DefineType[1]		= {	 3  }		; #define type: 0-name only, 1-float, 2-string w/ quotes, 3-string no quotes
	"Set Proj:CSE_DefineString[1]"	Proj:CSE_DefineString[1]	= {	 RunDateFmt   }
	"Set Proj:CSE_DefineName[2]"		Proj:CSE_DefineName[2]		= {	"RunID"  }
	"Set Proj:CSE_DefineType[2]"		Proj:CSE_DefineType[2]		= {	 3  }
	"Set Proj:CSE_DefineString[2]"	Proj:CSE_DefineString[2]	= {
         switch (RunAbbrev)
           case "u"     :  Format( "          %5.0f   // User",             0 )
           case "pp"    :  Format( "          %5.0f   // PrelimProp",       1 )
           case "pp-N"  :  Format( "          %5.0f   // PrelimProp-North", 2 )
           case "pp-E"  :  Format( "          %5.0f   // PrelimProp-East",  3 )
           case "pp-S"  :  Format( "          %5.0f   // PrelimProp-South", 4 )
           case "pp-W"  :  Format( "          %5.0f   // PrelimProp-West",  5 )
           case "smf"   :  Format( "          %5.0f   // StdMixedFuel",     6 )
           case "p"     :  Format( "          %5.0f   // Proposed",         7 )
           case "p-N"   :  Format( "          %5.0f   // Proposed-North",   8 )
           case "p-E"   :  Format( "          %5.0f   // Proposed-East",    9 )
           case "p-S"   :  Format( "          %5.0f   // Proposed-South",  10 )
           case "p-W"   :  Format( "          %5.0f   // Proposed-West",   11 )
           case "s"     :  Format( "          %5.0f   // Standard",        12 )
           case "dr"    :  Format( "          %5.0f   // DesignRating",    13 )
           case "pfx"   :  Format( "          %5.0f   // PropFlex",        14 )
           case "pfx-N" :  Format( "          %5.0f   // PropFlex-North",  15 )
           case "pfx-E" :  Format( "          %5.0f   // PropFlex-East",   16 )
           case "pfx-S" :  Format( "          %5.0f   // PropFlex-South",  17 )
           case "pfx-W" :  Format( "          %5.0f   // PropFlex-West",   18 )
           default      :  Format( "          %5.0f   // unknown",        999 )
         endswitch  }
	"Set Proj:CSE_DefineName[3]"		Proj:CSE_DefineName[3]		= {	"AnalysisType"  }
	"Set Proj:CSE_DefineType[3]"		Proj:CSE_DefineType[3]		= {	 3  }
	"Set Proj:CSE_DefineString[3]"	Proj:CSE_DefineString[3]	= {	 Format(  "   %5.0f   // %s", AnalysisType, EnumString( AnalysisType ) )  }
	"Set Proj:CSE_DefineName[4]"		Proj:CSE_DefineName[4]	   = {   "CompCodeBase" }
	"Set Proj:CSE_DefineType[4]"		Proj:CSE_DefineType[4]	   = {	 3  }
	"Set Proj:CSE_DefineString[4]"	Proj:CSE_DefineString[4]   = {    Format(  "   %5.0f   // %s", CompCodeBase, EnumString( CompCodeBase ) )  }
	"Set Proj:CSE_DefineName[5]"		Proj:CSE_DefineName[5]	   = {   "StdDesignBase" }
	"Set Proj:CSE_DefineType[5]"		Proj:CSE_DefineType[5]	   = {	 3  }
	"Set Proj:CSE_DefineString[5]"	Proj:CSE_DefineString[5]   = {    Format(   "  %5.0f   // %s", StdDesignBase, EnumString( StdDesignBase ) )  }
	"Set Proj:CSE_DefineName[6]"		Proj:CSE_DefineName[6]	   = {   "StandardsVersion" }
	"Set Proj:CSE_DefineType[6]"		Proj:CSE_DefineType[6]	   = {    3  }
	"Set Proj:CSE_DefineString[6]"	Proj:CSE_DefineString[6]   = {    Format(     "%4.0f   // %s", StandardsVersion, EnumString( StandardsVersion ) ) }
	"Set Proj:CSE_DefineName[7]"		Proj:CSE_DefineName[7]	   = {   "DesignRatingBase" }
	"Set Proj:CSE_DefineType[7]"		Proj:CSE_DefineType[7]	   = {    3  }
	"Set Proj:CSE_DefineString[7]"	Proj:CSE_DefineString[7]   = {    Format(     "%4.0f   // %s", DesignRatingBase, EnumString( DesignRatingBase ) ) }
	"Set Proj:CSE_DefineName[8]"		Proj:CSE_DefineName[8]	   = {   "ClimateZone" }
	"Set Proj:CSE_DefineType[8]"		Proj:CSE_DefineType[8]	   = {    3  }
	"Set Proj:CSE_DefineString[8]"	Proj:CSE_DefineString[8]   = {    Format( "    %5.0f   // %s", ClimateZone, EnumString( ClimateZone ) ) }
      ; reserved for future - CSE_Define*[9]

   ; SAC 4/3/17 - PreCooling
	"Set Proj:CSE_DefineName[10]"		Proj:CSE_DefineName[10]	   = {   if (PreCl_DataValid < 1 .OR. IsPropFlexRun < 1) then  UNDEFINED  else  "PCset"  endif }
	"Set Proj:CSE_DefineType[10]"		Proj:CSE_DefineType[10]	   = {   if (PreCl_DataValid < 1 .OR. IsPropFlexRun < 1) then  UNDEFINED  else   3       endif }
	"Set Proj:CSE_DefineString[10]"	Proj:CSE_DefineString[10]  = {   if (PreCl_DataValid < 1 .OR. IsPropFlexRun < 1) then  UNDEFINED  else   PreCl_PCsetTstat  endif }

; 1/3/13 - added design day #defines
	"Set Proj:CSE_DefineName[11]"		Proj:CSE_DefineName[11]		= {	"DD1"  }
	"Set Proj:CSE_DefineType[11]"		Proj:CSE_DefineType[11]		= {	3  }		; #define type: 0-name only, 1-float, 2-string w/ quotes, 3-string no quotes
	"Set Proj:CSE_DefineString[11]"	Proj:CSE_DefineString[11]	= {	T24RClimateZoneDesignDay:DD1( "WeatherFileSet", Proj:WeatherFileSet, "ClimateZone", Proj:ClimateZone )  }  ; "Jun 30"  }
	"Set Proj:CSE_DefineName[12]"		Proj:CSE_DefineName[12]		= {	"CD1"  }
	"Set Proj:CSE_DefineType[12]"		Proj:CSE_DefineType[12]		= {	3  }		; #define type: 0-name only, 1-float, 2-string w/ quotes, 3-string no quotes
	"Set Proj:CSE_DefineString[12]"	Proj:CSE_DefineString[12]	= {	T24RClimateZoneDesignDay:CD1( "WeatherFileSet", Proj:WeatherFileSet, "ClimateZone", Proj:ClimateZone )  }  ; "Jul 10"  }
	"Set Proj:CSE_DefineName[13]"		Proj:CSE_DefineName[13]		= {	"HD1"  }
	"Set Proj:CSE_DefineType[13]"		Proj:CSE_DefineType[13]		= {	3  }		; #define type: 0-name only, 1-float, 2-string w/ quotes, 3-string no quotes
	"Set Proj:CSE_DefineString[13]"	Proj:CSE_DefineString[13]	= {	T24RClimateZoneDesignDay:HD1( "WeatherFileSet", Proj:WeatherFileSet, "ClimateZone", Proj:ClimateZone )  }  ; "Dec 03"  }
	
	"Set Proj:CSE_DefineName[14]"		Proj:CSE_DefineName[14]	   = { "SEASONCHANGESETPT" }
	"Set Proj:CSE_DefineType[14]"		Proj:CSE_DefineType[14]	   = {	1  }
	"Set Proj:CSE_DefineFloat[14]"	Proj:CSE_DefineFloat[14]   =              ; SAC 2/7/20 (tic #1175)
      {  if (IfValidAnd( EnableResearchMode > 0.5 ) .AND. LocalStatus( PropSeasonChangeSetpt ) > 0 .AND.
	          (IfValidAnd( RunAbbrev = "p" ) .OR. IfValidAnd( RunAbbrev = "u" )))
	      then  PropSeasonChangeSetpt
	      else  SeasonChangeSetpt  endif  }

	"Set Proj:CSE_DefineName[15]"		Proj:CSE_DefineName[15]	   = { "FANVENTLOCKOUTTEMP" }
	"Set Proj:CSE_DefineType[15]"		Proj:CSE_DefineType[15]	   = {	1  }
	"Set Proj:CSE_DefineFloat[15]"	Proj:CSE_DefineFloat[15]   =              ; SAC 2/7/20 (tic #1175)
      {  if (IfValidAnd( EnableResearchMode > 0.5 ) .AND. LocalStatus( PropFanVentLockoutTemp ) > 0 .AND.
	          (IfValidAnd( RunAbbrev = "p" ) .OR. IfValidAnd( RunAbbrev = "u" )))
	      then  PropFanVentLockoutTemp
	      else  FanVentLockoutTemp  endif  }

	"Set Proj:CSE_DefineName[16]"		Proj:CSE_DefineName[16]	   = { "ISSEASONCOOLING" }
	"Set Proj:CSE_DefineType[16]"		Proj:CSE_DefineType[16]	   = {	3 }
	"Set Proj:CSE_DefineString[16]"	Proj:CSE_DefineString[16]  =              ; SAC 2/7/20 (tic #1175)
      {  if (IfValidAnd( EnableResearchMode > 0.5 ) .AND. LocalStatus( PropIsSeasCoolingExp ) > 0 .AND.
	          (IfValidAnd( RunAbbrev = "p" ) .OR. IfValidAnd( RunAbbrev = "u" )))
	      then  PropIsSeasCoolingExp
	      else  "(@weather.taDbAvg07 > SEASONCHANGESETPT)"  endif  }

	"Set Proj:CSE_DefineName[17]"		Proj:CSE_DefineName[17]	   = { "FANVENTAVAIL" }
	"Set Proj:CSE_DefineType[17]"		Proj:CSE_DefineType[17]	   = {	3 }
	"Set Proj:CSE_DefineString[17]"	Proj:CSE_DefineString[17]  =              ; SAC 1/10/20 (tic #1175)
	   {  if (IfValidAnd( EnableResearchMode > 0.5 ) .AND. LocalStatus( ClVentFanAvailExp ) > 0 .AND.
	          (IfValidAnd( RunAbbrev = "p" ) .OR. IfValidAnd( RunAbbrev = "u" )))
	      then  ClVentFanAvailExp
	      else  "(@weather.taDbAvg07 > FANVENTLOCKOUTTEMP)"  endif  }       ; <<== insert new default expression HERE

	"Set Proj:CSE_DefineName[18]"		Proj:CSE_DefineName[18]	   = { "WINDOWVENTAVAIL" }
	"Set Proj:CSE_DefineType[18]"		Proj:CSE_DefineType[18]	   = {	3 }
	; replaced 2019.2.0+ WVA of "($hour < 24 && ($hour > 12 || $radDiff+$radbeam > .01))" -with- "(!@Top.autoSizing && ($hour < 24 && ($hour > 12 || $radDiff+$radbeam > .01)))" from BAW - SAC 7/13/20
	"Set Proj:CSE_DefineString[18]"	Proj:CSE_DefineString[18]  =              ; SAC 2/7/20 (tic #1175)      ; SAC 2/13/20 - installed mod for 2019.2.0+ (tic #1175)     ; enable 19.2.0+ mod for 2019.1.3 - SAC 7/15/20
      {  if (IfValidAnd( EnableResearchMode > 0.5 ) .AND. LocalStatus( PropWindowVentAvailExp ) > 0 .AND.
	          (IfValidAnd( RunAbbrev = "p" ) .OR. IfValidAnd( RunAbbrev = "u" )))
	      then  PropWindowVentAvailExp
	      else if (IfValidAnd( AnalysisVersion >= 190103 ))
	      then  "(!@Top.autoSizing && ($hour < 24 && ($hour > 12 || $radDiff+$radbeam > .01)))"
	      else  "($hour < 24 && ($hour > 12 || $radDiff > 1))"  endif endif  }

	; SAC 7/6/15
	"Set Proj:CSE_DefineName[19]"		Proj:CSE_DefineName[19]		= { "HWUSEF_WD" }
	"Set Proj:CSE_DefineType[19]"		Proj:CSE_DefineType[19]		= {	3 }
	"Set Proj:CSE_DefineString[19]"	Proj:CSE_DefineString[19]	= { "hourval( 0.014, 0.008, 0.009, 0.011, 0.020, 0.044, 0.089, 0.107, 0.089, 0.066, 0.052, 0.038, 0.036, 0.033, 0.032, 0.026, 0.042, 0.048, 0.052, 0.047, 0.042, 0.039, 0.036, 0.022 )" }

	"Set Proj:CSE_DefineName[20]"		Proj:CSE_DefineName[20]		= { "HWUSEF_WE" }
	"Set Proj:CSE_DefineType[20]"		Proj:CSE_DefineType[20]		= {	3 }
	"Set Proj:CSE_DefineString[20]"	Proj:CSE_DefineString[20]	= { "hourval( 0.018, 0.010, 0.009, 0.008, 0.015, 0.023, 0.026, 0.047, 0.077, 0.083, 0.074, 0.061, 0.051, 0.043, 0.039, 0.039, 0.052, 0.058, 0.056, 0.052, 0.047, 0.044, 0.040, 0.028 )" }

	; DHW use #define values 21-33 - left undefined if not using new DHW use profiles - SAC 3/15/16
	"Set Proj:CSE_Define*[21-33] depending on DHW Use mechanism"		Proj:Action	= {
														if (CSEDHWUseMethod == 1)	then	EvalRulelist( "CSE_BlastDHWUseInclude" )
																							else	EvalRulelist( "CSE_SetDHWUseInclude"   )  endif  }

	; Internal Gains #define values 34-60 - left undefined for IntGainsMethod < 2016 - SAC 4/13/16
	"Set Proj:CSE_Define*[34-60] depending on IntGainsMethod"		Proj:Action	= {
														if (IntGainsMethod == 2016)	then	EvalRulelist( "CSE_Set2016InternalGains" )
																								else	EvalRulelist( "CSE_BlastInternalGains"   )  endif  }

   ; SAC 11/4/18 - VCHP
	"Set Proj:CSE_DefineName[61]"		Proj:CSE_DefineName[61]	   = { "FVCHPC" }
	"Set Proj:CSE_DefineType[61]"		Proj:CSE_DefineType[61]	   = {	3  }
	"Set Proj:CSE_DefineString[61]"	Proj:CSE_DefineString[61]  = { "0.95		// VCHP cooling input energy factor" }
	"Set Proj:CSE_DefineName[62]"		Proj:CSE_DefineName[62]	   = { "FVCHPH" }
	"Set Proj:CSE_DefineType[62]"		Proj:CSE_DefineType[62]	   = {	3  }
	"Set Proj:CSE_DefineString[62]"	Proj:CSE_DefineString[62]  = { "0.88		// VCHP heating input energy factor" }

	"Set Proj:CSE_DefineName[63]"		Proj:CSE_DefineName[63]	   = { "NumCntrlWHtrs( s)" }     ; SAC 12/4/19 - to facilitate central electric DHWSys heater autosizing
	"Set Proj:CSE_DefineType[63]"		Proj:CSE_DefineType[63]	   = {   3  }
;	"Set Proj:CSE_DefineString[63]"	Proj:CSE_DefineString[63]  = { "max( 1, @DHWSYS[ s].loadMax / (15400 * @DHWSYS[ s].loadMaxDur))" }
	"Set Proj:CSE_DefineString[63]"	Proj:CSE_DefineString[63]  = { "tofloat( 1+fix(@DHWSYS[ s].loadMax / (15400. * @DHWSYS[ s].loadMaxDur)))" }

	"Set Proj:CSE_DefineName[64]"		Proj:CSE_DefineName[64]	   = { "RunFileName" }
	"Set Proj:CSE_DefineType[64]"		Proj:CSE_DefineType[64]	   = {   3  }
	"Set Proj:CSE_DefineString[64]"	Proj:CSE_DefineString[64]  = { ValidOr( ProjFileNameNoExt, "" ) + ValidOr( RunIDProcFile, "" )  }

   ; AWHP - SAC 12/04/22
	"Set Proj:CSE_DefineName[61]"		Proj:CSE_DefineName[65]	   = { "FAWHPC" }
	"Set Proj:CSE_DefineType[61]"		Proj:CSE_DefineType[65]	   = {	3  }
	"Set Proj:CSE_DefineString[61]"	Proj:CSE_DefineString[65]  = { "0.92		// AWHP cooling input energy factor" }
	"Set Proj:CSE_DefineName[62]"		Proj:CSE_DefineName[66]	   = { "FAWHPH" }
	"Set Proj:CSE_DefineType[62]"		Proj:CSE_DefineType[66]	   = {	3  }
	"Set Proj:CSE_DefineString[62]"	Proj:CSE_DefineString[66]  = { "0.98		// AWHP heating input energy factor" }

	"Set Proj:CSE_DefineName[65]"		Proj:CSE_DefineName[67]	   = { UNDEFINED }      ; next #define goes here...
	"Set Proj:CSE_DefineType[65]"		Proj:CSE_DefineType[67]	   = { UNDEFINED }
	"Set Proj:CSE_DefineFloat[65]"	Proj:CSE_DefineFloat[67]   = { UNDEFINED }
	"Set Proj:CSE_DefineString[65]"	Proj:CSE_DefineString[67]  = { UNDEFINED }


   "Set cseTOP:heatDsTDbO"       cseTOP:heatDsTDbO		=                       ; revised for new design day weather data - SAC 08/31/22 (tic #1338)
      {  if (Proj:AnalysisVersion >= 220000 .AND. IfValidAnd( Proj:WeatherStation > 0 ))
         then  WeatherCliZnDsgnDay2022:DB996( "Station_Name", EnumString( Proj:WeatherStation ) )
         else  T24RClimateZoneDesignDay:HtgDesign( "WeatherFileSet", Proj:WeatherFileSet, "ClimateZone", Proj:ClimateZone )
         endif  }
   "Set cseTOP:HottestMonthNum"     cseTOP:HottestMonthNum =         ; moved up from below - SAC 09/02/22 (tic #1338)
      {  if (Proj:AnalysisVersion >= 220000 .AND. IfValidAnd( Proj:WeatherStation > 0 ))
         then  WeatherCliZnDsgnDay2022:Hottest_Month( "Station_Name", EnumString( Proj:WeatherStation ) )
         else  UNDEFINED  endif  }
   "Create cseDESCOND(s) to describe cooling design days"   Proj:Action =     ; SAC 08/31/22 (tic #1338)
      {  if (IfValidAnd( cseTOP:HottestMonthNum > 0 ))
         then  EvalRulelist( "CSE_Setup_DESCOND" )
         else  UNCHANGED  endif  }
   "Set cseTOP:coolDsDay_x"      cseTOP:coolDsDay_x	=                       ; updated to prevent setting coolDsDay_x if any cseDESCOND objects exist - SAC 08/31/22 (tic #1338)
      {  if (ComponentCount( cseDESCOND ) > 0) then  UNDEFINED
         else  "DD1"  endif  }   ; trailing '_x' in property name causes output string to NOT be enclosed in double quotes

	; SAC 5/1/14 - added logic to prevent output of ventAvail_x when CFIClVent not selected @ the project level (mainly to turn off for Std design run - GC #298)
   "Set cseTOP:ventAvail_x"      cseTOP:ventAvail_x	= {	if (Proj:CSEVentAvailZonal) then  "zonal"    ; SAC 7/12/20
                                                            else if (SumAll( HVACSys:CFIClVentFlow ) > 1 .AND. Proj:UnitClVentOption == 3)
																				then  "FANVENTAVAIL ? RSYSOAV : WholeBuilding "		; turns off window ventilation during cooling mode, but leaves it on in case of overheating in heating mode.  Only the OAV system runs in cooling mode.
																				else  UNDEFINED  endif endif  }   ; SAC 8/26/13 - OAV
END
;*************************************************************************


;*************************************************************************
;*************************************************************************
RULELIST "CSE_SimulationCleanUp" 1 0 0 1
;   Rules which are executed immediately following a CSE simulation
;*************************************************************************
;*************************************************************************

	"Delete all cseTOP components"					Proj:Action = {	DeleteAllComps( cseTOP )  }
	"Delete all cseDESCOND components"				Proj:Action = {	DeleteAllComps( cseDESCOND )  }     ; SAC 08/31/22 (tic #1338)
	"Delete all cseMETER components"					Proj:Action = {	DeleteAllComps( cseMETER )  }

	"Delete all CSE Cons-related components"		Proj:Action = {	EvalRulelist( "CSE_Cleanup_Cons" )  }

	"Delete all cseZONE components"					Proj:Action = {	DeleteAllComps( cseZONE )  }

	"Delete all CSE Cons-related components"		Proj:Action = {	EvalRulelist( "CSE_Cleanup_Surfaces" )  }

	"Delete all cseRSYS components"					Proj:Action = {	DeleteAllComps( cseRSYS )  }
	"Blast all cseIZXFER components"					Proj:Action	= {	DeleteAllComps( cseIZXFER )  }

	"Delete all CSE Cons-related components"		Proj:Action = {	EvalRulelist( "CSE_Cleanup_DHW" )  }

	"Delete all cseREPORT components"				Proj:Action = {	DeleteAllComps( cseREPORT )  }      ; SAC 6/18/20 - fix bug where target EDR analysis throwing CSE error due to multiple EXPORTFILE objects
	"Delete all cseEXPORT components"				Proj:Action = {	DeleteAllComps( cseEXPORT )  }
	"Delete all cseEXPORTFILE components"			Proj:Action = {	DeleteAllComps( cseEXPORTFILE )  }
;"dbg" Proj:Action = { PostMessageToLog( "in CSE_SimulationCleanUp rulelist for run %s, just deleted all cseEXPORTFILEs objects", Proj:RunAbbrev ) }

  ; Blast meter & export components used to track electric and fuel use
	"Blast site-wide Elec meter"			Proj:CSE_ElecMETER			= {	if (LocalCompAssigned( CSE_ElecMETER        )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast site-wide NatGas meter"		Proj:CSE_NatGasMETER			= {	if (LocalCompAssigned( CSE_NatGasMETER      )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast site-wide <other> meter"		Proj:CSE_OtherFuelMETER		= {	if (LocalCompAssigned( CSE_OtherFuelMETER   )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast site-wide Elec export"			Proj:CSE_ElecEXPORT			= {	if (LocalCompAssigned( CSE_ElecEXPORT       )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast site-wide NatGas export"		Proj:CSE_NatGasEXPORT		= {	if (LocalCompAssigned( CSE_NatGasEXPORT     )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast site-wide <other> export"		Proj:CSE_OtherFuelEXPORT	= {	if (LocalCompAssigned( CSE_OtherFuelEXPORT  )) then  DeleteComp()  else  UNCHANGED  endif  }
END


; SAC 1/15/15 - added rulelists to setup cseTOP properties that govern simulation speed/accuracy
;*************************************************************************
RULELIST "CSE_SimSpeedOption_Compliance" 1 0 0 1                                          ; SAC 4/29/15 - values replaced 4/29/15 from BAW
   "Set (speed = Compliance) cseTOP:nSubSteps"     cseTOP:nSubSteps     = {    20        }		;    30        }
   "Set (speed = Compliance) cseTOP:wuDays"        cseTOP:wuDays        = {    30        }		;    30        }
   "Set (speed = Compliance) cseTOP:awTrigSlr"     cseTOP:awTrigSlr     = {     0.1      }		;     0.05     }
   "Set (speed = Compliance) cseTOP:anTolAbs"      cseTOP:anTolAbs      = {     0.005    }		;     0.00125  }
   "Set (speed = Compliance) cseTOP:anTolRel"      cseTOP:anTolRel      = {     0.0005   }		;     0.0001   }
   "Set (speed = Compliance) cseTOP:auszTol"       cseTOP:auszTol       = {     0.01     }		;     0.005    }
   "Set (speed = Compliance) cseTOP:awTrigT"       cseTOP:awTrigT       = {     3        }		;     1        }
   "Set (speed = Compliance) cseTOP:awTrigH"       cseTOP:awTrigH       = {     0.3      }		;     0.1      }
END
;*************************************************************************  Quick modified by BW 2/4/15 to Rev 3g
RULELIST "CSE_SimSpeedOption_Quick" 1 0 0 1
   "Set (speed = Quick) cseTOP:nSubSteps"          cseTOP:nSubSteps     = {    6         }
   "Set (speed = Quick) cseTOP:wuDays"             cseTOP:wuDays        = {    15        }
   "Set (speed = Quick) cseTOP:awTrigSlr"          cseTOP:awTrigSlr     = {     0.3      }
   "Set (speed = Quick) cseTOP:anTolAbs"           cseTOP:anTolAbs      = {     0.03     }
   "Set (speed = Quick) cseTOP:anTolRel"           cseTOP:anTolRel      = {     0.003    }
   "Set (speed = Quick) cseTOP:auszTol"            cseTOP:auszTol       = {     0.05     }
   "Set (speed = Quick) cseTOP:awTrigT"            cseTOP:awTrigT       = {    15.       }
   "Set (speed = Quick) cseTOP:awTrigH"            cseTOP:awTrigH       = {     1.       }
END
;*************************************************************************  Custom modified by BW 2/4/15 to Rev C53
RULELIST "Default_SimSpeedOption" 0 0 0 0																																										; SAC 4/29/15 - replaced old Custom w/ previous Compliance settings
   "Default (speed = Custom) Proj:CSE_nSubSteps"   Proj:CSE_nSubSteps   = {  if (IfValidAnd( SimSpeedOption = 2 )==0) then  UNDEFINED  else    30        endif  }		;      20        endif  }
   "Default (speed = Custom) Proj:CSE_wuDays"      Proj:CSE_wuDays      = {  if (IfValidAnd( SimSpeedOption = 2 )==0) then  UNDEFINED  else    30        endif  }		;      30        endif  }
   "Default (speed = Custom) Proj:CSE_AWTrigSlr"   Proj:CSE_AWTrigSlr   = {  if (IfValidAnd( SimSpeedOption = 2 )==0) then  UNDEFINED  else     0.05     endif  }		;       0.1      endif  }
   "Default (speed = Custom) Proj:CSE_ANTolAbs"    Proj:CSE_ANTolAbs    = {  if (IfValidAnd( SimSpeedOption = 2 )==0) then  UNDEFINED  else     0.00125  endif  }		;       0.005    endif  }
   "Default (speed = Custom) Proj:CSE_ANTolRel"    Proj:CSE_ANTolRel    = {  if (IfValidAnd( SimSpeedOption = 2 )==0) then  UNDEFINED  else     0.0001   endif  }		;       0.0005   endif  }
   "Default (speed = Custom) Proj:CSE_auszTol"     Proj:CSE_auszTol     = {  if (IfValidAnd( SimSpeedOption = 2 )==0) then  UNDEFINED  else     0.005    endif  }		;       0.01     endif  }
   "Default (speed = Custom) Proj:CSE_AWTrigT"     Proj:CSE_AWTrigT     = {  if (IfValidAnd( SimSpeedOption = 2 )==0) then  UNDEFINED  else     1        endif  }		;       3        endif  }
   "Default (speed = Custom) Proj:CSE_AWTrigH"     Proj:CSE_AWTrigH     = {  if (IfValidAnd( SimSpeedOption = 2 )==0) then  UNDEFINED  else     0.1      endif  }		;       0.3      endif  }
END
RULELIST "CSE_SimSpeedOption_Custom" 1 0 0 1
   "Set (speed = Custom) cseTOP:nSubSteps"         cseTOP:nSubSteps     = {  Proj:CSE_nSubSteps  }
   "Set (speed = Custom) cseTOP:wuDays"            cseTOP:wuDays        = {  Proj:CSE_wuDays     }
   "Set (speed = Custom) cseTOP:awTrigSlr"         cseTOP:awTrigSlr     = {  Proj:CSE_AWTrigSlr  }
   "Set (speed = Custom) cseTOP:anTolAbs"          cseTOP:anTolAbs      = {  Proj:CSE_ANTolAbs   }
   "Set (speed = Custom) cseTOP:anTolRel"          cseTOP:anTolRel      = {  Proj:CSE_ANTolRel   }
   "Set (speed = Custom) cseTOP:auszTol"           cseTOP:auszTol       = {  Proj:CSE_auszTol    }
   "Set (speed = Custom) cseTOP:awTrigT"           cseTOP:awTrigT       = {  Proj:CSE_AWTrigT    }
   "Set (speed = Custom) cseTOP:awTrigH"           cseTOP:awTrigH       = {  Proj:CSE_AWTrigH    }
END
;*************************************************************************


;************************************************************************* SAC 08/31/22 (tic #1338)
RULELIST "CSE_Setup_DESCOND" 1 0 0 1
   "Create & setup cseDESCOND for hottest month"   cseTOP:coolDsCond[1] =
      {  switch (HottestMonthNum)
            case   7 :  CreateComp( cseDESCOND, "ClgDC_0p4pct_Jul", "CSE_Setup_DESCOND_Jul" )
            case   8 :  CreateComp( cseDESCOND, "ClgDC_0p4pct_Aug", "CSE_Setup_DESCOND_Aug" )
            case   9 :  CreateComp( cseDESCOND, "ClgDC_0p4pct_Sep", "CSE_Setup_DESCOND_Sep" )
            default  :  EvalRulelist( "CSE_Setup_DESCOND_Error" )
         endswitch  }

; TESTING
;   "Create & setup SECOND TEST cseDESCOND for another hot month"   cseTOP:coolDsCond[2] =
;      {  switch (HottestMonthNum)
;            case   7 :  CreateComp( cseDESCOND, "ClgDC_0p4pct_Aug", "CSE_Setup_DESCOND_Aug" )
;            case   8 :  CreateComp( cseDESCOND, "ClgDC_0p4pct_Sep", "CSE_Setup_DESCOND_Sep" )
;            case   9 :  CreateComp( cseDESCOND, "ClgDC_0p4pct_Jul", "CSE_Setup_DESCOND_Jul" )
;            default  :  UNCHANGED
;         endswitch  }

END
;*************************************************************************
RULELIST "CSE_Setup_DESCOND_Jul" 1 0 0 1
   "Set cseDESCOND:dcDay_x"      cseDESCOND:dcDay_x      = {  "Jul 21"  }
   "Set cseDESCOND:dcDB"         cseDESCOND:dcDB         = {  WeatherCliZnDsgnDay2022:DB004_Jul(      "Station_Name", EnumString( Proj:WeatherStation ) )  }
   "Set cseDESCOND:dcMCDBR"      cseDESCOND:dcMCDBR      = {  WeatherCliZnDsgnDay2022:MDBR_DB050_Jul( "Station_Name", EnumString( Proj:WeatherStation ) )  }
   "Set cseDESCOND:dcMCWB"       cseDESCOND:dcMCWB       = {  WeatherCliZnDsgnDay2022:MCWB_DB004_Jul( "Station_Name", EnumString( Proj:WeatherStation ) )  }
   "Set cseDESCOND:dcMCWBR"      cseDESCOND:dcMCWBR      = {  WeatherCliZnDsgnDay2022:MWBR_DB050_Jul( "Station_Name", EnumString( Proj:WeatherStation ) )  }
   "Set cseDESCOND:dcTauB"       cseDESCOND:dcTauB       = {  WeatherCliZnDsgnDay2022:Taub_Jul(       "Station_Name", EnumString( Proj:WeatherStation ) )  }
   "Set cseDESCOND:dcTauD"       cseDESCOND:dcTauD       = {  WeatherCliZnDsgnDay2022:Taud_Jul(       "Station_Name", EnumString( Proj:WeatherStation ) )  }
   "Set cseDESCOND:dcWindSpeed"  cseDESCOND:dcWindSpeed  = {  WeatherCliZnDsgnDay2022:WSAvg_Jul(      "Station_Name", EnumString( Proj:WeatherStation ) )  }
END
;*************************************************************************
RULELIST "CSE_Setup_DESCOND_Aug" 1 0 0 1
   "Set cseDESCOND:dcDay_x"      cseDESCOND:dcDay_x      = {  "Aug 21"  }
   "Set cseDESCOND:dcDB"         cseDESCOND:dcDB         = {  WeatherCliZnDsgnDay2022:DB004_Aug(      "Station_Name", EnumString( Proj:WeatherStation ) )  }
   "Set cseDESCOND:dcMCDBR"      cseDESCOND:dcMCDBR      = {  WeatherCliZnDsgnDay2022:MDBR_DB050_Aug( "Station_Name", EnumString( Proj:WeatherStation ) )  }
   "Set cseDESCOND:dcMCWB"       cseDESCOND:dcMCWB       = {  WeatherCliZnDsgnDay2022:MCWB_DB004_Aug( "Station_Name", EnumString( Proj:WeatherStation ) )  }
   "Set cseDESCOND:dcMCWBR"      cseDESCOND:dcMCWBR      = {  WeatherCliZnDsgnDay2022:MWBR_DB050_Aug( "Station_Name", EnumString( Proj:WeatherStation ) )  }
   "Set cseDESCOND:dcTauB"       cseDESCOND:dcTauB       = {  WeatherCliZnDsgnDay2022:Taub_Aug(       "Station_Name", EnumString( Proj:WeatherStation ) )  }
   "Set cseDESCOND:dcTauD"       cseDESCOND:dcTauD       = {  WeatherCliZnDsgnDay2022:Taud_Aug(       "Station_Name", EnumString( Proj:WeatherStation ) )  }
   "Set cseDESCOND:dcWindSpeed"  cseDESCOND:dcWindSpeed  = {  WeatherCliZnDsgnDay2022:WSAvg_Aug(      "Station_Name", EnumString( Proj:WeatherStation ) )  }
END
;*************************************************************************
RULELIST "CSE_Setup_DESCOND_Sep" 1 0 0 1
   "Set cseDESCOND:dcDay_x"      cseDESCOND:dcDay_x      = {  "Sep 21"  }
   "Set cseDESCOND:dcDB"         cseDESCOND:dcDB         = {  WeatherCliZnDsgnDay2022:DB004_Sep(      "Station_Name", EnumString( Proj:WeatherStation ) )  }
   "Set cseDESCOND:dcMCDBR"      cseDESCOND:dcMCDBR      = {  WeatherCliZnDsgnDay2022:MDBR_DB050_Sep( "Station_Name", EnumString( Proj:WeatherStation ) )  }
   "Set cseDESCOND:dcMCWB"       cseDESCOND:dcMCWB       = {  WeatherCliZnDsgnDay2022:MCWB_DB004_Sep( "Station_Name", EnumString( Proj:WeatherStation ) )  }
   "Set cseDESCOND:dcMCWBR"      cseDESCOND:dcMCWBR      = {  WeatherCliZnDsgnDay2022:MWBR_DB050_Sep( "Station_Name", EnumString( Proj:WeatherStation ) )  }
   "Set cseDESCOND:dcTauB"       cseDESCOND:dcTauB       = {  WeatherCliZnDsgnDay2022:Taub_Sep(       "Station_Name", EnumString( Proj:WeatherStation ) )  }
   "Set cseDESCOND:dcTauD"       cseDESCOND:dcTauD       = {  WeatherCliZnDsgnDay2022:Taud_Sep(       "Station_Name", EnumString( Proj:WeatherStation ) )  }
   "Set cseDESCOND:dcWindSpeed"  cseDESCOND:dcWindSpeed  = {  WeatherCliZnDsgnDay2022:WSAvg_Sep(      "Station_Name", EnumString( Proj:WeatherStation ) )  }
END
;*************************************************************************
RULELIST "CSE_Setup_DESCOND_Error" 1 0 0 1
   "Post error re: DESCOND setup"   cseTOP:Action = {  PostError( "Error creating DESCOND for month # %g", ValidOr( HottestMonthNum, -999 ) )  }
END
;*************************************************************************


;*************************************************************************
RULELIST "ExportFile_AirNetDetails" 1 0 0 0
   "Open CSV file"         Proj:FileIdx_AirNetDetails = {  OpenExportFile( ProcessingPath + ModelFile + RunIDProcFile + " - IZXFERs.csv", "wt" )  }
   "Write CSV hdrs-1"      Proj:Action  =
      {  if (IfValidAnd( FileIdx_AirNetDetails >= 0 )==0)
         then  PostWarning( "Error opening CSE AirNet Details export CSV file:  %s%s%s - IZXFERs.csv", ProcessingPath, ModelFile, RunIDProcFile )
         else  WriteToExportFile( FileIdx_AirNetDetails, "Project File:,,%s,\nRun Date/Time:,,%c%s%c,\n", ProjFileName, 34, RunDateFmt, 34 )  endif  }
; can't effectively write HConst formulas until/unless we can double-double quote quoteation marks (i.e. substitute "" for each " in the expression)
;         else  WriteToExportFile( FileIdx_AirNetDetails, "Idx,Name,Type,Z1,Z2,A1,A2,L1,L2,HD,NVEff,Cpr,Exp,VF Dsn,Elec Pwr,HConst,\n" )  endif  }

   "Write CSV hdrs-2"      Proj:Action  =
      {  if (IfValidAnd( FileIdx_AirNetDetails >= 0 )==0) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, "Run ID:,,%s,%s,\nClimate Zone:,,%g,%s,\n", RunAbbrev, RunID, ClimateZone, EnumString( ClimateZone ) )  endif  }
   "Write CSV hdrs-3"      Proj:Action  =
      {  if (IfValidAnd( FileIdx_AirNetDetails >= 0 )==0) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, "ACH50:,,%g,\nEffective Leakage Area:,,%g,\n", ACH50, EffLeakageArea )  endif  }
   "Write CSV hdrs-4"      Proj:Action  =
      {  if (IfValidAnd( FileIdx_AirNetDetails >= 0 )==0) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, "Nonres/Res Exterior Hole Ratio:,,%g,\n", NResLeakageRatio )  endif  }
   "Write CSV hdrs-5"      Proj:Action  =
      {  if (IfValidAnd( FileIdx_AirNetDetails >= 0 )==0) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, "Ratio of Hole Size / Wall Size for Interior Surfaces:,\n,Between Residential Units:,%g,\n,Other Interior Surfaces:,%g,\n", IntSurfHoleSzRatio[1], IntSurfHoleSzRatio[2] )  endif  }
   "Write CSV hdrs-6"      Proj:Action  =
      {  if (IfValidAnd( FileIdx_AirNetDetails >= 0 )==0) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, "Natural Ventilation Wind Pressure Coefficient Multipliers by # of Window Orientations:,\n" )  endif  }
   "Write CSV hdrs-7"      Proj:Action  =
      {  if (IfValidAnd( FileIdx_AirNetDetails >= 0 )==0) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, ",1 Orientation:,%g,\n,2 Orientations:,%g,\n", NatVentWindPresCoefMult[1], NatVentWindPresCoefMult[2] )  endif  }
   "Write CSV hdrs-8"      Proj:Action  =
      {  if (IfValidAnd( FileIdx_AirNetDetails >= 0 )==0) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, ",3 Orientations:,%g,\n,4 Orientations:,%g,\n", NatVentWindPresCoefMult[3], NatVentWindPresCoefMult[4] )  endif  }

   "Write CSV hdrs-9"      Proj:Action  =
      {  if (IfValidAnd( FileIdx_AirNetDetails >= 0 )==0) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, "Total Conditioned Zone Volume:,,%g,\n\nConditioned Zone Volumes:,\nIdx,Name,Volume,\n", CondVolume )  endif  }

   "Write each ZONE Volume to CSV"  cseZONE:Action =
      {  if (IfValidAnd( Proj:FileIdx_AirNetDetails >= 0 )==0) then  UNCHANGED
         else if (IfValidAnd( SourceZone:Type < 10 ) .AND. IfValidAnd( SourceZone:CondVolume >= 0 ))
         then  WriteToExportFile( Proj:FileIdx_AirNetDetails, "%g,%c%s%c,%g,\n", ComponentIndex(), 34, Name, 34, SourceZone:CondVolume )
         else if (IfValidAnd( SourceOtherZone:Type < 10 ) .AND. IfValidAnd( SourceOtherZone:CondVolume >= 0 ))
         then  WriteToExportFile( Proj:FileIdx_AirNetDetails, "%g,%c%s%c,%g,\n", ComponentIndex(), 34, Name, 34, SourceOtherZone:CondVolume )
         else  UNCHANGED  endif endif endif  }

   "Write CSV hdrs-AFMtr"     Proj:Action  =       ; SAC 12/02/20
      {  if (IfValidAnd( WriteAirFlowMtr[1] >= 0 )==0 .AND. IfValidAnd( WriteAirFlowMtr[2] >= 0 )==0 .AND.
             IfValidAnd( WriteAirFlowMtr[3] >= 0 )==0 .AND. IfValidAnd( WriteAirFlowMtr[4] >= 0 )==0) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, "\nVolume of Zones assigned to AirFlowMeters:,\nIdx,AFMtr Name,Volume,\n" )  endif  }
   "Write CSV AFMtr1-Vol"     Proj:Action  = 
      {  if (LocalCompAssigned( CSE_AirFlowMETERs[1] ) < 1 .OR. LocalStatus( AirFlowMtrVolume[1] ) < 1) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, "1,%c%s%c,%g,\n", 34, CSE_AirFlowMETERs[1]:Name, 34, AirFlowMtrVolume[1] )  endif  }
   "Write CSV AFMtr2-Vol"     Proj:Action  = 
      {  if (LocalCompAssigned( CSE_AirFlowMETERs[2] ) < 1 .OR. LocalStatus( AirFlowMtrVolume[2] ) < 1) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, "2,%c%s%c,%g,\n", 34, CSE_AirFlowMETERs[2]:Name, 34, AirFlowMtrVolume[2] )  endif  }
   "Write CSV AFMtr3-Vol"     Proj:Action  = 
      {  if (LocalCompAssigned( CSE_AirFlowMETERs[3] ) < 1 .OR. LocalStatus( AirFlowMtrVolume[3] ) < 1) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, "3,%c%s%c,%g,\n", 34, CSE_AirFlowMETERs[3]:Name, 34, AirFlowMtrVolume[3] )  endif  }
   "Write CSV AFMtr4-Vol"     Proj:Action  = 
      {  if (LocalCompAssigned( CSE_AirFlowMETERs[4] ) < 1 .OR. LocalStatus( AirFlowMtrVolume[4] ) < 1) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, "4,%c%s%c,%g,\n", 34, CSE_AirFlowMETERs[4]:Name, 34, AirFlowMtrVolume[4] )  endif  }
   "Write CSV AFMtr5-Vol"     Proj:Action  = 
      {  if (LocalCompAssigned( CSE_AirFlowMETERs[5] ) < 1 .OR. LocalStatus( AirFlowMtrVolume[5] ) < 1) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, "5,%c%s%c,%g,\n", 34, CSE_AirFlowMETERs[5]:Name, 34, AirFlowMtrVolume[5] )  endif  }
   "Write CSV AFMtr6-Vol"     Proj:Action  = 
      {  if (LocalCompAssigned( CSE_AirFlowMETERs[6] ) < 1 .OR. LocalStatus( AirFlowMtrVolume[6] ) < 1) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, "6,%c%s%c,%g,\n", 34, CSE_AirFlowMETERs[6]:Name, 34, AirFlowMtrVolume[6] )  endif  }
   "Write CSV AFMtr7-Vol"     Proj:Action  = 
      {  if (LocalCompAssigned( CSE_AirFlowMETERs[7] ) < 1 .OR. LocalStatus( AirFlowMtrVolume[7] ) < 1) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, "7,%c%s%c,%g,\n", 34, CSE_AirFlowMETERs[7]:Name, 34, AirFlowMtrVolume[7] )  endif  }
   "Write CSV AFMtr8-Vol"     Proj:Action  = 
      {  if (LocalCompAssigned( CSE_AirFlowMETERs[8] ) < 1 .OR. LocalStatus( AirFlowMtrVolume[8] ) < 1) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, "8,%c%s%c,%g,\n", 34, CSE_AirFlowMETERs[8]:Name, 34, AirFlowMtrVolume[8] )  endif  }
   "Write CSV AFMtr9-Vol"     Proj:Action  = 
      {  if (LocalCompAssigned( CSE_AirFlowMETERs[9] ) < 1 .OR. LocalStatus( AirFlowMtrVolume[9] ) < 1) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, "9,%c%s%c,%g,\n", 34, CSE_AirFlowMETERs[9]:Name, 34, AirFlowMtrVolume[9] )  endif  }
   "Write CSV AFMtr10-Vol"     Proj:Action  = 
      {  if (LocalCompAssigned( CSE_AirFlowMETERs[10] ) < 1 .OR. LocalStatus( AirFlowMtrVolume[10] ) < 1) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, "10,%c%s%c,%g,\n", 34, CSE_AirFlowMETERs[10]:Name, 34, AirFlowMtrVolume[10] )  endif  }
   "Write CSV AFMtr11-Vol"     Proj:Action  = 
      {  if (LocalCompAssigned( CSE_AirFlowMETERs[11] ) < 1 .OR. LocalStatus( AirFlowMtrVolume[11] ) < 1) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, "11,%c%s%c,%g,\n", 34, CSE_AirFlowMETERs[11]:Name, 34, AirFlowMtrVolume[11] )  endif  }
   "Write CSV AFMtr12-Vol"     Proj:Action  = 
      {  if (LocalCompAssigned( CSE_AirFlowMETERs[12] ) < 1 .OR. LocalStatus( AirFlowMtrVolume[12] ) < 1) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, "12,%c%s%c,%g,\n", 34, CSE_AirFlowMETERs[12]:Name, 34, AirFlowMtrVolume[12] )  endif  }
   "Write CSV AFMtr13-Vol"     Proj:Action  = 
      {  if (LocalCompAssigned( CSE_AirFlowMETERs[13] ) < 1 .OR. LocalStatus( AirFlowMtrVolume[13] ) < 1) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, "13,%c%s%c,%g,\n", 34, CSE_AirFlowMETERs[13]:Name, 34, AirFlowMtrVolume[13] )  endif  }
   "Write CSV AFMtr14-Vol"     Proj:Action  = 
      {  if (LocalCompAssigned( CSE_AirFlowMETERs[14] ) < 1 .OR. LocalStatus( AirFlowMtrVolume[14] ) < 1) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, "14,%c%s%c,%g,\n", 34, CSE_AirFlowMETERs[14]:Name, 34, AirFlowMtrVolume[14] )  endif  }
   "Write CSV AFMtr15-Vol"     Proj:Action  = 
      {  if (LocalCompAssigned( CSE_AirFlowMETERs[15] ) < 1 .OR. LocalStatus( AirFlowMtrVolume[15] ) < 1) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, "15,%c%s%c,%g,\n", 34, CSE_AirFlowMETERs[15]:Name, 34, AirFlowMtrVolume[15] )  endif  }
   "Write CSV AFMtr16-Vol"     Proj:Action  = 
      {  if (LocalCompAssigned( CSE_AirFlowMETERs[16] ) < 1 .OR. LocalStatus( AirFlowMtrVolume[16] ) < 1) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, "16,%c%s%c,%g,\n", 34, CSE_AirFlowMETERs[16]:Name, 34, AirFlowMtrVolume[16] )  endif  }
   "Write CSV AFMtr17-Vol"     Proj:Action  = 
      {  if (LocalCompAssigned( CSE_AirFlowMETERs[17] ) < 1 .OR. LocalStatus( AirFlowMtrVolume[17] ) < 1) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, "17,%c%s%c,%g,\n", 34, CSE_AirFlowMETERs[17]:Name, 34, AirFlowMtrVolume[17] )  endif  }
   "Write CSV AFMtr18-Vol"     Proj:Action  = 
      {  if (LocalCompAssigned( CSE_AirFlowMETERs[18] ) < 1 .OR. LocalStatus( AirFlowMtrVolume[18] ) < 1) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, "18,%c%s%c,%g,\n", 34, CSE_AirFlowMETERs[18]:Name, 34, AirFlowMtrVolume[18] )  endif  }
   "Write CSV AFMtr19-Vol"     Proj:Action  = 
      {  if (LocalCompAssigned( CSE_AirFlowMETERs[19] ) < 1 .OR. LocalStatus( AirFlowMtrVolume[19] ) < 1) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, "19,%c%s%c,%g,\n", 34, CSE_AirFlowMETERs[19]:Name, 34, AirFlowMtrVolume[19] )  endif  }
   "Write CSV AFMtr20-Vol"     Proj:Action  = 
      {  if (LocalCompAssigned( CSE_AirFlowMETERs[20] ) < 1 .OR. LocalStatus( AirFlowMtrVolume[20] ) < 1) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, "20,%c%s%c,%g,\n", 34, CSE_AirFlowMETERs[20]:Name, 34, AirFlowMtrVolume[20] )  endif  }

   "Write IZXFER column titles to CSV"    Proj:Action =
      {  if (IfValidAnd( FileIdx_AirNetDetails >= 0 )==0) then  UNCHANGED
         else  WriteToExportFile( FileIdx_AirNetDetails, "\nIZXFER Data:\nIdx,Name,Type,Z1,Z2,A1,A2,L1,L2,HD,NVEff,Cpr,Exp,VF Dsn,Elec Pwr,\n" )  endif  }
   "Write each IZXFER to CSV"    cseIZXFER:Action =
      {  if (IfValidAnd( Proj:FileIdx_AirNetDetails >= 0 )==0) then  UNCHANGED
         else  EvalRulelist( "ExportFile_AirNetDetails_IZXFER", 1 )  endif  }
   "Close IZXFER CSV"      Proj:Action =
      {  if (IfValidAnd( FileIdx_AirNetDetails >= 0 )==0) then  UNCHANGED
         else  CloseExportFile( FileIdx_AirNetDetails )  endif  }
END
;*************************************************************************
RULELIST "ExportFile_AirNetDetails_IZXFER" 1 0 0 0
   "Set cseIZXFER:CSVRptStr - 1"    cseIZXFER:CSVRptStr  = {  Format( "%g,%c%s%c,%s,", ComponentIndex(), 34, Name, 34, EnumString( izNVType ) )  }
   "Set cseIZXFER:CSVRptStr - izZn1"   cseIZXFER:CSVRptStr  =
      {  if (LocalCompAssigned( izZn1 ) < 1) then  CSVRptStr + ","
         else  CSVRptStr + Format( "%c%s%c,", 34, izZn1:Name, 34 )  endif  }
   "Set cseIZXFER:CSVRptStr - izZn2"   cseIZXFER:CSVRptStr  =
      {  if (LocalCompAssigned( izZn2 ) < 1) then  CSVRptStr + ","
         else  CSVRptStr + Format( "%c%s%c,", 34, izZn2:Name, 34 )  endif  }

;EXPORTCOL colHead="Idx" colVal=iz \
;EXPORTCOL colHead="Name" colVal=@IZXFER[ iz].name \
;EXPORTCOL colHead="Type" colVal=@IZXFER[ iz].nvcntrl \
;EXPORTCOL colHead="Z1" colVal=ZNNAME( @IZXFER[ iz].zi1) \
;EXPORTCOL colHead="Z2" colVal=ZNNAME( @IZXFER[ iz].zi2)\
;EXPORTCOL colHead="A1" colVal=@IZXFER[ iz].A1 \
;EXPORTCOL colHead="A2" colVal=@IZXFER[ iz].A2 \
;EXPORTCOL colHead="HD" colVal=@IZXFER[ iz].hz \
;EXPORTCOL colHead="NVEff" colVal=@IZXFER[ iz].cd \
;EXPORTCOL colHead="Cpr" colVal=@IZXFER[ iz].cpr \
;EXPORTCOL colHead="Exp" colVal=@IZXFER[ iz].exp \
;EXPORTCOL colHead="VF Dsn" colVal=@IZXFER[ iz].fan.vfDs \
;EXPORTCOL colHead="Elec Pwr" colVal=@IZXFER[ iz].fan.elecPwr

   "Set cseIZXFER:CSVRptStr - izALo"   cseIZXFER:CSVRptStr  =
      {  if (LocalStatus( izALo ) < 1) then  CSVRptStr + ","
         else  CSVRptStr + Format( "%g,", izALo )  endif  }
   "Set cseIZXFER:CSVRptStr - izAHi"   cseIZXFER:CSVRptStr  =
      {  if (LocalStatus( izAHi ) > 0) then  CSVRptStr + Format( "%g,", izAHi )
         else if (LocalStatus( izAHi_x ) > 0) then  CSVRptStr + Format( "%c%s%c,", 34, izAHi_x, 34 )
         else  CSVRptStr + ","  endif endif  }

   "Set cseIZXFER:CSVRptStr - izL1"    cseIZXFER:CSVRptStr  =
      {  if (LocalStatus( izL1 ) < 1) then  CSVRptStr + ","
         else  CSVRptStr + Format( "%g,", izL1 )  endif  }
   "Set cseIZXFER:CSVRptStr - izL2"    cseIZXFER:CSVRptStr  =
      {  if (LocalStatus( izL2 ) < 1) then  CSVRptStr + ","
         else  CSVRptStr + Format( "%g,", izL2 )  endif  }

   "Set cseIZXFER:CSVRptStr - izHD"    cseIZXFER:CSVRptStr  =
      {  if (LocalStatus( izHD ) < 1) then  CSVRptStr + ","
         else  CSVRptStr + Format( "%g,", izHD )  endif  }
   "Set cseIZXFER:CSVRptStr - izNVEff" cseIZXFER:CSVRptStr  =
      {  if (LocalStatus( izNVEff ) < 1) then  CSVRptStr + ","
         else  CSVRptStr + Format( "%g,", izNVEff )  endif  }

;1,           "izVFmin",           BEMP_Flt,  1,  0,  1, "cfm",              0,  0,                        3008, "Minimum volume flow rate (VentOff mode)"
;1,           "izVFmax",           BEMP_Flt,  1,  0,  1, "cfm",              0,  0,                        3008, "Maximum volume flow rate (VentOn mode)"
;1,           "izVFmax_x",         BEMP_Str,  1,  0,  1, "cfm",              0,  0,                        3008, "expression describing Maximum volume flow rate (VentOn mode)"
;1,           "izFanPress",        BEMP_Flt,  1,  0,  1, "in H2O",           0,  0,                        3008, "Design or rated pressure"
;1,           "izASEF",            BEMP_Flt,  1,  0,  1, "frac",             0,  0,                        3008, "apparent sensible effectiveness.  This is a standard rating and includes fan heat.  Fan heat is otherwise ignored."
;1,           "izSRE",             BEMP_Flt,  1,  0,  1, "frac",             0,  0,                        3008, "sensible recovery efficiency (SRE)."                ; SAC 10/21/19
;1,           "izASRE",            BEMP_Flt,  1,  0,  1, "frac",             0,  0,                        3008, "adjusted sensible recovery efficiency (ASRE)."      ; SAC 10/21/19
;1,           "izVfExhRat",        BEMP_Flt,  1,  0,  1, "frac",             0,  0,                        3008, "exhaust ratio, default = 1.  exhAVF = supAVF * izVfExhRat"

   "Set cseIZXFER:CSVRptStr - izCpr"   cseIZXFER:CSVRptStr  =
      {  if (LocalStatus( izCpr ) < 1) then  CSVRptStr + ","
         else  CSVRptStr + Format( "%g,", izCpr )  endif  }
   "Set cseIZXFER:CSVRptStr - izExp"   cseIZXFER:CSVRptStr  =
      {  if (LocalStatus( izExp ) < 1) then  CSVRptStr + ","
         else  CSVRptStr + Format( "%g,", izExp )  endif  }

   "Set cseIZXFER:CSVRptStr - izFanVfDs"  cseIZXFER:CSVRptStr  =
      {  if (LocalStatus( izFanVfDs ) < 1) then  CSVRptStr + ","
         else  CSVRptStr + Format( "%g,", izFanVfDs )  endif  }

   "Set cseIZXFER:CSVRptStr - izFanElecPwr"  cseIZXFER:CSVRptStr  =
      {  if (LocalStatus( izFanElecPwr ) < 1) then  CSVRptStr + ","
         else  CSVRptStr + Format( "%g,", izFanElecPwr )  endif  }

;1,           "izFanCurvePy",      BEMP_Flt,  5,  1,  1, "",                 0,  0,                        3008, "[1-4] coefficients of a cubic polynomial for the curve relating fan relative energy consumption to relative air flow above the minimum flow [5]"
;1,           "izFanMtr",          BEMP_Obj,  1,  0,  1, "",                 0,  1, "cseMETER", 0, "",     3208, "Name of meter, if any, to record energy used by supply fan (enduse = 'Fan')"    
;1,           "izFanEndUse",       BEMP_Str,  1,  0,  1, "",                 0,  0,                        3208, "Enduse to apply fan energy usage to"    

;   "Set cseIZXFER:CSVRptStr - izHConst"   cseIZXFER:CSVRptStr  =
;      {  if (LocalStatus( izHConst ) > 0) then  CSVRptStr + Format( "%g,", izHConst )
;         else if (LocalStatus( izHConst_x ) > 0) then  CSVRptStr + Format( "%c%s%c,", 34, izHConst_x, 34 )
;         else  CSVRptStr + ","  endif endif  }

   "Write IZXFER to CSV"   cseIZXFER:Action =
      {  WriteToExportFile( Proj:FileIdx_AirNetDetails, "%s\n", CSVRptStr )  }
END
;*************************************************************************

;************************************************************************* SAC 09/17/20 (tic #1247)
RULELIST "SetupCSEExportFile_Infiltration_1" 1 0 0 1
;*************************************************************************
   "Create Proj:CSE_InfilExportFile[1]"  Proj:CSE_InfilExportFile[1]  = {   CreateComp( cseEXPORTFILE, "xf-Infil-1" )  }
   "Set Proj:CSE_InfilExportFile[1]:xfFileName"   Proj:CSE_InfilExportFile[1]:xfFileName  =
      {  ValidOr( ProjFileNameNoExt, "" ) + ValidOr( RunIDProcFile, "" ) + "-Infil-1.csv"  }

   "Create Proj:CSE_InfilExport[1]"           Proj:CSE_InfilExport[1]  = {   CreateComp( cseEXPORT, "x-Infil-1-Yr" )  }
   "Set Proj:CSE_InfilExport[1]:exExportfile" Proj:CSE_InfilExport[1]:exExportfile  = {  CSE_InfilExportFile[1]:Name  }
   "Set Proj:CSE_InfilExport[1]:exType"       Proj:CSE_InfilExport[1]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[1]:exAFMeter"    Proj:CSE_InfilExport[1]:exAFMeter = {  CSE_AirFlowMETERs[1]  }
   "Set Proj:CSE_InfilExport[1]:exFreq"       Proj:CSE_InfilExport[1]:exFreq    = {  "YEAR"  }
;	"Set Proj:CSE_InfilExport[1]:exDayBeg_x"   Proj:CSE_InfilExport[1]:exDayBeg_x	= {  "Jan 1"   }
;	"Set Proj:CSE_InfilExport[1]:exDayEnd_x"   Proj:CSE_InfilExport[1]:exDayEnd_x	= {  "Dec 31"  }

   "Create Proj:CSE_InfilExport[2]"           Proj:CSE_InfilExport[2]  = {   CreateComp( cseEXPORT, "x-Infil-1-Mo" )  }
   "Set Proj:CSE_InfilExport[2]:exExportfile" Proj:CSE_InfilExport[2]:exExportfile  = {  CSE_InfilExportFile[1]:Name  }
   "Set Proj:CSE_InfilExport[2]:exType"       Proj:CSE_InfilExport[2]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[2]:exAFMeter"    Proj:CSE_InfilExport[2]:exAFMeter = {  CSE_AirFlowMETERs[1]  }
   "Set Proj:CSE_InfilExport[2]:exFreq"       Proj:CSE_InfilExport[2]:exFreq    = {  "MONTH"  }
	"Set Proj:CSE_InfilExport[2]:exDayBeg_x"   Proj:CSE_InfilExport[2]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[2]:exDayEnd_x"   Proj:CSE_InfilExport[2]:exDayEnd_x	= {  "Dec 31"  }

   "Create Proj:CSE_InfilExport[3]"           Proj:CSE_InfilExport[3]  = {   CreateComp( cseEXPORT, "x-Infil-1-Hr" )  }
   "Set Proj:CSE_InfilExport[3]:exExportfile" Proj:CSE_InfilExport[3]:exExportfile  = {  CSE_InfilExportFile[1]:Name  }
   "Set Proj:CSE_InfilExport[3]:exType"       Proj:CSE_InfilExport[3]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[3]:exAFMeter"    Proj:CSE_InfilExport[3]:exAFMeter = {  CSE_AirFlowMETERs[1]  }
   "Set Proj:CSE_InfilExport[3]:exFreq"       Proj:CSE_InfilExport[3]:exFreq    = {  "HOUR"  }
	"Set Proj:CSE_InfilExport[3]:exDayBeg_x"   Proj:CSE_InfilExport[3]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[3]:exDayEnd_x"   Proj:CSE_InfilExport[3]:exDayEnd_x	= {  "Dec 31"  }
;   "Set Proj:CSE_InfilExport[3]:exHeader"     Proj:CSE_InfilExport[3]:exHeader  = {  "COLUMNSONLY"    }
;   "Set Proj:CSE_InfilExport[3]:exHeader"     Proj:CSE_InfilExport[3]:exHeader  = {  "YESIFNEW"    }
;   "Set Proj:CSE_InfilExport[3]:exFooter"     Proj:CSE_InfilExport[3]:exFooter  = {  "NO"     }
END
;************************************************************************* SAC 10/01/20 (tic #1247)
RULELIST "SetupCSEExportFile_Infiltration_2" 1 0 0 1
;*************************************************************************
   "Create Proj:CSE_InfilExportFile[2]"  Proj:CSE_InfilExportFile[2]  = {   CreateComp( cseEXPORTFILE, "xf-Infil-2" )  }
   "Set Proj:CSE_InfilExportFile[2]:xfFileName"   Proj:CSE_InfilExportFile[2]:xfFileName  =
      {  ValidOr( ProjFileNameNoExt, "" ) + ValidOr( RunIDProcFile, "" ) + "-Infil-2.csv"  }

   "Create Proj:CSE_InfilExport[4]"           Proj:CSE_InfilExport[4]  = {   CreateComp( cseEXPORT, "x-Infil-2-Yr" )  }
   "Set Proj:CSE_InfilExport[4]:exExportfile" Proj:CSE_InfilExport[4]:exExportfile  = {  CSE_InfilExportFile[2]:Name  }
   "Set Proj:CSE_InfilExport[4]:exType"       Proj:CSE_InfilExport[4]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[4]:exAFMeter"    Proj:CSE_InfilExport[4]:exAFMeter = {  CSE_AirFlowMETERs[2]  }
   "Set Proj:CSE_InfilExport[4]:exFreq"       Proj:CSE_InfilExport[4]:exFreq    = {  "YEAR"  }
;	"Set Proj:CSE_InfilExport[4]:exDayBeg_x"   Proj:CSE_InfilExport[4]:exDayBeg_x	= {  "Jan 1"   }
;	"Set Proj:CSE_InfilExport[4]:exDayEnd_x"   Proj:CSE_InfilExport[4]:exDayEnd_x	= {  "Dec 31"  }

   "Create Proj:CSE_InfilExport[5]"           Proj:CSE_InfilExport[5]  = {   CreateComp( cseEXPORT, "x-Infil-2-Mo" )  }
   "Set Proj:CSE_InfilExport[5]:exExportfile" Proj:CSE_InfilExport[5]:exExportfile  = {  CSE_InfilExportFile[2]:Name  }
   "Set Proj:CSE_InfilExport[5]:exType"       Proj:CSE_InfilExport[5]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[5]:exAFMeter"    Proj:CSE_InfilExport[5]:exAFMeter = {  CSE_AirFlowMETERs[2]  }
   "Set Proj:CSE_InfilExport[5]:exFreq"       Proj:CSE_InfilExport[5]:exFreq    = {  "MONTH"  }
	"Set Proj:CSE_InfilExport[5]:exDayBeg_x"   Proj:CSE_InfilExport[5]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[5]:exDayEnd_x"   Proj:CSE_InfilExport[5]:exDayEnd_x	= {  "Dec 31"  }

   "Create Proj:CSE_InfilExport[6]"           Proj:CSE_InfilExport[6]  = {   CreateComp( cseEXPORT, "x-Infil-2-Hr" )  }
   "Set Proj:CSE_InfilExport[6]:exExportfile" Proj:CSE_InfilExport[6]:exExportfile  = {  CSE_InfilExportFile[2]:Name  }
   "Set Proj:CSE_InfilExport[6]:exType"       Proj:CSE_InfilExport[6]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[6]:exAFMeter"    Proj:CSE_InfilExport[6]:exAFMeter = {  CSE_AirFlowMETERs[2]  }
   "Set Proj:CSE_InfilExport[6]:exFreq"       Proj:CSE_InfilExport[6]:exFreq    = {  "HOUR"  }
	"Set Proj:CSE_InfilExport[6]:exDayBeg_x"   Proj:CSE_InfilExport[6]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[6]:exDayEnd_x"   Proj:CSE_InfilExport[6]:exDayEnd_x	= {  "Dec 31"  }
;   "Set Proj:CSE_InfilExport[6]:exHeader"     Proj:CSE_InfilExport[6]:exHeader  = {  "COLUMNSONLY"    }
;   "Set Proj:CSE_InfilExport[6]:exHeader"     Proj:CSE_InfilExport[6]:exHeader  = {  "YESIFNEW"    }
;   "Set Proj:CSE_InfilExport[6]:exFooter"     Proj:CSE_InfilExport[6]:exFooter  = {  "NO"     }
END
;************************************************************************* SAC 10/01/20 (tic #1247)
RULELIST "SetupCSEExportFile_Infiltration_3" 1 0 0 1
;*************************************************************************
   "Create Proj:CSE_InfilExportFile[3]"  Proj:CSE_InfilExportFile[3]  = {   CreateComp( cseEXPORTFILE, "xf-Infil-3" )  }
   "Set Proj:CSE_InfilExportFile[3]:xfFileName"   Proj:CSE_InfilExportFile[3]:xfFileName  =
      {  ValidOr( ProjFileNameNoExt, "" ) + ValidOr( RunIDProcFile, "" ) + "-Infil-3.csv"  }

   "Create Proj:CSE_InfilExport[7]"           Proj:CSE_InfilExport[7]  = {   CreateComp( cseEXPORT, "x-Infil-3-Yr" )  }
   "Set Proj:CSE_InfilExport[7]:exExportfile" Proj:CSE_InfilExport[7]:exExportfile  = {  CSE_InfilExportFile[3]:Name  }
   "Set Proj:CSE_InfilExport[7]:exType"       Proj:CSE_InfilExport[7]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[7]:exAFMeter"    Proj:CSE_InfilExport[7]:exAFMeter = {  CSE_AirFlowMETERs[3]  }
   "Set Proj:CSE_InfilExport[7]:exFreq"       Proj:CSE_InfilExport[7]:exFreq    = {  "YEAR"  }
;	"Set Proj:CSE_InfilExport[7]:exDayBeg_x"   Proj:CSE_InfilExport[7]:exDayBeg_x	= {  "Jan 1"   }
;	"Set Proj:CSE_InfilExport[7]:exDayEnd_x"   Proj:CSE_InfilExport[7]:exDayEnd_x	= {  "Dec 31"  }

   "Create Proj:CSE_InfilExport[8]"           Proj:CSE_InfilExport[8]  = {   CreateComp( cseEXPORT, "x-Infil-3-Mo" )  }
   "Set Proj:CSE_InfilExport[8]:exExportfile" Proj:CSE_InfilExport[8]:exExportfile  = {  CSE_InfilExportFile[3]:Name  }
   "Set Proj:CSE_InfilExport[8]:exType"       Proj:CSE_InfilExport[8]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[8]:exAFMeter"    Proj:CSE_InfilExport[8]:exAFMeter = {  CSE_AirFlowMETERs[3]  }
   "Set Proj:CSE_InfilExport[8]:exFreq"       Proj:CSE_InfilExport[8]:exFreq    = {  "MONTH"  }
	"Set Proj:CSE_InfilExport[8]:exDayBeg_x"   Proj:CSE_InfilExport[8]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[8]:exDayEnd_x"   Proj:CSE_InfilExport[8]:exDayEnd_x	= {  "Dec 31"  }

   "Create Proj:CSE_InfilExport[9]"           Proj:CSE_InfilExport[9]  = {   CreateComp( cseEXPORT, "x-Infil-3-Hr" )  }
   "Set Proj:CSE_InfilExport[9]:exExportfile" Proj:CSE_InfilExport[9]:exExportfile  = {  CSE_InfilExportFile[3]:Name  }
   "Set Proj:CSE_InfilExport[9]:exType"       Proj:CSE_InfilExport[9]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[9]:exAFMeter"    Proj:CSE_InfilExport[9]:exAFMeter = {  CSE_AirFlowMETERs[3]  }
   "Set Proj:CSE_InfilExport[9]:exFreq"       Proj:CSE_InfilExport[9]:exFreq    = {  "HOUR"  }
	"Set Proj:CSE_InfilExport[9]:exDayBeg_x"   Proj:CSE_InfilExport[9]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[9]:exDayEnd_x"   Proj:CSE_InfilExport[9]:exDayEnd_x	= {  "Dec 31"  }
;   "Set Proj:CSE_InfilExport[9]:exHeader"     Proj:CSE_InfilExport[9]:exHeader  = {  "COLUMNSONLY"    }
;   "Set Proj:CSE_InfilExport[9]:exHeader"     Proj:CSE_InfilExport[9]:exHeader  = {  "YESIFNEW"    }
;   "Set Proj:CSE_InfilExport[9]:exFooter"     Proj:CSE_InfilExport[9]:exFooter  = {  "NO"     }
END
;************************************************************************* SAC 10/01/20 (tic #1247)
RULELIST "SetupCSEExportFile_Infiltration_4" 1 0 0 1
;*************************************************************************
   "Create Proj:CSE_InfilExportFile[4]"  Proj:CSE_InfilExportFile[4]  = {   CreateComp( cseEXPORTFILE, "xf-Infil-4" )  }
   "Set Proj:CSE_InfilExportFile[4]:xfFileName"   Proj:CSE_InfilExportFile[4]:xfFileName  =
      {  ValidOr( ProjFileNameNoExt, "" ) + ValidOr( RunIDProcFile, "" ) + "-Infil-4.csv"  }

   "Create Proj:CSE_InfilExport[10]"           Proj:CSE_InfilExport[10]  = {   CreateComp( cseEXPORT, "x-Infil-4-Yr" )  }
   "Set Proj:CSE_InfilExport[10]:exExportfile" Proj:CSE_InfilExport[10]:exExportfile  = {  CSE_InfilExportFile[4]:Name  }
   "Set Proj:CSE_InfilExport[10]:exType"       Proj:CSE_InfilExport[10]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[10]:exAFMeter"    Proj:CSE_InfilExport[10]:exAFMeter = {  CSE_AirFlowMETERs[4]  }
   "Set Proj:CSE_InfilExport[10]:exFreq"       Proj:CSE_InfilExport[10]:exFreq    = {  "YEAR"  }
;	"Set Proj:CSE_InfilExport[10]:exDayBeg_x"   Proj:CSE_InfilExport[10]:exDayBeg_x	= {  "Jan 1"   }
;	"Set Proj:CSE_InfilExport[10]:exDayEnd_x"   Proj:CSE_InfilExport[10]:exDayEnd_x	= {  "Dec 31"  }

   "Create Proj:CSE_InfilExport[11]"           Proj:CSE_InfilExport[11]  = {   CreateComp( cseEXPORT, "x-Infil-4-Mo" )  }
   "Set Proj:CSE_InfilExport[11]:exExportfile" Proj:CSE_InfilExport[11]:exExportfile  = {  CSE_InfilExportFile[4]:Name  }
   "Set Proj:CSE_InfilExport[11]:exType"       Proj:CSE_InfilExport[11]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[11]:exAFMeter"    Proj:CSE_InfilExport[11]:exAFMeter = {  CSE_AirFlowMETERs[4]  }
   "Set Proj:CSE_InfilExport[11]:exFreq"       Proj:CSE_InfilExport[11]:exFreq    = {  "MONTH"  }
	"Set Proj:CSE_InfilExport[11]:exDayBeg_x"   Proj:CSE_InfilExport[11]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[11]:exDayEnd_x"   Proj:CSE_InfilExport[11]:exDayEnd_x	= {  "Dec 31"  }

   "Create Proj:CSE_InfilExport[12]"           Proj:CSE_InfilExport[12]  = {   CreateComp( cseEXPORT, "x-Infil-4-Hr" )  }
   "Set Proj:CSE_InfilExport[12]:exExportfile" Proj:CSE_InfilExport[12]:exExportfile  = {  CSE_InfilExportFile[4]:Name  }
   "Set Proj:CSE_InfilExport[12]:exType"       Proj:CSE_InfilExport[12]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[12]:exAFMeter"    Proj:CSE_InfilExport[12]:exAFMeter = {  CSE_AirFlowMETERs[4]  }
   "Set Proj:CSE_InfilExport[12]:exFreq"       Proj:CSE_InfilExport[12]:exFreq    = {  "HOUR"  }
	"Set Proj:CSE_InfilExport[12]:exDayBeg_x"   Proj:CSE_InfilExport[12]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[12]:exDayEnd_x"   Proj:CSE_InfilExport[12]:exDayEnd_x	= {  "Dec 31"  }
;   "Set Proj:CSE_InfilExport[12]:exHeader"     Proj:CSE_InfilExport[12]:exHeader  = {  "COLUMNSONLY"    }
;   "Set Proj:CSE_InfilExport[12]:exHeader"     Proj:CSE_InfilExport[12]:exHeader  = {  "YESIFNEW"    }
;   "Set Proj:CSE_InfilExport[12]:exFooter"     Proj:CSE_InfilExport[12]:exFooter  = {  "NO"     }
END
;************************************************************************* SAC 10/01/20 (tic #1247)
RULELIST "SetupCSEExportFile_Infiltration_5" 1 0 0 1
;*************************************************************************
   "Create Proj:CSE_InfilExportFile[5]"  Proj:CSE_InfilExportFile[5]  = {   CreateComp( cseEXPORTFILE, "xf-Infil-5" )  }
   "Set Proj:CSE_InfilExportFile[5]:xfFileName"   Proj:CSE_InfilExportFile[5]:xfFileName  =
      {  ValidOr( ProjFileNameNoExt, "" ) + ValidOr( RunIDProcFile, "" ) + "-Infil-5.csv"  }

   "Create Proj:CSE_InfilExport[13]"           Proj:CSE_InfilExport[13]  = {   CreateComp( cseEXPORT, "x-Infil-5-Yr" )  }
   "Set Proj:CSE_InfilExport[13]:exExportfile" Proj:CSE_InfilExport[13]:exExportfile  = {  CSE_InfilExportFile[5]:Name  }
   "Set Proj:CSE_InfilExport[13]:exType"       Proj:CSE_InfilExport[13]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[13]:exAFMeter"    Proj:CSE_InfilExport[13]:exAFMeter = {  CSE_AirFlowMETERs[5]  }
   "Set Proj:CSE_InfilExport[13]:exFreq"       Proj:CSE_InfilExport[13]:exFreq    = {  "YEAR"  }
;	"Set Proj:CSE_InfilExport[13]:exDayBeg_x"   Proj:CSE_InfilExport[13]:exDayBeg_x	= {  "Jan 1"   }
;	"Set Proj:CSE_InfilExport[13]:exDayEnd_x"   Proj:CSE_InfilExport[13]:exDayEnd_x	= {  "Dec 31"  }

   "Create Proj:CSE_InfilExport[14]"           Proj:CSE_InfilExport[14]  = {   CreateComp( cseEXPORT, "x-Infil-5-Mo" )  }
   "Set Proj:CSE_InfilExport[14]:exExportfile" Proj:CSE_InfilExport[14]:exExportfile  = {  CSE_InfilExportFile[5]:Name  }
   "Set Proj:CSE_InfilExport[14]:exType"       Proj:CSE_InfilExport[14]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[14]:exAFMeter"    Proj:CSE_InfilExport[14]:exAFMeter = {  CSE_AirFlowMETERs[5]  }
   "Set Proj:CSE_InfilExport[14]:exFreq"       Proj:CSE_InfilExport[14]:exFreq    = {  "MONTH"  }
	"Set Proj:CSE_InfilExport[14]:exDayBeg_x"   Proj:CSE_InfilExport[14]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[14]:exDayEnd_x"   Proj:CSE_InfilExport[14]:exDayEnd_x	= {  "Dec 31"  }

   "Create Proj:CSE_InfilExport[15]"           Proj:CSE_InfilExport[15]  = {   CreateComp( cseEXPORT, "x-Infil-5-Hr" )  }
   "Set Proj:CSE_InfilExport[15]:exExportfile" Proj:CSE_InfilExport[15]:exExportfile  = {  CSE_InfilExportFile[5]:Name  }
   "Set Proj:CSE_InfilExport[15]:exType"       Proj:CSE_InfilExport[15]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[15]:exAFMeter"    Proj:CSE_InfilExport[15]:exAFMeter = {  CSE_AirFlowMETERs[5]  }
   "Set Proj:CSE_InfilExport[15]:exFreq"       Proj:CSE_InfilExport[15]:exFreq    = {  "HOUR"  }
	"Set Proj:CSE_InfilExport[15]:exDayBeg_x"   Proj:CSE_InfilExport[15]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[15]:exDayEnd_x"   Proj:CSE_InfilExport[15]:exDayEnd_x	= {  "Dec 31"  }
;   "Set Proj:CSE_InfilExport[15]:exHeader"     Proj:CSE_InfilExport[15]:exHeader  = {  "COLUMNSONLY"    }
;   "Set Proj:CSE_InfilExport[15]:exHeader"     Proj:CSE_InfilExport[15]:exHeader  = {  "YESIFNEW"    }
;   "Set Proj:CSE_InfilExport[15]:exFooter"     Proj:CSE_InfilExport[15]:exFooter  = {  "NO"     }
END
;************************************************************************* SAC 10/19/20 (tic #1247)
RULELIST "SetupCSEExportFile_Infiltration_6" 1 0 0 1
;*************************************************************************
   "Create Proj:CSE_InfilExportFile[6]"  Proj:CSE_InfilExportFile[6]  = {   CreateComp( cseEXPORTFILE, "xf-Infil-6" )  }
   "Set Proj:CSE_InfilExportFile[6]:xfFileName"   Proj:CSE_InfilExportFile[6]:xfFileName  =
      {  ValidOr( ProjFileNameNoExt, "" ) + ValidOr( RunIDProcFile, "" ) + "-Infil-6.csv"  }

   "Create Proj:CSE_InfilExport[16]"           Proj:CSE_InfilExport[16]  = {   CreateComp( cseEXPORT, "x-Infil-6-Yr" )  }
   "Set Proj:CSE_InfilExport[16]:exExportfile" Proj:CSE_InfilExport[16]:exExportfile  = {  CSE_InfilExportFile[6]:Name  }
   "Set Proj:CSE_InfilExport[16]:exType"       Proj:CSE_InfilExport[16]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[16]:exAFMeter"    Proj:CSE_InfilExport[16]:exAFMeter = {  CSE_AirFlowMETERs[6]  }
   "Set Proj:CSE_InfilExport[16]:exFreq"       Proj:CSE_InfilExport[16]:exFreq    = {  "YEAR"  }

   "Create Proj:CSE_InfilExport[17]"           Proj:CSE_InfilExport[17]  = {   CreateComp( cseEXPORT, "x-Infil-6-Mo" )  }
   "Set Proj:CSE_InfilExport[17]:exExportfile" Proj:CSE_InfilExport[17]:exExportfile  = {  CSE_InfilExportFile[6]:Name  }
   "Set Proj:CSE_InfilExport[17]:exType"       Proj:CSE_InfilExport[17]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[17]:exAFMeter"    Proj:CSE_InfilExport[17]:exAFMeter = {  CSE_AirFlowMETERs[6]  }
   "Set Proj:CSE_InfilExport[17]:exFreq"       Proj:CSE_InfilExport[17]:exFreq    = {  "MONTH"  }
	"Set Proj:CSE_InfilExport[17]:exDayBeg_x"   Proj:CSE_InfilExport[17]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[17]:exDayEnd_x"   Proj:CSE_InfilExport[17]:exDayEnd_x	= {  "Dec 31"  }

   "Create Proj:CSE_InfilExport[18]"           Proj:CSE_InfilExport[18]  = {   CreateComp( cseEXPORT, "x-Infil-6-Hr" )  }
   "Set Proj:CSE_InfilExport[18]:exExportfile" Proj:CSE_InfilExport[18]:exExportfile  = {  CSE_InfilExportFile[6]:Name  }
   "Set Proj:CSE_InfilExport[18]:exType"       Proj:CSE_InfilExport[18]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[18]:exAFMeter"    Proj:CSE_InfilExport[18]:exAFMeter = {  CSE_AirFlowMETERs[6]  }
   "Set Proj:CSE_InfilExport[18]:exFreq"       Proj:CSE_InfilExport[18]:exFreq    = {  "HOUR"  }
	"Set Proj:CSE_InfilExport[18]:exDayBeg_x"   Proj:CSE_InfilExport[18]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[18]:exDayEnd_x"   Proj:CSE_InfilExport[18]:exDayEnd_x	= {  "Dec 31"  }
END
;*************************************************************************
RULELIST "SetupCSEExportFile_Infiltration_7" 1 0 0 1
;*************************************************************************
   "Create Proj:CSE_InfilExportFile[7]"  Proj:CSE_InfilExportFile[7]  = {   CreateComp( cseEXPORTFILE, "xf-Infil-7" )  }
   "Set Proj:CSE_InfilExportFile[7]:xfFileName"   Proj:CSE_InfilExportFile[7]:xfFileName  =
      {  ValidOr( ProjFileNameNoExt, "" ) + ValidOr( RunIDProcFile, "" ) + "-Infil-7.csv"  }

   "Create Proj:CSE_InfilExport[19]"           Proj:CSE_InfilExport[19]  = {   CreateComp( cseEXPORT, "x-Infil-7-Yr" )  }
   "Set Proj:CSE_InfilExport[19]:exExportfile" Proj:CSE_InfilExport[19]:exExportfile  = {  CSE_InfilExportFile[7]:Name  }
   "Set Proj:CSE_InfilExport[19]:exType"       Proj:CSE_InfilExport[19]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[19]:exAFMeter"    Proj:CSE_InfilExport[19]:exAFMeter = {  CSE_AirFlowMETERs[7]  }
   "Set Proj:CSE_InfilExport[19]:exFreq"       Proj:CSE_InfilExport[19]:exFreq    = {  "YEAR"  }

   "Create Proj:CSE_InfilExport[20]"           Proj:CSE_InfilExport[20]  = {   CreateComp( cseEXPORT, "x-Infil-7-Mo" )  }
   "Set Proj:CSE_InfilExport[20]:exExportfile" Proj:CSE_InfilExport[20]:exExportfile  = {  CSE_InfilExportFile[7]:Name  }
   "Set Proj:CSE_InfilExport[20]:exType"       Proj:CSE_InfilExport[20]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[20]:exAFMeter"    Proj:CSE_InfilExport[20]:exAFMeter = {  CSE_AirFlowMETERs[7]  }
   "Set Proj:CSE_InfilExport[20]:exFreq"       Proj:CSE_InfilExport[20]:exFreq    = {  "MONTH"  }
	"Set Proj:CSE_InfilExport[20]:exDayBeg_x"   Proj:CSE_InfilExport[20]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[20]:exDayEnd_x"   Proj:CSE_InfilExport[20]:exDayEnd_x	= {  "Dec 31"  }

   "Create Proj:CSE_InfilExport[21]"           Proj:CSE_InfilExport[21]  = {   CreateComp( cseEXPORT, "x-Infil-7-Hr" )  }
   "Set Proj:CSE_InfilExport[21]:exExportfile" Proj:CSE_InfilExport[21]:exExportfile  = {  CSE_InfilExportFile[7]:Name  }
   "Set Proj:CSE_InfilExport[21]:exType"       Proj:CSE_InfilExport[21]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[21]:exAFMeter"    Proj:CSE_InfilExport[21]:exAFMeter = {  CSE_AirFlowMETERs[7]  }
   "Set Proj:CSE_InfilExport[21]:exFreq"       Proj:CSE_InfilExport[21]:exFreq    = {  "HOUR"  }
	"Set Proj:CSE_InfilExport[21]:exDayBeg_x"   Proj:CSE_InfilExport[21]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[21]:exDayEnd_x"   Proj:CSE_InfilExport[21]:exDayEnd_x	= {  "Dec 31"  }
END
;*************************************************************************
RULELIST "SetupCSEExportFile_Infiltration_8" 1 0 0 1
;*************************************************************************
   "Create Proj:CSE_InfilExportFile[8]"  Proj:CSE_InfilExportFile[8]  = {   CreateComp( cseEXPORTFILE, "xf-Infil-8" )  }
   "Set Proj:CSE_InfilExportFile[8]:xfFileName"   Proj:CSE_InfilExportFile[8]:xfFileName  =
      {  ValidOr( ProjFileNameNoExt, "" ) + ValidOr( RunIDProcFile, "" ) + "-Infil-8.csv"  }

   "Create Proj:CSE_InfilExport[22]"           Proj:CSE_InfilExport[22]  = {   CreateComp( cseEXPORT, "x-Infil-8-Yr" )  }
   "Set Proj:CSE_InfilExport[22]:exExportfile" Proj:CSE_InfilExport[22]:exExportfile  = {  CSE_InfilExportFile[8]:Name  }
   "Set Proj:CSE_InfilExport[22]:exType"       Proj:CSE_InfilExport[22]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[22]:exAFMeter"    Proj:CSE_InfilExport[22]:exAFMeter = {  CSE_AirFlowMETERs[8]  }
   "Set Proj:CSE_InfilExport[22]:exFreq"       Proj:CSE_InfilExport[22]:exFreq    = {  "YEAR"  }

   "Create Proj:CSE_InfilExport[23]"           Proj:CSE_InfilExport[23]  = {   CreateComp( cseEXPORT, "x-Infil-8-Mo" )  }
   "Set Proj:CSE_InfilExport[23]:exExportfile" Proj:CSE_InfilExport[23]:exExportfile  = {  CSE_InfilExportFile[8]:Name  }
   "Set Proj:CSE_InfilExport[23]:exType"       Proj:CSE_InfilExport[23]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[23]:exAFMeter"    Proj:CSE_InfilExport[23]:exAFMeter = {  CSE_AirFlowMETERs[8]  }
   "Set Proj:CSE_InfilExport[23]:exFreq"       Proj:CSE_InfilExport[23]:exFreq    = {  "MONTH"  }
	"Set Proj:CSE_InfilExport[23]:exDayBeg_x"   Proj:CSE_InfilExport[23]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[23]:exDayEnd_x"   Proj:CSE_InfilExport[23]:exDayEnd_x	= {  "Dec 31"  }

   "Create Proj:CSE_InfilExport[24]"           Proj:CSE_InfilExport[24]  = {   CreateComp( cseEXPORT, "x-Infil-8-Hr" )  }
   "Set Proj:CSE_InfilExport[24]:exExportfile" Proj:CSE_InfilExport[24]:exExportfile  = {  CSE_InfilExportFile[8]:Name  }
   "Set Proj:CSE_InfilExport[24]:exType"       Proj:CSE_InfilExport[24]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[24]:exAFMeter"    Proj:CSE_InfilExport[24]:exAFMeter = {  CSE_AirFlowMETERs[8]  }
   "Set Proj:CSE_InfilExport[24]:exFreq"       Proj:CSE_InfilExport[24]:exFreq    = {  "HOUR"  }
	"Set Proj:CSE_InfilExport[24]:exDayBeg_x"   Proj:CSE_InfilExport[24]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[24]:exDayEnd_x"   Proj:CSE_InfilExport[24]:exDayEnd_x	= {  "Dec 31"  }
END
;*************************************************************************
RULELIST "SetupCSEExportFile_Infiltration_9" 1 0 0 1
;*************************************************************************
   "Create Proj:CSE_InfilExportFile[9]"  Proj:CSE_InfilExportFile[9]  = {   CreateComp( cseEXPORTFILE, "xf-Infil-9" )  }
   "Set Proj:CSE_InfilExportFile[9]:xfFileName"   Proj:CSE_InfilExportFile[9]:xfFileName  =
      {  ValidOr( ProjFileNameNoExt, "" ) + ValidOr( RunIDProcFile, "" ) + "-Infil-9.csv"  }

   "Create Proj:CSE_InfilExport[25]"           Proj:CSE_InfilExport[25]  = {   CreateComp( cseEXPORT, "x-Infil-9-Yr" )  }
   "Set Proj:CSE_InfilExport[25]:exExportfile" Proj:CSE_InfilExport[25]:exExportfile  = {  CSE_InfilExportFile[9]:Name  }
   "Set Proj:CSE_InfilExport[25]:exType"       Proj:CSE_InfilExport[25]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[25]:exAFMeter"    Proj:CSE_InfilExport[25]:exAFMeter = {  CSE_AirFlowMETERs[9]  }
   "Set Proj:CSE_InfilExport[25]:exFreq"       Proj:CSE_InfilExport[25]:exFreq    = {  "YEAR"  }

   "Create Proj:CSE_InfilExport[26]"           Proj:CSE_InfilExport[26]  = {   CreateComp( cseEXPORT, "x-Infil-9-Mo" )  }
   "Set Proj:CSE_InfilExport[26]:exExportfile" Proj:CSE_InfilExport[26]:exExportfile  = {  CSE_InfilExportFile[9]:Name  }
   "Set Proj:CSE_InfilExport[26]:exType"       Proj:CSE_InfilExport[26]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[26]:exAFMeter"    Proj:CSE_InfilExport[26]:exAFMeter = {  CSE_AirFlowMETERs[9]  }
   "Set Proj:CSE_InfilExport[26]:exFreq"       Proj:CSE_InfilExport[26]:exFreq    = {  "MONTH"  }
	"Set Proj:CSE_InfilExport[26]:exDayBeg_x"   Proj:CSE_InfilExport[26]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[26]:exDayEnd_x"   Proj:CSE_InfilExport[26]:exDayEnd_x	= {  "Dec 31"  }

   "Create Proj:CSE_InfilExport[27]"           Proj:CSE_InfilExport[27]  = {   CreateComp( cseEXPORT, "x-Infil-9-Hr" )  }
   "Set Proj:CSE_InfilExport[27]:exExportfile" Proj:CSE_InfilExport[27]:exExportfile  = {  CSE_InfilExportFile[9]:Name  }
   "Set Proj:CSE_InfilExport[27]:exType"       Proj:CSE_InfilExport[27]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[27]:exAFMeter"    Proj:CSE_InfilExport[27]:exAFMeter = {  CSE_AirFlowMETERs[9]  }
   "Set Proj:CSE_InfilExport[27]:exFreq"       Proj:CSE_InfilExport[27]:exFreq    = {  "HOUR"  }
	"Set Proj:CSE_InfilExport[27]:exDayBeg_x"   Proj:CSE_InfilExport[27]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[27]:exDayEnd_x"   Proj:CSE_InfilExport[27]:exDayEnd_x	= {  "Dec 31"  }
END
;*************************************************************************
RULELIST "SetupCSEExportFile_Infiltration_10" 1 0 0 1
;*************************************************************************
   "Create Proj:CSE_InfilExportFile[10]"  Proj:CSE_InfilExportFile[10]  = {   CreateComp( cseEXPORTFILE, "xf-Infil-10" )  }
   "Set Proj:CSE_InfilExportFile[10]:xfFileName"   Proj:CSE_InfilExportFile[10]:xfFileName  =
      {  ValidOr( ProjFileNameNoExt, "" ) + ValidOr( RunIDProcFile, "" ) + "-Infil-10.csv"  }

   "Create Proj:CSE_InfilExport[28]"           Proj:CSE_InfilExport[28]  = {   CreateComp( cseEXPORT, "x-Infil-10-Yr" )  }
   "Set Proj:CSE_InfilExport[28]:exExportfile" Proj:CSE_InfilExport[28]:exExportfile  = {  CSE_InfilExportFile[10]:Name  }
   "Set Proj:CSE_InfilExport[28]:exType"       Proj:CSE_InfilExport[28]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[28]:exAFMeter"    Proj:CSE_InfilExport[28]:exAFMeter = {  CSE_AirFlowMETERs[10]  }
   "Set Proj:CSE_InfilExport[28]:exFreq"       Proj:CSE_InfilExport[28]:exFreq    = {  "YEAR"  }

   "Create Proj:CSE_InfilExport[29]"           Proj:CSE_InfilExport[29]  = {   CreateComp( cseEXPORT, "x-Infil-10-Mo" )  }
   "Set Proj:CSE_InfilExport[29]:exExportfile" Proj:CSE_InfilExport[29]:exExportfile  = {  CSE_InfilExportFile[10]:Name  }
   "Set Proj:CSE_InfilExport[29]:exType"       Proj:CSE_InfilExport[29]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[29]:exAFMeter"    Proj:CSE_InfilExport[29]:exAFMeter = {  CSE_AirFlowMETERs[10]  }
   "Set Proj:CSE_InfilExport[29]:exFreq"       Proj:CSE_InfilExport[29]:exFreq    = {  "MONTH"  }
	"Set Proj:CSE_InfilExport[29]:exDayBeg_x"   Proj:CSE_InfilExport[29]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[29]:exDayEnd_x"   Proj:CSE_InfilExport[29]:exDayEnd_x	= {  "Dec 31"  }

   "Create Proj:CSE_InfilExport[30]"           Proj:CSE_InfilExport[30]  = {   CreateComp( cseEXPORT, "x-Infil-10-Hr" )  }
   "Set Proj:CSE_InfilExport[30]:exExportfile" Proj:CSE_InfilExport[30]:exExportfile  = {  CSE_InfilExportFile[10]:Name  }
   "Set Proj:CSE_InfilExport[30]:exType"       Proj:CSE_InfilExport[30]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[30]:exAFMeter"    Proj:CSE_InfilExport[30]:exAFMeter = {  CSE_AirFlowMETERs[10]  }
   "Set Proj:CSE_InfilExport[30]:exFreq"       Proj:CSE_InfilExport[30]:exFreq    = {  "HOUR"  }
	"Set Proj:CSE_InfilExport[30]:exDayBeg_x"   Proj:CSE_InfilExport[30]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[30]:exDayEnd_x"   Proj:CSE_InfilExport[30]:exDayEnd_x	= {  "Dec 31"  }
END
;*************************************************************************

;************************************************************************* - SAC 11/12/20
RULELIST "SetupCSEExportFile_Infiltration_11" 1 0 0 1
;*************************************************************************
   "Create Proj:CSE_InfilExportFile[11]"  Proj:CSE_InfilExportFile[11]  = {   CreateComp( cseEXPORTFILE, "xf-Infil-11" )  }
   "Set Proj:CSE_InfilExportFile[11]:xfFileName"   Proj:CSE_InfilExportFile[11]:xfFileName  =
      {  ValidOr( ProjFileNameNoExt, "" ) + ValidOr( RunIDProcFile, "" ) + "-Infil-11.csv"  }

   "Create Proj:CSE_InfilExport[31]"           Proj:CSE_InfilExport[31]  = {   CreateComp( cseEXPORT, "x-Infil-11-Yr" )  }
   "Set Proj:CSE_InfilExport[31]:exExportfile" Proj:CSE_InfilExport[31]:exExportfile  = {  CSE_InfilExportFile[11]:Name  }
   "Set Proj:CSE_InfilExport[31]:exType"       Proj:CSE_InfilExport[31]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[31]:exAFMeter"    Proj:CSE_InfilExport[31]:exAFMeter = {  CSE_AirFlowMETERs[11]  }
   "Set Proj:CSE_InfilExport[31]:exFreq"       Proj:CSE_InfilExport[31]:exFreq    = {  "YEAR"  }

   "Create Proj:CSE_InfilExport[32]"           Proj:CSE_InfilExport[32]  = {   CreateComp( cseEXPORT, "x-Infil-11-Mo" )  }
   "Set Proj:CSE_InfilExport[32]:exExportfile" Proj:CSE_InfilExport[32]:exExportfile  = {  CSE_InfilExportFile[11]:Name  }
   "Set Proj:CSE_InfilExport[32]:exType"       Proj:CSE_InfilExport[32]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[32]:exAFMeter"    Proj:CSE_InfilExport[32]:exAFMeter = {  CSE_AirFlowMETERs[11]  }
   "Set Proj:CSE_InfilExport[32]:exFreq"       Proj:CSE_InfilExport[32]:exFreq    = {  "MONTH"  }
	"Set Proj:CSE_InfilExport[32]:exDayBeg_x"   Proj:CSE_InfilExport[32]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[32]:exDayEnd_x"   Proj:CSE_InfilExport[32]:exDayEnd_x	= {  "Dec 31"  }

   "Create Proj:CSE_InfilExport[33]"           Proj:CSE_InfilExport[33]  = {   CreateComp( cseEXPORT, "x-Infil-11-Hr" )  }
   "Set Proj:CSE_InfilExport[33]:exExportfile" Proj:CSE_InfilExport[33]:exExportfile  = {  CSE_InfilExportFile[11]:Name  }
   "Set Proj:CSE_InfilExport[33]:exType"       Proj:CSE_InfilExport[33]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[33]:exAFMeter"    Proj:CSE_InfilExport[33]:exAFMeter = {  CSE_AirFlowMETERs[11]  }
   "Set Proj:CSE_InfilExport[33]:exFreq"       Proj:CSE_InfilExport[33]:exFreq    = {  "HOUR"  }
	"Set Proj:CSE_InfilExport[33]:exDayBeg_x"   Proj:CSE_InfilExport[33]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[33]:exDayEnd_x"   Proj:CSE_InfilExport[33]:exDayEnd_x	= {  "Dec 31"  }
END
;*************************************************************************
RULELIST "SetupCSEExportFile_Infiltration_12" 1 0 0 1
;*************************************************************************
   "Create Proj:CSE_InfilExportFile[12]"  Proj:CSE_InfilExportFile[12]  = {   CreateComp( cseEXPORTFILE, "xf-Infil-12" )  }
   "Set Proj:CSE_InfilExportFile[12]:xfFileName"   Proj:CSE_InfilExportFile[12]:xfFileName  =
      {  ValidOr( ProjFileNameNoExt, "" ) + ValidOr( RunIDProcFile, "" ) + "-Infil-12.csv"  }

   "Create Proj:CSE_InfilExport[34]"           Proj:CSE_InfilExport[34]  = {   CreateComp( cseEXPORT, "x-Infil-12-Yr" )  }
   "Set Proj:CSE_InfilExport[34]:exExportfile" Proj:CSE_InfilExport[34]:exExportfile  = {  CSE_InfilExportFile[12]:Name  }
   "Set Proj:CSE_InfilExport[34]:exType"       Proj:CSE_InfilExport[34]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[34]:exAFMeter"    Proj:CSE_InfilExport[34]:exAFMeter = {  CSE_AirFlowMETERs[12]  }
   "Set Proj:CSE_InfilExport[34]:exFreq"       Proj:CSE_InfilExport[34]:exFreq    = {  "YEAR"  }

   "Create Proj:CSE_InfilExport[35]"           Proj:CSE_InfilExport[35]  = {   CreateComp( cseEXPORT, "x-Infil-12-Mo" )  }
   "Set Proj:CSE_InfilExport[35]:exExportfile" Proj:CSE_InfilExport[35]:exExportfile  = {  CSE_InfilExportFile[12]:Name  }
   "Set Proj:CSE_InfilExport[35]:exType"       Proj:CSE_InfilExport[35]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[35]:exAFMeter"    Proj:CSE_InfilExport[35]:exAFMeter = {  CSE_AirFlowMETERs[12]  }
   "Set Proj:CSE_InfilExport[35]:exFreq"       Proj:CSE_InfilExport[35]:exFreq    = {  "MONTH"  }
	"Set Proj:CSE_InfilExport[35]:exDayBeg_x"   Proj:CSE_InfilExport[35]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[35]:exDayEnd_x"   Proj:CSE_InfilExport[35]:exDayEnd_x	= {  "Dec 31"  }

   "Create Proj:CSE_InfilExport[36]"           Proj:CSE_InfilExport[36]  = {   CreateComp( cseEXPORT, "x-Infil-12-Hr" )  }
   "Set Proj:CSE_InfilExport[36]:exExportfile" Proj:CSE_InfilExport[36]:exExportfile  = {  CSE_InfilExportFile[12]:Name  }
   "Set Proj:CSE_InfilExport[36]:exType"       Proj:CSE_InfilExport[36]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[36]:exAFMeter"    Proj:CSE_InfilExport[36]:exAFMeter = {  CSE_AirFlowMETERs[12]  }
   "Set Proj:CSE_InfilExport[36]:exFreq"       Proj:CSE_InfilExport[36]:exFreq    = {  "HOUR"  }
	"Set Proj:CSE_InfilExport[36]:exDayBeg_x"   Proj:CSE_InfilExport[36]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[36]:exDayEnd_x"   Proj:CSE_InfilExport[36]:exDayEnd_x	= {  "Dec 31"  }
END
;*************************************************************************
RULELIST "SetupCSEExportFile_Infiltration_13" 1 0 0 1
;*************************************************************************
   "Create Proj:CSE_InfilExportFile[13]"  Proj:CSE_InfilExportFile[13]  = {   CreateComp( cseEXPORTFILE, "xf-Infil-13" )  }
   "Set Proj:CSE_InfilExportFile[13]:xfFileName"   Proj:CSE_InfilExportFile[13]:xfFileName  =
      {  ValidOr( ProjFileNameNoExt, "" ) + ValidOr( RunIDProcFile, "" ) + "-Infil-13.csv"  }

   "Create Proj:CSE_InfilExport[37]"           Proj:CSE_InfilExport[37]  = {   CreateComp( cseEXPORT, "x-Infil-13-Yr" )  }
   "Set Proj:CSE_InfilExport[37]:exExportfile" Proj:CSE_InfilExport[37]:exExportfile  = {  CSE_InfilExportFile[13]:Name  }
   "Set Proj:CSE_InfilExport[37]:exType"       Proj:CSE_InfilExport[37]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[37]:exAFMeter"    Proj:CSE_InfilExport[37]:exAFMeter = {  CSE_AirFlowMETERs[13]  }
   "Set Proj:CSE_InfilExport[37]:exFreq"       Proj:CSE_InfilExport[37]:exFreq    = {  "YEAR"  }

   "Create Proj:CSE_InfilExport[38]"           Proj:CSE_InfilExport[38]  = {   CreateComp( cseEXPORT, "x-Infil-13-Mo" )  }
   "Set Proj:CSE_InfilExport[38]:exExportfile" Proj:CSE_InfilExport[38]:exExportfile  = {  CSE_InfilExportFile[13]:Name  }
   "Set Proj:CSE_InfilExport[38]:exType"       Proj:CSE_InfilExport[38]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[38]:exAFMeter"    Proj:CSE_InfilExport[38]:exAFMeter = {  CSE_AirFlowMETERs[13]  }
   "Set Proj:CSE_InfilExport[38]:exFreq"       Proj:CSE_InfilExport[38]:exFreq    = {  "MONTH"  }
	"Set Proj:CSE_InfilExport[38]:exDayBeg_x"   Proj:CSE_InfilExport[38]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[38]:exDayEnd_x"   Proj:CSE_InfilExport[38]:exDayEnd_x	= {  "Dec 31"  }

   "Create Proj:CSE_InfilExport[39]"           Proj:CSE_InfilExport[39]  = {   CreateComp( cseEXPORT, "x-Infil-13-Hr" )  }
   "Set Proj:CSE_InfilExport[39]:exExportfile" Proj:CSE_InfilExport[39]:exExportfile  = {  CSE_InfilExportFile[13]:Name  }
   "Set Proj:CSE_InfilExport[39]:exType"       Proj:CSE_InfilExport[39]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[39]:exAFMeter"    Proj:CSE_InfilExport[39]:exAFMeter = {  CSE_AirFlowMETERs[13]  }
   "Set Proj:CSE_InfilExport[39]:exFreq"       Proj:CSE_InfilExport[39]:exFreq    = {  "HOUR"  }
	"Set Proj:CSE_InfilExport[39]:exDayBeg_x"   Proj:CSE_InfilExport[39]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[39]:exDayEnd_x"   Proj:CSE_InfilExport[39]:exDayEnd_x	= {  "Dec 31"  }
END
;*************************************************************************
RULELIST "SetupCSEExportFile_Infiltration_14" 1 0 0 1
;*************************************************************************
   "Create Proj:CSE_InfilExportFile[14]"  Proj:CSE_InfilExportFile[14]  = {   CreateComp( cseEXPORTFILE, "xf-Infil-14" )  }
   "Set Proj:CSE_InfilExportFile[14]:xfFileName"   Proj:CSE_InfilExportFile[14]:xfFileName  =
      {  ValidOr( ProjFileNameNoExt, "" ) + ValidOr( RunIDProcFile, "" ) + "-Infil-14.csv"  }

   "Create Proj:CSE_InfilExport[40]"           Proj:CSE_InfilExport[40]  = {   CreateComp( cseEXPORT, "x-Infil-14-Yr" )  }
   "Set Proj:CSE_InfilExport[40]:exExportfile" Proj:CSE_InfilExport[40]:exExportfile  = {  CSE_InfilExportFile[14]:Name  }
   "Set Proj:CSE_InfilExport[40]:exType"       Proj:CSE_InfilExport[40]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[40]:exAFMeter"    Proj:CSE_InfilExport[40]:exAFMeter = {  CSE_AirFlowMETERs[14]  }
   "Set Proj:CSE_InfilExport[40]:exFreq"       Proj:CSE_InfilExport[40]:exFreq    = {  "YEAR"  }

   "Create Proj:CSE_InfilExport[41]"           Proj:CSE_InfilExport[41]  = {   CreateComp( cseEXPORT, "x-Infil-14-Mo" )  }
   "Set Proj:CSE_InfilExport[41]:exExportfile" Proj:CSE_InfilExport[41]:exExportfile  = {  CSE_InfilExportFile[14]:Name  }
   "Set Proj:CSE_InfilExport[41]:exType"       Proj:CSE_InfilExport[41]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[41]:exAFMeter"    Proj:CSE_InfilExport[41]:exAFMeter = {  CSE_AirFlowMETERs[14]  }
   "Set Proj:CSE_InfilExport[41]:exFreq"       Proj:CSE_InfilExport[41]:exFreq    = {  "MONTH"  }
	"Set Proj:CSE_InfilExport[41]:exDayBeg_x"   Proj:CSE_InfilExport[41]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[41]:exDayEnd_x"   Proj:CSE_InfilExport[41]:exDayEnd_x	= {  "Dec 31"  }

   "Create Proj:CSE_InfilExport[42]"           Proj:CSE_InfilExport[42]  = {   CreateComp( cseEXPORT, "x-Infil-14-Hr" )  }
   "Set Proj:CSE_InfilExport[42]:exExportfile" Proj:CSE_InfilExport[42]:exExportfile  = {  CSE_InfilExportFile[14]:Name  }
   "Set Proj:CSE_InfilExport[42]:exType"       Proj:CSE_InfilExport[42]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[42]:exAFMeter"    Proj:CSE_InfilExport[42]:exAFMeter = {  CSE_AirFlowMETERs[14]  }
   "Set Proj:CSE_InfilExport[42]:exFreq"       Proj:CSE_InfilExport[42]:exFreq    = {  "HOUR"  }
	"Set Proj:CSE_InfilExport[42]:exDayBeg_x"   Proj:CSE_InfilExport[42]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[42]:exDayEnd_x"   Proj:CSE_InfilExport[42]:exDayEnd_x	= {  "Dec 31"  }
END
;*************************************************************************
RULELIST "SetupCSEExportFile_Infiltration_15" 1 0 0 1
;*************************************************************************
   "Create Proj:CSE_InfilExportFile[15]"  Proj:CSE_InfilExportFile[15]  = {   CreateComp( cseEXPORTFILE, "xf-Infil-15" )  }
   "Set Proj:CSE_InfilExportFile[15]:xfFileName"   Proj:CSE_InfilExportFile[15]:xfFileName  =
      {  ValidOr( ProjFileNameNoExt, "" ) + ValidOr( RunIDProcFile, "" ) + "-Infil-15.csv"  }

   "Create Proj:CSE_InfilExport[43]"           Proj:CSE_InfilExport[43]  = {   CreateComp( cseEXPORT, "x-Infil-15-Yr" )  }
   "Set Proj:CSE_InfilExport[43]:exExportfile" Proj:CSE_InfilExport[43]:exExportfile  = {  CSE_InfilExportFile[15]:Name  }
   "Set Proj:CSE_InfilExport[43]:exType"       Proj:CSE_InfilExport[43]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[43]:exAFMeter"    Proj:CSE_InfilExport[43]:exAFMeter = {  CSE_AirFlowMETERs[15]  }
   "Set Proj:CSE_InfilExport[43]:exFreq"       Proj:CSE_InfilExport[43]:exFreq    = {  "YEAR"  }

   "Create Proj:CSE_InfilExport[44]"           Proj:CSE_InfilExport[44]  = {   CreateComp( cseEXPORT, "x-Infil-15-Mo" )  }
   "Set Proj:CSE_InfilExport[44]:exExportfile" Proj:CSE_InfilExport[44]:exExportfile  = {  CSE_InfilExportFile[15]:Name  }
   "Set Proj:CSE_InfilExport[44]:exType"       Proj:CSE_InfilExport[44]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[44]:exAFMeter"    Proj:CSE_InfilExport[44]:exAFMeter = {  CSE_AirFlowMETERs[15]  }
   "Set Proj:CSE_InfilExport[44]:exFreq"       Proj:CSE_InfilExport[44]:exFreq    = {  "MONTH"  }
	"Set Proj:CSE_InfilExport[44]:exDayBeg_x"   Proj:CSE_InfilExport[44]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[44]:exDayEnd_x"   Proj:CSE_InfilExport[44]:exDayEnd_x	= {  "Dec 31"  }

   "Create Proj:CSE_InfilExport[45]"           Proj:CSE_InfilExport[45]  = {   CreateComp( cseEXPORT, "x-Infil-15-Hr" )  }
   "Set Proj:CSE_InfilExport[45]:exExportfile" Proj:CSE_InfilExport[45]:exExportfile  = {  CSE_InfilExportFile[15]:Name  }
   "Set Proj:CSE_InfilExport[45]:exType"       Proj:CSE_InfilExport[45]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[45]:exAFMeter"    Proj:CSE_InfilExport[45]:exAFMeter = {  CSE_AirFlowMETERs[15]  }
   "Set Proj:CSE_InfilExport[45]:exFreq"       Proj:CSE_InfilExport[45]:exFreq    = {  "HOUR"  }
	"Set Proj:CSE_InfilExport[45]:exDayBeg_x"   Proj:CSE_InfilExport[45]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[45]:exDayEnd_x"   Proj:CSE_InfilExport[45]:exDayEnd_x	= {  "Dec 31"  }
END
;*************************************************************************
RULELIST "SetupCSEExportFile_Infiltration_16" 1 0 0 1
;*************************************************************************
   "Create Proj:CSE_InfilExportFile[16]"  Proj:CSE_InfilExportFile[16]  = {   CreateComp( cseEXPORTFILE, "xf-Infil-16" )  }
   "Set Proj:CSE_InfilExportFile[16]:xfFileName"   Proj:CSE_InfilExportFile[16]:xfFileName  =
      {  ValidOr( ProjFileNameNoExt, "" ) + ValidOr( RunIDProcFile, "" ) + "-Infil-16.csv"  }

   "Create Proj:CSE_InfilExport[46]"           Proj:CSE_InfilExport[46]  = {   CreateComp( cseEXPORT, "x-Infil-16-Yr" )  }
   "Set Proj:CSE_InfilExport[46]:exExportfile" Proj:CSE_InfilExport[46]:exExportfile  = {  CSE_InfilExportFile[16]:Name  }
   "Set Proj:CSE_InfilExport[46]:exType"       Proj:CSE_InfilExport[46]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[46]:exAFMeter"    Proj:CSE_InfilExport[46]:exAFMeter = {  CSE_AirFlowMETERs[16]  }
   "Set Proj:CSE_InfilExport[46]:exFreq"       Proj:CSE_InfilExport[46]:exFreq    = {  "YEAR"  }

   "Create Proj:CSE_InfilExport[47]"           Proj:CSE_InfilExport[47]  = {   CreateComp( cseEXPORT, "x-Infil-16-Mo" )  }
   "Set Proj:CSE_InfilExport[47]:exExportfile" Proj:CSE_InfilExport[47]:exExportfile  = {  CSE_InfilExportFile[16]:Name  }
   "Set Proj:CSE_InfilExport[47]:exType"       Proj:CSE_InfilExport[47]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[47]:exAFMeter"    Proj:CSE_InfilExport[47]:exAFMeter = {  CSE_AirFlowMETERs[16]  }
   "Set Proj:CSE_InfilExport[47]:exFreq"       Proj:CSE_InfilExport[47]:exFreq    = {  "MONTH"  }
	"Set Proj:CSE_InfilExport[47]:exDayBeg_x"   Proj:CSE_InfilExport[47]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[47]:exDayEnd_x"   Proj:CSE_InfilExport[47]:exDayEnd_x	= {  "Dec 31"  }

   "Create Proj:CSE_InfilExport[48]"           Proj:CSE_InfilExport[48]  = {   CreateComp( cseEXPORT, "x-Infil-16-Hr" )  }
   "Set Proj:CSE_InfilExport[48]:exExportfile" Proj:CSE_InfilExport[48]:exExportfile  = {  CSE_InfilExportFile[16]:Name  }
   "Set Proj:CSE_InfilExport[48]:exType"       Proj:CSE_InfilExport[48]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[48]:exAFMeter"    Proj:CSE_InfilExport[48]:exAFMeter = {  CSE_AirFlowMETERs[16]  }
   "Set Proj:CSE_InfilExport[48]:exFreq"       Proj:CSE_InfilExport[48]:exFreq    = {  "HOUR"  }
	"Set Proj:CSE_InfilExport[48]:exDayBeg_x"   Proj:CSE_InfilExport[48]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[48]:exDayEnd_x"   Proj:CSE_InfilExport[48]:exDayEnd_x	= {  "Dec 31"  }
END
;*************************************************************************
RULELIST "SetupCSEExportFile_Infiltration_17" 1 0 0 1
;*************************************************************************
   "Create Proj:CSE_InfilExportFile[17]"  Proj:CSE_InfilExportFile[17]  = {   CreateComp( cseEXPORTFILE, "xf-Infil-17" )  }
   "Set Proj:CSE_InfilExportFile[17]:xfFileName"   Proj:CSE_InfilExportFile[17]:xfFileName  =
      {  ValidOr( ProjFileNameNoExt, "" ) + ValidOr( RunIDProcFile, "" ) + "-Infil-17.csv"  }

   "Create Proj:CSE_InfilExport[49]"           Proj:CSE_InfilExport[49]  = {   CreateComp( cseEXPORT, "x-Infil-17-Yr" )  }
   "Set Proj:CSE_InfilExport[49]:exExportfile" Proj:CSE_InfilExport[49]:exExportfile  = {  CSE_InfilExportFile[17]:Name  }
   "Set Proj:CSE_InfilExport[49]:exType"       Proj:CSE_InfilExport[49]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[49]:exAFMeter"    Proj:CSE_InfilExport[49]:exAFMeter = {  CSE_AirFlowMETERs[17]  }
   "Set Proj:CSE_InfilExport[49]:exFreq"       Proj:CSE_InfilExport[49]:exFreq    = {  "YEAR"  }

   "Create Proj:CSE_InfilExport[50]"           Proj:CSE_InfilExport[50]  = {   CreateComp( cseEXPORT, "x-Infil-17-Mo" )  }
   "Set Proj:CSE_InfilExport[50]:exExportfile" Proj:CSE_InfilExport[50]:exExportfile  = {  CSE_InfilExportFile[17]:Name  }
   "Set Proj:CSE_InfilExport[50]:exType"       Proj:CSE_InfilExport[50]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[50]:exAFMeter"    Proj:CSE_InfilExport[50]:exAFMeter = {  CSE_AirFlowMETERs[17]  }
   "Set Proj:CSE_InfilExport[50]:exFreq"       Proj:CSE_InfilExport[50]:exFreq    = {  "MONTH"  }
	"Set Proj:CSE_InfilExport[50]:exDayBeg_x"   Proj:CSE_InfilExport[50]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[50]:exDayEnd_x"   Proj:CSE_InfilExport[50]:exDayEnd_x	= {  "Dec 31"  }

   "Create Proj:CSE_InfilExport[51]"           Proj:CSE_InfilExport[51]  = {   CreateComp( cseEXPORT, "x-Infil-17-Hr" )  }
   "Set Proj:CSE_InfilExport[51]:exExportfile" Proj:CSE_InfilExport[51]:exExportfile  = {  CSE_InfilExportFile[17]:Name  }
   "Set Proj:CSE_InfilExport[51]:exType"       Proj:CSE_InfilExport[51]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[51]:exAFMeter"    Proj:CSE_InfilExport[51]:exAFMeter = {  CSE_AirFlowMETERs[17]  }
   "Set Proj:CSE_InfilExport[51]:exFreq"       Proj:CSE_InfilExport[51]:exFreq    = {  "HOUR"  }
	"Set Proj:CSE_InfilExport[51]:exDayBeg_x"   Proj:CSE_InfilExport[51]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[51]:exDayEnd_x"   Proj:CSE_InfilExport[51]:exDayEnd_x	= {  "Dec 31"  }
END
;*************************************************************************
RULELIST "SetupCSEExportFile_Infiltration_18" 1 0 0 1
;*************************************************************************
   "Create Proj:CSE_InfilExportFile[18]"  Proj:CSE_InfilExportFile[18]  = {   CreateComp( cseEXPORTFILE, "xf-Infil-18" )  }
   "Set Proj:CSE_InfilExportFile[18]:xfFileName"   Proj:CSE_InfilExportFile[18]:xfFileName  =
      {  ValidOr( ProjFileNameNoExt, "" ) + ValidOr( RunIDProcFile, "" ) + "-Infil-18.csv"  }

   "Create Proj:CSE_InfilExport[52]"           Proj:CSE_InfilExport[52]  = {   CreateComp( cseEXPORT, "x-Infil-18-Yr" )  }
   "Set Proj:CSE_InfilExport[52]:exExportfile" Proj:CSE_InfilExport[52]:exExportfile  = {  CSE_InfilExportFile[18]:Name  }
   "Set Proj:CSE_InfilExport[52]:exType"       Proj:CSE_InfilExport[52]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[52]:exAFMeter"    Proj:CSE_InfilExport[52]:exAFMeter = {  CSE_AirFlowMETERs[18]  }
   "Set Proj:CSE_InfilExport[52]:exFreq"       Proj:CSE_InfilExport[52]:exFreq    = {  "YEAR"  }

   "Create Proj:CSE_InfilExport[53]"           Proj:CSE_InfilExport[53]  = {   CreateComp( cseEXPORT, "x-Infil-18-Mo" )  }
   "Set Proj:CSE_InfilExport[53]:exExportfile" Proj:CSE_InfilExport[53]:exExportfile  = {  CSE_InfilExportFile[18]:Name  }
   "Set Proj:CSE_InfilExport[53]:exType"       Proj:CSE_InfilExport[53]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[53]:exAFMeter"    Proj:CSE_InfilExport[53]:exAFMeter = {  CSE_AirFlowMETERs[18]  }
   "Set Proj:CSE_InfilExport[53]:exFreq"       Proj:CSE_InfilExport[53]:exFreq    = {  "MONTH"  }
	"Set Proj:CSE_InfilExport[53]:exDayBeg_x"   Proj:CSE_InfilExport[53]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[53]:exDayEnd_x"   Proj:CSE_InfilExport[53]:exDayEnd_x	= {  "Dec 31"  }

   "Create Proj:CSE_InfilExport[54]"           Proj:CSE_InfilExport[54]  = {   CreateComp( cseEXPORT, "x-Infil-18-Hr" )  }
   "Set Proj:CSE_InfilExport[54]:exExportfile" Proj:CSE_InfilExport[54]:exExportfile  = {  CSE_InfilExportFile[18]:Name  }
   "Set Proj:CSE_InfilExport[54]:exType"       Proj:CSE_InfilExport[54]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[54]:exAFMeter"    Proj:CSE_InfilExport[54]:exAFMeter = {  CSE_AirFlowMETERs[18]  }
   "Set Proj:CSE_InfilExport[54]:exFreq"       Proj:CSE_InfilExport[54]:exFreq    = {  "HOUR"  }
	"Set Proj:CSE_InfilExport[54]:exDayBeg_x"   Proj:CSE_InfilExport[54]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[54]:exDayEnd_x"   Proj:CSE_InfilExport[54]:exDayEnd_x	= {  "Dec 31"  }
END
;*************************************************************************
RULELIST "SetupCSEExportFile_Infiltration_19" 1 0 0 1
;*************************************************************************
   "Create Proj:CSE_InfilExportFile[19]"  Proj:CSE_InfilExportFile[19]  = {   CreateComp( cseEXPORTFILE, "xf-Infil-19" )  }
   "Set Proj:CSE_InfilExportFile[19]:xfFileName"   Proj:CSE_InfilExportFile[19]:xfFileName  =
      {  ValidOr( ProjFileNameNoExt, "" ) + ValidOr( RunIDProcFile, "" ) + "-Infil-19.csv"  }

   "Create Proj:CSE_InfilExport[55]"           Proj:CSE_InfilExport[55]  = {   CreateComp( cseEXPORT, "x-Infil-19-Yr" )  }
   "Set Proj:CSE_InfilExport[55]:exExportfile" Proj:CSE_InfilExport[55]:exExportfile  = {  CSE_InfilExportFile[19]:Name  }
   "Set Proj:CSE_InfilExport[55]:exType"       Proj:CSE_InfilExport[55]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[55]:exAFMeter"    Proj:CSE_InfilExport[55]:exAFMeter = {  CSE_AirFlowMETERs[19]  }
   "Set Proj:CSE_InfilExport[55]:exFreq"       Proj:CSE_InfilExport[55]:exFreq    = {  "YEAR"  }

   "Create Proj:CSE_InfilExport[56]"           Proj:CSE_InfilExport[56]  = {   CreateComp( cseEXPORT, "x-Infil-19-Mo" )  }
   "Set Proj:CSE_InfilExport[56]:exExportfile" Proj:CSE_InfilExport[56]:exExportfile  = {  CSE_InfilExportFile[19]:Name  }
   "Set Proj:CSE_InfilExport[56]:exType"       Proj:CSE_InfilExport[56]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[56]:exAFMeter"    Proj:CSE_InfilExport[56]:exAFMeter = {  CSE_AirFlowMETERs[19]  }
   "Set Proj:CSE_InfilExport[56]:exFreq"       Proj:CSE_InfilExport[56]:exFreq    = {  "MONTH"  }
	"Set Proj:CSE_InfilExport[56]:exDayBeg_x"   Proj:CSE_InfilExport[56]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[56]:exDayEnd_x"   Proj:CSE_InfilExport[56]:exDayEnd_x	= {  "Dec 31"  }

   "Create Proj:CSE_InfilExport[57]"           Proj:CSE_InfilExport[57]  = {   CreateComp( cseEXPORT, "x-Infil-19-Hr" )  }
   "Set Proj:CSE_InfilExport[57]:exExportfile" Proj:CSE_InfilExport[57]:exExportfile  = {  CSE_InfilExportFile[19]:Name  }
   "Set Proj:CSE_InfilExport[57]:exType"       Proj:CSE_InfilExport[57]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[57]:exAFMeter"    Proj:CSE_InfilExport[57]:exAFMeter = {  CSE_AirFlowMETERs[19]  }
   "Set Proj:CSE_InfilExport[57]:exFreq"       Proj:CSE_InfilExport[57]:exFreq    = {  "HOUR"  }
	"Set Proj:CSE_InfilExport[57]:exDayBeg_x"   Proj:CSE_InfilExport[57]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[57]:exDayEnd_x"   Proj:CSE_InfilExport[57]:exDayEnd_x	= {  "Dec 31"  }
END
;*************************************************************************
RULELIST "SetupCSEExportFile_Infiltration_20" 1 0 0 1
;*************************************************************************
   "Create Proj:CSE_InfilExportFile[20]"  Proj:CSE_InfilExportFile[20]  = {   CreateComp( cseEXPORTFILE, "xf-Infil-20" )  }
   "Set Proj:CSE_InfilExportFile[20]:xfFileName"   Proj:CSE_InfilExportFile[20]:xfFileName  =
      {  ValidOr( ProjFileNameNoExt, "" ) + ValidOr( RunIDProcFile, "" ) + "-Infil-20.csv"  }

   "Create Proj:CSE_InfilExport[58]"           Proj:CSE_InfilExport[58]  = {   CreateComp( cseEXPORT, "x-Infil-20-Yr" )  }
   "Set Proj:CSE_InfilExport[58]:exExportfile" Proj:CSE_InfilExport[58]:exExportfile  = {  CSE_InfilExportFile[20]:Name  }
   "Set Proj:CSE_InfilExport[58]:exType"       Proj:CSE_InfilExport[58]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[58]:exAFMeter"    Proj:CSE_InfilExport[58]:exAFMeter = {  CSE_AirFlowMETERs[20]  }
   "Set Proj:CSE_InfilExport[58]:exFreq"       Proj:CSE_InfilExport[58]:exFreq    = {  "YEAR"  }

   "Create Proj:CSE_InfilExport[59]"           Proj:CSE_InfilExport[59]  = {   CreateComp( cseEXPORT, "x-Infil-20-Mo" )  }
   "Set Proj:CSE_InfilExport[59]:exExportfile" Proj:CSE_InfilExport[59]:exExportfile  = {  CSE_InfilExportFile[20]:Name  }
   "Set Proj:CSE_InfilExport[59]:exType"       Proj:CSE_InfilExport[59]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[59]:exAFMeter"    Proj:CSE_InfilExport[59]:exAFMeter = {  CSE_AirFlowMETERs[20]  }
   "Set Proj:CSE_InfilExport[59]:exFreq"       Proj:CSE_InfilExport[59]:exFreq    = {  "MONTH"  }
	"Set Proj:CSE_InfilExport[59]:exDayBeg_x"   Proj:CSE_InfilExport[59]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[59]:exDayEnd_x"   Proj:CSE_InfilExport[59]:exDayEnd_x	= {  "Dec 31"  }

   "Create Proj:CSE_InfilExport[60]"           Proj:CSE_InfilExport[60]  = {   CreateComp( cseEXPORT, "x-Infil-20-Hr" )  }
   "Set Proj:CSE_InfilExport[60]:exExportfile" Proj:CSE_InfilExport[60]:exExportfile  = {  CSE_InfilExportFile[20]:Name  }
   "Set Proj:CSE_InfilExport[60]:exType"       Proj:CSE_InfilExport[60]:exType    = {  "AFMTR"   }
   "Set Proj:CSE_InfilExport[60]:exAFMeter"    Proj:CSE_InfilExport[60]:exAFMeter = {  CSE_AirFlowMETERs[20]  }
   "Set Proj:CSE_InfilExport[60]:exFreq"       Proj:CSE_InfilExport[60]:exFreq    = {  "HOUR"  }
	"Set Proj:CSE_InfilExport[60]:exDayBeg_x"   Proj:CSE_InfilExport[60]:exDayBeg_x	= {  "Jan 1"   }
	"Set Proj:CSE_InfilExport[60]:exDayEnd_x"   Proj:CSE_InfilExport[60]:exDayEnd_x	= {  "Dec 31"  }
END
;*************************************************************************


;************************************************************************* - SAC 12/09/20
RULELIST "ExportFile_HourlyRSYSOutput" 1 0 0 1
;*************************************************************************
   "Create cseRSYS:HrlyOutputExpFile"           cseRSYS:HrlyOutputExpFile  = {   CreateComp( cseEXPORTFILE, "xf-" + substr( Name, 0, 46 ) + "HrlyOut" )  }
   "Set cseRSYS:HrlyOutputExpFile:xfFileName"   cseRSYS:HrlyOutputExpFile:xfFileName  =
      {  ValidOr( Proj:ProjFileNameNoExt, "" ) + ValidOr( Proj:RunIDProcFile, "" ) + "-RSysOut_" + Name + ".csv"  }

   "Create cseRSYS:HrlyOutputExp"           cseRSYS:HrlyOutputExp  = {   CreateComp( cseEXPORT, "x-" + substr( Name, 0, 46 ) + "HrlyOut" )  }
   "Set cseRSYS:HrlyOutputExp:exExportfile" cseRSYS:HrlyOutputExp:exExportfile  = {  HrlyOutputExpFile:Name  }
   "Set cseRSYS:HrlyOutputExp:exType"       cseRSYS:HrlyOutputExp:exType        = {  "UDT"   }
   "Set cseRSYS:HrlyOutputExp:exFreq"       cseRSYS:HrlyOutputExp:exFreq        = {  "HOUR"  }
	"Set cseRSYS:HrlyOutputExp:exDayBeg_x"   cseRSYS:HrlyOutputExp:exDayBeg_x    = {  "Jan 1"   }
	"Set cseRSYS:HrlyOutputExp:exDayEnd_x"   cseRSYS:HrlyOutputExp:exDayEnd_x    = {  "Dec 31"  }

   "Create cseRSYS:HrlyOutputExpCol[1]"         cseRSYS:HrlyOutputExpCol[1]  = {  CreateComp( cseEXPORTCOL, "xc1-" + substr( Name, 0, 46 ) + "HrlyOut" )  }
   "Set cseRSYS:HrlyOutputExpCol[1]:Parent"     cseRSYS:HrlyOutputExpCol[1]:Parent    = {  HrlyOutputExp:Name  }
   "Set cseRSYS:HrlyOutputExpCol[1]:colhead"    cseRSYS:HrlyOutputExpCol[1]:colhead   = {  "Month"  }
   "Set cseRSYS:HrlyOutputExpCol[1]:colVal_x"   cseRSYS:HrlyOutputExpCol[1]:colVal_x  = {  "$Month"  }

   "Create cseRSYS:HrlyOutputExpCol[2]"         cseRSYS:HrlyOutputExpCol[2]  = {  CreateComp( cseEXPORTCOL, "xc2-" + substr( Name, 0, 46 ) + "HrlyOut" )  }
   "Set cseRSYS:HrlyOutputExpCol[2]:Parent"     cseRSYS:HrlyOutputExpCol[2]:Parent    = {  HrlyOutputExp:Name  }
   "Set cseRSYS:HrlyOutputExpCol[2]:colhead"    cseRSYS:HrlyOutputExpCol[2]:colhead   = {  "Day"  }
   "Set cseRSYS:HrlyOutputExpCol[2]:colVal_x"   cseRSYS:HrlyOutputExpCol[2]:colVal_x  = {  "$dayofmonth"  }

   "Create cseRSYS:HrlyOutputExpCol[3]"         cseRSYS:HrlyOutputExpCol[3]  = {  CreateComp( cseEXPORTCOL, "xc3-" + substr( Name, 0, 46 ) + "HrlyOut" )  }
   "Set cseRSYS:HrlyOutputExpCol[3]:Parent"     cseRSYS:HrlyOutputExpCol[3]:Parent    = {  HrlyOutputExp:Name  }
   "Set cseRSYS:HrlyOutputExpCol[3]:colhead"    cseRSYS:HrlyOutputExpCol[3]:colhead   = {  "Hr"  }
   "Set cseRSYS:HrlyOutputExpCol[3]:colVal_x"   cseRSYS:HrlyOutputExpCol[3]:colVal_x  = {  "$hour"  }

   "Create cseRSYS:HrlyOutputExpCol[4]"         cseRSYS:HrlyOutputExpCol[4]  = {  CreateComp( cseEXPORTCOL, "xc4-" + substr( Name, 0, 46 ) + "HrlyOut" )  }
   "Set cseRSYS:HrlyOutputExpCol[4]:Parent"     cseRSYS:HrlyOutputExpCol[4]:Parent    = {  HrlyOutputExp:Name  }
   "Set cseRSYS:HrlyOutputExpCol[4]:colhead"    cseRSYS:HrlyOutputExpCol[4]:colhead   = {  "DBT"  }
   "Set cseRSYS:HrlyOutputExpCol[4]:colVal_x"   cseRSYS:HrlyOutputExpCol[4]:colVal_x  = {  "$tDbO"  }

   "Create cseRSYS:HrlyOutputExpCol[5]"         cseRSYS:HrlyOutputExpCol[5]  = {  CreateComp( cseEXPORTCOL, "xc5-" + substr( Name, 0, 46 ) + "HrlyOut" )  }
   "Set cseRSYS:HrlyOutputExpCol[5]:Parent"     cseRSYS:HrlyOutputExpCol[5]:Parent    = {  HrlyOutputExp:Name  }
   "Set cseRSYS:HrlyOutputExpCol[5]:colhead"    cseRSYS:HrlyOutputExpCol[5]:colhead   = {  "Prim Hrs On"  }
   "Set cseRSYS:HrlyOutputExpCol[5]:colVal_x"   cseRSYS:HrlyOutputExpCol[5]:colVal_x  = {  Format( "@RsysRes[%c%s%c].H.hrsOn", 34, Name, 34 )  }

   "Create cseRSYS:HrlyOutputExpCol[6]"         cseRSYS:HrlyOutputExpCol[6]  = {  CreateComp( cseEXPORTCOL, "xc6-" + substr( Name, 0, 46 ) + "HrlyOut" )  }
   "Set cseRSYS:HrlyOutputExpCol[6]:Parent"     cseRSYS:HrlyOutputExpCol[6]:Parent    = {  HrlyOutputExp:Name  }
   "Set cseRSYS:HrlyOutputExpCol[6]:colhead"    cseRSYS:HrlyOutputExpCol[6]:colhead   = {  "Aux Hrs On"  }
   "Set cseRSYS:HrlyOutputExpCol[6]:colVal_x"   cseRSYS:HrlyOutputExpCol[6]:colVal_x  = {  Format( "@RsysRes[%c%s%c].H.hrsOnAux", 34, Name, 34 )  }

   "Create cseRSYS:HrlyOutputExpCol[7]"         cseRSYS:HrlyOutputExpCol[7]  = {  CreateComp( cseEXPORTCOL, "xc7-" + substr( Name, 0, 46 ) + "HrlyOut" )  }
   "Set cseRSYS:HrlyOutputExpCol[7]:Parent"     cseRSYS:HrlyOutputExpCol[7]:Parent    = {  HrlyOutputExp:Name  }
   "Set cseRSYS:HrlyOutputExpCol[7]:colhead"    cseRSYS:HrlyOutputExpCol[7]:colhead   = {  "Prim Heat (btu)"  }
   "Set cseRSYS:HrlyOutputExpCol[7]:colVal_x"   cseRSYS:HrlyOutputExpCol[7]:colVal_x  = {  Format( "@RsysRes[%c%s%c].H.qhPrimary", 34, Name, 34 )  }     ; SAC 12/29/21

   "Create cseRSYS:HrlyOutputExpCol[8]"         cseRSYS:HrlyOutputExpCol[8]  = {  CreateComp( cseEXPORTCOL, "xc8-" + substr( Name, 0, 46 ) + "HrlyOut" )  }
   "Set cseRSYS:HrlyOutputExpCol[8]:Parent"     cseRSYS:HrlyOutputExpCol[8]:Parent    = {  HrlyOutputExp:Name  }
   "Set cseRSYS:HrlyOutputExpCol[8]:colhead"    cseRSYS:HrlyOutputExpCol[8]:colhead   = {  "Sen Cool (btu)"  }
   "Set cseRSYS:HrlyOutputExpCol[8]:colVal_x"   cseRSYS:HrlyOutputExpCol[8]:colVal_x  = {  Format( "@RsysRes[%c%s%c].H.qcSen", 34, Name, 34 )  }

   "Create cseRSYS:HrlyOutputExpCol[9]"         cseRSYS:HrlyOutputExpCol[9]  = {  CreateComp( cseEXPORTCOL, "xc9-" + substr( Name, 0, 46 ) + "HrlyOut" )  }
   "Set cseRSYS:HrlyOutputExpCol[9]:Parent"     cseRSYS:HrlyOutputExpCol[9]:Parent    = {  HrlyOutputExp:Name  }
   "Set cseRSYS:HrlyOutputExpCol[9]:colhead"    cseRSYS:HrlyOutputExpCol[9]:colhead   = {  "Lat Cool (btu)"  }
   "Set cseRSYS:HrlyOutputExpCol[9]:colVal_x"   cseRSYS:HrlyOutputExpCol[9]:colVal_x  = {  Format( "@RsysRes[%c%s%c].H.qcLat", 34, Name, 34 )  }

   "Create cseRSYS:HrlyOutputExpCol[10]"         cseRSYS:HrlyOutputExpCol[10]  = {  CreateComp( cseEXPORTCOL, "xc10-" + substr( Name, 0, 46 ) + "HrlyOut" )  }    ; SAC 12/29/21
   "Set cseRSYS:HrlyOutputExpCol[10]:Parent"     cseRSYS:HrlyOutputExpCol[10]:Parent    = {  HrlyOutputExp:Name  }
   "Set cseRSYS:HrlyOutputExpCol[10]:colhead"    cseRSYS:HrlyOutputExpCol[10]:colhead   = {  "Clg Fan Heat (btu)"  }
   "Set cseRSYS:HrlyOutputExpCol[10]:colVal_x"   cseRSYS:HrlyOutputExpCol[10]:colVal_x  = {  Format( "@RsysRes[%c%s%c].H.qcFan", 34, Name, 34 )  }

   "Create cseRSYS:HrlyOutputExpCol[11]"         cseRSYS:HrlyOutputExpCol[11]  = {  CreateComp( cseEXPORTCOL, "xc11-" + substr( Name, 0, 46 ) + "HrlyOut" )  }
   "Set cseRSYS:HrlyOutputExpCol[11]:Parent"     cseRSYS:HrlyOutputExpCol[11]:Parent    = {  HrlyOutputExp:Name  }
   "Set cseRSYS:HrlyOutputExpCol[11]:colhead"    cseRSYS:HrlyOutputExpCol[11]:colhead   = {  "Htg Fan Heat (btu)"  }
   "Set cseRSYS:HrlyOutputExpCol[11]:colVal_x"   cseRSYS:HrlyOutputExpCol[11]:colVal_x  = {  Format( "@RsysRes[%c%s%c].H.qhFan", 34, Name, 34 )  }    ; SAC 12/29/21

   "Create cseRSYS:HrlyOutputExpCol[12]"         cseRSYS:HrlyOutputExpCol[12]  = {  CreateComp( cseEXPORTCOL, "xc12-" + substr( Name, 0, 46 ) + "HrlyOut" )  }
   "Set cseRSYS:HrlyOutputExpCol[12]:Parent"     cseRSYS:HrlyOutputExpCol[12]:Parent    = {  HrlyOutputExp:Name  }
   "Set cseRSYS:HrlyOutputExpCol[12]:colhead"    cseRSYS:HrlyOutputExpCol[12]:colhead   = {  "Defrost Heat (btu)"  }
   "Set cseRSYS:HrlyOutputExpCol[12]:colVal_x"   cseRSYS:HrlyOutputExpCol[12]:colVal_x  = {  Format( "@RsysRes[%c%s%c].H.qhDefrost", 34, Name, 34 )  }      ; SAC 01/01/22

   "Create cseRSYS:HrlyOutputExpCol[13]"         cseRSYS:HrlyOutputExpCol[13]  = {  CreateComp( cseEXPORTCOL, "xc13-" + substr( Name, 0, 46 ) + "HrlyOut" )  }
   "Set cseRSYS:HrlyOutputExpCol[13]:Parent"     cseRSYS:HrlyOutputExpCol[13]:Parent    = {  HrlyOutputExp:Name  }
   "Set cseRSYS:HrlyOutputExpCol[13]:colhead"    cseRSYS:HrlyOutputExpCol[13]:colhead   = {  "Aux Heat (btu)"  }
   "Set cseRSYS:HrlyOutputExpCol[13]:colVal_x"   cseRSYS:HrlyOutputExpCol[13]:colVal_x  = {  Format( "@RsysRes[%c%s%c].H.qhAux", 34, Name, 34 )  }    ; SAC 12/29/21

;   "Create cseRSYS:HrlyOutputExpCol[13]"         cseRSYS:HrlyOutputExpCol[13]  = {  CreateComp( cseEXPORTCOL, "xc13-" + substr( Name, 0, 46 ) + "DOWH" )  }
;   "Set cseRSYS:HrlyOutputExpCol[13]:Parent"     cseRSYS:HrlyOutputExpCol[13]:Parent    = {  HrlyOutputExp:Name  }
;   "Set cseRSYS:HrlyOutputExpCol[13]:colhead"    cseRSYS:HrlyOutputExpCol[13]:colhead   = {  "D-O-W/H"  }
;   "Set cseRSYS:HrlyOutputExpCol[13]:colVal_x"   cseRSYS:HrlyOutputExpCol[13]:colVal_x  = {  "$DOWH"  }

;Report rpType=UDT rpFreq=hour  rpDayBeg=jan 4 rpDayEnd=jan 6
;   reportcol colVal=$Month   colHead="Month" colWid = 5 \
;   reportcol colVal=$dayofmonth colHead="Day" colWid = 3 \
;   Reportcol colVal=$hour  colHead="Hr" colWid=2 colDec=0 \
;   Reportcol colVal=$tDbO colHead="DBT" colWid=4 colDec=1 \
;   Reportcol colVal=@RsysRes[ s].H.hrsOn colHead="Prim Hrs On" colDec=2 colWid=5 \
;   Reportcol colVal=@RsysRes[ s].H.hrsOnAux colHead="Aux Hrs On" colDec=1 colWid=8 \
;   Reportcol colVal=@RsysRes[ s].H.qhPrimary colHead="Prim Heat (btu)" colDec=0 colWid=7 \
;   Reportcol colVal=@RsysRes[ s].H.qcSen colHead="Sen Cool (btu)" colDec=0 colWid=7 \
;   Reportcol colVal=@RsysRes[ s].H.qcLat colHead="Lat Cool (btu)" colDec=0 colWid=7 \
;   Reportcol colVal=@RsysRes[ s].H.qcFan colHead="Clg Fan Heat (btu)" colDec=0 colWid=7 \
;   Reportcol colVal=@RsysRes[ s].H.qhFan colHead="Htg Fan Heat (btu)" colDec=0 colWid=7 \
;   Reportcol colVal=@RsysRes[ s].H.qDefrost colHead="Defrost Heat (btu)" colDec=0 colWid=7 \
;   Reportcol colVal=@RsysRes[ s].H.qhAux colHead="Aux Heat (btu)" colDec=0 colWid=7
END
;*************************************************************************


;************************************************************************* SAC 03/12/21
RULELIST "CSE_Project_SetupHVACCapacityExport" 1 0 0 1
;*************************************************************************
   "Create Proj:CSE_HVACCapsExportFile"            Proj:CSE_HVACCapsExportFile  = {   CreateComp( cseEXPORTFILE, "xf-hvacCaps" )  }
   "Set Proj:CSE_HVACCapsExportFile:xfFileName"    Proj:CSE_HVACCapsExportFile:xfFileName  =
      {  ValidOr( ProjFileNameNoExt, "" ) + ValidOr( RunIDProcFile, "" ) + "-hvacCaps.csv"  }
;"dbg" Proj:Action = { PostMessageToLog( "CSE_HVACCapsExportFile '%s' created -> %s", CSE_HVACCapsExportFile:Name, CSE_HVACCapsExportFile:xfFileName ) }

   "Create Proj:CSE_HVACCapsExport"             Proj:CSE_HVACCapsExport  = {   CreateComp( cseEXPORT, "x-hvacCaps" )  }
   "Set Proj:CSE_HVACCapsExport:exExportfile"   Proj:CSE_HVACCapsExport:exExportfile  = {  CSE_HVACCapsExportFile:Name  }
   "Set Proj:CSE_HVACCapsExport:exType"         Proj:CSE_HVACCapsExport:exType    = {  "UDT"   }
   "Set Proj:CSE_HVACCapsExport:exFreq"         Proj:CSE_HVACCapsExport:exFreq    = {  "YEAR"  }
   "Set Proj:CSE_HVACCapsExport:exHeader"       Proj:CSE_HVACCapsExport:exHeader  = {  "COLUMNSONLY"    }
;   "Set Proj:CSE_HVACCapsExport:exHeader"       Proj:CSE_HVACCapsExport:exHeader  = {  "YESIFNEW"    }
;   "Set Proj:CSE_HVACCapsExport:exFooter"       Proj:CSE_HVACCapsExport:exFooter  = {  "NO"     }

   "Create Proj:CSE_HVACCapsExportCol"          Proj:CSE_HVACCapsExportCol  = {   CreateComp( cseEXPORTCOL, "xc-hvacCaps" )  }      ; SAC 03/14/21
   "Set Proj:CSE_HVACCapsExportCol - Parent"    Proj:CSE_HVACCapsExportCol:Parent    = {  CSE_HVACCapsExport:Name  }
   "Set Proj:CSE_HVACCapsExportCol:colVal_x"    Proj:CSE_HVACCapsExportCol:colVal_x  = {  "@top.runDateTime"  }
   "Set Proj:CSE_HVACCapsExportCol:colHead"     Proj:CSE_HVACCapsExportCol:colHead   = {  "runDateTime"  }

   "Create HVACSys Cap ExportCols via subordinate rulelist"    HVACSys:Action =
      {  if (IfValidAnd( FloorAreaServed[1] > 0 ) .AND. LocalCompAssigned( cseRSYS ))
         then  EvalRulelist( "CSE_HVACSys_SetupHVACCapacityExport", 1 )
         else  UNDEFINED  endif  }
END
;*************************************************************************
RULELIST "CSE_HVACSys_SetupHVACCapacityExport" 1 0 0 1
;*************************************************************************
;   "Create HVACSys:CSE_HVACCapsExpCol[1]"          HVACSys:CSE_HVACCapsExpCol[1]  = {  CreateComp( cseEXPORTCOL, "xc1-"+Name+"-HtgCap" )  }
;   "Set HVACSys:CSE_HVACCapsExpCol[1]:Parent"      HVACSys:CSE_HVACCapsExpCol[1]:Parent    = {  Proj:CSE_HVACCapsExport:Name  }
;   "Set HVACSys:CSE_HVACCapsExpCol[1]:colhead"     HVACSys:CSE_HVACCapsExpCol[1]:colhead   = {  Name + "-HtgCap"  }
;   "Set HVACSys:CSE_HVACCapsExpCol[1]:colVal_x"    HVACSys:CSE_HVACCapsExpCol[1]:colVal_x  =
;      {  if (IfValidAnd( Type = 2 ))  ; HtPump
;         then  Format( "@Rsys[%c%s%c].Cap47", 34, cseRSYS:Name, 34 )
;         else  Format( "@Rsys[%c%s%c].CapH",  34, cseRSYS:Name, 34 )
;         endif  }
;   "Create HVACSys:CSE_HVACCapsExpCol[2]"          HVACSys:CSE_HVACCapsExpCol[2]  = {  CreateComp( cseEXPORTCOL, "xc1-"+Name+"-ClgCap" )  }
;   "Set HVACSys:CSE_HVACCapsExpCol[2]:Parent"      HVACSys:CSE_HVACCapsExpCol[2]:Parent    = {  Proj:CSE_HVACCapsExport:Name  }
;   "Set HVACSys:CSE_HVACCapsExpCol[2]:colhead"     HVACSys:CSE_HVACCapsExpCol[2]:colhead   = {  Name + "-ClgCap"  }
;   "Set HVACSys:CSE_HVACCapsExpCol[2]:colVal_x"    HVACSys:CSE_HVACCapsExpCol[2]:colVal_x  =
;      {  Format( "@Rsys[%c%s%c].Cap95", 34, cseRSYS:Name, 34 )  }

; REMOVED columns 4-7 and trimmed units labels to maximize # of systems that can be reported by CSE (w/out crashing) - SAC 04/21/21
   "Create HVACSys:CSE_HVACCapsExpCol[1] - Name"   HVACSys:CSE_HVACCapsExpCol[1]  = {  CreateComp( cseEXPORTCOL, "xc1-" + substr( Name, 0, 39 ) + "-Name" )  }
   "Set HVACSys:CSE_HVACCapsExpCol[1]:Parent"      HVACSys:CSE_HVACCapsExpCol[1]:Parent    = {  Proj:CSE_HVACCapsExport:Name  }
;   "Set HVACSys:CSE_HVACCapsExpCol[1]:colhead"     HVACSys:CSE_HVACCapsExpCol[1]:colhead   = {  "HVACSys Name"  }
   "Set HVACSys:CSE_HVACCapsExpCol[1]:colhead"     HVACSys:CSE_HVACCapsExpCol[1]:colhead   = {  "SysName"  }
   "Set HVACSys:CSE_HVACCapsExpCol[1]:colVal_x"    HVACSys:CSE_HVACCapsExpCol[1]:colVal_x  = {  Format( "%c%s%c", 34, Name, 34 )  }
   "Create HVACSys:CSE_HVACCapsExpCol[2] - HtgCap" HVACSys:CSE_HVACCapsExpCol[2]  = {  CreateComp( cseEXPORTCOL, "xc1-" + substr( Name, 0, 39 ) + "-HtgCap" )  }
   "Set HVACSys:CSE_HVACCapsExpCol[2]:Parent"      HVACSys:CSE_HVACCapsExpCol[2]:Parent    = {  Proj:CSE_HVACCapsExport:Name  }
;   "Set HVACSys:CSE_HVACCapsExpCol[2]:colhead"     HVACSys:CSE_HVACCapsExpCol[2]:colhead   = {  "HtgCap (kBtu)"  }
   "Set HVACSys:CSE_HVACCapsExpCol[2]:colhead"     HVACSys:CSE_HVACCapsExpCol[2]:colhead   = {  "HtgCap"  }
   "Set HVACSys:CSE_HVACCapsExpCol[2]:colVal_x"    HVACSys:CSE_HVACCapsExpCol[2]:colVal_x  =
      {  if (IfValidAnd( Type = 2 ))  ; HtPump
         then  Format( "@Rsys[%c%s%c].Cap47/1000", 34, cseRSYS:Name, 34 )
         else  Format( "@Rsys[%c%s%c].CapH/1000",  34, cseRSYS:Name, 34 )
         endif  }
   "Create HVACSys:CSE_HVACCapsExpCol[3] - ClgCap" HVACSys:CSE_HVACCapsExpCol[3]  = {  CreateComp( cseEXPORTCOL, "xc1-" + substr( Name, 0, 39 ) + "-ClgCap" )  }
   "Set HVACSys:CSE_HVACCapsExpCol[3]:Parent"      HVACSys:CSE_HVACCapsExpCol[3]:Parent    = {  Proj:CSE_HVACCapsExport:Name  }
;   "Set HVACSys:CSE_HVACCapsExpCol[3]:colhead"     HVACSys:CSE_HVACCapsExpCol[3]:colhead   = {  "ClgCap (kBtu)"  }
   "Set HVACSys:CSE_HVACCapsExpCol[3]:colhead"     HVACSys:CSE_HVACCapsExpCol[3]:colhead   = {  "ClgCap"  }
   "Set HVACSys:CSE_HVACCapsExpCol[3]:colVal_x"    HVACSys:CSE_HVACCapsExpCol[3]:colVal_x  =
      {  Format( "@Rsys[%c%s%c].Cap95/1000", 34, cseRSYS:Name, 34 )  }
;   "Create HVACSys:CSE_HVACCapsExpCol[4] - HtgLd"  HVACSys:CSE_HVACCapsExpCol[4]  = {  CreateComp( cseEXPORTCOL, "xc1-" + substr( Name, 0, 39 ) + "-HtgLd" )  }
;   "Set HVACSys:CSE_HVACCapsExpCol[4]:Parent"      HVACSys:CSE_HVACCapsExpCol[4]:Parent    = {  Proj:CSE_HVACCapsExport:Name  }
;   "Set HVACSys:CSE_HVACCapsExpCol[4]:colhead"     HVACSys:CSE_HVACCapsExpCol[4]:colhead   = {  "HtgLd (kBtu)"  }
;   "Set HVACSys:CSE_HVACCapsExpCol[4]:colVal_x"    HVACSys:CSE_HVACCapsExpCol[4]:colVal_x  =
;      {  Format( "@RSYSRes[%c%s%c].Y.qhPrimary/1000", 34, cseRSYS:Name, 34 )  }
;   "Create HVACSys:CSE_HVACCapsExpCol[5] - ClgSens"HVACSys:CSE_HVACCapsExpCol[5]  = {  CreateComp( cseEXPORTCOL, "xc1-" + substr( Name, 0, 39 ) + "-ClgSens" )  }
;   "Set HVACSys:CSE_HVACCapsExpCol[5]:Parent"      HVACSys:CSE_HVACCapsExpCol[5]:Parent    = {  Proj:CSE_HVACCapsExport:Name  }
;   "Set HVACSys:CSE_HVACCapsExpCol[5]:colhead"     HVACSys:CSE_HVACCapsExpCol[5]:colhead   = {  "ClgSens (kBtu)"  }
;   "Set HVACSys:CSE_HVACCapsExpCol[5]:colVal_x"    HVACSys:CSE_HVACCapsExpCol[5]:colVal_x  =
;      {  Format( "@RSYSRes[%c%s%c].Y.qcSen/1000", 34, cseRSYS:Name, 34 )  }
;   "Create HVACSys:CSE_HVACCapsExpCol[6] - ClgLat" HVACSys:CSE_HVACCapsExpCol[6]  = {  CreateComp( cseEXPORTCOL, "xc1-" + substr( Name, 0, 39 ) + "-ClgLat" )  }
;   "Set HVACSys:CSE_HVACCapsExpCol[6]:Parent"      HVACSys:CSE_HVACCapsExpCol[6]:Parent    = {  Proj:CSE_HVACCapsExport:Name  }
;   "Set HVACSys:CSE_HVACCapsExpCol[6]:colhead"     HVACSys:CSE_HVACCapsExpCol[6]:colhead   = {  "ClgLat (kBtu)"  }
;   "Set HVACSys:CSE_HVACCapsExpCol[6]:colVal_x"    HVACSys:CSE_HVACCapsExpCol[6]:colVal_x  =
;      {  Format( "@RSYSRes[%c%s%c].Y.qcLat/1000", 34, cseRSYS:Name, 34 )  }
;   "Create HVACSys:CSE_HVACCapsExpCol[7] - HtgCap2"HVACSys:CSE_HVACCapsExpCol[7]  = {  CreateComp( cseEXPORTCOL, "xc1-" + substr( Name, 0, 39 ) + "-HrlyHtgCap" )  }
;   "Set HVACSys:CSE_HVACCapsExpCol[7]:Parent"      HVACSys:CSE_HVACCapsExpCol[7]:Parent    = {  Proj:CSE_HVACCapsExport:Name  }
;   "Set HVACSys:CSE_HVACCapsExpCol[7]:colhead"     HVACSys:CSE_HVACCapsExpCol[7]:colhead   = {  "HrlyHtgCap (kBtu)"  }
;   "Set HVACSys:CSE_HVACCapsExpCol[7]:colVal_x"    HVACSys:CSE_HVACCapsExpCol[7]:colVal_x  =
;      {  Format( "@RSYS[%c%s%c].capH_As/1000", 34, cseRSYS:Name, 34 )  }
END
;*************************************************************************


;************************************************************************* SAC 03/24/22
RULELIST "CSE_Project_SetupZoneUMLHsExport" 1 0 0 1
;*************************************************************************
   "Create Proj:CSE_UMLHsExportFile"            Proj:CSE_UMLHsExportFile  = {   CreateComp( cseEXPORTFILE, "xf-znUMLHs" )  }
   "Set Proj:CSE_UMLHsExportFile:xfFileName"    Proj:CSE_UMLHsExportFile:xfFileName  =
      {  ValidOr( ProjFileNameNoExt, "" ) + ValidOr( RunIDProcFile, "" ) + "-znUMLHs.csv"  }
;"dbg" Proj:Action = { PostMessageToLog( "CSE_UMLHsExportFile '%s' created -> %s", CSE_UMLHsExportFile:Name, CSE_UMLHsExportFile:xfFileName ) }

   "Create Proj:CSE_UMLHsExport"             Proj:CSE_UMLHsExport  = {   CreateComp( cseEXPORT, "x-znUMLHs" )  }
   "Set Proj:CSE_UMLHsExport:exExportfile"   Proj:CSE_UMLHsExport:exExportfile  = {  CSE_UMLHsExportFile:Name  }
   "Set Proj:CSE_UMLHsExport:exType"         Proj:CSE_UMLHsExport:exType    = {  "UDT"   }
   "Set Proj:CSE_UMLHsExport:exFreq"         Proj:CSE_UMLHsExport:exFreq    = {  "YEAR"  }
   "Set Proj:CSE_UMLHsExport:exHeader"       Proj:CSE_UMLHsExport:exHeader  = {  "COLUMNSONLY"    }
;   "Set Proj:CSE_UMLHsExport:exHeader"       Proj:CSE_UMLHsExport:exHeader  = {  "YESIFNEW"    }
;   "Set Proj:CSE_UMLHsExport:exFooter"       Proj:CSE_UMLHsExport:exFooter  = {  "NO"     }

   "Create Proj:CSE_UMLHsExportCol"          Proj:CSE_UMLHsExportCol  = {   CreateComp( cseEXPORTCOL, "xc-znUMLHs" )  }      ; SAC 03/14/21
   "Set Proj:CSE_UMLHsExportCol - Parent"    Proj:CSE_UMLHsExportCol:Parent    = {  CSE_UMLHsExport:Name  }
   "Set Proj:CSE_UMLHsExportCol:colVal_x"    Proj:CSE_UMLHsExportCol:colVal_x  = {  "@top.runDateTime"  }
   "Set Proj:CSE_UMLHsExportCol:colHead"     Proj:CSE_UMLHsExportCol:colHead   = {  "runDateTime"  }

   "Create Zone UMLHs ExportCols via subordinate rulelist"    Zone:Action =
      {  if (IfValidAnd( TrackUMLHs > 0 ) .AND. LocalCompAssigned( CSE_ZONE ))
         then  EvalRulelist( "CSE_Zone_SetupUMLHsExport", 1 )
         else  UNDEFINED  endif  }
END
;*************************************************************************
RULELIST "CSE_Zone_SetupUMLHsExport" 1 0 0 1
;*************************************************************************
   "Create Zone:CSE_UMLHsExpCol[1] - Name"   Zone:CSE_UMLHsExpCol[1]  = {  CreateComp( cseEXPORTCOL, "xcz-" + substr( Name, 0, 39 ) + "-Name" )  }
   "Set Zone:CSE_UMLHsExpCol[1]:Parent"      Zone:CSE_UMLHsExpCol[1]:Parent    = {  Proj:CSE_UMLHsExport:Name  }
   "Set Zone:CSE_UMLHsExpCol[1]:colhead"     Zone:CSE_UMLHsExpCol[1]:colhead   = {  "ZnName"  }
   "Set Zone:CSE_UMLHsExpCol[1]:colVal_x"    Zone:CSE_UMLHsExpCol[1]:colVal_x  = {  Format( "%c%s%c", 34, Name, 34 )  }

   "Create Zone:CSE_UMLHsExpCol[2] - Clg"    Zone:CSE_UMLHsExpCol[2]  = {  CreateComp( cseEXPORTCOL, "xcz-" + substr( Name, 0, 39 ) + "-Clg" )  }
   "Set Zone:CSE_UMLHsExpCol[2]:Parent"      Zone:CSE_UMLHsExpCol[2]:Parent    = {  Proj:CSE_UMLHsExport:Name  }
   "Set Zone:CSE_UMLHsExpCol[2]:colhead"     Zone:CSE_UMLHsExpCol[2]:colhead   = {  "Clg"  }
   "Set Zone:CSE_UMLHsExpCol[2]:colVal_x"    Zone:CSE_UMLHsExpCol[2]:colVal_x  =
      {  Format( "@Znres[%c%s%c].Y.unMetHrsTol[1]", 34, CSE_ZONE:Name, 34 )  }

   "Create Zone:CSE_UMLHsExpCol[3] - Htg"    Zone:CSE_UMLHsExpCol[3]  = {  CreateComp( cseEXPORTCOL, "xcz-" + substr( Name, 0, 39 ) + "-Htg" )  }
   "Set Zone:CSE_UMLHsExpCol[3]:Parent"      Zone:CSE_UMLHsExpCol[3]:Parent    = {  Proj:CSE_UMLHsExport:Name  }
   "Set Zone:CSE_UMLHsExpCol[3]:colhead"     Zone:CSE_UMLHsExpCol[3]:colhead   = {  "Htg"  }
   "Set Zone:CSE_UMLHsExpCol[3]:colVal_x"    Zone:CSE_UMLHsExpCol[3]:colVal_x  =
      {  Format( "@Znres[%c%s%c].Y.unMetHrsTol[0]", 34, CSE_ZONE:Name, 34 )  }
END
;*************************************************************************



;*************************************************************************
;*************************************************************************

ENDFILE
