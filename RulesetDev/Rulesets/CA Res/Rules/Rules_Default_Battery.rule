; -------------------------------------------------------------------------
; Rules pertaining to:   Defaulting the Proposed Building Model - focusing on Battery properties
; CEC Title-24 Residential Energy Code
; -------------------------------------------------------------------------
; Copyright (c) 2012-2014, California Energy Commission
; Copyright (c) 2012-2014, Wrightsoft Corporation
; All rights reserved.
; Redistribution and use in source and binary forms, with or without modification,
; are permitted provided that the following conditions are met:
; - Redistributions of source code must retain the above copyright notice, this
;   list of conditions and the following disclaimer.
; - Redistributions in binary form must reproduce the above copyright notice, this
;   list of conditions, the following disclaimer in the documentation and/or other
;   materials provided with the distribution.
; - Neither the name of the California Energy Commission nor the names of its
;   contributors may be used to endorse or promote products derived from this
;   software without specific prior written permission.
; DISCLAIMER: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
; THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
; NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION,
; WRIGHTSOFT CORPORATION, ITRON, INC. OR ANY OTHER AUTHOR OR COPYRIGHT HOLDER OF
; THIS SOFTWARE (COLLECTIVELY, THE "AUTHORS") BE LIABLE FOR ANY DIRECT, INDIRECT,
; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
; OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
; OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  EACH LICENSEE AND SUBLICENSEE OF THE
; SOFTWARE AGREES NOT TO ASSERT ANY CLAIM AGAINST ANY OF THE AUTHORS RELATING TO
; THIS SOFTWARE, WHETHER DUE TO PERFORMANCE ISSUES, TITLE OR INFRINGEMENT ISSUES,
;STRICT LIABILITY OR OTHERWISE.
; -------------------------------------------------------------------------

; SAC 12/14/16 - new rulelist to default Battery system properties
;*************************************************************************
RULELIST "ProposedInput_Battery" 0 0 0 0
;*************************************************************************

   "Set Proj:BatteryUIMessage"   Proj:BatteryUIMessage = {
      if (IfValidAnd( CommunitySolarProjID > 0 ))
      then  "Battery simulation not available for projects using Community Solar"
      else if (AllowBattInputs > 0) then  UNDEFINED
      else if (EnergyCodeYearNum = 2016 .AND. IfValidAnd( DesignRatingCalcs > 0 ) .AND.
               IfValidAnd( AllowExcessPVEDR > 0 ) .AND. IfValidAnd( PVWDCSysTotal > 0 ))
      then  "Battery simulation not available for 2016 analysis that allows excess PV in EDR credit."
      else  "Battery simulation available only for 2016 (or later) code runs with PV systems defined."
      endif endif endif  }

   "Default Proj:BattMaxCap"     Proj:BattMaxCap = {  0  }
   ; Proj:BatteryControl - allow to default via enums - options:  99 "- specify -" / 1 "Default" / 100 "Advanced Control"
   "Set Proj:BatteryCtrlMsg"     Proj:BatteryCtrlMsg  = {
         if (BatteryControl != 100) then  UNDEFINED
         else  "Utility or aggregator controlled"  endif  }

   "Set Proj:BattDegradePercent - percent of total battery capacity simulated"  ; SAC 12/31/17
      Proj:BattDegradePercent  = {  85  }
   "Set Proj:BattCapRatio - user input kWh / 14 (1.0 for a default Powerwall II)"  ; SAC 12/31/17
      Proj:BattCapRatio  = {  ValidOr( BattMaxCap, 0 ) / 14  }

   "Default Proj:BattGridHarmCredit - take the grid harmonization battery credit"
      Proj:BattGridHarmCredit  = {  0  }

   "Force reset of BattGridHarmCredit for analysis version 2022.0.6 or later"  ; SAC 03/08/22
      Proj:Action = {   if (BattGridHarmCredit > 0 .AND. AnalysisVersion >= 220060 .AND. IfValidAnd( EnableResearchMode > 0 )==0)
                        then  EvalRulelist( "ForceOff_BattGridHarmCredit" )
                        else  UNCHANGED  endif  }

   "Set Proj:BatteryUIMsg2[1]"   Proj:BatteryUIMsg2[1]  = {
      "The battery model doesn't currently include extra energy consumption for"  }
   "Set Proj:BatteryUIMsg2[2]"   Proj:BatteryUIMsg2[2]  = {
      "cooling the battery during charging in environments above 77°F or to keep"  }
   "Set Proj:BatteryUIMsg2[3]"   Proj:BatteryUIMsg2[3]  = {
      "the battery from freezing in winter if outdoors."  }

   "Set Proj:SimulateBattery"    Proj:SimulateBattery =           ; SAC 1/29/20 - toggle OFF simulation of Battery is PVEception specified as 0kW (tic #1193)
   {  if (AllowBattInputs > 0 .AND. BattMaxCap > 0 .AND.
          IfValidAnd( UseReducedPVReqVal == 0 )==0) then  1  else  0  endif  }
   "Set Proj:SecondBattSimReqd"  Proj:SecondBattSimReqd = {
      if (SimulateBattery < 1) then  0
      else if (BatteryControl == 100) then  1
      else if (LocalStatus( BattChgReq_x ) < 1) then  0
      else if (BatteryControl == 99 .AND. strlen( BattChgReq_x ) > 0)
      then  1  
      else  0  endif endif endif endif  }

;   "Prevent Battery performance user inputs if not ResearchMode"  Proj:Action = {   ; SAC 12/31/17
;         if (IfValidAnd( EnableResearchMode > 0 )) then  UNCHANGED
;         else if (LocalStatus( BattChgEff ) > 4 .OR. LocalStatus( BattDschgEff ) > 4 .OR.
;                  LocalStatus( BattMaxChgPwr ) > 4 .OR. LocalStatus( BattMaxDschgPwr ) > 4)
   "Prevent Battery chrg/dschrg rate user inputs if not ResearchMode"  Proj:Action = {   ; SAC 12/31/17  ; SAC 2/19/18 (tic #984)  ; SAC 8/2/19 - prevent reset for 2019+ code vintages
         if (IfValidAnd( EnableResearchMode > 0 ) .OR. Proj:EnergyCodeYearNum >= 2019) then  UNCHANGED
         else if (LocalStatus( BattMaxChgPwr ) > 4 .OR. LocalStatus( BattMaxDschgPwr ) > 4)
         then  EvalRulelist( "ForceDefault_BatteryRates" )
         else  UNCHANGED  endif endif  }

   "Default Proj:BattChgEff"        Proj:BattChgEff = {
      if (SimulateBattery < 1) then  UNDEFINED  else  0.95  endif  }   ; CSE default 0.975
   "Default Proj:BattDschgEff"      Proj:BattDschgEff = {
      if (SimulateBattery < 1) then  UNDEFINED  else  0.95  endif  }   ; CSE default 0.975
   "Default Proj:BattMaxChgPwr"     Proj:BattMaxChgPwr = {
      if (SimulateBattery < 1) then  UNDEFINED
      else if (IfValidAnd( BattMaxCap > 0 )) then  5 * (BattMaxCap / 14)
      else  5  endif endif  }   ; CSE default 4
   "Default Proj:BattMaxDschgPwr"   Proj:BattMaxDschgPwr = {
      if (SimulateBattery < 1) then  UNDEFINED
      else if (IfValidAnd( BattMaxCap > 0 )) then  5 * (BattMaxCap / 14)
      else  5  endif endif  }   ; CSE default 4

   "Set Proj:BattMaxChgPwrRpt"      Proj:BattMaxChgPwrRpt   = {  "n/a"  }  ; SAC 2/27/18 (tic #921)
   "Set Proj:BattMaxDschgPwrRpt"    Proj:BattMaxDschgPwrRpt = {  "n/a"  }

;   "Default Proj:BattChgReq,            Optional,   0,    1,   1,    1,  1,  1
;   "Default Proj:BattChgReq_x,          Optional,   0,    1,   1,    1,  1,  1
;   "Default Proj:BattUseUsrChg,         Optional,   0,    1,   1,    1,  1,  1
;   "Default Proj:BattUseUsrChg_x,       Optional,   0,    1,   1,    1,  1,  1

   ; SAC 6/6/17 - blast user-defined ScalePropPVResults or MaxPropPVRatioInp if BypassRuleLimits not activated
	"Blast user-defined ScalePropPVResults or MaxPropPVRatioInp if BypassRuleLimits not activated"  Proj:Action  = {
         if (IfValidAnd( BypassRuleLimits > 0.1 ) .OR.
             (LocalStatus( ScalePropPVResults ) < 6 .AND. LocalStatus( MaxPropPVRatioInp ) < 6))
         then  UNCHANGED
         else	EvalRulelist( "ForceDefault_PropPVRatioInputs" )  endif  }
   ; SAC 4/8/17 - logic to default Max PV Generation scaling ratio, based in part on presence of battery
   ; SAC 4/27/17 - updated logic for 2016 EDR updates
   "Default Proj:ScalePropPVResults - whether or not Scale Proposed model PV results (based on fraction of Proposed model electric use)"
      Proj:ScalePropPVResults  = {
         if (EnergyCodeYearNum = 2016 .AND. IfValidAnd( DesignRatingCalcs > 0 ) .AND.
             IfValidAnd( AllowExcessPVEDR = 0 ))
         then  1
         else if (AllowBattInputs .AND. EnergyCodeYearNum >= 2019 .AND. IfValidAnd( AllowExcessPVEDR > 0 )==0)
         then  1  else  0  endif endif  }
   ; SAC 5/10/17 - revised logic to require battery present AND set to Best Case control in order for MaxPropPVRatioInp to default to 1.6 (tic #839) - THEN reverted this mod based on input from the CEC
   ; SAC 6/25/17 - altered logic to mimic 2019's 1.0 w/out battery & 1.6 with for 2016 analysis
   "Default Proj:MaxPropPVRatioInp - Max ratio of Proposed PV Generation over Proposed model electric use (user input)"
      Proj:MaxPropPVRatioInp  = {
         if (EnergyCodeYearNum = 2016 .AND. IfValidAnd( DesignRatingCalcs > 0 ) .AND.
             IfValidAnd( AllowExcessPVEDR = 0 ))
         then  if (BattMaxCap < 0.01) then  1.0
               else  1.6  endif
         else if (IfValidAnd( PVWDCSysTotal > 0.001 )==0 .OR.
                  ScalePropPVResults < 0.5) then  -1
         else if (BattMaxCap < 0.01) then  1.0
         else  1.6  endif endif endif  }

   ; SAC 6/6/17 - added message describing if/how MaxPropPVRatio will be used in the analysis - note this rule incorporates logic that sets Proj:MaxPropPVRatio in 'ProposedCompliance' rules
   ; SAC 6/13/17 - added logic for when AllowExcessPVEDR is activated
   ; SAC 6/25/17 - altered logic to cause 2016 messages to duplicate those from 2019
   "Set Proj:MaxPropPVRatioMsg"     Proj:MaxPropPVRatioMsg  = {
         if (EnergyCodeYearNum >= 2016 .AND. IfValidAnd( AllowExcessPVEDR > 0 ))
         then  "Bypassing PV size limit may violate Net Energy Metering (NEM) rules"
         else if (IfValidAnd( ScalePropPVResults > 0 )==0)
         then  "(no limit on proposed PV electric generation)"
         else if (IfValidAnd( MaxPropPVRatioInp > 0 ))
         then  if (IfValidAnd( ScalePropPVResults > 0.5 )==0)
               then  "(no PV scaling due to ScalePropPVResults > 0)"
               else if (IfValidAnd( BattMaxCap >= 0.1 )==0)
               then  "PV generation will be capped @ proposed design electric use (no battery)"
               else if (IfValidAnd( MaxPropPVRatioInp > 0 ))
               then  Format( "PV generation will be capped @ %g x proposed design electric use", MaxPropPVRatioInp )
               else  "(no PV scaling specified)"
               endif endif endif
         else  "(no PV scaling due to invalid MaxPropPVRatioInp)"  endif endif endif  }

   ; properties to enable user-specified PV scaling (tic #923) - SAC 1/1/18
   "Set Proj:AllowPVSizeOption - whether or not to allow PVSizeOption input"    
      Proj:AllowPVSizeOption  = {
         if (IfValidAnd( EnergyCodeYearNum >= 2019 ) .AND. 
             IfValidAnd( SpecifyTargetDRtg > 0.5 )==0 .AND. IfValidAnd( PVWDCSysTotal > 0 ))
         then  1
         else  0  endif  }
   ;    default via enumerations  Proj:PVSizeOption - options to override PV system sizes specified below with sizes based on proposed model electric use"
   "Force re-default of Proj:PVSizeMultiplier if PVSizeOption not 'Specify PV System Scaling'"
      Proj:Action  = {
         if (LocalStatus( PVSizeMultiplier ) > 4 .AND. PVSizeOption < 10)
         then  EvalRulelist( "ForceDefault_PVSizeMultiplier" )
         else  UNCHANGED  endif  }
   "Default Proj:PVSizeMultiplier - ratio of PV system size / proposed model electric use" 
      Proj:PVSizeMultiplier  = {
         if (IfValidAnd( PVSizeOption > 2 ) .AND.
             IfValidAnd( MaxPropPVRatioInp > 0 ))
         then  MaxPropPVRatioInp
         else  UNDEFINED  endif  }
   "Set Proj:PVSizeMultMax"      Proj:PVSizeMultMax  = {
         if (IfValidAnd( PVSizeOption > 2 )==0) then  999
         else if (IfValidAnd( AllowExcessPVEDR > 0 )==0 .AND.
                  IfValidAnd( MaxPropPVRatioInp > 0 ))
         then  MaxPropPVRatioInp
         else  999  endif endif  }
END
;*************************************************************************

; SAC 6/6/17 - blast user-defined ScalePropPVResults or MaxPropPVRatioInp if BypassRuleLimits not activated
;*************************************************************************
RULELIST "ForceDefault_PropPVRatioInputs" 1 0 0 0
;*************************************************************************
   "Post warning to log for reset of Proj:ScalePropPVResults"  Proj:Action  = {
         if (LocalStatus( ScalePropPVResults ) < 6) then  UNCHANGED
         else  PostWarning( "Proj:ScalePropPVResults setting of %g replaced with default (since BypassRuleLimits not activated).", ScalePropPVResults )  endif  }
   "Post warning to log for reset of Proj:MaxPropPVRatioInp"   Proj:Action  = {
         if (LocalStatus( MaxPropPVRatioInp ) < 6) then  UNCHANGED
         else  PostWarning( "Proj:MaxPropPVRatioInp setting of %g replaced with default (since BypassRuleLimits not activated).", MaxPropPVRatioInp )  endif  }
   "Force reset of Proj:ScalePropPVResults"     Proj:ScalePropPVResults  = {
         if (LocalStatus( ScalePropPVResults ) > 5) then  UNDEFINED
         else  UNCHANGED  endif  }
   "Force reset of Proj:MaxPropPVRatioInp"      Proj:MaxPropPVRatioInp   = {
         if (LocalStatus( MaxPropPVRatioInp ) > 5) then  UNDEFINED
         else  UNCHANGED  endif  }
END
;*************************************************************************

;*************************************************************************
;RULELIST "ForceDefault_BatteryPerformance" 1 0 0 0
;   "Blast Proj:BattChgEff"       Proj:BattChgEff      = {  UNDEFINED  }
;   "Blast Proj:BattDschgEff"     Proj:BattDschgEff    = {  UNDEFINED  }
;   "Blast Proj:BattMaxChgPwr"    Proj:BattMaxChgPwr   = {  UNDEFINED  }
;   "Blast Proj:BattMaxDschgPwr"  Proj:BattMaxDschgPwr = {  UNDEFINED  }
;END
;*************************************************************************  ; SAC 2/19/18 (tic #984)
RULELIST "ForceDefault_BatteryRates" 1 0 0 0
   "Blast Proj:BattMaxChgPwr"    Proj:BattMaxChgPwr   = {  UNDEFINED  }
   "Blast Proj:BattMaxDschgPwr"  Proj:BattMaxDschgPwr = {  UNDEFINED  }
END
;*************************************************************************

;*************************************************************************
RULELIST "ForceDefault_PVSizeMultiplier" 1 0 0 0
   "Blast Proj:PVSizeMultiplier"    Proj:PVSizeMultiplier  = {  UNDEFINED  }
END
;*************************************************************************

;************************************************************************* SAC 03/08/22
RULELIST "ForceOff_BattGridHarmCredit" 1 0 0 0
   "Blast Proj:BattGridHarmCredit"  Proj:BattGridHarmCredit  = {  0  }
END
;*************************************************************************


;*************************************************************************
;*************************************************************************

ENDFILE

