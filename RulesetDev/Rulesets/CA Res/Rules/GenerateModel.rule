; -------------------------------------------------------------------------
; Rules pertaining to:   Generate Building Model from summary inputs
; CEC Title-24 Residential Energy Code
; -------------------------------------------------------------------------
; Copyright (c) 2012-2017, California Energy Commission
; Copyright (c) 2012-2017, Wrightsoft Corporation
; All rights reserved.
; Redistribution and use in source and binary forms, with or without modification,
; are permitted provided that the following conditions are met:
; - Redistributions of source code must retain the above copyright notice, this
;   list of conditions and the following disclaimer.
; - Redistributions in binary form must reproduce the above copyright notice, this
;   list of conditions, the following disclaimer in the documentation and/or other
;   materials provided with the distribution.
; - Neither the name of the California Energy Commission nor the names of its
;   contributors may be used to endorse or promote products derived from this
;   software without specific prior written permission.
; DISCLAIMER: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
; THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
; NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION,
; WRIGHTSOFT CORPORATION, ITRON, INC. OR ANY OTHER AUTHOR OR COPYRIGHT HOLDER OF
; THIS SOFTWARE (COLLECTIVELY, THE "AUTHORS") BE LIABLE FOR ANY DIRECT, INDIRECT,
; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
; OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
; OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  EACH LICENSEE AND SUBLICENSEE OF THE
; SOFTWARE AGREES NOT TO ASSERT ANY CLAIM AGAINST ANY OF THE AUTHORS RELATING TO
; THIS SOFTWARE, WHETHER DUE TO PERFORMANCE ISSUES, TITLE OR INFRINGEMENT ISSUES,
;STRICT LIABILITY OR OTHERWISE.
; -------------------------------------------------------------------------


;*************************************************************************
RULELIST "Default_Model" 0 0 0 0
;*************************************************************************

   "Default Model:ShowDetails"      Model:ShowDetails = {  0  }

;  Model:Address,                    Optional,   0,    1,   1,    1,  1,  1
;  Model:ZipCode,                    Required,   0,    1,   1,    1,  1,  1
   "Set Model:ClimateZone"    Model:ClimateZone  = {
         if (IfValidAnd( ZipCode > 0 )==0) then  -1
         else  ZipCodeToCZTable:ClimZone( "ZipCode", ZipCode )
         endif  }
   "Set Model:ZipCodeMsg"     Model:ZipCodeMsg  = {
         if (IfValidAnd( ClimateZone >= 0 )==0)
         then  "                   Valid CA Zip Code must be entered."
         else if (ClimateZone < 1)
         then  "Climate zone not found for entered Zip Code."
         else  Format( "CZ%g", ClimateZone )  endif endif  }

   "Default Model:YearBuilt"         Model:YearBuilt       = {  
         if (GlobalStatus( Proj:YearBuilt ) > 4)
         then  Proj:YearBuilt  else  1990  endif  }
   "Default Model:YearRoof"          Model:YearRoof        = {
         if (LocalStatus( YearBuilt ) < 1) then  UNDEFINED  else  YearBuilt  endif  }
   "Default Model:YearWindows"       Model:YearWindows     = {
         if (LocalStatus( YearBuilt ) < 1) then  UNDEFINED  else  YearBuilt  endif  }
   "Default Model:YearEnvelope"      Model:YearEnvelope    = {
         if (LocalStatus( YearBuilt ) < 1) then  UNDEFINED  else  YearBuilt  endif  }
   "Default Model:YearAppliances"    Model:YearAppliances  = {
         if (LocalStatus( YearBuilt ) < 1) then  UNDEFINED  else  YearBuilt  endif  }
   "Default Model:YearLighting"      Model:YearLighting    = {
         if (LocalStatus( YearBuilt ) < 1) then  UNDEFINED  else  YearBuilt  endif  }
   "Default Model:YearHVAC"          Model:YearHVAC        = {
         if (LocalStatus( YearBuilt ) < 1) then  UNDEFINED  else  YearBuilt  endif  }
   "Default Model:YearWaterHtg"      Model:YearWaterHtg    = {
         if (LocalStatus( YearBuilt ) < 1) then  UNDEFINED  else  YearBuilt  endif  }

;      0, Model:Configuration, 1
;      2,              1,	"Single Family, 1 Story"
;      2,	           2,	"Single Family, 2 Story"
;      2,	          11,	"Multifamily, Lowrise"
;      2,	          12,	"Townhome"

;      0, Model:MFamExposure, 1
;      1,    Model:Configuration,    11,  102   ; Multifamily, Lowrise
;      2,            112,	"Ground & Top Floor, End Unit"
;      2,            111,	"Ground & Top Floor, Middle Unit"
;      2,            102,	"Ground Floor, End Unit"
;      2,            101,	"Ground Floor, Middle Unit"
;      2,              2,	"Middle Floor, End Unit"
;      2,              1,	"Middle Floor, Middle Unit"
;      2,             12,	"Top Floor, End Unit"
;      2,             11,	"Top Floor, Middle Unit"
;      1,    Model:Configuration,    12,  112   ; Townhome
;      2,            112,	"End Unit"
;      2,            111,	"Middle Unit"
;      1,    Model:Configuration,  -999,  0   ; all others
;      2,              0,	"N/A"

	"Default Model:GasUsed"		   Model:GasUsed    = {	 1  }
	"Default Model:GasType"			Model:GasType    = {	 1  }

   "Set Model:IsMultiFamily"     Model:IsMultiFamily  = {   if (Configuration > 10) then  1  else  0  endif  }
   "Set Model:BottomExposure"    Model:BottomExposure = {
         if (IsMultiFamily == 0) then  1
         else if (MFamExposure >= 100) then  1  else  0  endif endif  }
   "Set Model:TopExposure"       Model:TopExposure    = {
         if (IsMultiFamily == 0) then  1
         else if (mod(MFamExposure, 100) >= 10) then  1  else  0  endif endif  }
   "Set Model:SideExposure"      Model:SideExposure   = {
         if (IsMultiFamily == 0) then  2
         else  mod(MFamExposure, 10) - 1  endif  }

   "Default Model:HaveAttachedGarage"     Model:HaveAttachedGarage = {
         if (Configuration == 11) then  0   ; Multifamily, Lowrise
         else  1  endif  }

   "Default Model:CondFloorArea"       Model:CondFloorArea      = {
         switch (Configuration)
            case  2 :  2700   ; Single Family, 2 Story
            case 11 :         ; Multifamily, Lowrise
                        if (SideExposure > 0) then  960  else  780  endif
            case 12 :  1800   ; Townhome
            default :  2100   ; (1) Single Family, 1 Story
         endswitch  }
   "Default Model:NumBedrooms"         Model:NumBedrooms        = {
         switch (Configuration)
            case  2 :  4   ; Single Family, 2 Story
            case 11 :      ; Multifamily, Lowrise
                        if (SideExposure > 0) then  2  else  1  endif
            case 12 :  2   ; Townhome
            default :  3   ; (1) Single Family, 1 Story
         endswitch  }
   "Default Model:NumAbvGradeFlrs"     Model:NumAbvGradeFlrs    = {
         switch (Configuration)
            case  2 :  2   ; Single Family, 2 Story
            case 11 :  1   ; Multifamily, Lowrise
            case 12 :      ; Townhome
                        if (HaveAttachedGarage) then  3  else  2  endif
            default :  1   ; (1) Single Family, 1 Story
         endswitch  }
   "Default Model:AspectRatio"         Model:AspectRatio        = {
         switch (Configuration)
            case  2 :  1.72   ; Single Family, 2 Story
            case 11 :         ; Multifamily, Lowrise
                        if (SideExposure > 0) then  1.07  else  0.87  endif
            case 12 :  0.714  ; Townhome
            default :  1.0    ; (1) Single Family, 1 Story
         endswitch  }

   "Default Model:OrientationNeutral"  Model:OrientationNeutral = {  0  }  ; NYI !
   "Default Model:CeilingHeight"       Model:CeilingHeight      = {
         if (IfValidAnd( YearBuilt < 2000 )) then  8  else  9  endif  }

;  Model:FrontFaces
   "Default Model:FrontOrientation"    Model:FrontOrientation  = {
         switch (FrontFaces)
            case  1 :    0  ; No
            case  2 :   90  ; Ea
            case  3 :  180  ; So
            case  4 :  270  ; We
            default :  UNDEFINED
         endswitch  }

   "Default Model:HaveAttic"     Model:HaveAttic    = {  if (TopExposure > 0) then  1  else  0  endif  }
   "Default Model:RoofRise"      Model:RoofRise     = {  ; (inches rise / 12 inches run)"    
         switch (RoofType)
            case  1 :  4  ; "Asphalt Shingles"
            case  2 :  4  ; "Tile"
            case  3 :  2  ; "Tar and Gravel"
            case  4 :  4  ; "Membrane"
            default :  4    endswitch  }

   "Default Model:CeilingInsulDepth"   Model:CeilingInsulDepth  = {
         if (HaveAttic == 0 .OR. TopExposure == 0) then  0
         else if (IfValidAnd( YearRoof > 0 ) .AND. IfValidAnd( ClimateZone > 0 ))
         then  ExEDR_AtticFloorInsulationDepth:InsDp( "Year", YearRoof, "ClimZone", ClimateZone )
         else  UNDEFINED  endif endif  }
   "Default Model:CeilingInsulated"    Model:CeilingInsulated  = {
         if (TopExposure == 0) then  0  else  1  endif  }
   "Default Model:InsulRValPerInch"    Model:InsulRValPerInch  = {  3.0  }
   "Default Model:CeilingInsulRVal"    Model:CeilingInsulRVal  = {
         if (TopExposure == 0) then  0
         else if (HaveAttic == 0)
         then  if (CeilingInsulated == 0) then  0
               else if (IfValidAnd( YearRoof > 0 ) .AND. IfValidAnd( ClimateZone > 0 ))
               then  ExEDR_AtticFloorInsulationDepth:InsDp( "Year", YearRoof, "ClimZone", ClimateZone )
                     * InsulRValPerInch
               else  0  endif endif
         else if (IfValidAnd( CeilingInsulDepth >= 0 )==0) then  0
         else  CeilingInsulDepth * InsulRValPerInch
         endif endif endif  }

   "Default Model:ExtWallsInsulated"   Model:ExtWallsInsulated  = {
         if (IfValidAnd( YearEnvelope > 0 ) .AND. IfValidAnd( ClimateZone > 0 ))
         then  if (ExEDR_ExtWallCavityRValue:CavRVal( "Year", YearEnvelope, "ClimZone", ClimateZone ) > 0)
               then  1  else  0  endif
         else  0  endif  }
   "Default Model:ExtWallInsulRVal"    Model:ExtWallInsulRVal  = {
         if (ExtWallsInsulated == 0) then  0
         else if (IfValidAnd( YearEnvelope > 0 ) .AND. IfValidAnd( ClimateZone > 0 ))
         then  max( 11, ExEDR_ExtWallCavityRValue:CavRVal( "Year", YearEnvelope, "ClimZone", ClimateZone ) )
         else  11  endif endif  }

;0, Model:FloorType, 1
;2,              1,	"Concrete Slab"
;2,	            11,	"Wood Framed, Over Crawl Space"
;2,	            12,	"Concrete, Over Crawl Space"
   "Default Model:ExtFloorInsulated"   Model:ExtFloorInsulated  = {
         if (FloorType < 11 .OR. BottomExposure == 0) then  0  ; floor not exterior
         else if (IfValidAnd( YearEnvelope > 0 ) .AND. IfValidAnd( ClimateZone > 0 ))
         then  if (ExEDR_ExtFloorCavityRValue:CavRVal( "Year", YearEnvelope, "ClimZone", ClimateZone ) > 0)
               then  1  else  0  endif
         else  0  endif endif  }
   "Default Model:ExtFloorInsulRVal"   Model:ExtFloorInsulRVal  = {
         if (ExtFloorInsulated == 0 .OR. BottomExposure == 0) then  0
         else if (IfValidAnd( YearEnvelope > 0 ) .AND. IfValidAnd( ClimateZone > 0 ))
         then  max( 19, ExEDR_ExtFloorCavityRValue:CavRVal( "Year", YearEnvelope, "ClimZone", ClimateZone ) )
         else  19  endif endif  }

   "Default Model:WinPanes"         Model:WinPanes  = {
         if (IfValidAnd( YearWindows > 0 ))
         then  ExEDR_WindowProperties:Panes( "Year", YearWindows )
         else  "Single Pane"  endif  }
   "Default Model:WinFrameType"     Model:WinFrameType  = {
         if (IfValidAnd( YearWindows > 0 ))
         then  ExEDR_WindowProperties:Frame( "Year", YearWindows )
         else  "Aluminum"  endif  }

   "Default Model:WinUfactor"    Model:WinUfactor  = {
         if (  ExEDR_WindowPerformance:Ufactor( "Panes", EnumString( WinPanes ), "Frame", EnumString( WinFrameType ) ) > 0)
         then  ExEDR_WindowPerformance:Ufactor( "Panes", EnumString( WinPanes ), "Frame", EnumString( WinFrameType ) )
         else  UNDEFINED  endif  }
   "Default Model:WinSHGC"       Model:WinSHGC  = {
         if (  ExEDR_WindowPerformance:SHGC( "Panes", EnumString( WinPanes ), "Frame", EnumString( WinFrameType ) ) > 0)
         then  ExEDR_WindowPerformance:SHGC( "Panes", EnumString( WinPanes ), "Frame", EnumString( WinFrameType ) )
         else  UNDEFINED  endif  }

   "Default Model:WinFloorAreaPct"     Model:WinFloorAreaPct      = {  20  }    ; "Window area as percent of conditioned floor area"    
   ; Model:WinDistribOpt  - defaulted via enums    ; "Selection controlling ratio of window density on front/back of home vs. sides"    
   "Default Model:WinDistribRatio"     Model:WinDistribRatio      = {
         switch (WinDistribOpt)
            case  1 :  5.0  ; "Vast majority on front/back" 
            case  3 :  1.0  ; "Equal window distribution"   
            case  4 :  0.4  ; "Less on front/back vs. sides"
            case  5 :  0.2  ; "Very little front/back (majority on sides)"
            default :  2.8  ;  2 - "Typical (more on front/back than sides)"
         endswitch  }


   "Generate model objects"   Proj:Action = { 
         switch (Model:Configuration)
            case   1 :  EvalRulelist( "DefaultModel_SFam" )
            case   2 :  EvalRulelist( "DefaultModel_SFam" )
            case  11 :  EvalRulelist( "DefaultModel_MFam" )
            case  12 :  EvalRulelist( "DefaultModel_TownHm" )
            default  :  UNCHANGED  ; PostError( "Unrecognized Model:Configuration" )
         endswitch  }


   "Default Model:HeatingFuel"   Model:HeatingFuel  = {
         if (IfValidAnd( GasUsed )) then  "Gas"
         else  "Electric"  endif  }

   ; "Default Model:HeatingType"   Model:HeatingType  = {   - defaulted via enums  

   "Default Model:HtgSysType"    Model:HtgSysType  = {
         switch (HeatingType)
            case   0 :   8   ; "Baseboard"           ->  "Electric - All electric heating systems other than heat pump"
            case   1 :   8   ; "Radiant Ceiling"     ->  "Electric - All electric heating systems other than heat pump"
            case   2 :   4   ; "Heat Pump"           ->  "SplitHeatPump - Central split heat pump"
            case  10 :   2   ; "Wall Heater"         ->  "WallFurnaceFan - Ductless fan forced wall furnace"        
            case  11 :  15   ; "Floor Heater"        ->  "FloorFurnace - Ductless floor heating system"	           
            case  12 :  14   ; "Gravity Furnace"     ->  "WallFurnaceGravity - Ductless gravity flowed wall furnace"
            case  13 :   1   ; "Forced Air w/ Ducts" ->  "CntrlFurnace - Fuel-fired central furnace"                
            default  :   1
         endswitch  }

   "Default Model:HeatingHasPilot"     Model:HeatingHasPilot  = {
         if (HeatingFuel == 0) then  0   ; Electric
         else if (ExEDR_CentralFurnace:AFUE( "Year", YearHVAC ) < 0.78)
         then  1     ; default based on when default Furnace AFUE increased to 0.78
         else  0  endif endif  }

   "Set Model:HtgSysTypeHtPump"    Model:HtgSysTypeHtPump = {
         switch (HtgSysType)
            case  4 :  1   ; "SplitHeatPump - Central split heat pump"
            case 19 :  1   ; "SDHVSplitHeatPump - Small duct, high velocity, central split heat pump"
            case 10 :  1   ; "DuctlessMiniSplitHeatPump - Ductless mini-split heat pump"
            case 20 :  1   ; "DuctlessMultiSplitHeatPump - Ductless multi-split heat pump"
            case 21 :  1   ; "DuctlessVRFHeatPump - Ductless variable refrigerant flow (VRF) heat pump"
            case  5 :  1   ; "PkgHeatPump - Central packaged heat pump"
            case  6 :  1   ; "LrgPkgHeatPump - Large (>= 65 kBtuh) packaged unit"
            case  7 :  1   ; "RoomHeatPump - Non-central room A/C system"
            case 11 :  1   ; "AirToWaterHeatPump - Air to water heat pump (able to heat DHW)"
            case 12 :  1   ; "GroundSourceHeatPump - Ground source heat pump (able to heat DHW)"
            default :  0    endswitch  }
   "Set Model:HtgSysTypeAbbrev"    Model:HtgSysTypeAbbrev = {   HtgSysType  }

   "Set Model:DisplayAFUE"    Model:DisplayAFUE = {
         switch (HtgSysType)
            case  1 :  1   ; "CntrlFurnace - Fuel-fired central furnace"
            case  2 :  1   ; "WallFurnaceFan - Ductless fan forced wall furnace"
            case  3 :  1   ; "Boiler - Gas or oil boiler"
            case 14 :  1   ; "WallFurnaceGravity - Ductless gravity flowed wall furnace" 
            case 15 :  1   ; "FloorFurnace - Ductless floor heating system"	
            case 16 :  1   ; "RoomHeater - Ductless non-central space heater"	
            default :  0    endswitch  }

   "Default Model:AFUE"    Model:AFUE  = {   if (DisplayAFUE == 0) then  UNDEFINED
         else  switch (HtgSysType)
                  case  1 :  100 * ExEDR_CentralFurnace:AFUE( "Year", YearHVAC )       ; CntrlFurnace
                  case  2 :  100 * ExEDR_WallFurnaceFan:AFUE( "Year", YearHVAC )       ; WallFurnaceFan
                  case  3 :  100 * ExEDR_GasWaterBoiler:AFUE( "Year", YearHVAC )       ; Boiler
                  case 17 :  UNCHANGED                                                 ; WoodHeat
                  case 14 :  100 * ExEDR_WallFurnaceGravity:AFUE( "Year", YearHVAC )   ; WallFurnaceGravity
                  case 15 :  100 * ExEDR_CentralFurnace:AFUE( "Year", YearHVAC )       ; FloorFurnace
                  case 16 :  100 * ExEDR_RoomFurnace:AFUE( "Year", YearHVAC )          ; RoomHeater
                  case  8 :  UNCHANGED                                                 ; Electric
                  case  9 :  UNCHANGED                                                 ; CombHydro
                  default :  UNCHANGED                                                 ; unknown
               endswitch  endif  }

;0, Model:HtgSysType,  1
;2,              1,    "CntrlFurnace - Fuel-fired central furnace"
;2,              2,    "WallFurnaceFan - Ductless fan forced wall furnace"
;2,              3,    "Boiler - Gas or oil boiler"
;; 2,             17,    "WoodHeat - Wood heat meeting exceptional method criteria" 
;2,              8,    "Electric - All electric heating systems other than heat pump"
;; 2,              9,    "CombHydro - Combined hydronic space and water heating"
;2,             14,    "WallFurnaceGravity - Ductless gravity flowed wall furnace" 
;2,             15,    "FloorFurnace - Ductless floor heating system"	
;2,             16,    "RoomHeater - Ductless non-central space heater"	
;           ; heat pumps
;2,              4,    "SplitHeatPump - Central split heat pump"
;; 2,             19,    "SDHVSplitHeatPump - Small duct, high velocity, central split heat pump" 
;; 2,             10,    "DuctlessMiniSplitHeatPump - Ductless mini-split heat pump" 
;; 2,             20,    "DuctlessMultiSplitHeatPump - Ductless multi-split heat pump" 
;; 2,             21,    "DuctlessVRFHeatPump - Ductless variable refrigerant flow (VRF) heat pump" 
;2,              5,    "PkgHeatPump - Central packaged heat pump"
;; 2,              6,    "LrgPkgHeatPump - Large (>= 65 kBtuh) packaged unit"
;; 2,              7,    "RoomHeatPump - Non-central room A/C system"
;; 2,             11,    "AirToWaterHeatPump - Air to water heat pump (able to heat DHW)"
;; 2,             12,    "GroundSourceHeatPump - Ground source heat pump (able to heat DHW)"


   "Set Model:DisplayHSPF"    Model:DisplayHSPF = {  
         if (HtgSysTypeHtPump == 0 .OR. HtgSysType == 11) then  0     ; 11 => AirToWaterHeatPump
         else  1  endif  }

   "Default Model:HSPF"    Model:HSPF  = {   if (DisplayHSPF == 0) then  UNDEFINED
         else  switch (HtgSysType)
                  case  4 :  ExEDR_SplitHeatPump:HSPF(    "Year", YearHVAC )       ; SplitHeatPump - Central split heat pump 
                  case  5 :  ExEDR_PackagedHeatPump:HSPF( "Year", YearHVAC )       ; PkgHeatPump - Central packaged heat pump
                  default :  UNCHANGED                                             ; unknown
               endswitch  endif  }     ; SAC 10/20/17 - replaced old T24RHeatingEquipment table defaults w/ ExEDR tables

   "Set Model:HeatingEffLabel"      Model:HeatingEffLabel = {
         if (     DisplayAFUE) then  "AFUE:"
         else if (DisplayHSPF) then  "HSPF:"
         else  " "  endif endif  }
   "Set Model:HeatingEffUnitLbl"    Model:HeatingEffUnitLbl = {
         if (     DisplayAFUE) then  "%"
         else if (DisplayHSPF) then  "ratio"
         else  " "  endif endif  }

   "Set Model:HeatDuctFlag"      Model:HeatDuctFlag  = {
         T24RHeatingEquipment:DuctFlag( "SysType", EnumString( HtgSysTypeAbbrev ) )  }


   "Default Model:HaveCooling"    Model:HaveCooling  = {
         if (HeatingFuel == 0 .AND. HeatingType == 2) then  1   ; Heat Pump
         else if (IfValidAnd( ClimateZone = 1 ) .OR. IfValidAnd( ClimateZone = 3 ) .OR.
                  IfValidAnd( ClimateZone = 6 ) .OR. IfValidAnd( ClimateZone = 7 ))
         then  1   ; coastal
         else  0  endif endif  }

   "Default Model:CoolingType"   Model:CoolingType  = {
         if (HeatingFuel == 0 .AND. HeatingType == 2) then  0   ; Heat Pump
         else  2  endif  }

   "Default Model:HaveWholeHouseFan"    Model:HaveWholeHouseFan  = {  0  }

   "Set Model:CoolingLabel"   Model:CoolingLabel = {
         if (HtgSysTypeHtPump)
         then  "Cooling Performance:"
         else  "Cooling Equipment Type:"    endif  }

   "Default Model:ClgSysType"   Model:ClgSysType = {
         if (HaveCooling == 0) then  1   ; No Cooling
         else  CoolingType  endif  }
   "Set Model:ClgSysTypeAbbrev"    Model:ClgSysTypeAbbrev = {
         if (HtgSysTypeHtPump)
         then  HtgSysTypeAbbrev + 100
         else  ClgSysType  endif  }
;   "Set Model:HaveCooling"          Model:HaveCooling  = {
;         if (ClgSysType == 1) then  0  else  1  endif  }

   "Set Model:DisplaySEER"    Model:DisplaySEER = {  if (HaveCooling == 0) then  0
         else if (YearHVAC > 2016) then  T24RCoolingEquipment:SEERValid( "CodeBase", 2016, "StdVer", 2017, "SysType", EnumString( ClgSysTypeAbbrev ) )
         else if (YearHVAC > 2014) then  T24RCoolingEquipment:SEERValid( "CodeBase", 2013, "StdVer", 2015, "SysType", EnumString( ClgSysTypeAbbrev ) )
         else if (YearHVAC > 2013) then  T24RCoolingEquipment:SEERValid( "CodeBase", 2013, "StdVer", 2014, "SysType", EnumString( ClgSysTypeAbbrev ) )
         else                            T24RCoolingEquipment:SEERValid( "CodeBase", 2008, "StdVer", 2010, "SysType", EnumString( ClgSysTypeAbbrev ) )
         endif endif endif endif  }
   "Default Model:SEER"    Model:SEER = {  if (DisplaySEER == 0) then  UNDEFINED
         else if (YearHVAC > 2016) then  T24RCoolingEquipment:SEER( "CodeBase", 2016, "StdVer", 2017, "SysType", EnumString( ClgSysTypeAbbrev ) )
         else if (YearHVAC > 2014) then  T24RCoolingEquipment:SEER( "CodeBase", 2013, "StdVer", 2015, "SysType", EnumString( ClgSysTypeAbbrev ) )
         else if (YearHVAC > 2013) then  T24RCoolingEquipment:SEER( "CodeBase", 2013, "StdVer", 2014, "SysType", EnumString( ClgSysTypeAbbrev ) )
         else                            T24RCoolingEquipment:SEER( "CodeBase", 2008, "StdVer", 2010, "SysType", EnumString( ClgSysTypeAbbrev ) )
         endif endif endif endif  }

   "Set Model:DisplayEER"    Model:DisplayEER = {  if (HaveCooling == 0 .OR. DisplaySEER > 0) then  0
         else if (YearHVAC > 2016) then  T24RCoolingEquipment:EERValid( "CodeBase", 2016, "StdVer", 2017, "SysType", EnumString( ClgSysTypeAbbrev ) )
         else if (YearHVAC > 2014) then  T24RCoolingEquipment:EERValid( "CodeBase", 2013, "StdVer", 2015, "SysType", EnumString( ClgSysTypeAbbrev ) )
         else if (YearHVAC > 2013) then  T24RCoolingEquipment:EERValid( "CodeBase", 2013, "StdVer", 2014, "SysType", EnumString( ClgSysTypeAbbrev ) )
         else                            T24RCoolingEquipment:EERValid( "CodeBase", 2008, "StdVer", 2010, "SysType", EnumString( ClgSysTypeAbbrev ) )
         endif endif endif endif  }
   "Default Model:EER"     Model:EER  = {  if (DisplayEER == 0) then  UNDEFINED
         else if (YearHVAC > 2016) then  T24RCoolingEquipment:EER( "CodeBase", 2016, "StdVer", 2017, "SysType", EnumString( ClgSysTypeAbbrev ) )
         else if (YearHVAC > 2014) then  T24RCoolingEquipment:EER( "CodeBase", 2013, "StdVer", 2015, "SysType", EnumString( ClgSysTypeAbbrev ) )
         else if (YearHVAC > 2013) then  T24RCoolingEquipment:EER( "CodeBase", 2013, "StdVer", 2014, "SysType", EnumString( ClgSysTypeAbbrev ) )
         else                            T24RCoolingEquipment:EER( "CodeBase", 2008, "StdVer", 2010, "SysType", EnumString( ClgSysTypeAbbrev ) )
         endif endif endif endif  }

   "Set Model:CoolingEffLabel"    Model:CoolingEffLabel = {
              if (DisplaySEER > 0) then  "SEER:"
         else if (DisplayEER  > 0) then  "EER:"
         else  UNDEFINED  endif endif  }

   "Set Model:CoolDuctFlag"      Model:CoolDuctFlag  = {
         if (HtgSysTypeHtPump) then  HeatDuctFlag
         else if (HaveCooling == 0) then  0
         else  T24RCoolingEquipment:DuctFlag( "SysType", EnumString( ClgSysTypeAbbrev ) )  endif endif  }

   "Set Model:HVACSysName"    Model:HVACSysName  = {
         if (HtgSysTypeHtPump)
         then  Format( "%s System", EnumString( HtgSysTypeAbbrev ) )
         else  Format( "%s, %s System", EnumString( HtgSysTypeAbbrev ), EnumString( ClgSysTypeAbbrev ) )
         endif  }

; distribution system
   "Set Model:HVACDuctCompat - 0-none / 1-htg / 2-clg / 3-htg&clg"
      Model:HVACDuctCompat  = {
         if (IfValidAnd( HeatDuctFlag != 0 ))
         then  ; can have htg ducts
               if (IfValidAnd( CoolDuctFlag != 0 ))
               then  3  else  1
               endif
         else if (IfValidAnd( CoolDuctFlag != 0 ))
         then  2  else  0
         endif endif  }

   "Default Model:HaveHVACDucts"  Model:HaveHVACDucts  = {
         if (HVACDuctCompat > 0) then  1  else  0  endif  }
   "Set Model:HVACDuctLocList - 0-no attic or crawl spc / 1-attic, no crawl / 2-crawl, no attic / 3-both attic & crawl"
      Model:HVACDuctLocList  = {
         if (TopExposure < 1 .OR. HaveAttic < 1)
         then  ; no attic
               if (BottomExposure < 1 .OR. FloorType != 11)
               then  0
               else  2  endif
         else  ; have attic
               if (BottomExposure < 1 .OR. FloorType != 11)
               then  1
               else  3  endif
         endif  }
   "Default Model:HVACDuctLocation"    Model:HVACDuctLocation  = {
         switch (HVACDuctLocList)
            case  0 :  7  ; cond spc
            case  1 :  1  ; attic
            case  2 :  2  ; crawl spc
            default :  1  ; attic
         endswitch  }

   "Default Model:HVACDuctsInsulated"     Model:HVACDuctsInsulated  = {
         if (IfValidAnd( YearHVAC >= 2001 )) then  1  else  0  endif  }
   "Default Model:HVACDuctInsRvalue"      Model:HVACDuctInsRvalue  = {
         if (HVACDuctsInsulated == 0) then  UNDEFINED
         else if (IfValidAnd( YearHVAC >= 2008 )==0 .OR.
                  IfValidAnd( ClimateZone > 0 )==0) then  4.2
         else if (YearHVAC > 2016) then  T24RClimateZoneCodeBase:DuctRval( "ClimateZone", ClimateZone, "CodeBase", 2016, "BldgType", BldgTypeTblStr )
         else if (YearHVAC > 2013) then  T24RClimateZoneCodeBase:DuctRval( "ClimateZone", ClimateZone, "CodeBase", 2013, "BldgType", BldgTypeTblStr )
         else                            T24RClimateZoneCodeBase:DuctRval( "ClimateZone", ClimateZone, "CodeBase", 2008, "BldgType", BldgTypeTblStr )
         endif endif endif endif  }

   "Default Model:HeatDucted"    Model:HeatDucted    = {
         if (HeatDuctFlag == 0 .OR. HaveHVACDucts == 0)
         then  0  else  1  endif  }
   "Default Model:CoolDucted"    Model:CoolDucted    = {
         if (HaveHVACDucts == 0) then  0
         else if (HtgSysTypeHtPump) then  HeatDucted
         else if (CoolDuctFlag == 0) then  0  else  1  endif endif endif  }

   "Force reset of Model:DistribType (if necessary)"     Model:Action  = {
         if (HeatDucted == 0 .AND. CoolDucted == 0) then  UNCHANGED
         else if (LocalStatus( DistribType ) < 7) then  UNCHANGED
         else if ( (HaveAttic == 0 .AND. DistribType == 1) .OR.  ; ducts in attic but no attic
                   (FloorType < 11 .AND. DistribType == 2) )     ; ducts in crawlspace, but no c.s.
         then  EvalRulelist( "ForceReset_Model_DistribType", 1 )
         else  UNCHANGED  endif endif endif  }
   "Default Model:DistribType"      Model:DistribType  = {
         if (HaveHVACDucts == 0 .OR.
             (HeatDucted == 0 .AND. CoolDucted == 0)) then  0
         else  HVACDuctLocation  endif  }
;         else if (Configuration < 11)     ; => SFam
;         then  if (HaveAttic) then  1     ; ducts in attic
;               else if (FloorType >= 11) then  2   ; ducts in crawl space
;               else  7                    ; ducts in conditioned space
;               endif endif
;         else  7                          ; MFam -> ducts in conditioned space
;         endif endif  }    ; defaulting based on logic for HVACDist:Type
   "Set Model:DistribTypeAbbrev"    Model:DistribTypeAbbrev = {  DistribType  }


; DHW system & heater

   "Default Model:DHWHeaterFuel"   Model:DHWHeaterFuel  = {
         if (IfValidAnd( GasUsed )) then  "Gas"
         else  "Electric"  endif  }

   ; "Default Model:DHWHeaterAndTank"   Model:HeatingType  = {   - defaulted via enums  

   "Default Model:DHWRecircPump"    Model:DHWRecircPump  = {  0  }
   ; "Default Model:DHWRecircPumpCtrl"      - defaulted via enums  

   "Force reset of Model:CentralDHW (if necessary)"     Model:Action  = {
         if (Configuration > 10 .OR. LocalStatus( CentralDHW ) < 7) then  UNCHANGED
         else  EvalRulelist( "ForceReset_Model_CentralDHW", 1 )  endif  }
   "Default Model:CentralDHW"    Model:CentralDHW  = {  0  }

   "Default Model:DHWDistribType"      Model:DHWDistribType  = {
         if (CentralDHW == 0)
         then  if (DHWRecircPump == 0) then  3840  ; Standard
               else  switch (DHWRecircPumpCtrl)
                        case  0 :  4992  ; "Continuous Pumping"      -> "Recirculation with non-demand control (continuous pumping)"
                        case  1 :  5248  ; "Push Button"             -> "Recirculation with demand control, push button"
                        case  2 :  5504  ; "Occupancy/Motion Sensor" -> "Recirculation with demand control, occupancy/motion sensor"
                        default :  3840  ; Standard
                     endswitch  endif
         else  3840     ; Central -> "Standard"  
         endif  }

   "Default Model:DHWCentralDistrib"      Model:DHWCentralDistrib  = {
         if (DHWRecircPump == 0) then  0  ; no recirc -> "Multi-family: No loops or recirc pump"
         else  switch (DHWRecircPumpCtrl)
                  case  0 :  5056  ; "Continuous Pumping"      -> "Multi-family: Recirculating with no control (continuous pumping)"
                  case  1 :  6336  ; "Push Button"             -> "Multi-family: Recirculation demand control"
                  case  2 :  6336  ; "Occupancy/Motion Sensor" -> "Multi-family: Recirculation demand control"
                  default :     0  ; Standard
               endswitch  endif  }

	"Default Model:DHWHeaterType"		Model:DHWHeaterType	= {
         switch (DHWHeaterAndTank)
            case  0 :  0  ; Elec "Resistance Tank"
            case  1 :  5  ; Elec "Heat Pump Water Heater"
            case 10 :  1  ; Gas "Tank" -> Gas
            case 11 :  1  ; Gas "Tankless" -> Gas
            default :  UNDEFINED
         endswitch  }
   "Set Model:HPWH_NEEARated"    Model:HPWH_NEEARated  = {
         if (DHWHeaterType == 10) then  1  else  0  endif  }

   "Default Model:DHWHeaterTankType"   Model:DHWHeaterTankType  = {
      switch (DHWHeaterType)
         case  0 :  6	; "Electric Resistance" -> "Small Storage"        
         case 10 :  6	; "NEEA-Rated Heat Pump" -> "Small Storage"  
         case  5 :  6	; "Other Heat Pump" -> "Small Storage"  
         default :   	; all others (Gas)
                     if (DHWHeaterAndTank == 11)
                     then  5   ; "Small Instantaneous"
                     else  6   ; "Small Storage"
                     endif
         endswitch  }

   ; Model:HPWH_ASHPType,       defaulted via enums - "HPWH ASHP (new model) type"    

; TO DO
   "Default Model:DHWEnergyFactor"      Model:DHWEnergyFactor   = {
      switch (DHWHeaterType)
         case  0 :            ; "Electric Resistance" 
            switch (DHWHeaterTankType)
               case  6 :   0.945      ; "Small Storage" 
               case  5 :   0.93       ; "Small Tankless"
               default :   0.93
            endswitch
         case  1 :          ; "Natural Gas"   
            switch (DHWHeaterTankType)
               case  6 :   0.575      ; "Small Storage" 
               case  5 :   0.82       ; "Small Tankless"
               default :   0.575
            endswitch
         case  2 :          ; "Propane"             
            switch (DHWHeaterTankType)
               case  6 :   0.575      ; "Small Storage" 
               case  5 :   0.82       ; "Small Tankless"
               default :   0.575
            endswitch
         case  3 :          ; "Heat Pump"           
            switch (DHWHeaterTankType)
               case  6 :   0.97       ; "Small Storage" 
               case  5 :   0.97       ; "Small Tankless"
               default :   0.97
            endswitch
         case  4 :          ; "Oil"   
            switch (DHWHeaterTankType)
               case  6 :   0.575      ; "Small Storage" 
               case  5 :   0.82       ; "Small Tankless"
               default :   0.575
            endswitch
         case 10 :  0.59       ; "NEEA-Rated Heat Pump"
         case  5 :  2.00       ; "Other Heat Pump"
         default :   0.59
      endswitch  }
	"Set Model:DHWHtrShowEF"		Model:DHWHtrShowEF		= {
      if (DHWHeaterType == 5) then  1	
      else if (DHWHeaterType != 10 .AND.
               (DHWHeaterTankType == 4 .OR. DHWHeaterTankType == 5 .OR. DHWHeaterTankType == 6))
      then  1  else  0  endif endif  }

	"Set Model:DHWHtrEffUnits"		Model:DHWHtrEffUnits	= {
			if (DHWHeaterType == 5 .OR.
			    DHWHeaterType == 10) then  "EF"	
			else	switch (DHWHeaterTankType)
						case  0 :	"frac"	; "Boiler"        
						case  1 :	" "		; "Indirect"      
						case  3 :	"frac"	; "Large Storage" 
						case  2 :	"EF"		; "Large Tankless"
						case  6 :	"EF"		; "Small Storage" 
						case  5 :   "EF"		; "Small Tankless"
						case  7 :	" "		; "Unfired Storage Tank"
						case  8 :	" "		; "Electric Mini Tank"
						default :   "EF"	
					endswitch  endif  }

	"Default Model:DHWTankVolume"		Model:DHWTankVolume	= {
		if (DHWHeaterType == 5) then  50		; "Other Heat Pump"
		else	switch (DHWHeaterTankType)
					case  0 :	50			; "Boiler"        
					case  1 :	50			; "Indirect"      
					case  3 :	50			; "Large Storage" 
					case  2 :	 0			; "Large Tankless"
					case  6 :	50			; "Small Storage" 
					case  5 :    0			; "Small Tankless"
					case  7 :	50			; "Unfired Storage Tank"
					case  8 :	 5 		; "Electric Mini Tank"
					default :   50
				endswitch  endif  }


END
;*************************************************************************


;*************************************************************************
RULELIST "GenerateModel" 1 0 1 0
;*************************************************************************

   ;--------------------------------------------------------------------
   ; GenerateModel:  Project data
   ;--------------------------------------------------------------------
   "Set Proj:NumBedrooms"     Proj:NumBedrooms  = {   Model:NumBedrooms  }
	"Set Proj:YearBuilt"		   Proj:YearBuilt    = {
	      if (IfValidAnd(     Model:YearBuilt      > 1800 )) then  Model:YearBuilt  else  UNCHANGED  endif  }
	"Set Proj:YearRoof"		   Proj:YearRoof     = {
	      if (IfValidAnd(     Model:YearRoof       > 1800 ) .AND. GlobalStatus( Model:YearRoof       ) > 6) then  Model:YearRoof  else  UNCHANGED  endif  }
	"Set Proj:YearWindows"	   Proj:YearWindows	= {
	      if (IfValidAnd(     Model:YearWindows    > 1800 ) .AND. GlobalStatus( Model:YearWindows    ) > 6) then  Model:YearWindows  else  UNCHANGED  endif  }
	"Set Proj:YearEnvelope"	   Proj:YearEnvelope	= {
	      if (IfValidAnd(     Model:YearEnvelope   > 1800 ) .AND. GlobalStatus( Model:YearEnvelope   ) > 6) then  Model:YearEnvelope  else  UNCHANGED  endif  }
	"Set Proj:YearAppliances"	Proj:YearAppliances	= {
	      if (IfValidAnd(     Model:YearAppliances > 1800 ) .AND. GlobalStatus( Model:YearAppliances ) > 6) then  Model:YearAppliances  else  UNCHANGED  endif  }
	"Set Proj:YearLighting"		Proj:YearLighting	= {
	      if (IfValidAnd(     Model:YearLighting   > 1800 ) .AND. GlobalStatus( Model:YearLighting   ) > 6) then  Model:YearLighting  else  UNCHANGED  endif  }
	"Set Proj:YearHVAC"		   Proj:YearHVAC	   = {
	      if (IfValidAnd(     Model:YearHVAC       > 1800 ) .AND. GlobalStatus( Model:YearHVAC       ) > 6) then  Model:YearHVAC  else  UNCHANGED  endif  }
	"Set Proj:YearWaterHtg"		Proj:YearWaterHtg	= {
	      if (IfValidAnd(     Model:YearWaterHtg   > 1800 ) .AND. GlobalStatus( Model:YearWaterHtg   ) > 6) then  Model:YearWaterHtg  else  UNCHANGED  endif  }

   ;--------------------------------------------------------------------
   ; GenerateModel:  Model data
   ;--------------------------------------------------------------------
	"Set Proj:NatGasAvailable"    Proj:NatGasAvailable    = {   if (Model:GasUsed > 0 .AND. Model:GasType == 1) then  1
	                                                            else if (Model:GasUsed == 0) then  0
	                                                            else  UNDEFINED  endif endif  }
	"Set Proj:GasType"            Proj:GasType            = {   Model:GasType  }

   "Set Model:AtticRoofCons"                 Model:AtticRoofCons     = {   if (HaveAttic) then  RuleLibrary( Cons, "Asphalt Shingle Roof"   )  else  UNDEFINED  endif  }
   "Set Model:ClgBlwAtcCons"                 Model:ClgBlwAtcCons     = {   if (HaveAttic) then  RuleLibrary( Cons, "ExEDR Ceiling 2x4 24oc" )  else  UNDEFINED  endif  }
   "Set Model:ClgBlwAtcCons:CavityLayer"     Model:ClgBlwAtcCons:CavityLayer  = {  int( CeilingInsulRVal )  }     ; SAC 3/13/17
   "Set Model:CathClgCons"       Model:CathClgCons       = {   if (HaveAttic == 0) then  RuleLibrary( Cons, "T24-2013 Altered Cathedral Ceiling" )  else  UNDEFINED  endif  }
   "Set Model:ExtWallCons"       Model:ExtWallCons       = {   RuleLibrary( Cons, "IECC-2006 ExtWall 2x4 16oc R13" )  }
   "Set Model:FlrAbvCrwlCons"    Model:FlrAbvCrwlCons    = {   if (     FloorType == 11) then  RuleLibrary( Cons, "T24-2013 FlrOvrCrawl 2x6 16oc R19" )
                                                               else if (FloorType == 12) then  RuleLibrary( Cons, "T24-2013 FlrOvrCrawl Conc R4" )  else  UNDEFINED  endif endif  }

   "Create Model:HVACSystem"     Model:HVACSystem  = {
         if (Configuration > 10) then  UNCHANGED      ; don't create HVACSys for MFam models
         else if (HtgSysTypeHtPump)
         then  CreateComp( HVACSys, HVACSysName, "GenerateModel_HVACSys_HtPump" )
         else  CreateComp( HVACSys, HVACSysName, "GenerateModel_HVACSys_Other"  )   endif endif  }

   "Create Model:DHWSystem"      Model:DHWSystem   = {
         CreateComp( DHWSys, "DHW System", "GenerateModel_DHWSys" )  }

   "Generate model objects"   Proj:Action = {   if (IfValidAnd( Model:Configuration > 0 ))
         then  switch (Model:Configuration)
                  case   1 :  EvalRulelist( "GenerateModel_SFam" )
                  case   2 :  EvalRulelist( "GenerateModel_SFam" )
                  case  11 :  PostError( "Generation of Lowrise Multifamily model not yet implemented." )
                  case  12 :  PostError( "Generation of Townhome model not yet implemented." )
                  default  :  PostError( "Unrecognized Model:Configuration" )
               endswitch
         else  PostError( "Invalid Model:Configuration" )  endif  }

   ;--------------------------------------------------------------------
   ; GenerateModel:  Rules to UNASSIGN certain object assignments defined to establish object relationships (but are classified as NotInput)
   ;--------------------------------------------------------------------
   "Blast assignment of Zone:CathCeilings[1]"   Zone:CathCeilings[1]  = {  UNDEFINED  }
   "Blast assignment of Zone:CathCeilings[2]"   Zone:CathCeilings[2]  = {  UNDEFINED  }
   "Blast assignment of Zone:CathCeilings[3]"   Zone:CathCeilings[3]  = {  UNDEFINED  }
   "Blast assignment of Zone:CathCeilings[4]"   Zone:CathCeilings[4]  = {  UNDEFINED  }
   "Blast assignment of Zone:ExtWalls[1]"       Zone:ExtWalls[1]      = {  UNDEFINED  }
   "Blast assignment of Zone:ExtWalls[2]"       Zone:ExtWalls[2]      = {  UNDEFINED  }
   "Blast assignment of Zone:ExtWalls[3]"       Zone:ExtWalls[3]      = {  UNDEFINED  }
   "Blast assignment of Zone:ExtWalls[4]"       Zone:ExtWalls[4]      = {  UNDEFINED  }
   "Blast assignment of Zone:SlabFlr"           Zone:SlabFlr          = {  UNDEFINED  }
   "Blast assignment of Zone:FlrOverCrawl"      Zone:FlrOverCrawl     = {  UNDEFINED  }

   "Blast assignment of ExtWall:Windows[1]"     ExtWall:Windows[1]    = {  UNDEFINED  }
   "Blast assignment of ExtWall:Windows[2]"     ExtWall:Windows[2]    = {  UNDEFINED  }
   "Blast assignment of ExtWall:Windows[3]"     ExtWall:Windows[3]    = {  UNDEFINED  }
   "Blast assignment of ExtWall:Windows[4]"     ExtWall:Windows[4]    = {  UNDEFINED  }

END
;*************************************************************************

;*************************************************************************
RULELIST "DefaultModel_SFam" 0 0 0 0
;*************************************************************************

   "Set Model:BldgTypeTblStr"    Model:BldgTypeTblStr  = {  "SingleFam"  }

   "Default Model:FracAreaByFloor[1]"  Model:FracAreaByFloor[1]  = {  (CondFloorArea / NumAbvGradeFlrs) / CondFloorArea  }
   "Default Model:FracAreaByFloor[2]"  Model:FracAreaByFloor[2]  = {  if (NumAbvGradeFlrs < 2) then  0
                                                                      else  FracAreaByFloor[1]  endif  }
   "Default Model:FracAreaByFloor[3]"  Model:FracAreaByFloor[3]  = {  if (NumAbvGradeFlrs < 3) then  0
                                                                      else  FracAreaByFloor[1]  endif  }
   "Default Model:AreaByFloor[1]"   Model:AreaByFloor[1]   = {  CondFloorArea * FracAreaByFloor[1]  }
   "Default Model:AreaByFloor[2]"   Model:AreaByFloor[2]   = {  if (NumAbvGradeFlrs < 2) then  0
                                                                else  CondFloorArea * FracAreaByFloor[2]  endif  }
   "Default Model:AreaByFloor[3]"   Model:AreaByFloor[3]   = {  if (NumAbvGradeFlrs < 3) then  0
                                                                else  CondFloorArea * FracAreaByFloor[3]  endif  }
   "Set Model:AreaByFloor[6]-avg"   Model:AreaByFloor[6]   = {  CondFloorArea / NumAbvGradeFlrs  }
   "Set Model:AreaByFloor[7]-max"   Model:AreaByFloor[7]   = {
         max( FracAreaByFloor[1], max( FracAreaByFloor[2],
                                       FracAreaByFloor[3] ) ) * CondFloorArea  }
   ; round footprint lengths to nearest 0.01'
   "Default Model:SideLengthByFlr[1]"         Model:SideLengthByFlr[1]    = {
         int( (100 * sqrt( AreaByFloor[1] / AspectRatio ))+0.5 ) / 100  }
   "Default Model:FrontLengthByFlr[1]"    Model:FrontLengthByFlr[1]    = {  
         int( (100 * AreaByFloor[1] / SideLengthByFlr[1])+0.5 ) / 100  }
   "Default Model:RoofEdgeToPeak" Model:RoofEdgeToPeak = {  
         if (AspectRatio >= 1)
         then  if (IfValidAnd( RoofRise > 0 )==0) then  SideLengthByFlr[1] / 2
               else  (SideLengthByFlr[1] / 2) / cos( atan( RoofRise / 12 ) )  endif
         else  if (IfValidAnd( RoofRise > 0 )==0) then  FrontLengthByFlr[1] / 2
               else  (FrontLengthByFlr[1] / 2) / cos( atan( RoofRise / 12 ) )  endif endif  }

   "Default Model:SideLengthByFlr[2]"  Model:SideLengthByFlr[2]   = {  if (NumAbvGradeFlrs < 2) then  UNDEFINED
                                                                       else  SideLengthByFlr[1]  endif  }
   "Default Model:SideLengthByFlr[3]"  Model:SideLengthByFlr[3]   = {  if (NumAbvGradeFlrs < 3) then  UNDEFINED
                                                                       else  SideLengthByFlr[1]  endif  }
   "Default Model:FrontLengthByFlr[2]" Model:FrontLengthByFlr[2]  = {  if (NumAbvGradeFlrs < 2) then  UNDEFINED
                                                                       else  FrontLengthByFlr[1]  endif  }
   "Default Model:FrontLengthByFlr[3]" Model:FrontLengthByFlr[3]  = {  if (NumAbvGradeFlrs < 3) then  UNDEFINED
                                                                       else  FrontLengthByFlr[1]  endif  }

   "Default Model:WinOverhangs[1] - front"   Model:WinOverhangs[1]  = {  1  }
   "Default Model:WinOverhangs[2] - back"    Model:WinOverhangs[2]  = {  6  }
   "Default Model:WinOverhangs[3] - left"    Model:WinOverhangs[3]  = {  1  }
   "Default Model:WinOverhangs[4] - right"   Model:WinOverhangs[4]  = {  1  }

;   "Default Model:WinFloorAreaPct"     Model:WinFloorAreaPct      = {  20  }    ; "Window area as percent of conditioned floor area"    
;   "Default Model:WinDistribRatio"     Model:WinDistribRatio      = {
;            default :  2.8  ;  2 - "Typical (more on front/back than sides)"
   "Default Model:WinWallRatios[3]-left"     Model:WinWallRatios[3] = {
         (AreaByFloor[6] * WinFloorAreaPct * 0.5 / 100) /
          ((SideLengthByFlr[1] * CeilingHeight) + ((FrontLengthByFlr[1] * CeilingHeight) * WinDistribRatio))  }
   "Default Model:WinWallRatios[1]-front"    Model:WinWallRatios[1] = {
         WinWallRatios[3] * WinDistribRatio  }
   "Default Model:WinWallRatios[2]-back"     Model:WinWallRatios[2] = {  WinWallRatios[1]  }
   "Default Model:WinWallRatios[4]-right"    Model:WinWallRatios[4] = {  WinWallRatios[3]  }

   "Default Model:FrontWindows[2] - front pic win ht"    Model:FrontWindows[2] = {  5  }
   "Default Model:FrontWindows[3] - front pic win wd"    Model:FrontWindows[3] = {  8  }
   "Default Model:FrontWindows[1] - front pic win #"     Model:FrontWindows[1] = {
         int( (FrontLengthByFlr[1] * CeilingHeight * WinWallRatios[1]) * 0.75 / 
              (FrontWindows[2] * FrontWindows[3]) )  }
   "Default Model:FrontWindows[5] - front std win ht"    Model:FrontWindows[5] = {  4.67  }
   "Default Model:FrontWindows[4] - front std win #"     Model:FrontWindows[4] = {
         max( 1, int( (( (FrontLengthByFlr[1] * CeilingHeight * WinWallRatios[1]) -
                         (FrontWindows[1] * FrontWindows[2] * FrontWindows[3]) ) /
                       ( FrontWindows[5] * FrontWindows[5] * 2 / 3 )) + 0.5 ) )  }
   "Default Model:FrontWindows[6] - front std win wd"    Model:FrontWindows[6] = {
         ( (FrontLengthByFlr[1] * CeilingHeight * WinWallRatios[1]) -
           (FrontWindows[1] * FrontWindows[2] * FrontWindows[3]) ) /
         ( FrontWindows[5] * FrontWindows[4] )  }
   "Default Model:FrontWindows[7] - total win area"      Model:FrontWindows[7] = {
         (FrontWindows[1] * FrontWindows[2] * FrontWindows[3]) +
         (FrontWindows[4] * FrontWindows[5] * FrontWindows[6])  }

   "Default Model:BackWindows[2] - back sldg gls win ht"    Model:BackWindows[2] = {  7.67  }
   "Default Model:BackWindows[3] - back sldg gls win wd"    Model:BackWindows[3] = {  8  }
   "Default Model:BackWindows[1] - back sldg gls win #"     Model:BackWindows[1] = {
         int( (FrontLengthByFlr[1] * CeilingHeight * WinWallRatios[2]) * 0.8 / 
              (BackWindows[2] * BackWindows[3]) )  }
   "Default Model:BackWindows[5] - back std win ht"    Model:BackWindows[5] = {  4.67  }
   "Default Model:BackWindows[4] - back std win #"     Model:BackWindows[4] = {
         max( 1, int( (( (FrontLengthByFlr[1] * CeilingHeight * WinWallRatios[2]) -
                         (BackWindows[1] * BackWindows[2] * BackWindows[3]) ) /
                       ( BackWindows[5] * BackWindows[5] * 2 / 3 )) + 0.5 ) )  }
   "Default Model:BackWindows[6] - back std win wd"    Model:BackWindows[6] = {
         ( (FrontLengthByFlr[1] * CeilingHeight * WinWallRatios[2]) -
           (BackWindows[1] * BackWindows[2] * BackWindows[3]) ) /
         ( BackWindows[5] * BackWindows[4] )  }
   "Default Model:BackWindows[7] - total win area"      Model:BackWindows[7] = {
         (BackWindows[1] * BackWindows[2] * BackWindows[3]) +
         (BackWindows[4] * BackWindows[5] * BackWindows[6])  }

   "Default Model:LeftWindows[2] - left std win ht"    Model:LeftWindows[2] = {  4.67  }
   "Default Model:LeftWindows[1] - left std win #"     Model:LeftWindows[1] = {
         max( 1, int( (( SideLengthByFlr[1] * CeilingHeight * WinWallRatios[3] ) /
                       ( LeftWindows[2] * LeftWindows[2] * 2 / 3 )) + 0.5 ) )  }
   "Default Model:LeftWindows[3] - left std win wd"    Model:LeftWindows[3] = {
         ( SideLengthByFlr[1] * CeilingHeight * WinWallRatios[3] ) /
         ( LeftWindows[2] * LeftWindows[1] )  }
   "Default Model:LeftWindows[4] - total win area"     Model:LeftWindows[4] = {
         LeftWindows[1] * LeftWindows[2] * LeftWindows[3]  }

   "Default Model:RightWindows[2] - right std win ht"    Model:RightWindows[2] = {  4.67  }
   "Default Model:RightWindows[1] - right std win #"     Model:RightWindows[1] = {
         max( 1, int( (( SideLengthByFlr[1] * CeilingHeight * WinWallRatios[4] ) /
                       ( RightWindows[2] * RightWindows[2] * 2 / 3 )) + 0.5 ) )  }
   "Default Model:RightWindows[3] - right std win wd"    Model:RightWindows[3] = {
         ( SideLengthByFlr[1] * CeilingHeight * WinWallRatios[4] ) /
         ( RightWindows[2] * RightWindows[1] )  }
   "Default Model:RightWindows[4] - total win area"     Model:RightWindows[4] = {
         RightWindows[1] * RightWindows[2] * RightWindows[3]  }

END
;*************************************************************************

;*************************************************************************
RULELIST "DefaultModel_MFam" 0 0 0 0
;*************************************************************************

   "Set Model:BldgTypeTblStr"    Model:BldgTypeTblStr  = {  "MultiFam"  }

   "Default Model:FracAreaByFloor[1]"  Model:FracAreaByFloor[1]  = {  (CondFloorArea / NumAbvGradeFlrs) / CondFloorArea  }
   "Default Model:FracAreaByFloor[2]"  Model:FracAreaByFloor[2]  = {  if (NumAbvGradeFlrs < 2) then  0
                                                                      else  FracAreaByFloor[1]  endif  }
   "Default Model:FracAreaByFloor[3]"  Model:FracAreaByFloor[3]  = {  if (NumAbvGradeFlrs < 3) then  0
                                                                      else  FracAreaByFloor[1]  endif  }
   "Default Model:AreaByFloor[1]"   Model:AreaByFloor[1]   = {  CondFloorArea * FracAreaByFloor[1]  }
   "Default Model:AreaByFloor[2]"   Model:AreaByFloor[2]   = {  if (NumAbvGradeFlrs < 2) then  0
                                                                else  CondFloorArea * FracAreaByFloor[2]  endif  }
   "Default Model:AreaByFloor[3]"   Model:AreaByFloor[3]   = {  if (NumAbvGradeFlrs < 3) then  0
                                                                else  CondFloorArea * FracAreaByFloor[3]  endif  }
   "Set Model:AreaByFloor[6]-avg"   Model:AreaByFloor[6]   = {  CondFloorArea / NumAbvGradeFlrs  }
   "Set Model:AreaByFloor[7]-max"   Model:AreaByFloor[7]   = {
         max( AreaByFloor[1], max( FracAreaByFloor[2],
                                   FracAreaByFloor[3] ) ) * CondFloorArea  }
   ; round footprint lengths to nearest 0.01'
   "Default Model:SideLengthByFlr[1]"         Model:SideLengthByFlr[1]    = {
         int( (100 * sqrt( AreaByFloor[1] / AspectRatio ))+0.5 ) / 100  }
   "Default Model:FrontLengthByFlr[1]"    Model:FrontLengthByFlr[1]    = {  
         int( (100 * AreaByFloor[1] / SideLengthByFlr[1])+0.5 ) / 100  }
   "Default Model:RoofEdgeToPeak" Model:RoofEdgeToPeak = {  
         if (AspectRatio >= 1)
         then  if (IfValidAnd( RoofRise > 0 )==0) then  SideLengthByFlr[1] / 2
               else  (SideLengthByFlr[1] / 2) / cos( atan( RoofRise / 12 ) )  endif
         else  if (IfValidAnd( RoofRise > 0 )==0) then  FrontLengthByFlr[1] / 2
               else  (FrontLengthByFlr[1] / 2) / cos( atan( RoofRise / 12 ) )  endif endif  }

   "Default Model:SideLengthByFlr[2]"  Model:SideLengthByFlr[2]   = {  if (NumAbvGradeFlrs < 2) then  UNDEFINED
                                                                       else  SideLengthByFlr[1]  endif  }
   "Default Model:SideLengthByFlr[3]"  Model:SideLengthByFlr[3]   = {  if (NumAbvGradeFlrs < 3) then  UNDEFINED
                                                                       else  SideLengthByFlr[1]  endif  }
   "Default Model:FrontLengthByFlr[2]" Model:FrontLengthByFlr[2]  = {  if (NumAbvGradeFlrs < 2) then  UNDEFINED
                                                                       else  FrontLengthByFlr[1]  endif  }
   "Default Model:FrontLengthByFlr[3]" Model:FrontLengthByFlr[3]  = {  if (NumAbvGradeFlrs < 3) then  UNDEFINED
                                                                       else  FrontLengthByFlr[1]  endif  }


END
;*************************************************************************

;*************************************************************************
RULELIST "DefaultModel_TownHm" 0 0 0 0
;*************************************************************************

   "Set Model:BldgTypeTblStr"    Model:BldgTypeTblStr  = {  "MultiFam"  }

   "Default Model:FracAreaByFloor[1]"  Model:FracAreaByFloor[1]  = {
         if (NumAbvGradeFlrs <= 1) then  1.0   ; garage below (if one attached)
         else if (HaveAttachedGarage == 0)
         then ; no garage => 1/3 open to below in top floor
               3 / (((NumAbvGradeFlrs - 1)*3) + 2)
         else ; have garage & > 1 floor => some living area on garage level
               if (NumAbvGradeFlrs == 2)
               then  if (CondFloorArea < 1100)
                     then ; assume single car garage & no cathedral area
                           (CondFloorArea - ((CondFloorArea + 250)/2)) / CondFloorArea
                     else ; assume two car garage & no cathedral area
                           (CondFloorArea - ((CondFloorArea + 500)/2)) / CondFloorArea
                     endif
               else ; # flrs > 2 => two car garage & 1/3 cathedral area on top-1 flr
                     (((CondFloorArea + 500) / (NumAbvGradeFlrs - 0.33)) - 500) / CondFloorArea
               endif
         endif endif  }
   "Default Model:FracAreaByFloor[2]"  Model:FracAreaByFloor[2]  = {
         if (NumAbvGradeFlrs < 2) then  0
         else if (NumAbvGradeFlrs == 2) then  1 - FracAreaByFloor[1]
         else if (HaveAttachedGarage == 0)
         then ; no garage => 1/3 open to below in top floor
               FracAreaByFloor[1]
         else ; two car garage & > 2 flrs & 1/3 cathedral area on top-1 flr
               ((CondFloorArea + 500) / (NumAbvGradeFlrs - 0.33)) / CondFloorArea
         endif endif endif  }
   "Default Model:FracAreaByFloor[3]"  Model:FracAreaByFloor[3]  = {
         if (NumAbvGradeFlrs < 3) then  0
         else if (NumAbvGradeFlrs == 3) then  1 - FracAreaByFloor[1] - FracAreaByFloor[2]
         else if (HaveAttachedGarage == 0)
         then ; no garage => 1/3 open to below in top floor
               FracAreaByFloor[1]
         else ; two car garage & > 2 flrs & 1/3 cathedral area on top-1 flr
               ((CondFloorArea + 500) / (NumAbvGradeFlrs - 0.33)) / CondFloorArea
         endif endif endif  }
   "Default Model:FracAreaByFloor[4]"  Model:FracAreaByFloor[4]  = {
         if (NumAbvGradeFlrs < 4) then  0
         else if (NumAbvGradeFlrs == 4) then  1 - FracAreaByFloor[1] - FracAreaByFloor[2] - FracAreaByFloor[3]
         else if (HaveAttachedGarage == 0)
         then ; no garage => 1/3 open to below in top floor
               FracAreaByFloor[1]
         else ; two car garage & > 2 flrs & 1/3 cathedral area on top-1 flr
               ((CondFloorArea + 500) / (NumAbvGradeFlrs - 0.33)) / CondFloorArea
         endif endif endif  }
   "Default Model:AreaByFloor[1]"   Model:AreaByFloor[1]   = {  CondFloorArea * FracAreaByFloor[1]  }
   "Default Model:AreaByFloor[2]"   Model:AreaByFloor[2]   = {  if (NumAbvGradeFlrs < 2) then  0
                                                                else  CondFloorArea * FracAreaByFloor[2]  endif  }
   "Default Model:AreaByFloor[3]"   Model:AreaByFloor[3]   = {  if (NumAbvGradeFlrs < 3) then  0
                                                                else  CondFloorArea * FracAreaByFloor[3]  endif  }
   "Default Model:AreaByFloor[4]"   Model:AreaByFloor[4]   = {  if (NumAbvGradeFlrs < 4) then  0
                                                                else  CondFloorArea * FracAreaByFloor[4]  endif  }
   "Set Model:AreaByFloor[6]-avg"   Model:AreaByFloor[6]   = {  CondFloorArea / NumAbvGradeFlrs  }
   "Set Model:AreaByFloor[7]-max"   Model:AreaByFloor[7]   = {
         max( AreaByFloor[1], max( AreaByFloor[2], max( AreaByFloor[3], AreaByFloor[4] ) ) )  }
   ; round footprint lengths to nearest 0.01'
   "Default Model:FrontLengthByFlr[1]"    Model:FrontLengthByFlr[1]    = {  
         int( (100 * sqrt( AreaByFloor[7] * AspectRatio ))+0.5 ) / 100  }
   "Default Model:FrontLengthByFlr[2]" Model:FrontLengthByFlr[2]  = {  if (NumAbvGradeFlrs < 2) then  UNDEFINED
                                                                       else  FrontLengthByFlr[1]  endif  }
   "Default Model:FrontLengthByFlr[3]" Model:FrontLengthByFlr[3]  = {  if (NumAbvGradeFlrs < 3) then  UNDEFINED
                                                                       else  FrontLengthByFlr[1]  endif  }
   "Default Model:FrontLengthByFlr[4]" Model:FrontLengthByFlr[4]  = {  if (NumAbvGradeFlrs < 4) then  UNDEFINED
                                                                       else  FrontLengthByFlr[1]  endif  }
   "Default Model:SideLengthByFlr[1]"         Model:SideLengthByFlr[1]    = {
               int( (100 * AreaByFloor[1] / FrontLengthByFlr[1] )+0.5 ) / 100  }
   "Default Model:SideLengthByFlr[2]"         Model:SideLengthByFlr[2]    = {
         if (NumAbvGradeFlrs < 2) then  UNDEFINED
         else  int( (100 * AreaByFloor[2] / FrontLengthByFlr[2] )+0.5 ) / 100  endif  }
   "Default Model:SideLengthByFlr[3]"         Model:SideLengthByFlr[3]    = {
         if (NumAbvGradeFlrs < 3) then  UNDEFINED
         else  int( (100 * AreaByFloor[3] / FrontLengthByFlr[3] )+0.5 ) / 100  endif  }
   "Default Model:SideLengthByFlr[4]"         Model:SideLengthByFlr[4]    = {
         if (NumAbvGradeFlrs < 4) then  UNDEFINED
         else  int( (100 * AreaByFloor[4] / FrontLengthByFlr[4] )+0.5 ) / 100  endif  }

   "Default Model:RoofEdgeToPeak" Model:RoofEdgeToPeak = {  
         if (AspectRatio >= 1)
         then  if (IfValidAnd( RoofRise > 0 )==0) then  SideLengthByFlr[1] / 2
               else  (SideLengthByFlr[1] / 2) / cos( atan( RoofRise / 12 ) )  endif
         else  if (IfValidAnd( RoofRise > 0 )==0) then  FrontLengthByFlr[1] / 2
               else  (FrontLengthByFlr[1] / 2) / cos( atan( RoofRise / 12 ) )  endif endif  }

END
;*************************************************************************


;*************************************************************************
RULELIST "GenerateModel_SFam" 1 0 1 0
;*************************************************************************

	"Set Proj:ACH50"  Proj:ACH50  = {  
	   if (IfValidAnd( Model:YearEnvelope > 0 ) .AND. IfValidAnd( Model:ClimateZone > 0 ))
	   then  ExEDR_EnvelopeAirChanges:ACH50( "Year", Model:YearEnvelope, "ClimZone", Model:ClimateZone )
	   else  7.0  endif  }

   "Generate model objects"   Proj:Action = {   
         switch (Model:Configuration)
            case   1 :  CreateComp( Zone, "Cond Zone", "GenerateModel_SFam_1StoryZone" )
            case   2 :  PostError( "Generation of Single Family, 2 Story model not yet implemented." )
            default  :  UNCHANGED
         endswitch  }

; crawlspace generation
   "Create crawlspace object (if pertinent)"   Proj:Action = {   
         switch (Model:FloorType)
            case  11 :  CreateComp( CrawlSpace, "Crawlspace", "GenerateModel_SFam_CrawlSpace" )
            case  12 :  CreateComp( CrawlSpace, "Crawlspace", "GenerateModel_SFam_CrawlSpace" )
            default  :  UNCHANGED
         endswitch  }
END
;*************************************************************************

;*************************************************************************
RULELIST "GenerateModel_SFam_1StoryZone" 1 0 1 0
;*************************************************************************
   "Set Zone:Type"            Zone:Type            = {  "Conditioned"  }
   "Set Zone:FloorArea"       Zone:FloorArea       = {   Model:AreaByFloor[1]   }
   "Set Zone:CeilingHeight"   Zone:CeilingHeight   = {   Model:CeilingHeight  }
   "Set Zone:FloorHeight"     Zone:FloorHeight     = {   Model:CeilingHeight + 1  }
   "Set Zone:WinHeadHeight"   Zone:WinHeadHeight   = {    7.67  }
   "Set Zone:Bottom"          Zone:Bottom          = {   if (Model:FloorType > 10) then  2
                                                         else  0.7  endif  }
   "Set Zone:NumStories"      Zone:NumStories      = {   1  }
   "Set Zone:HVACSystem"      Zone:HVACSystem      = {   Model:HVACSystem  }
   "Set Zone:DHWSys1"         Zone:DHWSys1         = {   Model:DHWSystem   }

; ceiling below attic (if attic present)
   "Create CeilingBelowAttic (iff Model:HaveAttic)"    Zone:Action  = { if (Model:HaveAttic == 0) then  UNCHANGED
         else  CreateComp( CeilingBelowAttic, "Ceiling (below attic)", "GenerateModel_CeilingBelowAttic" )  endif  }
; cathedral ceilings (if no attic)
   "Create CathedralCeiling-1 (if not Model:HaveAttic)"    Zone:CathCeilings[1]  = {   if (Model:HaveAttic > 0) then  UNDEFINED
         else  CreateComp( CathedralCeiling,  "Front Cath Ceiling", "GenerateModel_CathedralCeiling" )  endif  }
   "Create CathedralCeiling-2 (if not Model:HaveAttic)"    Zone:CathCeilings[2]  = {   if (Model:HaveAttic > 0) then  UNDEFINED
         else  CreateComp( CathedralCeiling,  "Left Cath Ceiling", "GenerateModel_CathedralCeiling" )  endif  }
   "Create CathedralCeiling-3 (if not Model:HaveAttic)"    Zone:CathCeilings[3]  = {   if (Model:HaveAttic > 0) then  UNDEFINED
         else  CreateComp( CathedralCeiling,  "Back Cath Ceiling", "GenerateModel_CathedralCeiling" )  endif  }
   "Create CathedralCeiling-4 (if not Model:HaveAttic)"    Zone:CathCeilings[4]  = {   if (Model:HaveAttic > 0) then  UNDEFINED
         else  CreateComp( CathedralCeiling,  "Right Cath Ceiling", "GenerateModel_CathedralCeiling" )  endif  }
   "Set CathedralCeiling-1 Orientation"   Zone:CathCeilings[1]:Orientation = {   "Front"  }
   "Set CathedralCeiling-2 Orientation"   Zone:CathCeilings[2]:Orientation = {   "Left"   }
   "Set CathedralCeiling-3 Orientation"   Zone:CathCeilings[3]:Orientation = {   "Back"   }
   "Set CathedralCeiling-4 Orientation"   Zone:CathCeilings[4]:Orientation = {   "Right"  }
   "Set CathedralCeiling-2 Area"    Zone:CathCeilings[2]:Area  = {   Model:RoofEdgeToPeak * Model:FrontLengthByFlr[1] / 2  }
   "Set CathedralCeiling-1 Area"    Zone:CathCeilings[1]:Area  = {   CathCeilings[2]:Area + (max( 0, Model:SideLengthByFlr[1]-Model:FrontLengthByFlr[1] ) * Model:RoofEdgeToPeak)  }
   "Set CathedralCeiling-3 Area"    Zone:CathCeilings[3]:Area  = {   CathCeilings[1]:Area  }
   "Set CathedralCeiling-4 Area"    Zone:CathCeilings[4]:Area  = {   CathCeilings[2]:Area  }

; exterior walls
   ; FRONT
   "Create ExtWalls[1] - front"    Zone:ExtWalls[1]  = {
         CreateComp( ExtWall,  "Front Wall", "GenerateModel_ExteriorWalls" )  }
   "Set ExtWalls[1]:Orientation" Zone:ExtWalls[1]:Orientation  = {  "Front"  }
   "Set ExtWalls[1]:Area"        Zone:ExtWalls[1]:Area         = {  Model:FrontLengthByFlr[1] * Model:CeilingHeight  }

   "Create ExtWalls[1]:Windows[1] - Picture"  Zone:ExtWalls[1]:Windows[1]   = {
         if (IfValidAnd( Model:FrontWindows[1] > 0 ))
         then  CreateComp( Win,  "Front Picture Window", "GenerateModel_FrontPictureWindows" )
         else  UNCHANGED  endif  }
   "Set ExtWalls[1]:Windows[1]:Parent"    Zone:ExtWalls[1]:Windows[1]:Parent  = {  ExtWalls[1]  }

   "Create ExtWalls[1]:Windows[2] - Picture"  Zone:ExtWalls[1]:Windows[2]   = {
         if (IfValidAnd( Model:FrontWindows[4] > 0 ))
         then  CreateComp( Win,  "Front Window", "GenerateModel_FrontOtherWindows" )
         else  UNCHANGED  endif  }
   "Set ExtWalls[1]:Windows[2]:Parent"    Zone:ExtWalls[1]:Windows[2]:Parent  = {  ExtWalls[1]  }

   ; LEFT
   "Create ExtWalls[2] - left"    Zone:ExtWalls[2]  = {
         CreateComp( ExtWall,  "Left Wall", "GenerateModel_ExteriorWalls" )  }
   "Set ExtWalls[2]:Orientation" Zone:ExtWalls[2]:Orientation  = {  "Left"  }
   "Set ExtWalls[2]:Area"        Zone:ExtWalls[2]:Area         = {  Model:SideLengthByFlr[1] * Model:CeilingHeight  }

   "Create ExtWalls[2]:Windows[1] - Picture"  Zone:ExtWalls[2]:Windows[1]   = {
         if (IfValidAnd( Model:LeftWindows[1] > 0 ))
         then  CreateComp( Win,  "Left Window", "GenerateModel_LeftWindows" )
         else  UNCHANGED  endif  }
   "Set ExtWalls[2]:Windows[1]:Parent"    Zone:ExtWalls[2]:Windows[1]:Parent  = {  ExtWalls[2]  }

   ; BACK
   "Create ExtWalls[3] - back"    Zone:ExtWalls[3]  = {
         CreateComp( ExtWall,  "Back Wall", "GenerateModel_ExteriorWalls" )  }
   "Set ExtWalls[3]:Orientation" Zone:ExtWalls[3]:Orientation  = {  "Back"  }
   "Set ExtWalls[3]:Area"        Zone:ExtWalls[3]:Area         = {  Model:FrontLengthByFlr[1] * Model:CeilingHeight  }

   "Create ExtWalls[3]:Windows[1] - Picture"  Zone:ExtWalls[3]:Windows[1]   = {
         if (IfValidAnd( Model:BackWindows[1] > 0 ))
         then  CreateComp( Win,  "Back Sliding Glass Window", "GenerateModel_BackSldgGlassWindows" )
         else  UNCHANGED  endif  }
   "Set ExtWalls[3]:Windows[1]:Parent"    Zone:ExtWalls[3]:Windows[1]:Parent  = {  ExtWalls[3]  }

   "Create ExtWalls[3]:Windows[2] - Picture"  Zone:ExtWalls[3]:Windows[2]   = {
         if (IfValidAnd( Model:BackWindows[4] > 0 ))
         then  CreateComp( Win,  "Back Window", "GenerateModel_BackOtherWindows" )
         else  UNCHANGED  endif  }
   "Set ExtWalls[3]:Windows[2]:Parent"    Zone:ExtWalls[3]:Windows[2]:Parent  = {  ExtWalls[3]  }

   ; RIGHT
   "Create ExtWalls[4] - right"    Zone:ExtWalls[4]  = {
         CreateComp( ExtWall,  "Right Wall", "GenerateModel_ExteriorWalls" )  }
   "Set ExtWalls[4]:Orientation" Zone:ExtWalls[4]:Orientation  = {  "Right"  }
   "Set ExtWalls[4]:Area"        Zone:ExtWalls[4]:Area         = {  Model:SideLengthByFlr[1] * Model:CeilingHeight  }

   "Create ExtWalls[4]:Windows[1] - Picture"  Zone:ExtWalls[4]:Windows[1]   = {
         if (IfValidAnd( Model:RightWindows[1] > 0 ))
         then  CreateComp( Win,  "Right Window", "GenerateModel_RightWindows" )
         else  UNCHANGED  endif  }
   "Set ExtWalls[4]:Windows[1]:Parent"    Zone:ExtWalls[4]:Windows[1]:Parent  = {  ExtWalls[4]  }

; slab floor generation
   "Create slab floor object (if pertinent)"   Zone:SlabFlr = {   
         switch (Model:FloorType)
            case   1 :  CreateComp( SlabFloor, "Slab On Grade", "GenerateModel_SFam_SlabFloor" )
            default  :  UNCHANGED
         endswitch  }
; floor-over-crawlspace generation
   "Create floor-over-crawlspace object (if pertinent)"   Zone:FlrOverCrawl = {   
         switch (Model:FloorType)
            case  11 :  CreateComp( FloorOverCrawl, "Floor Over Crawlspace", "GenerateModel_SFam_FloorOverCrawl" )
            case  12 :  CreateComp( FloorOverCrawl, "Floor Over Crawlspace", "GenerateModel_SFam_FloorOverCrawl" )
            default  :  UNCHANGED
         endswitch  }


;Model:CondFloorArea,              Optional,   0,    1,   1,    1,  1,  1
;Model:NumAbvGradeFlrs,            Optional,   0,    1,   1,    1,  1,  1
;Model:AspectRatio,                Optional,   0,    1,   1,    1,  1,  1
;Model:OrientationNeutral,         Optional,   0,    1,   1,    1,  1,  1
;   "Default Model:HaveAttic"           Model:HaveAttic          = {     1  }

;Model:YearBuilt,                  Optional,   0,    1,   1,    1,  1,  1

END
;*************************************************************************

;*************************************************************************
RULELIST "GenerateModel_CathedralCeiling" 1 0 1 0
   "Set CathedralCeiling:RoofRise"       CathedralCeiling:RoofRise       = {   Model:RoofRise  }
   "Set CathedralCeiling:Construction"   CathedralCeiling:Construction   = {   Model:CathClgCons   }
END
;*************************************************************************

;*************************************************************************
RULELIST "GenerateModel_CeilingBelowAttic" 1 0 1 0
   "Set CeilingBelowAttic:Area"           CeilingBelowAttic:Area           = {   Model:AreaByFloor[7]   }
   "Set CeilingBelowAttic:Construction"   CeilingBelowAttic:Construction   = {   Model:ClgBlwAtcCons  }
END
;*************************************************************************

;*************************************************************************
RULELIST "GenerateModel_ExteriorWalls" 1 0 1 0
   "Set ExtWall:Tilt"            ExtWall:Tilt            = {   90  }
   "Set ExtWall:Construction"    ExtWall:Construction    = {   Model:ExtWallCons   }
END
;*************************************************************************

;*************************************************************************
RULELIST "GenerateModel_FrontPictureWindows" 1 0 1 0
   "Set Win:SpecMethod"          Win:SpecMethod    = {  "Window Dimensions (required for fins/overhangs)"  }
   "Set Win:Height"              Win:Height        = {   Model:FrontWindows[2]   }
   "Set Win:Width"               Win:Width         = {   Model:FrontWindows[3]   }
   "Set Win:Multiplier"          Win:Multiplier    = {   Model:FrontWindows[1]   }
   "Set Win:ModelFinsOverhang"   Win:ModelFinsOverhang  = {
         if (IfValidAnd( Model:WinOverhangs[1] > 0 )) then  1  else  0  endif  }
   "Set Win:OverhangDepth"       Win:OverhangDepth = {   if (ModelFinsOverhang < 1) then  UNDEFINED
                                                         else  Model:WinOverhangs[1]  endif  }
   "Setup Overhang Inputs"    Win:Action  = {   if (ModelFinsOverhang < 1) then  UNDEFINED
                                                else  EvalRulelist( "GenerateModel_WindowOverhangs", 1 )  endif  }
END
;*************************************************************************
RULELIST "GenerateModel_FrontOtherWindows" 1 0 1 0
   "Set Win:SpecMethod"          Win:SpecMethod    = {  "Window Dimensions (required for fins/overhangs)"  }
   "Set Win:Height"              Win:Height        = {   Model:FrontWindows[5]   }
   "Set Win:Width"               Win:Width         = {   Model:FrontWindows[6]   }
   "Set Win:Multiplier"          Win:Multiplier    = {   Model:FrontWindows[4]   }
   "Set Win:ModelFinsOverhang"   Win:ModelFinsOverhang  = {
         if (IfValidAnd( Model:WinOverhangs[1] > 0 )) then  1  else  0  endif  }
   "Set Win:OverhangDepth"       Win:OverhangDepth = {   if (ModelFinsOverhang < 1) then  UNDEFINED
                                                         else  Model:WinOverhangs[1]  endif  }
   "Setup Overhang Inputs"    Win:Action  = {   if (ModelFinsOverhang < 1) then  UNDEFINED
                                                else  EvalRulelist( "GenerateModel_WindowOverhangs", 1 )  endif  }
END
;*************************************************************************

;*************************************************************************
RULELIST "GenerateModel_BackSldgGlassWindows" 1 0 1 0
   "Set Win:SpecMethod"          Win:SpecMethod    = {  "Window Dimensions (required for fins/overhangs)"  }
   "Set Win:Height"              Win:Height        = {   Model:BackWindows[2]   }
   "Set Win:Width"               Win:Width         = {   Model:BackWindows[3]   }
   "Set Win:Multiplier"          Win:Multiplier    = {   Model:BackWindows[1]   }
   "Set Win:ModelFinsOverhang"   Win:ModelFinsOverhang  = {
         if (IfValidAnd( Model:WinOverhangs[2] > 0 )) then  1  else  0  endif  }
   "Set Win:OverhangDepth"       Win:OverhangDepth = {   if (ModelFinsOverhang < 1) then  UNDEFINED
                                                         else  Model:WinOverhangs[2]  endif  }
   "Setup Overhang Inputs"    Win:Action  = {   if (ModelFinsOverhang < 1) then  UNDEFINED
                                                else  EvalRulelist( "GenerateModel_WindowOverhangs", 1 )  endif  }
END
;*************************************************************************
RULELIST "GenerateModel_BackOtherWindows" 1 0 1 0
   "Set Win:SpecMethod"          Win:SpecMethod    = {  "Window Dimensions (required for fins/overhangs)"  }
   "Set Win:Height"              Win:Height        = {   Model:BackWindows[5]   }
   "Set Win:Width"               Win:Width         = {   Model:BackWindows[6]   }
   "Set Win:Multiplier"          Win:Multiplier    = {   Model:BackWindows[4]   }
   "Set Win:ModelFinsOverhang"   Win:ModelFinsOverhang  = {
         if (IfValidAnd( Model:WinOverhangs[2] > 0 )) then  1  else  0  endif  }
   "Set Win:OverhangDepth"       Win:OverhangDepth = {   if (ModelFinsOverhang < 1) then  UNDEFINED
                                                         else  Model:WinOverhangs[2]  endif  }
   "Setup Overhang Inputs"    Win:Action  = {   if (ModelFinsOverhang < 1) then  UNDEFINED
                                                else  EvalRulelist( "GenerateModel_WindowOverhangs", 1 )  endif  }
END
;*************************************************************************

;*************************************************************************
RULELIST "GenerateModel_LeftWindows" 1 0 1 0
   "Set Win:SpecMethod"          Win:SpecMethod    = {  "Window Dimensions (required for fins/overhangs)"  }
   "Set Win:Height"              Win:Height        = {   Model:LeftWindows[2]   }
   "Set Win:Width"               Win:Width         = {   Model:LeftWindows[3]   }
   "Set Win:Multiplier"          Win:Multiplier    = {   Model:LeftWindows[1]   }
   "Set Win:ModelFinsOverhang"   Win:ModelFinsOverhang  = {
         if (IfValidAnd( Model:WinOverhangs[3] > 0 )) then  1  else  0  endif  }
   "Set Win:OverhangDepth"       Win:OverhangDepth = {   if (ModelFinsOverhang < 1) then  UNDEFINED
                                                         else  Model:WinOverhangs[3]  endif  }
   "Setup Overhang Inputs"    Win:Action  = {   if (ModelFinsOverhang < 1) then  UNDEFINED
                                                else  EvalRulelist( "GenerateModel_WindowOverhangs", 1 )  endif  }
END
;*************************************************************************

;*************************************************************************
RULELIST "GenerateModel_RightWindows" 1 0 1 0
   "Set Win:SpecMethod"          Win:SpecMethod    = {  "Window Dimensions (required for fins/overhangs)"  }
   "Set Win:Height"              Win:Height        = {   Model:RightWindows[2]   }
   "Set Win:Width"               Win:Width         = {   Model:RightWindows[3]   }
   "Set Win:Multiplier"          Win:Multiplier    = {   Model:RightWindows[1]   }
   "Set Win:ModelFinsOverhang"   Win:ModelFinsOverhang  = {
         if (IfValidAnd( Model:WinOverhangs[4] > 0 )) then  1  else  0  endif  }
   "Set Win:OverhangDepth"       Win:OverhangDepth = {   if (ModelFinsOverhang < 1) then  UNDEFINED
                                                         else  Model:WinOverhangs[4]  endif  }
   "Setup Overhang Inputs"    Win:Action  = {   if (ModelFinsOverhang < 1) then  UNDEFINED
                                                else  EvalRulelist( "GenerateModel_WindowOverhangs", 1 )  endif  }
END
;*************************************************************************

;*************************************************************************
RULELIST "GenerateModel_WindowOverhangs" 1 0 1 0
   "Set Win:OverhangDistUp"      Win:OverhangDistUp = {  if (ModelFinsOverhang < 1) then  UNDEFINED
                                                         else  1.33  endif  }
   "Set Win:OverhangExL"         Win:OverhangExL   = {   if (ModelFinsOverhang < 1) then  UNDEFINED
                                                         else  5  endif  }
   "Set Win:OverhangExR"         Win:OverhangExR   = {   if (ModelFinsOverhang < 1) then  UNDEFINED
                                                         else  5  endif  }
   "Set Win:OverhangFlap"        Win:OverhangFlap  = {   if (ModelFinsOverhang < 1) then  UNDEFINED
                                                         else  0.4  endif  }
END
;*************************************************************************


;*************************************************************************
RULELIST "GenerateModel_SFam_SlabFloor" 1 0 1 0
   "Set SlabFloor:Area"       SlabFloor:Area    = {  Model:CondFloorArea / max( 1, Model:NumAbvGradeFlrs )  }
   "Set SlabFloor:FloorZ"     SlabFloor:FloorZ  = {  0  }
   "Set SlabFloor:Surface"    SlabFloor:Surface = {  "Default (80% carpeted/covered, 20% exposed)"  }
   "Set SlabFloor:Perimeter"  SlabFloor:Perimeter  = {  (Model:FrontLengthByFlr[1] * 2) + (Model:SideLengthByFlr[1] * 2)  }
   "Set SlabFloor:HeatedSlab" SlabFloor:HeatedSlab = {  0  }
   "Set SlabFloor:EdgeInsulation"   SlabFloor:EdgeInsulation  = {  0  }
   "Set SlabFloor:EdgeInsulOption"  SlabFloor:EdgeInsulOption = {  "R-5, 8 inches"  }
END
;*************************************************************************

;*************************************************************************
RULELIST "GenerateModel_SFam_FloorOverCrawl" 1 0 1 0
   "Set FloorOverCrawl:Area"         FloorOverCrawl:Area    = {
         Model:CondFloorArea / max( 1, Model:NumAbvGradeFlrs )  }
   "Set FloorOverCrawl:FloorZ"       FloorOverCrawl:FloorZ        = {  2  }
   "Set FloorOverCrawl:Construction" FloorOverCrawl:Construction  = {
         Model:FlrAbvCrwlCons  }
END

;*************************************************************************
RULELIST "GenerateModel_SFam_CrawlSpace" 1 0 1 0
   "Set CrawlSpace:Type"            CrawlSpace:Type      = {  "Normal (vented)"  }
   "Set CrawlSpace:Perimeter"       CrawlSpace:Perimeter = {
         (Model:FrontLengthByFlr[1] * 2) + (Model:SideLengthByFlr[1] * 2)  }
   "Set CrawlSpace:AvgWallHeight"   CrawlSpace:AvgWallHeight = {  2  }
END
;*************************************************************************


;*************************************************************************
RULELIST "GenerateModel_HVACSys_HtPump" 1 0 1 0
   "Set HVACSys:Type"                  HVACSys:Type      = {  "Heat Pump Heating and Cooling System"  }
   "Set HVACSys:NumHtPumpSystemTypes"  HVACSys:NumHtPumpSystemTypes  = {  1  }
   "Create HVACSys:HtPumpSystem[1]"    HVACSys:HtPumpSystem[1]  = {
         CreateComp( HVACHtPump, EnumString( Model:HtgSysTypeAbbrev ), "GenerateModel_HVACHtPump" )  }
   "Set HVACSys:HtPumpDucted"          HVACSys:HtPumpDucted     = {  Model:HeatDucted  }

   "Create HVACSys:DistribSystem"      HVACSys:DistribSystem  = {
         if (HtPumpDucted < 1) then  UNCHANGED
         else  CreateComp( HVACDist, EnumString( Model:DistribTypeAbbrev ) )  endif  }
   "Set HVACSys:DistribSystem:Type"    HVACSys:DistribSystem:Type  = {  Model:DistribType  }

   "Create HVACSys:Fan"                HVACSys:Fan  = {
         if (LocalCompAssigned( DistribSystem ) < 1) then  UNCHANGED
         else  CreateComp( HVACFan, "HVAC Fan" )  endif  }

END
;*************************************************************************
RULELIST "GenerateModel_HVACSys_Other" 1 0 1 0
   "Set HVACSys:Type"                  HVACSys:Type      = {  "Other Heating and Cooling System"  }
   "Set HVACSys:NumHeatSystemTypes"    HVACSys:NumHeatSystemTypes  = {  1  }
   "Create HVACSys:HeatSystem[1]"      HVACSys:HeatSystem[1]  = {
         CreateComp( HVACHeat, EnumString( Model:HtgSysTypeAbbrev ), "GenerateModel_HVACHeat" )  }
   "Set HVACSys:HeatDucted"            HVACSys:HeatDucted     = {  Model:HeatDucted  }

   "Set HVACSys:NumCoolSystemTypes"    HVACSys:NumCoolSystemTypes  = {  1  }
   "Create HVACSys:CoolSystem[1]"      HVACSys:CoolSystem[1]  = {
         CreateComp( HVACCool, EnumString( Model:ClgSysTypeAbbrev ), "GenerateModel_HVACCool" )  }
   "Set HVACSys:CoolDucted"            HVACSys:CoolDucted     = {  Model:CoolDucted  }

   "Create HVACSys:DistribSystem"      HVACSys:DistribSystem  = {
         if (HeatDucted < 1 .AND. CoolDucted < 1) then  UNCHANGED
         else  CreateComp( HVACDist, EnumString( Model:DistribTypeAbbrev ) )  endif  }
   "Set HVACSys:DistribSystem:Type"    HVACSys:DistribSystem:Type  = {  Model:DistribType  }

   "Create HVACSys:Fan"                HVACSys:Fan  = {
         if (LocalCompAssigned( DistribSystem ) < 1) then  UNCHANGED
         else  CreateComp( HVACFan, "HVAC Fan" )  endif  }

;   Type = "Other Heating and Cooling System"
;   Status = "New"
;   CFIClVentOption = "- none -"
;   CFIClVentFlow = 0
;   CFIClVentPwr = 0
;   NumHeatSystemTypes = 1
;   HeatSystemCount = ( 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 )
;   HeatSystem[1] = "Furn 80"
;   AutoSizeHeatInp = 1
;   HeatDucted = 1
;   NumCoolSystemTypes = 1
;   CoolSystemCount = ( 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 )
;   CoolSystem[1] = "Split 14 11.7"

END
;*************************************************************************

;*************************************************************************
RULELIST "GenerateModel_HVACHeat" 1 0 1 0
   "Set HVACHeat:Type"     HVACHeat:Type  = {  Model:HtgSysType  }
   "Set HVACHeat:AFUE"     HVACHeat:AFUE  = {  Model:AFUE  }
END
;*************************************************************************
RULELIST "GenerateModel_HVACCool" 1 0 1 0
   "Set HVACCool:Type"     HVACCool:Type  = {  Model:ClgSysType  }
   "Set HVACCool:SEER"     HVACCool:SEER  = {  if (Model:HaveCooling == 0) then  UNDEFINED  else  Model:SEER  endif  }
   "Set HVACCool:EER"      HVACCool:EER   = {  if (Model:HaveCooling == 0) then  UNDEFINED  else  Model:EER   endif  }
END
;*************************************************************************
RULELIST "GenerateModel_HVACHtPump" 1 0 1 0
   "Set HVACHtPump:Type"     HVACHtPump:Type  = {  Model:HtgSysType  }
   "Set HVACHtPump:HSPF"     HVACHtPump:HSPF  = {  Model:HSPF  }
END
;*************************************************************************

;*************************************************************************
RULELIST "GenerateModel_DHWSys" 1 0 1 0
   "Set DHWSys:CentralDHW"       DHWSys:CentralDHW    = {   Model:CentralDHW         }
   "Set DHWSys:SystemType"       DHWSys:SystemType    = {   Model:DHWDistribType     }
   "Set DHWSys:MFamDistType"     DHWSys:MFamDistType  = {   Model:DHWCentralDistrib  }
   "Create DHWSys:DHWHeater[1]"  DHWSys:DHWHeater[1]  = {
         if (Model:DHWHeaterType == 10)   ; "NEEA-Rated Heat Pump"
         then  CreateComp( DHWHeater, "NEEA-Rated HPWH", "GenerateModel_DHWHeater_NEEA_HPWH" )
         else  CreateComp( DHWHeater, "DHW Heater",      "GenerateModel_DHWHeater_Other" )  endif  }
END
;*************************************************************************
RULELIST "GenerateModel_DHWHeater_NEEA_HPWH" 1 0 1 0
   "Set DHWHeater:HeaterElementType"   DHWHeater:HeaterElementType  = {  "Heat Pump"  }
   "Set DHWHeater:HPWH_NEEARated"      DHWHeater:HPWH_NEEARated     = {  1  }
   "Set DHWHeater:ASHPType"            DHWHeater:ASHPType           = {  Model:HPWH_ASHPType  }
END
;*************************************************************************
RULELIST "GenerateModel_DHWHeater_Other" 1 0 1 0
   "Set DHWHeater:HeaterElementType"   DHWHeater:HeaterElementType  = {  Model:DHWHeaterType  }
   "Set DHWHeater:TankType"            DHWHeater:TankType           = {  Model:DHWHeaterTankType  }
   "Set DHWHeater:EnergyFactor"        DHWHeater:EnergyFactor       = {  Model:DHWEnergyFactor  }
   "Set DHWHeater:TankVolume"          DHWHeater:TankVolume         = {  Model:DHWTankVolume  }
END
;*************************************************************************


;*************************************************************************
RULELIST "ForceReset_Model_DistribType" 1 0 0 0
   "Reset Model:DistribType"     Model:DistribType  = {  UNDEFINED  }
END
;*************************************************************************
RULELIST "ForceReset_Model_CentralDHW" 1 0 0 0
   "Reset Model:CentralDHW"      Model:CentralDHW   = {  UNDEFINED  }
END
;*************************************************************************



;*************************************************************************
;*************************************************************************

ENDFILE














