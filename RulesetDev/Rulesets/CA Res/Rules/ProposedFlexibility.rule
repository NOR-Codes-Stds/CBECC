; -------------------------------------------------------------------------
; Rules pertaining to:   Proposed Flexibility model defaulting and sim setup
; CEC Title-24 Residential Energy Code
; -------------------------------------------------------------------------
; Copyright (c) 2012-2017, California Energy Commission
; Copyright (c) 2012-2017, Wrightsoft Corporation
; All rights reserved.
; Redistribution and use in source and binary forms, with or without modification,
; are permitted provided that the following conditions are met:
; - Redistributions of source code must retain the above copyright notice, this
;   list of conditions and the following disclaimer.
; - Redistributions in binary form must reproduce the above copyright notice, this
;   list of conditions, the following disclaimer in the documentation and/or other
;   materials provided with the distribution.
; - Neither the name of the California Energy Commission nor the names of its
;   contributors may be used to endorse or promote products derived from this
;   software without specific prior written permission.
; DISCLAIMER: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
; THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
; NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION,
; WRIGHTSOFT CORPORATION, ITRON, INC. OR ANY OTHER AUTHOR OR COPYRIGHT HOLDER OF
; THIS SOFTWARE (COLLECTIVELY, THE "AUTHORS") BE LIABLE FOR ANY DIRECT, INDIRECT,
; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
; OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
; OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  EACH LICENSEE AND SUBLICENSEE OF THE
; SOFTWARE AGREES NOT TO ASSERT ANY CLAIM AGAINST ANY OF THE AUTHORS RELATING TO
; THIS SOFTWARE, WHETHER DUE TO PERFORMANCE ISSUES, TITLE OR INFRINGEMENT ISSUES,
; STRICT LIABILITY OR OTHERWISE.
; -------------------------------------------------------------------------


;*************************************************************************
RULELIST "Default_ProposedFlexibility" 0 0 0 0
;*************************************************************************

   ; set flag to perform PropFlex (proposed flexibility) run only if pre-cooling activated - SAC 8/3/17
   "Toggle ON Proj:PropFlexRunReqd"    Proj:PropFlexRunReqd  = {
         if (EnergyCodeYearNum >= 2019 .AND. IfValidAnd( UsePreCooling > 0 ) .AND.
             IfValidAnd( PreCl_DataValid > 0 )) then  1
         else  UNDEFINED  endif  }
END
;*************************************************************************

;*************************************************************************
RULELIST "SetupRun_ProposedFlexibility" 1 0 1 0
;*************************************************************************

;	"Set Proj:RunAbbrev"				Proj:RunAbbrev				= {	if (AllOrientations < 0.5) then	"pfx"   - now set in compliance engine source - SAC 8/4/17
;																					else	switch (RunNumber)
;																								case  6 :	"pfx-N"
;																								case  7 :	"pfx-E"
;																								case  8 :	"pfx-S"
;																								case  9 :	"pfx-W"
;																								default :	"pfx-x"
;																							endswitch  endif  }
   "Set Proj:IsStdRun"        Proj:IsStdRun      = {  0  }     ; SAC 07/18/23 (2025)
   "Set Proj:IsStdOrSMFRun"   Proj:IsStdOrSMFRun = {  0  } 
	"Set Proj:RunID"					Proj:RunID					= {	switch (RunAbbrev)
	                                                               case "pfx"   :  "PropFlex"
	                                                               case "pfx-N" :  "PropFlex-N"
	                                                               case "pfx-E" :  "PropFlex-E"
	                                                               case "pfx-S" :  "PropFlex-S"
	                                                               case "pfx-W" :  "PropFlex-W"
																						default      :  "PropFlex-x"
																					endswitch  }
	"Set Proj:RunIDProcFile"		Proj:RunIDProcFile		= {	switch (RunAbbrev)
	                                                               case "pfx"   :  " - PFx"
	                                                               case "pfx-N" :  " - PFx-N"
	                                                               case "pfx-E" :  " - PFx-E"
	                                                               case "pfx-S" :  " - PFx-S"
	                                                               case "pfx-W" :  " - PFx-W"
																						default      :  " - PFx-x"
																					endswitch  }

	"Set Proj:FrontOrientation"	Proj:FrontOrientation	= {	if (AllOrientations < 0.5) then	UNCHANGED
																					else	switch (RunAbbrev)
																								case  "pfx-N" :	  0
																								case  "pfx-E" :	 90
																								case  "pfx-S" :	180
																								case  "pfx-W" :	270
																								default :	UNCHANGED
																							endswitch  endif  }
	"Set Proj:OrientAbbrev"			Proj:OrientAbbrev			= {	if (AllOrientations < 0.5) then	UNDEFINED
																					else	switch (RunAbbrev)
																								case  "pfx-N" :	"N"
																								case  "pfx-E" :	"E"
																								case  "pfx-S" :	"S"
																								case  "pfx-W" :	"W"
																								default :	UNDEFINED
																							endswitch  endif  }
	"Set Proj:OrientName"			Proj:OrientName			= {	if (AllOrientations < 0.5) then	UNDEFINED
																					else	switch (RunAbbrev)
																								case  "pfx-N" :	"North"
																								case  "pfx-E" :	"East"
																								case  "pfx-S" :	"South"
																								case  "pfx-W" :	"West"
																								default :	UNDEFINED
																							endswitch  endif  }

;   ; replace A2W-HP Heating equipment assigned to DHWSystems w/ Gas DHWHeaters
;   "Replace DHWSys assignments to A2W-HP Htg equip w/ Gas DHWHeaters"      Proj:Action  = {
;         if (IsMultiFamily = 0 .AND. SumAll( HVACSys:DHWFloorAreaServed ) > 0.1)
;         then  EvalRulelist( "SetupRun_ReplaceA2WHPDHWHtrWithGas_SFam" )
;         else  UNCHANGED  endif  }
;   "Replace DwellUnitType A2W-HP Htg equip doing DHW w/ Gas DHWHeaters"    DwellUnitType:Action  = {
;         if (Proj:IsMultiFamily .AND. IfValidAnd( HVACSysType > 0.5 ) .AND.
;             IfValidAnd( HtEqpCanBeDHWHtr > 0 ) .AND. IfValidAnd( ServesAsDHWHtr > 0 ))
;         then  EvalRulelist( "SetupRun_ReplaceA2WHPDHWHtrWithGas_MFam", 1 )
;         else  UNCHANGED  endif  }
;
;   ; replace Elec Heating equipment w/ Gas Furnace
;   "Convert Elec HVACSys Htg to Gas Furnace - SFam"      HVACSys:Action  = {
;         if (Proj:IsMultiFamily .OR. HaveHeating < 0.5 .OR. Type == 2 .OR.
;             FloorAreaServed[1] < 1 .OR. LocalStatus( HeatSysTypeAbbrev ) < 1) then  UNCHANGED
;         else if (T24RHeatingEquipment:UseElec( "CodeBase", Proj:StdDesignBase, "StdVer", Proj:StandardsVersion, "SysType", HeatSysTypeAbbrev ) < 0.5)
;         then  UNCHANGED
;         else  EvalRulelist( "SetupRun_ConvertHVACSysHtgToGasFurn_SFam", 1 )  endif endif  }
;   "Convert Elec HVACSys Htg to Gas Furnace - MFam"      DwellUnitType:Action  = {
;         if (Proj:IsMultiFamily = 0 .OR. HVACSysType == 2 .OR. IfValidAnd( NumHeatEquipTypes >= 1 )==0 .OR.
;             AssignedDUFlrArea < 1 .OR. LocalStatus( HeatEqpTypeAbbrev ) < 1) then  UNCHANGED
;         else if (T24RHeatingEquipment:UseElec( "CodeBase", Proj:StdDesignBase, "StdVer", Proj:StandardsVersion, "SysType", HeatEqpTypeAbbrev ) < 0.5)
;         then  UNCHANGED
;         else  EvalRulelist( "SetupRun_ConvertHVACSysHtgToGasFurn_MFam", 1 )  endif endif  }
;
;   ; replace Heat Pump HVAC system(s) with A/C-Furnace
;   "Convert HtPump HVACSys to A/C-Furnace - SFam"   HVACSys:Action  = {
;         if (Proj:IsMultiFamily .OR. HaveHeating < 0.5 .OR. Type != 2 .OR. FloorAreaServed[1] < 1) then  UNCHANGED
;         else  EvalRulelist( "SetupRun_ConvertHtPumpHVACSysToACFurn_SFam", 1 )  endif  }
;   "Convert HtPump HVACSys to A/C-Furnace - MFam"   DwellUnitType:Action  = {
;         if (Proj:IsMultiFamily = 0 .OR. HVACSysType != 2 .OR. AssignedDUFlrArea < 1) then  UNCHANGED
;         else  EvalRulelist( "SetupRun_ConvertHtPumpHVACSysToACFurn_MFam", 1 )  endif  }
;
;   ; replace Gas Cooling equipment w/ Split A/C
;
;	"Evaluate HVAC defaulting rules"	Proj:Action	= {	EvalRulelist( "Default_AllHVAC" )  }
;
;   ; switch Electric DHW Heaters to Gas
;   "Convert Elec DHWHeaters to Gas"    DHWHeater:Action  = {
;         if (IfValidAnd( FloorAreaServed > 1 )==0 .OR. HeaterElementType == 1) then  UNCHANGED
;         else if (HeaterElementType == 0 .AND. TankType == 2)     ; Elec - large inst.
;         then  EvalRulelist( "SetupRun_ConvertDHWHtrToGasLrgInst", 1 )
;         else if (HeaterElementType == 0 .AND. TankType == 3)     ; Elec - large stor.
;         then  EvalRulelist( "SetupRun_ConvertDHWHtrToGasLrgStor", 1 )
;         else  EvalRulelist( "SetupRun_ConvertDHWHtrToGas", 1 )  endif endif endif  }
;   "Remove DHWHeater ElecMiniTank"     DHWHeater:HasElecMiniTank  = {
;         if (IfValidAnd( AllowElecMiniTank > 0 ) .AND.
;             IfValidAnd( AllowElecMiniTank > 0 ))
;         then  0  else  UNCHANGED  endif  }
;
;   ; switch Cooking Fuel from Electric to Gas
;   "Switch SFam Cooking Fuel from Elec to Gas"     Proj:ApplCookFuel[1]  = {
;         if (IsMultiFamily = 0 .AND. Appl_HaveCook[1] .AND. ApplCookFuel[1] = 1)
;         then  2   ; Gas
;         else  UNCHANGED  endif  }
;   "Switch MFam Cooking Fuel from Elec to Gas"     DwellUnitType:CookFuel  = {
;         if (Proj:IsMultiFamily = 0 .OR. IfValidAnd( AssignedDUFlrArea > 1 )==0 .OR.
;             IfValidAnd( HaveCook > 0 )==0) then  UNCHANGED
;         else if (CookFuel = 1)
;         then  2   ; Gas
;         else  UNCHANGED  endif endif  }
;
;   ; switch Clothes Dryer Fuel from Electric to Gas
;   "Switch SFam Clothes Dryer Fuel from Elec to Gas"     Proj:ApplDryerFuel[1]  = {
;         if (IsMultiFamily = 0 .AND. Appl_HaveDryer[1] .AND. ApplDryerFuel[1] = 1)
;         then  2   ; Gas
;         else  UNCHANGED  endif  }
;   "Switch MFam Clothes Dryer Fuel from Elec to Gas"     DwellUnitType:DryerFuel  = {
;         if (Proj:IsMultiFamily = 0 .OR. IfValidAnd( AssignedDUFlrArea > 1 )==0 .OR.
;             IfValidAnd( HaveDryer > 0 )==0) then  UNCHANGED
;         else if (DryerFuel = 1)
;         then  2   ; Gas
;         else  UNCHANGED  endif endif  }
;
;   ; toggle off Battery and setup generic, 1 kW PV system
;   "Zero-out Battery (Proj:BattMaxCap)"   Proj:BattMaxCap  = {  0  }
;   "Set Proj:PVWInputs to Simplified"     Proj:PVWInputs   = {  0  }   ; "Simplified"
;   "Set Proj:PVWDCSysSize[1] to 1.0"      Proj:PVWDCSysSize[1]   = {  1  }
;   "Set Proj:PVWModuleType[1] to Std"     Proj:PVWModuleType[1]  = {  1  }   ; "Standard"
;   "Toggle on CFI (Proj:PVWCalFlexInstall[1])"  Proj:PVWCalFlexInstall[1]  = {  1  }
;   "Blast Proj:PVWDCSysSize[2]"           Proj:PVWDCSysSize[2]   = {  UNDEFINED  }
;   "Blast Proj:PVWDCSysSize[3]"           Proj:PVWDCSysSize[3]   = {  UNDEFINED  }
;   "Blast Proj:PVWDCSysSize[4]"           Proj:PVWDCSysSize[4]   = {  UNDEFINED  }
;   "Blast Proj:PVWDCSysSize[5]"           Proj:PVWDCSysSize[5]   = {  UNDEFINED  }

END
;*************************************************************************



;*************************************************************************
;*************************************************************************

ENDFILE














