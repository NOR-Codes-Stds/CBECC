; -------------------------------------------------------------------------
; Rules pertaining to:   Prep For and Clean-up After each CSE Energy Simulation
; CEC Title-24 Residential Energy Code
; -------------------------------------------------------------------------
; Copyright (c) 2012-2016, California Energy Commission
; Copyright (c) 2012-2016, Wrightsoft Corporation
; All rights reserved.
; Redistribution and use in source and binary forms, with or without modification,
; are permitted provided that the following conditions are met:
; - Redistributions of source code must retain the above copyright notice, this
;   list of conditions and the following disclaimer.
; - Redistributions in binary form must reproduce the above copyright notice, this
;   list of conditions, the following disclaimer in the documentation and/or other
;   materials provided with the distribution.
; - Neither the name of the California Energy Commission nor the names of its
;   contributors may be used to endorse or promote products derived from this
;   software without specific prior written permission.
; DISCLAIMER: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
; THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
; NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION,
; WRIGHTSOFT CORPORATION, ITRON, INC. OR ANY OTHER AUTHOR OR COPYRIGHT HOLDER OF
; THIS SOFTWARE (COLLECTIVELY, THE "AUTHORS") BE LIABLE FOR ANY DIRECT, INDIRECT,
; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
; OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
; OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  EACH LICENSEE AND SUBLICENSEE OF THE
; SOFTWARE AGREES NOT TO ASSERT ANY CLAIM AGAINST ANY OF THE AUTHORS RELATING TO
; THIS SOFTWARE, WHETHER DUE TO PERFORMANCE ISSUES, TITLE OR INFRINGEMENT ISSUES,
; STRICT LIABILITY OR OTHERWISE.
; -------------------------------------------------------------------------


;*************************************************************************
RULELIST "CSE_SimulationPrep_PV" 1 0 0 1
;   Rules which are executed immediately prior to performing a CSE simulation - covering PVARRAY objects only
;*************************************************************************

  ; SAC 3/4/17 - add call to rulelist that creates a PVArray PolyLp based on user inputs
   "Create PolyLp representing PVArray #1"   Proj:Action = {
         if (IfValidAnd( PVWDCSysSize[1] > 0 ) .AND. Proj:PVWGeomSpecMethod[1] == 0 .AND.
             IfValidAnd( Proj:PVWLocSpecified[1] > 0 ))
         then  EvalRulelist( "Create_PVArrayPolyLp_1" )
         else  UNCHANGED  endif  }
   "Create PolyLp representing PVArray #2"   Proj:Action = {
         if (IfValidAnd( PVWDCSysSize[2] > 0 ) .AND. Proj:PVWGeomSpecMethod[2] == 0 .AND.
             IfValidAnd( Proj:PVWLocSpecified[2] > 0 ) .AND. PVWInputs > 0)
         then  EvalRulelist( "Create_PVArrayPolyLp_2" )
         else  UNCHANGED  endif  }
   "Create PolyLp representing PVArray #3"   Proj:Action = {
         if (IfValidAnd( PVWDCSysSize[3] > 0 ) .AND. Proj:PVWGeomSpecMethod[3] == 0 .AND.
             IfValidAnd( Proj:PVWLocSpecified[3] > 0 ))
         then  EvalRulelist( "Create_PVArrayPolyLp_3" )
         else  UNCHANGED  endif  }
   "Create PolyLp representing PVArray #4"   Proj:Action = {
         if (IfValidAnd( PVWDCSysSize[4] > 0 ) .AND. Proj:PVWGeomSpecMethod[4] == 0 .AND.
             IfValidAnd( Proj:PVWLocSpecified[4] > 0 ))
         then  EvalRulelist( "Create_PVArrayPolyLp_4" )
         else  UNCHANGED  endif  }
   "Create PolyLp representing PVArray #5"   Proj:Action = {
         if (IfValidAnd( PVWDCSysSize[5] > 0 ) .AND. Proj:PVWGeomSpecMethod[5] == 0 .AND.
             IfValidAnd( Proj:PVWLocSpecified[5] > 0 ))
         then  EvalRulelist( "Create_PVArrayPolyLp_5" )
         else  UNCHANGED  endif  }

   ; setup Proj:CSE_CFIPVSizeDiv[*], a divisor on CSE's PVARRAY:pvDCSysSize due to CFI selection - SAC 1/20/20 (tic #1189)
   "Set Proj:CSE_CFIPVSizeDiv[1] (CFI-related pvDCSysSize divisor)"     Proj:CSE_CFIPVSizeDiv[1]  =
      {  if (IfValidAnd( PVWDCSysSize[1] > 0 ) == 0 .OR. IfValidAnd( PVWDCSizeMultiplier[1] = 0 ) .OR.
             IfValidAnd( PVWAzm[1] >= 0 )==0 .OR. IfValidAnd( PVWAzm[1] <= 360 )==0 .OR.
             IfValidAnd( PVWArrayTiltDeg[1] >= 0 )==0 .OR. IfValidAnd( PVWArrayTiltDeg[1] <= 90 )==0) then  UNDEFINED
         else if (IfValidAnd( PVWCalFlexInstall[1] = 2 )) then  1.1
         else  1.0  endif endif  }
   "Set Proj:CSE_CFIPVSizeDiv[2] (CFI-related pvDCSysSize divisor)"     Proj:CSE_CFIPVSizeDiv[2]  =
      {  if (IfValidAnd( PVWDCSysSize[2] > 0 ) == 0 .OR. PVWInputs < 1 .OR. IfValidAnd( PVWDCSizeMultiplier[1] = 0 ) .OR.
             IfValidAnd( PVWAzm[2] >= 0 )==0 .OR. IfValidAnd( PVWAzm[2] <= 360 )==0 .OR.
             IfValidAnd( PVWArrayTiltDeg[2] >= 0 )==0 .OR. IfValidAnd( PVWArrayTiltDeg[2] <= 90 )==0) then  UNDEFINED
         else if (IfValidAnd( PVWCalFlexInstall[2] = 2 )) then  1.1
         else  1.0  endif endif  }
   "Set Proj:CSE_CFIPVSizeDiv[3] (CFI-related pvDCSysSize divisor)"     Proj:CSE_CFIPVSizeDiv[3]  =
      {  if (IfValidAnd( PVWDCSysSize[3] > 0 ) == 0 .OR. PVWInputs < 1 .OR. IfValidAnd( PVWDCSizeMultiplier[1] = 0 ) .OR.
             IfValidAnd( PVWAzm[3] >= 0 )==0 .OR. IfValidAnd( PVWAzm[3] <= 360 )==0 .OR.
             IfValidAnd( PVWArrayTiltDeg[3] >= 0 )==0 .OR. IfValidAnd( PVWArrayTiltDeg[3] <= 90 )==0) then  UNDEFINED
         else if (IfValidAnd( PVWCalFlexInstall[3] = 2 )) then  1.1
         else  1.0  endif endif  }
   "Set Proj:CSE_CFIPVSizeDiv[4] (CFI-related pvDCSysSize divisor)"     Proj:CSE_CFIPVSizeDiv[4]  =
      {  if (IfValidAnd( PVWDCSysSize[4] > 0 ) == 0 .OR. PVWInputs < 1 .OR. IfValidAnd( PVWDCSizeMultiplier[1] = 0 ) .OR.
             IfValidAnd( PVWAzm[4] >= 0 )==0 .OR. IfValidAnd( PVWAzm[4] <= 360 )==0 .OR.
             IfValidAnd( PVWArrayTiltDeg[4] >= 0 )==0 .OR. IfValidAnd( PVWArrayTiltDeg[4] <= 90 )==0) then  UNDEFINED
         else if (IfValidAnd( PVWCalFlexInstall[4] = 2 )) then  1.1
         else  1.0  endif endif  }
   "Set Proj:CSE_CFIPVSizeDiv[5] (CFI-related pvDCSysSize divisor)"     Proj:CSE_CFIPVSizeDiv[5]  =
      {  if (IfValidAnd( PVWDCSysSize[5] > 0 ) == 0 .OR. PVWInputs < 1 .OR. IfValidAnd( PVWDCSizeMultiplier[1] = 0 ) .OR.
             IfValidAnd( PVWAzm[5] >= 0 )==0 .OR. IfValidAnd( PVWAzm[5] <= 360 )==0 .OR.
             IfValidAnd( PVWArrayTiltDeg[5] >= 0 )==0 .OR. IfValidAnd( PVWArrayTiltDeg[5] <= 90 )==0) then  UNDEFINED
         else if (IfValidAnd( PVWCalFlexInstall[5] = 2 )) then  1.1
         else  1.0  endif endif  }

   ; SAC 2/7/18 - revised to prevent output of PVArrays when PV scaled to 0 (possibly due to reduced PV requirement of 0kW) (tic #974)
   "Create PVARRAY #1 (when called for)"      Proj:Action   = {
         if (IfValidAnd( PVWDCSysSize[1] > 0 ) == 0 .OR. IfValidAnd( PVWDCSizeMultiplier[1] = 0 ) .OR.
             IfValidAnd( PVWAzm[1] >= 0 )==0 .OR. IfValidAnd( PVWAzm[1] <= 360 )==0 .OR.
             IfValidAnd( PVWArrayTiltDeg[1] >= 0 )==0 .OR. IfValidAnd( PVWArrayTiltDeg[1] <= 90 )==0) then  UNCHANGED
         else   CreateComp( csePVARRAY, "pvarray 1", "CreateCSE_PVArray_1" )  endif  }
   "Create PVARRAY #2 (when called for)"      Proj:Action   = {
         if (IfValidAnd( PVWDCSysSize[2] > 0 ) == 0 .OR. PVWInputs < 1 .OR. IfValidAnd( PVWDCSizeMultiplier[1] = 0 ) .OR.
             IfValidAnd( PVWAzm[2] >= 0 )==0 .OR. IfValidAnd( PVWAzm[2] <= 360 )==0 .OR.
             IfValidAnd( PVWArrayTiltDeg[2] >= 0 )==0 .OR. IfValidAnd( PVWArrayTiltDeg[2] <= 90 )==0) then  UNCHANGED
         else   CreateComp( csePVARRAY, "pvarray 2", "CreateCSE_PVArray_2" )  endif  }
   "Create PVARRAY #3 (when called for)"      Proj:Action   = {
         if (IfValidAnd( PVWDCSysSize[3] > 0 ) == 0 .OR. PVWInputs < 1 .OR. IfValidAnd( PVWDCSizeMultiplier[1] = 0 ) .OR.
             IfValidAnd( PVWAzm[3] >= 0 )==0 .OR. IfValidAnd( PVWAzm[3] <= 360 )==0 .OR.
             IfValidAnd( PVWArrayTiltDeg[3] >= 0 )==0 .OR. IfValidAnd( PVWArrayTiltDeg[3] <= 90 )==0) then  UNCHANGED
         else   CreateComp( csePVARRAY, "pvarray 3", "CreateCSE_PVArray_3" )  endif  }
   "Create PVARRAY #4 (when called for)"      Proj:Action   = {
         if (IfValidAnd( PVWDCSysSize[4] > 0 ) == 0 .OR. PVWInputs < 1 .OR. IfValidAnd( PVWDCSizeMultiplier[1] = 0 ) .OR.
             IfValidAnd( PVWAzm[4] >= 0 )==0 .OR. IfValidAnd( PVWAzm[4] <= 360 )==0 .OR.
             IfValidAnd( PVWArrayTiltDeg[4] >= 0 )==0 .OR. IfValidAnd( PVWArrayTiltDeg[4] <= 90 )==0) then  UNCHANGED
         else   CreateComp( csePVARRAY, "pvarray 4", "CreateCSE_PVArray_4" )  endif  }
   "Create PVARRAY #5 (when called for)"      Proj:Action   = {
         if (IfValidAnd( PVWDCSysSize[5] > 0 ) == 0 .OR. PVWInputs < 1 .OR. IfValidAnd( PVWDCSizeMultiplier[1] = 0 ) .OR.
             IfValidAnd( PVWAzm[5] >= 0 )==0 .OR. IfValidAnd( PVWAzm[5] <= 360 )==0 .OR.
             IfValidAnd( PVWArrayTiltDeg[5] >= 0 )==0 .OR. IfValidAnd( PVWArrayTiltDeg[5] <= 90 )==0) then  UNCHANGED
         else   CreateComp( csePVARRAY, "pvarray 5", "CreateCSE_PVArray_5" )  endif  }
END
;*************************************************************************


; SAC 4/11/17 - added references to new Proj:PVWDCSizeMultiplier property 
;*************************************************************************
RULELIST "CreateCSE_PVArray_1" 1 0 0 0
   "Set csePVARRAY:pvDCSysSize"      csePVARRAY:pvDCSysSize      = {   Proj:PVWDCSysSize[1] * ValidOr( Proj:PVWDCSizeMultiplier[1], 1 ) / ValidOr( Proj:CSE_CFIPVSizeDiv[1], 1 )  }         ; already checked before PVARRAY created
   "Set csePVARRAY:pvModuleType"      csePVARRAY:pvModuleType      =       ; SAC 4/20/20 - mods to use 'Custom' when PVWTempCoeff and EnableResearchMode activated   ; SAC 6/10/20 (CommunitySolar)
      {  if ( IfValidAnd( Proj:PVWModuleType[1] < 4 ) .AND. IfValidAnd( Proj:PVWTempCoeff[1] > -100 ) .AND.
              (IfValidAnd( Proj:EnableResearchMode > 0 ) .OR. IfValidAnd( Proj:CommunitySolarProjID > 0 )) )
         then  "Custom"
         else if (IfValidAnd( Proj:PVWModuleType[1] > 0 ) .AND. IfValidAnd( Proj:PVWModuleType[1] < 5 ))
         then  Proj:PVWModuleType[1]  else  UNDEFINED  endif endif  }
   "Set csePVARRAY:pvArrayType"      csePVARRAY:pvArrayType      = {   if (IfValidAnd( Proj:PVWArrayType[1] > 0 ) .AND. IfValidAnd( Proj:PVWArrayType[1] < 6 ))
                                                                     then   Proj:PVWArrayType[1]  else  UNDEFINED  endif  }

  ; SAC 2/24/17 - rules to specify PVARRAY geometry via PolyLp objects (in place of Azm/Tilt)
  ; SAC 10/9/18 - mods preventing output of pvVertices for any tracking arrays and also pvTilt/pvAzm for two-axis tracking arrays (tic #1047)
   "Set csePVARRAY:pvVertices"      csePVARRAY:pvVertices      = {
         if ( pvArrayType < 3 .AND.
              (Proj:PVWGeomSpecMethod[1] == 1 .OR. IfValidAnd( Proj:PVWLocSpecified[1] > 0 )) .AND.
              GlobalCompAssigned( Proj:PVWGeomPolyLpRef[1] ) )
         then  Proj:PVWGeomPolyLpRef[1]
         else  UNDEFINED  endif  }
   "Set csePVARRAY:pvTilt"          csePVARRAY:pvTilt          = { 
         if ( pvArrayType > 4 .OR.
              ( (Proj:PVWGeomSpecMethod[1] == 1 .OR. IfValidAnd( Proj:PVWLocSpecified[1] > 0 )) .AND.
                GlobalCompAssigned( Proj:PVWGeomPolyLpRef[1] ) .AND. pvArrayType < 3 ))
         then  UNDEFINED
         else  Proj:PVWArrayTiltDeg[1]  endif  }
   "Set csePVARRAY:pvAzm"           csePVARRAY:pvAzm           = { 
         if ( pvArrayType > 4 .OR.
              ( (Proj:PVWGeomSpecMethod[1] == 1 .OR. IfValidAnd( Proj:PVWLocSpecified[1] > 0 )) .AND.
                GlobalCompAssigned( Proj:PVWGeomPolyLpRef[1] ) .AND. pvArrayType < 3 ))
         then  UNDEFINED
         else  Proj:PVWAzm[1]  endif  }

;   "Set csePVARRAY:pvGrndRefl"      csePVARRAY:pvGrndRefl      = {   
   "Set csePVARRAY:pvGCR"            csePVARRAY:pvGCR            = {   if (IfValidAnd( Proj:PVWGCR[1]         >= 0 )) then  Proj:PVWGCR[1]                else  UNDEFINED  endif  }
   "Set csePVARRAY:pvDCtoACRatio"   csePVARRAY:pvDCtoACRatio   = {   if (IfValidAnd( Proj:PVWDCtoACRatio[1] >  0 )) then  Proj:PVWDCtoACRatio[1]        else  UNDEFINED  endif  }
   "Set csePVARRAY:pvInverterEff"   csePVARRAY:pvInverterEff   = {   if (IfValidAnd( Proj:PVWInverterEff[1] >  0 )) then  Proj:PVWInverterEff[1] * ValidOr( Proj:PVWPwrElecEffAdj[1], 1 ) / 100  else  UNDEFINED  endif  }  ; SAC 1/15/19 - added PVWPwrElecEffAdj (tic #1046)
   "Set csePVARRAY:pvSIF"           csePVARRAY:pvSIF           = {   if (IfValidAnd( Proj:PVWShdgImpactFac[1] >  0 ) .AND. Proj:EnergyCodeYearNum >= 2019) then  Proj:PVWShdgImpactFac[1]  else  UNDEFINED  endif  }  ; SAC 1/15/19 (tic #1046)  / SAC 2/28/19 - prevent output to CSE for PRE-2019 analysis (property not in CSE.exe)
   "Set csePVARRAY:pvSysLosses"      csePVARRAY:pvSysLosses      = {   if (IfValidAnd( Proj:PVWSysLosses[1]   >  0 )) then  Proj:PVWSysLosses[1]   / 100  else  UNDEFINED  endif  }
   "Set csePVARRAY:pvCoverRefrInd"   csePVARRAY:pvCoverRefrInd   =         ; SAC 4/20/20 - mods to use specify CSE module type default when pvModuleType = 'Custom' and EnableResearchMode activated
      {  if (IfValidAnd( Proj:PVWCoverRefrInd[1] >= 1 ) .AND. IfValidAnd( Proj:PVWModuleType[1] = 4 ))
         then  Proj:PVWCoverRefrInd[1]
         else if (IfValidAnd( pvModuleType = 4 ) .AND. IfValidAnd( Proj:PVWModuleType[1] < 4 ))
         then  switch (Proj:PVWModuleType[1])
                  case  2 :  1.3   ; Premium
                  default :  1.0   ; all others
               endswitch
         else  UNDEFINED  endif endif  }
   "Set csePVARRAY:pvTempCoeff"      csePVARRAY:pvTempCoeff      =         ; SAC 6/10/20 (CommunitySolar)
      {  if ( IfValidAnd( Proj:PVWTempCoeff[1]  > -100 ) .AND.
              (IfValidAnd( Proj:PVWModuleType[1] = 4 ) .OR. IfValidAnd( Proj:EnableResearchMode > 0 ) .OR. IfValidAnd( Proj:CommunitySolarProjID > 0 )) )
         then  Proj:PVWTempCoeff[1]      else  UNDEFINED  endif  }

   "Set csePVARRAY:pvUsePVWatts"      csePVARRAY:pvUsePVWatts      = {   if (IfValidAnd( Proj:UsePVWattsDLL     >  0 )) then  "Yes"  else  UNDEFINED  endif  }

   "Set csePVARRAY:pvElecMtr"         csePVARRAY:pvElecMtr         = {   if (Proj:Fuel_HaveElec > 0.5 .AND. GlobalCompAssigned( Proj:CSE_ElecMETER ))
                                                                     then  Proj:CSE_ElecMETER  else  UNDEFINED  endif  }
;   "Set csePVARRAY:pvEndUse"         csePVARRAY:pvEndUse         = {   
END
;*************************************************************************
RULELIST "CreateCSE_PVArray_2" 1 0 0 0
   "Set csePVARRAY:pvDCSysSize"      csePVARRAY:pvDCSysSize      = {   Proj:PVWDCSysSize[2] * ValidOr( Proj:PVWDCSizeMultiplier[1], 1 ) / ValidOr( Proj:CSE_CFIPVSizeDiv[2], 1 )  }         ; already checked before PVARRAY created
   "Set csePVARRAY:pvModuleType"      csePVARRAY:pvModuleType      =       ; SAC 4/20/20 - mods to use 'Custom' when PVWTempCoeff and EnableResearchMode activated
      {  if (IfValidAnd( Proj:PVWModuleType[2] < 4 ) .AND. IfValidAnd( Proj:EnableResearchMode > 0 ) .AND. IfValidAnd( Proj:PVWTempCoeff[2] > -100 ))
         then  "Custom"
         else if (IfValidAnd( Proj:PVWModuleType[2] > 0 ) .AND. IfValidAnd( Proj:PVWModuleType[2] < 5 ))
         then  Proj:PVWModuleType[2]  else  UNDEFINED  endif endif  }
   "Set csePVARRAY:pvArrayType"      csePVARRAY:pvArrayType      = {   if (IfValidAnd( Proj:PVWArrayType[2] > 0 ) .AND. IfValidAnd( Proj:PVWArrayType[2] < 6 ))
                                                                     then   Proj:PVWArrayType[2]  else  UNDEFINED  endif  }

  ; SAC 2/24/17 - rules to specify PVARRAY geometry via PolyLp objects (in place of Azm/Tilt)
  ; SAC 10/9/18 - mods preventing output of pvVertices for any tracking arrays and also pvTilt/pvAzm for two-axis tracking arrays (tic #1047)
   "Set csePVARRAY:pvVertices"      csePVARRAY:pvVertices      = {
         if ( pvArrayType < 3 .AND.
              (Proj:PVWGeomSpecMethod[2] == 1 .OR. IfValidAnd( Proj:PVWLocSpecified[2] > 0 )) .AND.
              GlobalCompAssigned( Proj:PVWGeomPolyLpRef[2] ) )
         then  Proj:PVWGeomPolyLpRef[2]
         else  UNDEFINED  endif  }
   "Set csePVARRAY:pvTilt"          csePVARRAY:pvTilt          = { 
         if ( pvArrayType > 4 .OR.
              ( (Proj:PVWGeomSpecMethod[2] == 1 .OR. IfValidAnd( Proj:PVWLocSpecified[2] > 0 )) .AND.
                GlobalCompAssigned( Proj:PVWGeomPolyLpRef[2] ) .AND. pvArrayType < 3 ))
         then  UNDEFINED
         else  Proj:PVWArrayTiltDeg[2]  endif  }
   "Set csePVARRAY:pvAzm"           csePVARRAY:pvAzm           = { 
         if ( pvArrayType > 4 .OR.
              ( (Proj:PVWGeomSpecMethod[2] == 1 .OR. IfValidAnd( Proj:PVWLocSpecified[2] > 0 )) .AND.
                GlobalCompAssigned( Proj:PVWGeomPolyLpRef[2] ) .AND. pvArrayType < 3 ))
         then  UNDEFINED
         else  Proj:PVWAzm[2]  endif  }

;   "Set csePVARRAY:pvGrndRefl"      csePVARRAY:pvGrndRefl      = {   
   "Set csePVARRAY:pvGCR"            csePVARRAY:pvGCR            = {   if (IfValidAnd( Proj:PVWGCR[2]         >= 0 )) then  Proj:PVWGCR[2]                else  UNDEFINED  endif  }
   "Set csePVARRAY:pvDCtoACRatio"   csePVARRAY:pvDCtoACRatio   = {   if (IfValidAnd( Proj:PVWDCtoACRatio[2] >  0 )) then  Proj:PVWDCtoACRatio[2]        else  UNDEFINED  endif  }
   "Set csePVARRAY:pvInverterEff"   csePVARRAY:pvInverterEff   = {   if (IfValidAnd( Proj:PVWInverterEff[2] >  0 )) then  Proj:PVWInverterEff[2] * ValidOr( Proj:PVWPwrElecEffAdj[2], 1 ) / 100  else  UNDEFINED  endif  }  ; SAC 1/15/19 - added PVWPwrElecEffAdj (tic #1046)
   "Set csePVARRAY:pvSIF"           csePVARRAY:pvSIF           = {   if (IfValidAnd( Proj:PVWShdgImpactFac[2] >  0 ) .AND. Proj:EnergyCodeYearNum >= 2019) then  Proj:PVWShdgImpactFac[2]  else  UNDEFINED  endif  }  ; SAC 1/15/19 (tic #1046)  / SAC 2/28/19 - prevent output to CSE for PRE-2019 analysis (property not in CSE.exe)
   "Set csePVARRAY:pvSysLosses"      csePVARRAY:pvSysLosses      = {   if (IfValidAnd( Proj:PVWSysLosses[2]   >  0 )) then  Proj:PVWSysLosses[2]   / 100  else  UNDEFINED  endif  }
   "Set csePVARRAY:pvCoverRefrInd"   csePVARRAY:pvCoverRefrInd   =         ; SAC 4/20/20 - mods to use specify CSE module type default when pvModuleType = 'Custom' and EnableResearchMode activated
      {  if (IfValidAnd( Proj:PVWCoverRefrInd[2] >= 1 ) .AND. IfValidAnd( Proj:PVWModuleType[2] = 4 ))
         then  Proj:PVWCoverRefrInd[2]
         else if (IfValidAnd( pvModuleType = 4 ) .AND. IfValidAnd( Proj:PVWModuleType[2] < 4 ))
         then  switch (Proj:PVWModuleType[2])
                  case  2 :  1.3   ; Premium
                  default :  1.0   ; all others
               endswitch
         else  UNDEFINED  endif endif  }
   "Set csePVARRAY:pvTempCoeff"      csePVARRAY:pvTempCoeff      = {   if (IfValidAnd( Proj:PVWTempCoeff[2]  > -100 ) .AND. (IfValidAnd( Proj:PVWModuleType[2] = 4 ) .OR. IfValidAnd( Proj:EnableResearchMode > 0 )))
                                                                     then  Proj:PVWTempCoeff[2]      else  UNDEFINED  endif  }
   "Set csePVARRAY:pvUsePVWatts"      csePVARRAY:pvUsePVWatts      = {   if (IfValidAnd( Proj:UsePVWattsDLL     >  0 )) then  "Yes"  else  UNDEFINED  endif  }

   "Set csePVARRAY:pvElecMtr"         csePVARRAY:pvElecMtr         = {   if (Proj:Fuel_HaveElec > 0.5 .AND. GlobalCompAssigned( Proj:CSE_ElecMETER ))
                                                                     then  Proj:CSE_ElecMETER  else  UNDEFINED  endif  }
;   "Set csePVARRAY:pvEndUse"         csePVARRAY:pvEndUse         = {   
END
;*************************************************************************
RULELIST "CreateCSE_PVArray_3" 1 0 0 0
   "Set csePVARRAY:pvDCSysSize"      csePVARRAY:pvDCSysSize      = {   Proj:PVWDCSysSize[3] * ValidOr( Proj:PVWDCSizeMultiplier[1], 1 ) / ValidOr( Proj:CSE_CFIPVSizeDiv[3], 1 )  }         ; already checked before PVARRAY created
   "Set csePVARRAY:pvModuleType"      csePVARRAY:pvModuleType      =       ; SAC 4/20/20 - mods to use 'Custom' when PVWTempCoeff and EnableResearchMode activated
      {  if (IfValidAnd( Proj:PVWModuleType[3] < 4 ) .AND. IfValidAnd( Proj:EnableResearchMode > 0 ) .AND. IfValidAnd( Proj:PVWTempCoeff[3] > -100 ))
         then  "Custom"
         else if (IfValidAnd( Proj:PVWModuleType[3] > 0 ) .AND. IfValidAnd( Proj:PVWModuleType[3] < 5 ))
         then  Proj:PVWModuleType[3]  else  UNDEFINED  endif endif  }
   "Set csePVARRAY:pvArrayType"      csePVARRAY:pvArrayType      = {   if (IfValidAnd( Proj:PVWArrayType[3] > 0 ) .AND. IfValidAnd( Proj:PVWArrayType[3] < 6 ))
                                                                     then   Proj:PVWArrayType[3]  else  UNDEFINED  endif  }

  ; SAC 2/24/17 - rules to specify PVARRAY geometry via PolyLp objects (in place of Azm/Tilt)
  ; SAC 10/9/18 - mods preventing output of pvVertices for any tracking arrays and also pvTilt/pvAzm for two-axis tracking arrays (tic #1047)
   "Set csePVARRAY:pvVertices"      csePVARRAY:pvVertices      = {
         if ( pvArrayType < 3 .AND.
              (Proj:PVWGeomSpecMethod[3] == 1 .OR. IfValidAnd( Proj:PVWLocSpecified[3] > 0 )) .AND.
              GlobalCompAssigned( Proj:PVWGeomPolyLpRef[3] ) )
         then  Proj:PVWGeomPolyLpRef[3]
         else  UNDEFINED  endif  }
   "Set csePVARRAY:pvTilt"          csePVARRAY:pvTilt          = { 
         if ( pvArrayType > 4 .OR.
              ( (Proj:PVWGeomSpecMethod[3] == 1 .OR. IfValidAnd( Proj:PVWLocSpecified[3] > 0 )) .AND.
                GlobalCompAssigned( Proj:PVWGeomPolyLpRef[3] ) .AND. pvArrayType < 3 ))
         then  UNDEFINED
         else  Proj:PVWArrayTiltDeg[3]  endif  }
   "Set csePVARRAY:pvAzm"           csePVARRAY:pvAzm           = { 
         if ( pvArrayType > 4 .OR.
              ( (Proj:PVWGeomSpecMethod[3] == 1 .OR. IfValidAnd( Proj:PVWLocSpecified[3] > 0 )) .AND.
                GlobalCompAssigned( Proj:PVWGeomPolyLpRef[3] ) .AND. pvArrayType < 3 ))
         then  UNDEFINED
         else  Proj:PVWAzm[3]  endif  }

;   "Set csePVARRAY:pvGrndRefl"      csePVARRAY:pvGrndRefl      = {   
   "Set csePVARRAY:pvGCR"            csePVARRAY:pvGCR            = {   if (IfValidAnd( Proj:PVWGCR[3]         >= 0 )) then  Proj:PVWGCR[3]                else  UNDEFINED  endif  }
   "Set csePVARRAY:pvDCtoACRatio"   csePVARRAY:pvDCtoACRatio   = {   if (IfValidAnd( Proj:PVWDCtoACRatio[3] >  0 )) then  Proj:PVWDCtoACRatio[3]        else  UNDEFINED  endif  }
   "Set csePVARRAY:pvInverterEff"   csePVARRAY:pvInverterEff   = {   if (IfValidAnd( Proj:PVWInverterEff[3] >  0 )) then  Proj:PVWInverterEff[3] * ValidOr( Proj:PVWPwrElecEffAdj[3], 1 ) / 100  else  UNDEFINED  endif  }  ; SAC 1/15/19 - added PVWPwrElecEffAdj (tic #1046)
   "Set csePVARRAY:pvSIF"           csePVARRAY:pvSIF           = {   if (IfValidAnd( Proj:PVWShdgImpactFac[3] >  0 ) .AND. Proj:EnergyCodeYearNum >= 2019) then  Proj:PVWShdgImpactFac[3]  else  UNDEFINED  endif  }  ; SAC 1/15/19 (tic #1046)  / SAC 2/28/19 - prevent output to CSE for PRE-2019 analysis (property not in CSE.exe)
   "Set csePVARRAY:pvSysLosses"      csePVARRAY:pvSysLosses      = {   if (IfValidAnd( Proj:PVWSysLosses[3]   >  0 )) then  Proj:PVWSysLosses[3]   / 100  else  UNDEFINED  endif  }
   "Set csePVARRAY:pvCoverRefrInd"   csePVARRAY:pvCoverRefrInd   =         ; SAC 4/20/20 - mods to use specify CSE module type default when pvModuleType = 'Custom' and EnableResearchMode activated
      {  if (IfValidAnd( Proj:PVWCoverRefrInd[3] >= 1 ) .AND. IfValidAnd( Proj:PVWModuleType[3] = 4 ))
         then  Proj:PVWCoverRefrInd[3]
         else if (IfValidAnd( pvModuleType = 4 ) .AND. IfValidAnd( Proj:PVWModuleType[3] < 4 ))
         then  switch (Proj:PVWModuleType[3])
                  case  2 :  1.3   ; Premium
                  default :  1.0   ; all others
               endswitch
         else  UNDEFINED  endif endif  }
   "Set csePVARRAY:pvTempCoeff"      csePVARRAY:pvTempCoeff      = {   if (IfValidAnd( Proj:PVWTempCoeff[3]  > -100 ) .AND. (IfValidAnd( Proj:PVWModuleType[3] = 4 ) .OR. IfValidAnd( Proj:EnableResearchMode > 0 )))
                                                                     then  Proj:PVWTempCoeff[3]      else  UNDEFINED  endif  }
   "Set csePVARRAY:pvUsePVWatts"      csePVARRAY:pvUsePVWatts      = {   if (IfValidAnd( Proj:UsePVWattsDLL     >  0 )) then  "Yes"  else  UNDEFINED  endif  }

   "Set csePVARRAY:pvElecMtr"         csePVARRAY:pvElecMtr         = {   if (Proj:Fuel_HaveElec > 0.5 .AND. GlobalCompAssigned( Proj:CSE_ElecMETER ))
                                                                     then  Proj:CSE_ElecMETER  else  UNDEFINED  endif  }
;   "Set csePVARRAY:pvEndUse"         csePVARRAY:pvEndUse         = {   
END
;*************************************************************************
RULELIST "CreateCSE_PVArray_4" 1 0 0 0
   "Set csePVARRAY:pvDCSysSize"      csePVARRAY:pvDCSysSize      = {   Proj:PVWDCSysSize[4] * ValidOr( Proj:PVWDCSizeMultiplier[1], 1 ) / ValidOr( Proj:CSE_CFIPVSizeDiv[4], 1 )  }         ; already checked before PVARRAY created
   "Set csePVARRAY:pvModuleType"      csePVARRAY:pvModuleType      =       ; SAC 4/20/20 - mods to use 'Custom' when PVWTempCoeff and EnableResearchMode activated
      {  if (IfValidAnd( Proj:PVWModuleType[4] < 4 ) .AND. IfValidAnd( Proj:EnableResearchMode > 0 ) .AND. IfValidAnd( Proj:PVWTempCoeff[4] > -100 ))
         then  "Custom"
         else if (IfValidAnd( Proj:PVWModuleType[4] > 0 ) .AND. IfValidAnd( Proj:PVWModuleType[4] < 5 ))
         then  Proj:PVWModuleType[4]  else  UNDEFINED  endif endif  }
   "Set csePVARRAY:pvArrayType"      csePVARRAY:pvArrayType      = {   if (IfValidAnd( Proj:PVWArrayType[4] > 0 ) .AND. IfValidAnd( Proj:PVWArrayType[4] < 6 ))
                                                                     then   Proj:PVWArrayType[4]  else  UNDEFINED  endif  }

  ; SAC 2/24/17 - rules to specify PVARRAY geometry via PolyLp objects (in place of Azm/Tilt)
  ; SAC 10/9/18 - mods preventing output of pvVertices for any tracking arrays and also pvTilt/pvAzm for two-axis tracking arrays (tic #1047)
   "Set csePVARRAY:pvVertices"      csePVARRAY:pvVertices      = {
         if ( pvArrayType < 3 .AND.
              (Proj:PVWGeomSpecMethod[4] == 1 .OR. IfValidAnd( Proj:PVWLocSpecified[4] > 0 )) .AND.
              GlobalCompAssigned( Proj:PVWGeomPolyLpRef[4] ) )
         then  Proj:PVWGeomPolyLpRef[4]
         else  UNDEFINED  endif  }
   "Set csePVARRAY:pvTilt"          csePVARRAY:pvTilt          = { 
         if ( pvArrayType > 4 .OR.
              ( (Proj:PVWGeomSpecMethod[4] == 1 .OR. IfValidAnd( Proj:PVWLocSpecified[4] > 0 )) .AND.
                GlobalCompAssigned( Proj:PVWGeomPolyLpRef[4] ) .AND. pvArrayType < 3 ))
         then  UNDEFINED
         else  Proj:PVWArrayTiltDeg[4]  endif  }
   "Set csePVARRAY:pvAzm"           csePVARRAY:pvAzm           = { 
         if ( pvArrayType > 4 .OR.
              ( (Proj:PVWGeomSpecMethod[4] == 1 .OR. IfValidAnd( Proj:PVWLocSpecified[4] > 0 )) .AND.
                GlobalCompAssigned( Proj:PVWGeomPolyLpRef[4] ) .AND. pvArrayType < 3 ))
         then  UNDEFINED
         else  Proj:PVWAzm[4]  endif  }

;   "Set csePVARRAY:pvGrndRefl"      csePVARRAY:pvGrndRefl      = {   
   "Set csePVARRAY:pvGCR"            csePVARRAY:pvGCR            = {   if (IfValidAnd( Proj:PVWGCR[4]         >= 0 )) then  Proj:PVWGCR[4]                else  UNDEFINED  endif  }
   "Set csePVARRAY:pvDCtoACRatio"   csePVARRAY:pvDCtoACRatio   = {   if (IfValidAnd( Proj:PVWDCtoACRatio[4] >  0 )) then  Proj:PVWDCtoACRatio[4]        else  UNDEFINED  endif  }
   "Set csePVARRAY:pvInverterEff"   csePVARRAY:pvInverterEff   = {   if (IfValidAnd( Proj:PVWInverterEff[4] >  0 )) then  Proj:PVWInverterEff[4] * ValidOr( Proj:PVWPwrElecEffAdj[4], 1 ) / 100  else  UNDEFINED  endif  }  ; SAC 1/15/19 - added PVWPwrElecEffAdj (tic #1046)
   "Set csePVARRAY:pvSIF"           csePVARRAY:pvSIF           = {   if (IfValidAnd( Proj:PVWShdgImpactFac[4] >  0 ) .AND. Proj:EnergyCodeYearNum >= 2019) then  Proj:PVWShdgImpactFac[4]  else  UNDEFINED  endif  }  ; SAC 1/15/19 (tic #1046)  / SAC 2/28/19 - prevent output to CSE for PRE-2019 analysis (property not in CSE.exe)
   "Set csePVARRAY:pvSysLosses"      csePVARRAY:pvSysLosses      = {   if (IfValidAnd( Proj:PVWSysLosses[4]   >  0 )) then  Proj:PVWSysLosses[4]   / 100  else  UNDEFINED  endif  }
   "Set csePVARRAY:pvCoverRefrInd"   csePVARRAY:pvCoverRefrInd   =         ; SAC 4/20/20 - mods to use specify CSE module type default when pvModuleType = 'Custom' and EnableResearchMode activated
      {  if (IfValidAnd( Proj:PVWCoverRefrInd[4] >= 1 ) .AND. IfValidAnd( Proj:PVWModuleType[4] = 4 ))
         then  Proj:PVWCoverRefrInd[4]
         else if (IfValidAnd( pvModuleType = 4 ) .AND. IfValidAnd( Proj:PVWModuleType[4] < 4 ))
         then  switch (Proj:PVWModuleType[4])
                  case  2 :  1.3   ; Premium
                  default :  1.0   ; all others
               endswitch
         else  UNDEFINED  endif endif  }
   "Set csePVARRAY:pvTempCoeff"      csePVARRAY:pvTempCoeff      = {   if (IfValidAnd( Proj:PVWTempCoeff[4]  > -100 ) .AND. (IfValidAnd( Proj:PVWModuleType[4] = 4 ) .OR. IfValidAnd( Proj:EnableResearchMode > 0 )))
                                                                     then  Proj:PVWTempCoeff[4]      else  UNDEFINED  endif  }
   "Set csePVARRAY:pvUsePVWatts"      csePVARRAY:pvUsePVWatts      = {   if (IfValidAnd( Proj:UsePVWattsDLL     >  0 )) then  "Yes"  else  UNDEFINED  endif  }

   "Set csePVARRAY:pvElecMtr"         csePVARRAY:pvElecMtr         = {   if (Proj:Fuel_HaveElec > 0.5 .AND. GlobalCompAssigned( Proj:CSE_ElecMETER ))
                                                                     then  Proj:CSE_ElecMETER  else  UNDEFINED  endif  }
;   "Set csePVARRAY:pvEndUse"         csePVARRAY:pvEndUse         = {   
END
;*************************************************************************
RULELIST "CreateCSE_PVArray_5" 1 0 0 0
   "Set csePVARRAY:pvDCSysSize"      csePVARRAY:pvDCSysSize      = {   Proj:PVWDCSysSize[5] * ValidOr( Proj:PVWDCSizeMultiplier[1], 1 ) / ValidOr( Proj:CSE_CFIPVSizeDiv[5], 1 )  }         ; already checked before PVARRAY created
   "Set csePVARRAY:pvModuleType"      csePVARRAY:pvModuleType      =       ; SAC 4/20/20 - mods to use 'Custom' when PVWTempCoeff and EnableResearchMode activated
      {  if (IfValidAnd( Proj:PVWModuleType[5] < 4 ) .AND. IfValidAnd( Proj:EnableResearchMode > 0 ) .AND. IfValidAnd( Proj:PVWTempCoeff[5] > -100 ))
         then  "Custom"
         else if (IfValidAnd( Proj:PVWModuleType[5] > 0 ) .AND. IfValidAnd( Proj:PVWModuleType[5] < 5 ))
         then  Proj:PVWModuleType[5]  else  UNDEFINED  endif endif  }
   "Set csePVARRAY:pvArrayType"      csePVARRAY:pvArrayType      = {   if (IfValidAnd( Proj:PVWArrayType[5] > 0 ) .AND. IfValidAnd( Proj:PVWArrayType[5] < 6 ))
                                                                     then   Proj:PVWArrayType[5]  else  UNDEFINED  endif  }

  ; SAC 2/24/17 - rules to specify PVARRAY geometry via PolyLp objects (in place of Azm/Tilt)
  ; SAC 10/9/18 - mods preventing output of pvVertices for any tracking arrays and also pvTilt/pvAzm for two-axis tracking arrays (tic #1047)
   "Set csePVARRAY:pvVertices"      csePVARRAY:pvVertices      = {
         if ( pvArrayType < 3 .AND.
              (Proj:PVWGeomSpecMethod[5] == 1 .OR. IfValidAnd( Proj:PVWLocSpecified[5] > 0 )) .AND.
              GlobalCompAssigned( Proj:PVWGeomPolyLpRef[5] ) )
         then  Proj:PVWGeomPolyLpRef[5]
         else  UNDEFINED  endif  }
   "Set csePVARRAY:pvTilt"          csePVARRAY:pvTilt          = { 
         if ( pvArrayType > 4 .OR.
              ( (Proj:PVWGeomSpecMethod[5] == 1 .OR. IfValidAnd( Proj:PVWLocSpecified[5] > 0 )) .AND.
                GlobalCompAssigned( Proj:PVWGeomPolyLpRef[5] ) .AND. pvArrayType < 3 ))
         then  UNDEFINED
         else  Proj:PVWArrayTiltDeg[5]  endif  }
   "Set csePVARRAY:pvAzm"           csePVARRAY:pvAzm           = { 
         if ( pvArrayType > 4 .OR.
              ( (Proj:PVWGeomSpecMethod[5] == 1 .OR. IfValidAnd( Proj:PVWLocSpecified[5] > 0 )) .AND.
                GlobalCompAssigned( Proj:PVWGeomPolyLpRef[5] ) .AND. pvArrayType < 3 ))
         then  UNDEFINED
         else  Proj:PVWAzm[5]  endif  }

;   "Set csePVARRAY:pvGrndRefl"      csePVARRAY:pvGrndRefl      = {   
   "Set csePVARRAY:pvGCR"            csePVARRAY:pvGCR            = {   if (IfValidAnd( Proj:PVWGCR[5]         >= 0 )) then  Proj:PVWGCR[5]                else  UNDEFINED  endif  }
   "Set csePVARRAY:pvDCtoACRatio"   csePVARRAY:pvDCtoACRatio   = {   if (IfValidAnd( Proj:PVWDCtoACRatio[5] >  0 )) then  Proj:PVWDCtoACRatio[5]        else  UNDEFINED  endif  }
   "Set csePVARRAY:pvInverterEff"   csePVARRAY:pvInverterEff   = {   if (IfValidAnd( Proj:PVWInverterEff[5] >  0 )) then  Proj:PVWInverterEff[5] * ValidOr( Proj:PVWPwrElecEffAdj[5], 1 ) / 100  else  UNDEFINED  endif  }  ; SAC 1/15/19 - added PVWPwrElecEffAdj (tic #1046)
   "Set csePVARRAY:pvSIF"           csePVARRAY:pvSIF           = {   if (IfValidAnd( Proj:PVWShdgImpactFac[5] >  0 ) .AND. Proj:EnergyCodeYearNum >= 2019) then  Proj:PVWShdgImpactFac[5]  else  UNDEFINED  endif  }  ; SAC 1/15/19 (tic #1046)  / SAC 2/28/19 - prevent output to CSE for PRE-2019 analysis (property not in CSE.exe)
   "Set csePVARRAY:pvSysLosses"      csePVARRAY:pvSysLosses      = {   if (IfValidAnd( Proj:PVWSysLosses[5]   >  0 )) then  Proj:PVWSysLosses[5]   / 100  else  UNDEFINED  endif  }
   "Set csePVARRAY:pvCoverRefrInd"   csePVARRAY:pvCoverRefrInd   =         ; SAC 4/20/20 - mods to use specify CSE module type default when pvModuleType = 'Custom' and EnableResearchMode activated
      {  if (IfValidAnd( Proj:PVWCoverRefrInd[5] >= 1 ) .AND. IfValidAnd( Proj:PVWModuleType[5] = 4 ))
         then  Proj:PVWCoverRefrInd[5]
         else if (IfValidAnd( pvModuleType = 4 ) .AND. IfValidAnd( Proj:PVWModuleType[5] < 4 ))
         then  switch (Proj:PVWModuleType[5])
                  case  2 :  1.3   ; Premium
                  default :  1.0   ; all others
               endswitch
         else  UNDEFINED  endif endif  }
   "Set csePVARRAY:pvTempCoeff"      csePVARRAY:pvTempCoeff      = {   if (IfValidAnd( Proj:PVWTempCoeff[5]  > -100 ) .AND. (IfValidAnd( Proj:PVWModuleType[5] = 4 ) .OR. IfValidAnd( Proj:EnableResearchMode > 0 )))
                                                                     then  Proj:PVWTempCoeff[5]      else  UNDEFINED  endif  }
   "Set csePVARRAY:pvUsePVWatts"      csePVARRAY:pvUsePVWatts      = {   if (IfValidAnd( Proj:UsePVWattsDLL     >  0 )) then  "Yes"  else  UNDEFINED  endif  }

   "Set csePVARRAY:pvElecMtr"         csePVARRAY:pvElecMtr         = {   if (Proj:Fuel_HaveElec > 0.5 .AND. GlobalCompAssigned( Proj:CSE_ElecMETER ))
                                                                     then  Proj:CSE_ElecMETER  else  UNDEFINED  endif  }
;   "Set csePVARRAY:pvEndUse"         csePVARRAY:pvEndUse         = {   
END
;*************************************************************************


;*************************************************************************
;*************************************************************************

ENDFILE
