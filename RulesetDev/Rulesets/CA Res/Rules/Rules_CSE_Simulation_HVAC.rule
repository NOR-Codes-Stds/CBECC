; -------------------------------------------------------------------------
; Rules pertaining to:   Setup HVAC & AirNet objects for CSE Energy Simulation
; CEC Title-24 Residential Energy Code
; -------------------------------------------------------------------------
; Copyright (c) 2012-2014, California Energy Commission
; Copyright (c) 2012-2014, Wrightsoft Corporation
; All rights reserved.
; Redistribution and use in source and binary forms, with or without modification,
; are permitted provided that the following conditions are met:
; - Redistributions of source code must retain the above copyright notice, this
;   list of conditions and the following disclaimer.
; - Redistributions in binary form must reproduce the above copyright notice, this
;   list of conditions, the following disclaimer in the documentation and/or other
;   materials provided with the distribution.
; - Neither the name of the California Energy Commission nor the names of its
;   contributors may be used to endorse or promote products derived from this
;   software without specific prior written permission.
; DISCLAIMER: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
; THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
; NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION,
; WRIGHTSOFT CORPORATION, ITRON, INC. OR ANY OTHER AUTHOR OR COPYRIGHT HOLDER OF
; THIS SOFTWARE (COLLECTIVELY, THE "AUTHORS") BE LIABLE FOR ANY DIRECT, INDIRECT,
; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
; OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
; OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  EACH LICENSEE AND SUBLICENSEE OF THE
; SOFTWARE AGREES NOT TO ASSERT ANY CLAIM AGAINST ANY OF THE AUTHORS RELATING TO
; THIS SOFTWARE, WHETHER DUE TO PERFORMANCE ISSUES, TITLE OR INFRINGEMENT ISSUES,
; STRICT LIABILITY OR OTHERWISE.
; -------------------------------------------------------------------------


;*************************************************************************
RULELIST "CSE_SimulationPrep_HVAC" 1 0 0 1
;*************************************************************************
	"Setup CSE HVAC system components"
			Proj:Action = {	switch (Local( AnalysisType ))
										case  0 :  EvalRulelist( "HVACSys_CSE_Defaulting" )	; simulation only
										case 12 :  EvalRulelist( "HVACSys_CSE_Defaulting" )	; Proposed Only
										case 13 :  EvalRulelist( "HVACSys_CSE_Defaulting" )	; Proposed and Standard
										case 14 :  EvalRulelist( "HVACSys_CSE_Defaulting" )	; Mixed Fuel Baseline Comparison    - SAC 12/29/21 (MxdFuel)
										case 15 :  EvalRulelist( "HVACSys_CSE_Defaulting" )	; All Electric Baseline Comparison
										case  2 :  EvalRulelist( "HVACSys_CSE_Defaulting" )	; Existing Building EDR
										default :  UNCHANGED
									endswitch  }

	"Setup AirNet IZXFER objects"		Proj:Action		= {	EvalRulelist( "SimPrep_CSE_AirNet" )  }

   ; SAC 11/7/18 - create and setup GAIN object to model VCHP CFan (for assigned system)
   "Setup VCHP equipment Zone CFan (GAIN) objects"    Zone:GainVCHPCFan  = {
         if (IfValidAnd( ActiveHVACSystem:HPSysVCHPFanPwr    > 0 )==0 .OR.
             IfValidAnd( ActiveHVACSystem:FloorAreaServed[1] > 0 )==0 .OR.
             LocalCompAssigned( ActiveHVACSystem:cseRSYS ) < 1 .OR.
             (Proj:RunAbbrev != "p"   .AND. Proj:RunAbbrev != "p-N" .AND. Proj:RunAbbrev != "p-E" .AND. 
                                            Proj:RunAbbrev != "p-S" .AND. Proj:RunAbbrev != "p-W" .AND.
              Proj:RunAbbrev != "pfx" .AND. Proj:RunAbbrev != "pfx-N" .AND. Proj:RunAbbrev != "pfx-E" .AND.
                                            Proj:RunAbbrev != "pfx-S" .AND. Proj:RunAbbrev != "pfx-W" .AND.
              Proj:RunAbbrev != "pp"  .AND. Proj:RunAbbrev != "pp-N" .AND. Proj:RunAbbrev != "pp-E" .AND.
                                            Proj:RunAbbrev != "pp-S" .AND. Proj:RunAbbrev != "pp-W" )) then  UNDEFINED
         else  CreateComp( cseGAIN, substr( Name, 0, 48 ) + "-cfan" )  endif  }
	"Set Zone:GainVCHPCFan parent cseZONE"    Zone:GainVCHPCFan:Parent   = {  Local( CSE_ZONE )  }
	"Set Zone:GainVCHPCFan:gnMeter"           Zone:GainVCHPCFan:gnMeter  = {  if (Global( Proj:Fuel_HaveElec ) > 0.5) then  Global( Proj:CSE_ElecMETER )
                                                                             else  UNDEFINED  endif  }
	"Set Zone:GainVCHPCFan:gnEndUse"          Zone:GainVCHPCFan:gnEndUse = {  "User1"  }  ; "Fan"  }
	"Set Zone:GainVCHPCFan:gnPower_x"         Zone:GainVCHPCFan:gnPower_x = {
	      Format( "%g * 3.412 * (%g/%g) * (1-@RSYSRES[%c%s%c].prior.H.hrsOn)", ActiveHVACSystem:HPSysVCHPFanPwr,
	            ValidOr( FloorArea, 0 ), ActiveHVACSystem:FloorAreaServed[1], 34, ActiveHVACSystem:cseRSYS:Name, 34 )  }

  ; Assign elec/fuel meters to RSYS components
	"Set cseRSYS:rsElecMtr"		cseRSYS:rsElecMtr		= {	     if (Local( Fuel_HaveElec   ) > 0.5) then  Global( Proj:CSE_ElecMETER )
																			else  UNDEFINED  endif  }
	"Set cseRSYS:rsFuelMtr"		cseRSYS:rsFuelMtr		= {	     if (Local( Fuel_HaveNatGas ) > 0.5) then  Global( Proj:CSE_NatGasMETER )
																			else if (Local( Fuel_HaveOther  ) > 0.5) then  Global( Proj:CSE_OtherFuelMETER )
																			else  UNDEFINED  endif endif  }
END
;*************************************************************************


;*************************************************************************
RULELIST "HVACSys_CSE_Defaulting" 0 0 0 1
;*************************************************************************

;	"Blast Proj:cseElecHVACMtr"			Proj:cseElecHVACMtr		= {	if (LocalCompAssigned( cseElecHVACMtr   )) then  DeleteComp()  else  UNCHANGED  endif  }
;	"Blast Proj:cseNatGasHVACMtr"			Proj:cseNatGasHVACMtr	= {	if (LocalCompAssigned( cseNatGasHVACMtr )) then  DeleteComp()  else  UNCHANGED  endif  }
;
;  ; CSE METERs to track HVAC energy use
;	"Create Proj:cseElecHVACMtr"			Proj:cseElecHVACMtr		= {	CreateComp( cseMETER, "ElecHVACMtr" )  }
;	"Create Proj:cseNatGasHVACMtr"		Proj:cseNatGasHVACMtr	= {	if (Local( NatGasAvailable ) < 0.5) then  UNDEFINED
;																							else  CreateComp( cseMETER, "NatGasHVACMtr" )  endif  }


	"Blast all cseRSYS components"		Proj:Action		= {	DeleteAllComps( cseRSYS )  }
	"Delete all csePERFORMANCEMAP components"		Proj:Action = {	DeleteAllComps( csePERFORMANCEMAP )  }    ; SAC 05/21/24 (tic #1379)

  ; CSE RSYS creation & setup
	"Create a CSE RSYS for each HVACSys"	HVACSys:cseRSYS					= {	if (Local( FloorAreaServed[1] ) > 1 .AND.
																												(HaveHeating .OR.
																												 (NumCoolSystemTypes > 0 .AND. LocalCompAssigned( CoolSystem[1] ))))
																										then  CreateComp( cseRSYS, "rsys-" + substr( Name, 0, 48 ) )
																										else  UNDEFINED  endif  }
	"Set HVACSys:cseRSYS:SourceHVACSys"		HVACSys:cseRSYS:SourceHVACSys	= {	Local( Name )  }

  ; SAC 1/10/13 - added logic to set new rsType selection
  ; SAC 2/19/13 - revised to reference new cooling- and heating-only system types
  ; SAC 10/27/15 - added check for design rating run abbreviation (Proj:RunAbbrev == "dr")
; "store BEMProc details"		Proj:Action = {  StoreBEMProc( Format( "Before RSYS setup-%s", RunAbbrev ), 0 )  }
; "debug"	Proj:Action	= {	MessageBox( "inside HVACSys_CSE_Defaulting" )  }
	"Set HVACSys:cseRSYS:rsType"		HVACSys:cseRSYS:rsType	=                          ; HeatPumpDHWCombo - SAC 04/02/23 (tic #1349)
				{	if (Type < 1 .OR. Type > 3) then																								0		; -- ERROR --
					else if (Type == 2)
					then	if (NumHtPumpSystemTypes > 0 .AND. IfValidAnd( HtPumpSystem[1]:Type == 11 ) .AND. 
								 Proj:IsStdOrSMFRun == 0 .AND.
								 Proj:RunAbbrev != "dr" .AND. Proj:RunAbbrev != "DR") then												7		; ASHPHydronic
							else if (HaveHeating .AND. HaveCooling)
							then  if (IfValidAnd( HtPumpSysType = 26 ) .OR. IfValidAnd( HtPumpSysType = 24 ))                     ; PkgTermHeatPump or SglPkgVertHeatPump - SAC 6/21/20 (tic #1226)
							      then                                                                                      8     ; ASHPPkgRoom
                           else if (IfValidAnd( HtPumpSysType = 33 ))
                           then                                                                                     12     ; VCHP2 - SAC 11/09/20
                           else if (IfValidAnd( HtPumpSysType = 36 ))
                           then                                                                                     15     ; VCHP3 - SAC 05/16/24 (tic #1379)
                           else if (IfValidAnd( HtPumpSysType = 35 ))
                           then                                                                                     14     ; ACCOMBINEDHEATDHW
							      else                                																		3		; ASHP
							      endif endif endif endif
							else	if (IfValidAnd( HtPumpSysType = 35 ))
                           then                                                                                     13     ; COMBINEDHEATDHW
                           else 																													0		; -- ERROR --
                           endif
							endif endif
					else if (NumCoolSystemTypes > 0 .AND. LocalCompAssigned( CoolSystem[1] ) .AND. HaveHeating)
					then	if (HaveCooling < 1)
							then	if (T24RHeatingEquipment:UseElec( "CodeBase", Proj:StdDesignBase, "StdVer", Proj:StandardsVersion, "SysType", HeatSysTypeAbbrev ) > 0.5) then		6		; Resistance
							      else																													5		; Furnace
									endif
							else	if (IfValidAnd( CoolSysType = 25 ) .OR. IfValidAnd( CoolSysType = 23 ))                         ; PkgTermAirCond or SglPkgVertAirCond - SAC 6/22/20 (tic #1226)
							      then  if (T24RHeatingEquipment:UseElec( "CodeBase", Proj:StdDesignBase, "StdVer", Proj:StandardsVersion, "SysType", HeatSysTypeAbbrev ) > 0.5)
							            then                                                                               11		; ACPkgRoomRes          - SAC 6/24/20 (tic #1226)
							            else                                                                               10		; ACPkgRoomFurnace      - SAC 6/24/20 (tic #1226)
							            endif
							      else if (T24RHeatingEquipment:UseElec( "CodeBase", Proj:StdDesignBase, "StdVer", Proj:StandardsVersion, "SysType", HeatSysTypeAbbrev ) > 0.5) then		2		; ACResistance
									else																													1		; ACFurnace
									endif endif
							endif
					else if (LocalCompAssigned( CoolSystem ))
					then  if (IfValidAnd( CoolSysType = 25 ) .OR. IfValidAnd( CoolSysType = 23 ))                               ; PkgTermAirCond or SglPkgVertAirCond - SAC 6/22/20 (tic #1226)
					      then                                                                                            9     ; ACPkgRoom
					      else                                   																			4		; AC
					      endif
					else if (HaveHeating)
					then	if (T24RHeatingEquipment:UseElec( "CodeBase", Proj:StdDesignBase, "StdVer", Proj:StandardsVersion, "SysType", HeatSysTypeAbbrev ) > 0.5) then		6		; Resistance
							else																															5		; Furnace
							endif
					else																																	1		; ACFurnace
					endif endif endif endif endif  }
			;		if (NumCoolSystemTypes > 0 .AND. LocalCompAssigned( CoolSystem[1] ) .AND. HaveHeating)
			;		then	if (     T24RCoolingEquipment:IsHP(    "CodeBase", Proj:StdDesignBase, "StdVer", Proj:StandardsVersion, "SysType", CoolSysTypeAbbrev ) > 0.5 .AND.
			;					      T24RHeatingEquipment:IsHP(    "CodeBase", Proj:StdDesignBase, "StdVer", Proj:StandardsVersion, "SysType", HeatSysTypeAbbrev ) > 0.5) then  3		; ASHP
			;				else if (T24RHeatingEquipment:UseElec( "CodeBase", Proj:StdDesignBase, "StdVer", Proj:StandardsVersion, "SysType", HeatSysTypeAbbrev ) > 0.5) then  2		; ACResistance
			;				else																																					  1		; ACFurnace
			;				endif endif
			;		else if (LocalCompAssigned( CoolSystem ))
			;		then	if (     T24RCoolingEquipment:IsHP(    "CodeBase", Proj:StdDesignBase, "StdVer", Proj:StandardsVersion, "SysType", CoolSysTypeAbbrev ) > 0.5) then  3		; ASHP
			;				else																																					  4		; AC
			;				endif
			;		else if (HaveHeating)
			;		then	if (     T24RHeatingEquipment:IsHP(    "CodeBase", Proj:StdDesignBase, "StdVer", Proj:StandardsVersion, "SysType", HeatSysTypeAbbrev ) > 0.5) then  3		; ASHP
			;				else if (T24RHeatingEquipment:UseElec( "CodeBase", Proj:StdDesignBase, "StdVer", Proj:StandardsVersion, "SysType", HeatSysTypeAbbrev ) > 0.5) then  6		; Resistance
			;				else																																					  5		; Furnace
			;				endif endif
			;		else																																							  1		; ACFurnace
			;		endif endif endif  }

;  ; SAC 1/3/13 - added auto-sizing stuff
;	"Set HVACSys:AutoSizeCool"		HVACSys:AutoSizeCool	= {	if (LocalCompAssigned( CoolSystem ) == 0)	then  0
;																				else if (CoolSystem:AutoSize > 0.5)	then  1
;																				else	0  endif endif  }
;  ; SAC 1/10/13 - revised to prevent setting AUTOSIZE for rsCapH when system is of type ASHP
;	"Set HVACSys:AutoSizeHeat"		HVACSys:AutoSizeHeat	= {	if (LocalCompAssigned( HeatSystem ) == 0)	then  0
;																				else if (HeatSystem:AutoSize > 0.5 .AND.
;																							T24RHeatingEquipment:IsHP( "CodeBase", Proj:StdDesignBase, "StdVer", Proj:StandardsVersion, "SysType", HeatSystem:TypeAbbrevStr ) < 0.5)	then  1
;																				else	0  endif endif  }
; SAC 10/3/13 - added logic to AUTOSIZE rules to always autosize rsCapAuxH for RSYSs of type ASHP (3) (as of CSE version 0.732)
; SAC 5/22/14 - expanded specification of rsCapAuxH to include cseRSYS:rsType = ASHPHydronic
; SAC 10/20/14 - added logic to set AUTOSIZE rsCap47  - ONLY FOR Standard design heat pump simulations
      ; SAC 6/27/20 - mod to enable HtPumpCap47AutoSz for rsType = ASHPPkgRoom (tic #1225 & #1226)    ; VCHP2 - SAC 11/09/20    ; VCHP3 - SAC 09/06/24
	"Set HVACSys:HtPumpCap47AutoSz"			HVACSys:HtPumpCap47AutoSz		= {	if (HVACSys:cseRSYS:rsType !=  3 .AND. HVACSys:cseRSYS:rsType !=  8 .AND.
                                                                                  HVACSys:cseRSYS:rsType != 12 .AND. HVACSys:cseRSYS:rsType != 15) then  0
	                                                                           else if (Type == 2 .AND. IfValidAnd( HPSysAutoSize > 0 )) then  1
																										else if (IfValidAnd( HPSysCap47 > 0 )) then  0
																										else if (Proj:IsStdOrSMFRun .OR. Proj:RunAbbrev == "dr") then  1
																										else	if (Type == 2)
																												then	if (T24RHeatingEquipment:PropEqStd( "CodeBase", Proj:StdDesignBase, "StdVer", Proj:StandardsVersion, "SysType", HtPumpSysTypeAbbrev ) > 0.1)
																														then  1  else  0  endif
																												else  0  endif
																										endif endif endif endif  }

   ; SAC 6/25/20 - added rsType ASHPPkgRoom (8) to list that autosize rsCapAuxH (tic #1225 & #1226)      ; prevent autosize of rsCapAuxH for VCHP2 systems - SAC 11/02/20
   ; RESTORE autosize of rsCapAuxH for VCHP2 systems - SAC 03/22/22   ; HeatPumpDHWCombo - SAC 04/02/23 (tic #1349)
	"Set HVACSys:cseRSYS:AUTOSIZE_x[1]"		HVACSys:cseRSYS:AUTOSIZE_x[1]	= {	if (AutoSizeCool[1] .AND. HaveCooling > 0 ) then  "rsCapC"
																										else if (AutoSizeHeat[1]    ) then  "rsCapH"
																										else if (LocalRef( cseRSYS:rsType ) == 3 .OR. LocalRef( cseRSYS:rsType ) == 7 .OR.
																										         LocalRef( cseRSYS:rsType ) == 8 .OR. LocalRef( cseRSYS:rsType ) == 12) then  "rsCapAuxH"
																										else	UNDEFINED  endif endif endif  }
	"Set HVACSys:cseRSYS:AUTOSIZE_x[2]"		HVACSys:cseRSYS:AUTOSIZE_x[2]	= {	if (cseRSYS:rsType == 13 .OR. cseRSYS:rsType == 14) then  UNDEFINED
                                                                              else if (AutoSizeCool[1] .AND. HaveCooling > 0 .AND. AutoSizeHeat[1]) then  "rsCapH"
																										else if (LocalRef( cseRSYS:rsType ) == 3 .OR. LocalRef( cseRSYS:rsType ) == 7 .OR.
																										         LocalRef( cseRSYS:rsType ) == 8) then  "rsCapAuxH"
																										else if (HtPumpCap47AutoSz > 0.5 .AND. LocalStatus( cseRSYS:AUTOSIZE_x[1] ) > 0.5) then  "rsCap47"
																										else	UNDEFINED  endif endif endif endif  }
   ; revised logic below to autosize rsCapAuxH for VCHP2 systems (per today's conference call) - SAC 07/30/21
	"Set HVACSys:cseRSYS:AUTOSIZE_x[3]"		HVACSys:cseRSYS:AUTOSIZE_x[3]	= {	if (cseRSYS:rsType == 13 .OR. cseRSYS:rsType == 14) then  UNDEFINED
                                                                              else if (AutoSizeCool[1] .AND. HaveCooling > 0 .AND. 
                                                                                       (AutoSizeHeat[1] .OR. LocalRef( cseRSYS:rsType ) == 12) .AND.
																												     (LocalRef( cseRSYS:rsType ) == 3 .OR. LocalRef( cseRSYS:rsType ) == 7 .OR.
																										            LocalRef( cseRSYS:rsType ) == 8 .OR. LocalRef( cseRSYS:rsType ) == 12)) then  "rsCapAuxH"
																										else if (HtPumpCap47AutoSz > 0.5 .AND. LocalStatus( cseRSYS:AUTOSIZE_x[2] ) > 0.5 .AND.
																												IfValidAnd( HVACSys:cseRSYS:AUTOSIZE_x[2] == "rsCap47" )==0 ) then  "rsCap47"
																										else	UNDEFINED  endif endif endif  }
	"Set HVACSys:cseRSYS:AUTOSIZE_x[4]"		HVACSys:cseRSYS:AUTOSIZE_x[4]	= {	if (cseRSYS:rsType == 13 .OR. cseRSYS:rsType == 14) then  UNDEFINED
                                                                              else if (HtPumpCap47AutoSz > 0.5 .AND. LocalStatus( cseRSYS:AUTOSIZE_x[3] ) > 0.5 .AND.
																												     IfValidAnd( HVACSys:cseRSYS:AUTOSIZE_x[3] == "rsCap47" )==0 .AND.
																												     IfValidAnd( HVACSys:cseRSYS:AUTOSIZE_x[2] == "rsCap47" )==0 ) then  "rsCap47"
																										else	UNDEFINED  endif endif  }

   ; VCHP2 - SAC 11/02/20
   ; REMOVED specification of rsCapAuxH = 0 for VCHP2 (per today's conference call) - SAC 07/30/21
	;"Set HVACSys:cseRSYS:rsCapAuxH"			HVACSys:cseRSYS:rsCapAuxH		= {	if (Type == 2 .AND. HtPumpSysType == 33) then  0
	;																									else	UNDEFINED  endif  }

   ; SAC 10/20/14 - added logic to set rsFxCapH = .75  WHENEVER  AUTOSIZE rsCap47  is set above (for Standard design heat pump simulations)
   ; added logic to use 0.75 for Std design only, else HtSysSizingFactor or 1.1 - SAC 02/11/22 (VCHP2)   ; default HP HtSysSizingFactor 1.1->1.2 - SAC 03/03/22
; VCHP3 ?????
	"Set HVACSys:cseRSYS:rsFxCapH"			HVACSys:cseRSYS:rsFxCapH		=     ; added logic from VCHP2 enabling default of rsFxCapH based on HtPumpSystem[1]:HtgSizingFactor - SAC 03/03/22
      {  if (HtPumpCap47AutoSz > 0.5)
         then  if (Proj:IsStdOrSMFRun .OR. Proj:RunAbbrev == "dr") 
               then  if (Proj:EnergyCodeYearNum < 2025)
                     then  0.75
                     else  1.1   endif
               else if (IfValidAnd( Proj:EnableResearchMode > 0.5 ) .AND.
                        IfValidAnd( HtPumpSystem[1]:HtgSizingFactor > 0 ))
               then  HtPumpSystem[1]:HtgSizingFactor
               else  if (Proj:EnergyCodeYearNum < 2025)
                     then  ValidOr( HtSysSizingFactor, 1.2 )
                     else  ValidOr( HtSysSizingFactor, 1.1 )  endif endif endif
			else if (AutoSizeHeat[1] == 0) then  UNDEFINED
			else if (IfValidAnd( HtSysSizingFactor > 0 ))
			then  HtSysSizingFactor
			else	UNDEFINED  endif endif endif  }
;	"Set HVACSys:cseRSYS:rsFxCapH"			HVACSys:cseRSYS:rsFxCapH		= {	if (AutoSizeHeat == 0 .OR. LocalCompAssigned( HeatSystem ) == 0) then  UNDEFINED
;																										else if (HeatSystem:SizingFactor > 0)
;																										then  HeatSystem:SizingFactor
;																										else	UNDEFINED  endif endif  }

   ; FORCE 1.2 regardless of ClSysSizingFactor - SAC 02-25-22  ; restore use of HVACSys:ClSysSizingFactor - SAC 03/03/22
	"Set HVACSys:cseRSYS:rsFxCapC"			HVACSys:cseRSYS:rsFxCapC		= {	if (AutoSizeCool[1] == 0 .OR. HaveCooling < 1) then  UNDEFINED
																										else if (ClSysSizingFactor > 0)
																										then  ClSysSizingFactor
																										else	UNDEFINED  endif endif  }

;	"store BEMProc details"		Proj:Action = {  StoreBEMProc( "b4 set of cseRSYS-Cr8SupplyDuct", 0 )  }
;	"debug"		Proj:Action	= {	MessageBox( "Just stored 'b4 set of cseRSYS-Cr8SupplyDuct' BEMBase details" )  }
; SAC 5/13/13 - moved up from BELOW to include in logic related to setting rsDSEC & rsDSEH
	"Set cseRSYS:Cr8SupplyDuct"		cseRSYS:Cr8SupplyDuct	= {
				if (LocalCompAssigned( SourceHVACSys:DistribSystem ) == 0) then  0
				else if (SourceHVACSys:DistribSystem:Type == 8) then  0				; "DuctsNone - ..."  SAC 12/12/14 - treat just like none assigned
		;		else if (SourceHVACSys:DistribSystem:DuctsPresent == 0) then  0	; SAC 9/4/13 - GC issue 162 - ducts still need to be modeled in most cases where DuctsPresent == 0
				else if (SourceHVACSys:DistribSystem:Type == 12) then  0				; "LowLlCod - Verified low-leakage ducts in conditioned space"
				else if (SourceHVACSys:DistribSystem:DuctLeakageValUse <= 0 .OR.
		;					SourceHVACSys:DistribSystem:DuctInsAdjRval <= 0 .OR.		; SAC 6/27/16 - remove this condition to ensure ducts present for leakage but not conduction are simulated properly (tic #654)
		;					SourceHVACSys:DistribSystem:SupplyDuctArea <= 0 .OR.		; SAC 9/4/13 - GC issue 162 - ducts still need to be modeled in some cases where *DuctArea == 0
							SourceHVACSys:DistribSystem:SupplyDuctDiam <= 0 ) then  0
				else  1  endif endif endif endif  }

	"Set cseRSYS:Cr8ReturnDuct"		cseRSYS:Cr8ReturnDuct	= {
				if (LocalCompAssigned( SourceHVACSys:DistribSystem ) == 0) then  0
				else if (SourceHVACSys:DistribSystem:Type == 8) then  0				; "DuctsNone - ..."  SAC 12/12/14 - treat just like none assigned
		;		else if (SourceHVACSys:DistribSystem:DuctsPresent == 0) then  0	; SAC 9/4/13 - GC issue 162 - ducts still need to be modeled in most cases where DuctsPresent == 0
				else if (SourceHVACSys:DistribSystem:Type == 12) then  0				; "LowLlCod - Verified low-leakage ducts in conditioned space"
				else if (SourceHVACSys:DistribSystem:DuctLeakageValUse <= 0 .OR.
		;					SourceHVACSys:DistribSystem:RetDuctInsAdjRval <= 0 .OR.	; SAC 6/27/16 - remove this condition to ensure ducts present for leakage but not conduction are simulated properly (tic #654)
		;					SourceHVACSys:DistribSystem:ReturnDuctArea <= 0 .OR.		; SAC 9/4/13 - GC issue 162 - ducts still need to be modeled in some cases where *DuctArea == 0
							SourceHVACSys:DistribSystem:ReturnDuctDiam <= 0 ) then  0
				else  1  endif endif endif endif  }
		; SAC 5/13/13 -  HVACSys:HtOrClDucted => 1-Heat / 2-Cool / 3-Ht&Cl / 0-neither
	; SAC 12/22/14 - REMOVED logic referencing cseRSYS:Cr8SupplyDuct & :Cr8ReturnDuct when setting rsDSEH/rsDSEC so that combination of NO ht or cl ducts & LowLlCod or related settings don't prevent setting of '1' (GC issue 432)
	"Set HVACSys:cseRSYS:rsDSEH"				HVACSys:cseRSYS:rsDSEH			= {
         if (HaveHtPump > 0 .AND. (HtPumpSysType == 22 .OR. HtPumpSysType == 33 .OR. HtPumpSysType == 36)) then  UNDEFINED     ; SAC 11/4/18 - VCHP   ; VCHP2 - SAC 11/01/20  ; VCHP3 - SAC 05/16/24 (tic #1379)
         else if (	; removed - (LocalRef(cseRSYS:Cr8SupplyDuct) > 0 .OR. LocalRef(cseRSYS:Cr8ReturnDuct) > 0) .AND.
                   (HtOrClDucted == 0 .OR. HtOrClDucted == 2) ) then  1.0
         else  UNDEFINED  endif endif  }
	"Set HVACSys:cseRSYS:rsDSEC"				HVACSys:cseRSYS:rsDSEC			= {
         if (HaveHtPump > 0 .AND. (HtPumpSysType == 22 .OR. HtPumpSysType == 33 .OR. HtPumpSysType == 36)) then  UNDEFINED     ; SAC 11/4/18 - VCHP   ; VCHP2 - SAC 11/01/20  ; VCHP3 - SAC 05/16/24 (tic #1379)
         else if (	; removed - (LocalRef(cseRSYS:Cr8SupplyDuct) > 0 .OR. LocalRef(cseRSYS:Cr8ReturnDuct) > 0) .AND.
                   (HtOrClDucted == 0 .OR. HtOrClDucted == 1) .AND. HaveCooling > 0 ) then  1.0
         else  UNDEFINED  endif endif  }

; mjb 12/1/15 - RESNET mods to set rsDSEH and rsDSEC to 0.8 for Design Rating calcs
	"Reset HVACSys:cseRSYS:rsDSEH"				HVACSys:cseRSYS:rsDSEH			= {	if (Proj:DRtgRefRunID == 2014) then  0.8
	                                                                              else UNCHANGED endif }
	"Reset HVACSys:cseRSYS:rsDSEC"				HVACSys:cseRSYS:rsDSEC			= {	if (Proj:DRtgRefRunID == 2014) then  0.8
	                                                                              else UNCHANGED endif }

  ; SAC 3/4/13
	"Set HVACSys:cseRSYS:rsFChg"				HVACSys:cseRSYS:rsFChg			= {	if (HaveCooling == 0) then  UNDEFINED
																										else if (LocalStatus( ClSysRefrigChgAdjFctr ) < 2) then  UNDEFINED
																										else if (ClSysRefrigChgAdjFctr > 0 .AND. ClSysRefrigChgAdjFctr <= 1) then  ClSysRefrigChgAdjFctr
																										else  UNDEFINED  endif endif endif    }

	"Set HVACSys:cseRSYS:rsCapH"				HVACSys:cseRSYS:rsCapH			= {	if (HaveHeating == 0 .OR. AutoSizeHeat[1] == 1) then  UNDEFINED
																										else if (IfValidAnd( HtSysCapacity > 0 ))
																										then  HtSysCapacity
																										else	UNDEFINED  endif endif  }
	"Set HVACSys:cseRSYS:rsCapC"				HVACSys:cseRSYS:rsCapC			= {	if (HaveCooling == 0 .OR. AutoSizeCool[1] == 1) then  UNDEFINED
																										else if (IfValidAnd( ClSysCapacity > 0 ))
																										then  ClSysCapacity
																										else	UNDEFINED  endif endif  }

;	"Set HVACSys:cseRSYS:rsEffH"				HVACSys:cseRSYS:rsEffH			= {	if (LocalCompAssigned( HeatSystem ) == 0) then  0
	"Set HVACSys:cseRSYS:rsAFUE"				HVACSys:cseRSYS:rsAFUE			= {	if (IfValidAnd( HtSysAFUE > 0 )) then  HtSysAFUE / 100  else  UNDEFINED  endif  }
;	"Set HVACSys:cseRSYS:rsAFUE"				HVACSys:cseRSYS:rsAFUE			= {	if (LocalCompAssigned( HeatSystem ) == 0) then  UNDEFINED
;																										else if (LocalRef( HeatSystem:AFUE ) > 0)
;																										then  LocalRef( HeatSystem:AFUE ) / 100
;																										else  UNDEFINED  endif endif  }


;	"Set HVACSys:cseRSYS:rsEffC"				HVACSys:cseRSYS:rsEffC			= {	if (LocalCompAssigned( CoolSystem ) == 0) then  0
;																										else if (LocalRef( CoolSystem:SEER ) > 0)
;																										then  (0.875 * LocalRef( CoolSystem:SEER )) / 3.412		; SEER -> COP
;																										else if (LocalRef( CoolSystem:EER ) > 0)
;																										then  LocalRef( CoolSystem:EER ) / 3.412						; EER -> COP
;																										else	2.8  endif endif endif  }
   ; SAC 6/21/20 - mod to prevent echoing SEER when it is not a valid system input (tic #1226)
   ; added ClSysSEER2 / ClSysSEER2perSEER scenario - SAC 09/19/22 (tic #1331)
	"Set HVACSys:cseRSYS:rsSEER"				HVACSys:cseRSYS:rsSEER			= {	if (HaveCooling == 0) then  UNDEFINED
                                                                              else if (EffMetric = 2 .AND. IfValidAnd( ClSysSEER2 > 0 ) .AND.
                                                                                       IfValidAnd( ClSysSEER2perSEER > 0 ))
                                                                              then  ClSysSEER2 / ClSysSEER2perSEER
																										else if (IfValidAnd( ClSysSEER > 0 ))
																										then  ClSysSEER							; SEER
																										else if (IfValidAnd( ClSysEER > 0 ) .AND. IfValidAnd( CoolSystem[1]:ShowSEER > 0 ))
																										then  ClSysEER / 0.875					; EER -> SEER   ???
																										else	UNDEFINED  endif endif endif endif  }

   ; added ClSysEER2 / ClSysEER2perEER scenario - SAC 09/19/22 (tic #1331)
	"Set HVACSys:cseRSYS:rsEER"				HVACSys:cseRSYS:rsEER			= {	if (HaveCooling == 0) then  UNDEFINED
                                                                              else if (EffMetric = 2 .AND. IfValidAnd( ClSysEER2 > 0 ) .AND.
                                                                                       IfValidAnd( ClSysEER2perEER > 0 ))
                                                                              then  ClSysEER2 / ClSysEER2perEER
																										else if (IfValidAnd( ClSysEER > 0 ))
																										then  ClSysEER								; EER
																										else	UNDEFINED  endif endif endif  }

   ; SAC 12/7/12 - added heat pump stuff
   ; added HPSysHSPF2 / HPSysHSPF2perHSPF scenario - SAC 09/19/22 (tic #1331)
	"Set HVACSys:cseRSYS:rsHSPF"				HVACSys:cseRSYS:rsHSPF			= {	if (HaveHtPump < 1 .OR. LocalRef( cseRSYS:rsType ) == 7) then  UNDEFINED
                                                                              else if (EffMetric = 2 .AND. IfValidAnd( HPSysHSPF2 > 0 ) .AND.
                                                                                       IfValidAnd( HPSysHSPF2perHSPF > 0 ))
                                                                              then  HPSysHSPF2 / HPSysHSPF2perHSPF
																										else if (IfValidAnd( HPSysHSPF > 0 ))
																										then  HPSysHSPF
																										else  UNDEFINED  endif endif endif  }
	"Set HVACSys:cseRSYS:rsCap47"				HVACSys:cseRSYS:rsCap47			= {	if (HaveHtPump < 1) then  UNDEFINED
																										else if (IfValidAnd( HPSysCap47 > 0 ))
																										then  HPSysCap47
																										else  UNDEFINED  endif endif  }
	; SAC 6/22/20 - revised to ensure writing of COP47 for ASHPPkgRoom (tic #1226)      ; VCHP2 - SAC 11/09/20
	"Set HVACSys:cseRSYS:rsCOP47"				HVACSys:cseRSYS:rsCOP47			= {	if (HaveHtPump < 1 .OR. ((Proj:AnalysisType > 2 .AND. cseRSYS:rsType != 7) .AND.
	                                                                                                    cseRSYS:rsType != 8 .AND. cseRSYS:rsType != 12)) then  UNDEFINED
																										else if (IfValidAnd( HPSysCOP47 > 0 ))
																										then  HPSysCOP47
																										else  UNDEFINED  endif endif  }
	"Set HVACSys:cseRSYS:rsCap35"				HVACSys:cseRSYS:rsCap35			= {	if (HaveHtPump < 1 .OR. (Proj:AnalysisType > 2 .AND. cseRSYS:rsType != 12)) then  UNDEFINED
																										else if (IfValidAnd( HPSysCap35 > 0 ))
																										then  HPSysCap35
																										else  UNDEFINED  endif endif  }
	"Set HVACSys:cseRSYS:rsCOP35"				HVACSys:cseRSYS:rsCOP35			= {	if (HaveHtPump < 1 .OR. (Proj:AnalysisType > 2 .AND. cseRSYS:rsType != 12)) then  UNDEFINED
																										else if (IfValidAnd( HPSysCOP35 > 0 ))
																										then  HPSysCOP35
																										else  UNDEFINED  endif endif  }
	"Set HVACSys:cseRSYS:rsCap17"				HVACSys:cseRSYS:rsCap17			= {	if (HaveHtPump < 1) then  UNDEFINED
																										else if (IfValidAnd( HPSysCap17 > 0 ))
																										then  HPSysCap17
																										else  UNDEFINED  endif endif  }
	"Set HVACSys:cseRSYS:rsCOP17"				HVACSys:cseRSYS:rsCOP17			= {	if (HaveHtPump < 1 .OR. ((Proj:AnalysisType > 2 .AND. cseRSYS:rsType != 7) .AND.
                                                                                                       cseRSYS:rsType != 12)) then  UNDEFINED
																										else if (IfValidAnd( HPSysCOP17 > 0 ))
																										then  HPSysCOP17
																										else  UNDEFINED  endif endif  }

   ; SAC 6/24/20 - hard-wired to 1.2 for ALL heat pumps      ; include this fix stating w/ 2019.1.3 - SAC 7/15/20
   ; added for all HtPumpCap47AutoSz HPs based on logic from VCHP2 work - SAC 03/03/22
   "Set HVACSys:cseRSYS:rsFxCapAuxH"      HVACSys:cseRSYS:rsFxCapAuxH   =
      {  if (HaveHtPump < 1 .OR. IfValidAnd( Proj:AnalysisVersion >= 190103 )==0) then  UNDEFINED
         else if (HtPumpCap47AutoSz > 0.5 .AND. Proj:RunAbbrev != "s" .AND. Proj:RunAbbrev != "smf" .AND. Proj:RunAbbrev != "dr" .AND.
                  IfValidAnd( Proj:EnableResearchMode > 0.5 ) .AND. IfValidAnd( HtPumpSystem[1]:HtgAuxSizingFactor > 0 ))
         then  HtPumpSystem[1]:HtgAuxSizingFactor
         else  1.2  endif endif  }

  ; SAC 12/7/12 - added additional heat pump item - rsCapAuxH
  ; SAC 10/3/13 - removed AuxHtgCap from UI due to it being unnecessary as of CSE version 0.732
	;"Set HVACSys:cseRSYS:rsCapAuxH"			HVACSys:cseRSYS:rsCapAuxH		= {	if (HaveHtPump < 1) then  UNDEFINED
	;																									else if (IfValidAnd( HPSysAuxHtgCap > 0 ))
	;																									then  HPSysAuxHtgCap
	;																									else  UNDEFINED  endif endif  }

   ; rules/logic to support dual fuel HPs - SAC 12/09/20
   "Set HVACSys:cseRSYS:rsTypeAuxH - type of aux heating equipment"     HVACSys:cseRSYS:rsTypeAuxH =     ; (0) None, (1) Furnace, (2) Resistance   ; SAC 02/24/25 (tic #1379)
      {  if (IfValidAnd( HPBackupOption = 2 ) .AND. IfValidAnd( HPDFAFUE > 0 ))
         then  "Furnace"
         else if (IfValidAnd( HtPumpSystem[1]:AllowBackupOpt > 0 ))
         then  "Resistance"
         else  UNDEFINED  endif endif  }
   "Set HVACSys:cseRSYS:rsCtrlAuxH - type of aux heating equipment control"   HVACSys:cseRSYS:rsCtrlAuxH =     ; SAC 02/24/25 (tic #1379)
      {  if (IfValidAnd( HPBackupOption = 2 ) .AND. IfValidAnd( HPDFAFUE > 0 ))
         then  "Alternate"
         else if (IfValidAnd( HtPumpSystem[1]:AllowBackupOpt > 0 ))
         then  "Cycle"
         else  UNDEFINED  endif endif  }
   "Set HVACSys:cseRSYS:rsAFUEAuxH"          HVACSys:cseRSYS:rsAFUEAuxH =
      {  if (IfValidAnd( cseRSYS:rsTypeAuxH = 1 ))
         then  HPDFAFUE / 100
         else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsASHPLockOutT"      HVACSys:cseRSYS:rsASHPLockOutT =
      {  if (IfValidAnd( cseRSYS:rsTypeAuxH = 1 ) .AND. IfValidAnd( HPLockoutTemp > -999 ))
         then  HPLockoutTemp
         else  UNDEFINED  endif  }

  ; SAC 8/29/13 - quick fix for heat pumps from Bruce via e-mail   ; SAC 6/25/20 - prevent rsParElec output for ASHPPkgRoom (8) (tic #1225 & #1226)
  ; revised logic for new 2022+ crankcase htr formula that now also includes AC units - SAC 02/28/23
	"Set HVACSys:cseRSYS:rsParElec_x"		HVACSys:cseRSYS:rsParElec_x	=        ; revise crankcase htrs (rsParElec) mods to depend on Proj:AnalysisVersion >= 220202 - SAC 05/07/23
      {	if (IfValidAnd( Proj:StandardsVersion >= 2022 ) .AND. IfValidAnd( Proj:AnalysisVersion >= 220202 ))
         then  switch (cseRSYS:rsType)
                  case   8 :  UNDEFINED   ; "ASHPPkgRoom" 
                  case   9 :  UNDEFINED   ; "ACPkgRoom"   
                  case  10 :  UNDEFINED   ; "ACPkgRoomFurnace" 
                  case  11 :  UNDEFINED   ; "ACPkgRoomResistance" 
                  default  :  Format( "($tdboHrAv < 50.) * (1.-@RSYSRes[%c%s%c].prior.H.hrsOn) * @RSYS[%c%s%c].capNomC * 10./12000.",
                                       34, cseRSYS:Name, 34, 34, cseRSYS:Name, 34 )
               endswitch
         else  if (HaveHtPump < 1 .OR. NumHtPumpSysUnits < 1 .OR. cseRSYS:rsType == 8) then  UNDEFINED
					else	Format( "($tdboHrAv < 50) * 40 * %g", NumHtPumpSysUnits )  endif
         endif  }

   "Set HVACSys:cseRSYS:rsDefrostModel - modeling options for ASHP outdoor coil defrosting when 17°F < TDbO < 45°F"        ; SAC 6/26/20 (tic #1225)  ; revised for BackupOption - SAC 02/24/25 (tic #1379)
      HVACSys:cseRSYS:rsDefrostModel = {  if (cseRSYS:rsType == 8)      ; ASHPPkgRoom
							                     then  "None"
                                          else if (IfValidAnd( HtPumpSystem[1]:AllowBackupOpt > 0 ) .AND. HPBackupOption == 0)
                                          then  "RevCycle"
                                          else if (IfValidAnd( HtPumpSystem[1]:AllowBackupOpt > 0 ) .AND. HPBackupOption > 0)
                                          then  "RevCycleAux"
                                          else  UNDEFINED  endif endif endif  }  

   "Set HVACSys:cseRSYS:rsFanMotTy"    HVACSys:cseRSYS:rsFanMotTy   =         ; SAC 02/24/25 (tic #1379)  ; switched from basing FanMotTy on Variable vs. Single speed as opposed to Eff Metric - SAC 03/03/25 (tic #1379)
      {  if (Type == 2 .AND. IfValidAnd( HtPumpSystem[1]:AllowBackupOpt > 0 ))
         then  "PSC"
         else  UNDEFINED  endif  }

; "debug" HVACSys:action = { MessageBox( "HVACSys '%s' HaveCooling = %g / ClSysCFMperTon = %g", Name, HaveCooling, ClSysCFMperTon ) }
	"Set HVACSys:cseRSYS:rsVfPerTon"			HVACSys:cseRSYS:rsVfPerTon		= {	if (HaveCooling == 0) then  UNDEFINED
																										else if (IfValidAnd( ClSysCFMperTon > 0 ))
																										then  ClSysCFMperTon
																										else	UNDEFINED  endif endif  }

  ; SAC 5/13/13 - logic to account for ht/cl ducts toggled off    ; SAC 6/22/20 - prevent output for rsType = ASHPPkgRoom or ACPkgRoom (tic #1225, #1226)
	"Set HVACSys:cseRSYS:rsFanPwrH"			HVACSys:cseRSYS:rsFanPwrH		= {	if (LocalCompAssigned( Fan ) == 0) then  UNDEFINED
	                                                                           else if (cseRSYS:rsType == 8) then  UNDEFINED
																										else if (IfValidAnd( Fan:WperCFMCool > 0 ))
																										then  if (LocalRef( cseRSYS:rsDSEH ) == 1) then  0.0
																												else  Fan:WperCFMCool  endif
																										else	UNDEFINED  endif endif endif  }
	"Set HVACSys:cseRSYS:rsFanPwrC"			HVACSys:cseRSYS:rsFanPwrC		= {	if (LocalCompAssigned( Fan ) == 0 .OR. HaveCooling < 1) then  UNDEFINED
	                                                                           else if (cseRSYS:rsType >= 8 .AND. cseRSYS:rsType <= 11) then  UNDEFINED
																										else if (IfValidAnd( Fan:WperCFMCool > 0 ))
																										then  if (LocalRef( cseRSYS:rsDSEC ) == 1) then  0.0
																												else  Fan:WperCFMCool  endif
																										else	UNDEFINED  endif endif endif  }

; SAC 8/26/13 - added OAV (CFI (Central Fan Integrated) Cool Vent stuff)
; SAC 9/4/13 - revised to reflect NEW primary inputs of HVACSys:CFIClVentFlow & CFIClVentPwr  (as opposed to CFIClVentFan)
	"Set HVACSys:cseRSYS:rsOAVType"			HVACSys:cseRSYS:rsOAVType		= {	if (Proj:EnableClVent > 0.5 .AND. Proj:UnitClVentOption == 3)
																							;			then	if ( LocalCompAssigned( CFIClVentFan ) .AND.
																										then	if ( 
																													  ( Type == 3 .OR. 
																														 ((Type == 1 .OR. Type == 2) .AND. CFIClVentOption > 0) ) )
																							;					then	if (LocalStatus( CFIClVentFan:CoolingVent ) < 2 .OR. LocalStatus( CFIClVentFan:WperCFMCool ) < 2) then  0
																							;							else if (CFIClVentFan:CoolingVent <= 0 .OR. CFIClVentFan:WperCFMCool < 0) then  0
																												then	if (LocalStatus( CFIClVentFlow ) < 2 .OR. LocalStatus( CFIClVentPwr ) < 2) then  0
																														else if (CFIClVentFlow <= 0 .OR. CFIClVentPwr < 0) then  0
																														else if (Type == 3)
																														then	2				; "VarFlow"
																														else	1				; "FixedFlow"
																														endif endif endif
																												else  0  endif
																										else  0  endif  }

;	"Set HVACSys:cseRSYS:rsOAVReliefZn-1"		HVACSys:cseRSYS:Action	= {	if (GlobalCompAssigned( Attic:CSE_ZONE ))
;																									then	MessageBox( "GlobalCompAssigned( Attic:CSE_ZONE ) return TRUE" )
;																									else	MessageBox( "GlobalCompAssigned( Attic:CSE_ZONE ) return FALSE" )  endif  }
;	"Set HVACSys:cseRSYS:rsOAVReliefZn-2"		HVACSys:cseRSYS:Action	= {	MessageBox( "GlobalRef( Attic:CSE_ZONE:Name ) = '%s'", GlobalRef( Attic:CSE_ZONE:Name ) )  }
;	"Set HVACSys:cseRSYS:rsOAVReliefZn-msg"	HVACSys:cseRSYS:Action	= {	if (LocalRef( cseRSYS:rsOAVType ) < 0.5 .OR. LocalCompAssigned( CFIClVentAttic ) < 0.5) then  UNCHANGED
;																									else if (LocalCompAssigned( CFIClVentAttic:CSE_ZONE ) < 0.5) then  UNCHANGED
;																									else	PostMessageToLog( "   assigning Attic '%s' as rsOAVReliefZn for CSE RSYS '%s'", LocalRef( CFIClVentAttic:CSE_ZONE:Name ), Localref( cseRSYS:Name ) )  endif endif  }
;	"Set HVACSys:cseRSYS:rsOAVReliefZn"		HVACSys:cseRSYS:rsOAVReliefZn	= {	if (LocalRef( cseRSYS:rsOAVType ) > 0.5 .AND. GlobalCompAssigned( Attic:CSE_ZONE ) > 0.5) then  GlobalRef( Attic:CSE_ZONE:Name )  else  UNDEFINED  endif  }
	"Set HVACSys:cseRSYS:rsOAVReliefZn"		HVACSys:cseRSYS:rsOAVReliefZn	= {	if (LocalRef( cseRSYS:rsOAVType ) < 0.5 .OR. LocalCompAssigned( CFIClVentAttic ) < 0.5) then  UNDEFINED
																										else if (LocalCompAssigned( CFIClVentAttic:CSE_ZONE ) < 0.5) then  UNDEFINED
																										else	LocalRef( CFIClVentAttic:CSE_ZONE:Name )  endif endif  }
; SAC 9/4/13 - revised to reflect NEW primary inputs of HVACSys:CFIClVentFlow & CFIClVentPwr  (as opposed to CFIClVentFan)
	"Set HVACSys:cseRSYS:rsOAVVfDs"			HVACSys:cseRSYS:rsOAVVfDs		= {	if (LocalCompAssigned( cseRSYS:rsOAVReliefZn )) then  CFIClVentFlow  else  UNDEFINED  endif  }
	"Set HVACSys:cseRSYS:rsOAVFanPwr"		HVACSys:cseRSYS:rsOAVFanPwr	= {	if (LocalCompAssigned( cseRSYS:rsOAVReliefZn )) then  CFIClVentPwr   else  UNDEFINED  endif  }


;	"Set HVACSys:cseRSYS:rsMtrH"				HVACSys:cseRSYS:rsMtrH			= {	if (LocalCompAssigned( HeatSystem ) == 0) then  UNDEFINED
;																										else if (Global( Proj:NatGasAvailable ) > 0.5)
;																										then  Global( Proj:cseNatGasHVACMtr )
;																										else  Global( Proj:cseElecHVACMtr )  endif endif  }
;	"Set HVACSys:cseRSYS:rsMtrC"				HVACSys:cseRSYS:rsMtrC			= {	if (LocalCompAssigned( CoolSystem ) == 0) then  UNDEFINED
;																										else  Global( Proj:cseElecHVACMtr )  endif  }

   "Set cseDHWSYS:SourceDHWSys:DHWHtrHVACSysRef[1-6]:cseRSYS:rsCHDHWSYS for HeatPumpDHWCombo"  for:#Htr=(1to6)  cseDHWSYS:SourceDHWSys:DHWHtrHVACSysRef[#Htr]:cseRSYS:rsCHDHWSYS  =   ; HeatPumpDHWCombo - SAC 04/02/23 (tic #1349)
      {  if (IfValidAnd( SourceDHWSys:HeaterMult[#Htr] > 0 ) .AND.
             IfValidAnd( SourceDHWSys:DHWHtrHVACSysRef[#Htr]:HtPumpSysType == 35 ))
         then  Local( Name )
         else  UNCHANGED  endif  }
	"Set HeatPumpDHWCombo-related cseDHWSYS properties"      cseDHWSYS:Action =                     ; HeatPumpDHWCombo - SAC 04/02/23 (tic #1349)
      {  if (LocalCompAssigned( SourceDHWSys:DHWHeater[1] ) == ComponentType( "HVACSys" ))
         then  if (IfValidAnd( SourceDHWSys:DHWHeater[1]:HtPumpSysType == 35 ))
               then  EvalRulelist( "DHWSys_SetupDHWSYS_HeatPumpDHWCombo", 1 )
               else  UNCHANGED  endif
         else  UNCHANGED  endif  }

   ; VCHP3 - SAC 05/16/24 (tic #1379)  ; mod to prevent perf map output for std design systems still referencing VCHP3s - SAC 05/21/24 (tic #1379)
   "Create & setup csePERFORMANCEMAP objects for VCHP3 HVACHtPump"   HVACHtPump:Action  =       ; added Single Speed option - SAC 07/21/24 (VCHP3)
      {  if (Type == 36 .AND. SumRevRef( HVACSys:HtPumpSystem, HVACSys:HtPmpFlrAreaServed ) > 1 .AND.
             SumRevRef( HVACSys:HtPumpSystem, HVACSys:HtPumpSysType ) > 35 .AND.
             (LocalCompAssigned( VCHP3PerfMapHtgRef ) < 1 .OR. LocalCompAssigned( VCHP3PerfMapClgRef ) < 1))
         then  if (Speeds == 1)
               then  EvalRulelist( "VCHP3_CreatePerformanceMaps_SingleSpeed", 1 )
               else  EvalRulelist( "VCHP3_CreatePerformanceMaps_Variable",    1 )  endif
         else  UNCHANGED  endif  }

   ; SAC 11/4/18 - separate rules to setup VCHP RSYS inputs  - SAC 11/5/18 - logic to prevent these settings for runs other than User or Prop*   ; VCHP2 - SAC 11/01/20
   ; added AWHP setup - SAC 12/04/22   ; HeatPumpDHWCombo - SAC 03/31/23 (tic #1349)   ; ensure proper HVAC setup for Existing systems in Std design - SAC 10/25/23  ; VCHP3 - SAC 05/16/24 (tic #1379)
   "Setup VCHP & AWHP RSYS"    HVACSys:cseRSYS:Action  = {
         if (HaveHtPump > 0 .AND. 
             (Status == 1 .OR.
              Proj:RunAbbrev = "p"   .OR. Proj:RunAbbrev = "p-N" .OR. Proj:RunAbbrev = "p-E" .OR. 
                                          Proj:RunAbbrev = "p-S" .OR. Proj:RunAbbrev = "p-W" .OR.
              Proj:RunAbbrev = "pfx" .OR. Proj:RunAbbrev = "pfx-N" .OR. Proj:RunAbbrev = "pfx-E" .OR.
                                          Proj:RunAbbrev = "pfx-S" .OR. Proj:RunAbbrev = "pfx-W" .OR.
              Proj:RunAbbrev = "pp"  .OR. Proj:RunAbbrev = "pp-N" .OR. Proj:RunAbbrev = "pp-E" .OR.
                                          Proj:RunAbbrev = "pp-S" .OR. Proj:RunAbbrev = "pp-W" ))
         then  if (HtPumpSysType == 22)
               then  EvalRulelist( "HVACSys_SetupRSYS_VCHP", 1 )
               else if (HtPumpSysType == 33)
               then  EvalRulelist( "HVACSys_SetupRSYS_VCHP2", 1 )
               else if (HtPumpSysType == 36)
               then  EvalRulelist( "HVACSys_SetupRSYS_VCHP3", 1 )
               else if (HtPumpSysType == 34)
               then  EvalRulelist( "HVACSys_SetupRSYS_AWHP", 1 )
               else if (HtPumpSysType == 35)
               then  EvalRulelist( "HVACSys_SetupRSYS_HeatPumpDHWCombo", 1 )
               else  UNCHANGED  endif endif endif endif endif
         else  UNCHANGED  endif  }

; TO DO - default properly based on the TYPE of HVAC equipment defined
	"Set HVACSys:cseRSYS:Fuel_HaveElec"		HVACSys:cseRSYS:Fuel_HaveElec    = {	1  }
;	"Set HVACSys:cseRSYS:Fuel_HaveNatGas"	HVACSys:cseRSYS:Fuel_HaveNatGas  = {	1  }
;	"Set HVACSys:cseRSYS:Fuel_HaveOther"	HVACSys:cseRSYS:Fuel_HaveOther   = {	0  }
	"Set HVACSys:cseRSYS:Fuel_HaveNatGas"	HVACSys:cseRSYS:Fuel_HaveNatGas  = {	if (Proj:Fuel_HaveNatGas > 0.5) then  1  else  0  endif  }
	"Set HVACSys:cseRSYS:Fuel_HaveOther"	HVACSys:cseRSYS:Fuel_HaveOther   = {	if (Proj:Fuel_HaveNatGas > 0.5) then  0  else  1  endif  }

   "Blast rsEER if rsCOP95 is specified"  cseRSYS:rsEER =                     ; SAC 09/23/21 (VCHP2)
      {  if (IfValidAnd( rsEER > 0 ) .AND. IfValidAnd( rsCOP95 > 0 ))
         then  UNDEFINED
         else  UNCHANGED  endif  }

  ; Assignment of CSE ZONEs to CSE RSYSs
;	"Set cseZONE:znRSysH"	cseZONE:znRSysH	= {	if (LocalCompAssigned( SourceZone ) == 0) then  UNDEFINED
;																	else if (LocalCompAssigned( SourceZone:HVACSystem ) == 0) then  UNDEFINED
;																	else if (LocalCompAssigned( SourceZone:HVACSystem:HeatSystem ) == 0) then  UNDEFINED
;																	else if (LocalCompAssigned( SourceZone:HVACSystem:cseRSYS ) == 0) then  UNDEFINED
;																	else  LocalRef( SourceZone:HVACSystem:cseRSYS )  endif endif endif endif  }
;	"Set cseZONE:znRSysC"	cseZONE:znRSysC	= {	if (LocalCompAssigned( SourceZone ) == 0) then  UNDEFINED
;																	else if (LocalCompAssigned( SourceZone:HVACSystem ) == 0) then  UNDEFINED
;																	else if (LocalCompAssigned( SourceZone:HVACSystem:CoolSystem ) == 0) then  UNDEFINED
;																	else if (LocalCompAssigned( SourceZone:HVACSystem:cseRSYS ) == 0) then  UNDEFINED
;																	else  LocalRef( SourceZone:HVACSystem:cseRSYS )  endif endif endif endif  }
;	"debugging"		cseZONE:Action		= {	MessageBox( "cseZONE:znRSys rule:  SourceZone = '%s' | Proj:RunScope = %g | SourceZone:HVACSysStatus = %g | SourceZone:HVACSystem = '%s' | SourceZone:HVACSystem:cseRSYS = '%s' | SourceZone:HVACSystem:HaveHeating = %g | SourceZone:HVACSystem:HaveCooling = %g",
;																			SourceZone:Name, Proj:RunScope, SourceZone:HVACSysStatus, SourceZone:HVACSystem:Name, SourceZone:HVACSystem:cseRSYS:Name, SourceZone:HVACSystem:HaveHeating, SourceZone:HVACSystem:HaveCooling )  }
; SAC 12/16/13 - mods to rule to assign appropriate new vs. E+A+A system to cseZONE
   ; SAC 9/10/19 - revisions for OtherZone (MFamProto)
	"Set cseZONE:znRSys"		cseZONE:znRSys		=
      {  if (LocalCompAssigned( SourceZone ) > 0)
         then  if (Proj:RunScope == 2 .AND. SourceZone:HVACSysStatus == 2)
					then       if (LocalCompAssigned( SourceZone:AltHVACSystem ) == 0) then  UNDEFINED
							else if (LocalCompAssigned( SourceZone:AltHVACSystem:cseRSYS ) == 0) then  UNDEFINED
							else if (SourceZone:AltHVACSystem:HaveHeating == 0 .AND.
										SourceZone:AltHVACSystem:HaveCooling == 0) then  UNDEFINED
							else  LocalRef( SourceZone:AltHVACSystem:cseRSYS )  endif endif endif
					else if (Proj:RunScope == 2 .AND. SourceZone:HVACSysStatus == 1)
					then       if (LocalCompAssigned( SourceZone:exHVACSystem ) == 0) then  UNDEFINED
							else if (LocalCompAssigned( SourceZone:exHVACSystem:cseRSYS ) == 0) then  UNDEFINED
							else if (SourceZone:exHVACSystem:HaveHeating == 0 .AND.
										SourceZone:exHVACSystem:HaveCooling == 0) then  UNDEFINED
							else  LocalRef( SourceZone:exHVACSystem:cseRSYS )  endif endif endif
					else       if (LocalCompAssigned( SourceZone:HVACSystem ) == 0) then  UNDEFINED
							else if (LocalCompAssigned( SourceZone:HVACSystem:cseRSYS ) == 0) then  UNDEFINED
							else if (SourceZone:HVACSystem:HaveHeating == 0 .AND.
										SourceZone:HVACSystem:HaveCooling == 0) then  UNDEFINED
							else  LocalRef( SourceZone:HVACSystem:cseRSYS )  endif endif endif
					endif endif
			else if (LocalCompAssigned( SourceOtherZone ) > 0)  
			then       if (LocalCompAssigned( SourceOtherZone:ozHVACSystem ) == 0) then  UNDEFINED
					else if (LocalCompAssigned( SourceOtherZone:ozHVACSystem:cseRSYS ) == 0) then  UNDEFINED
					else if (SourceOtherZone:ozHVACSystem:HaveHeating == 0 .AND.
								SourceOtherZone:ozHVACSystem:HaveCooling == 0) then  UNDEFINED
					else  LocalRef( SourceOtherZone:ozHVACSystem:cseRSYS )  endif endif endif
			else  UNDEFINED  endif endif  }

; SAC 5/16/12 - experiment w/out ducts...
;	"Create new cseRSYS:DuctWrapMaterial"  			cseRSYS:DuctWrapMaterial				= {	CreateComp( cseMATERIAL, "DuctWrap-" + Local( Name ) )  }
;	"Default cseRSYS:DuctWrapMaterial:matCond"		cseRSYS:DuctWrapMaterial:matCond  	= {	0.032  } 		; prioperties based on contents of sample CSE input from CB ACtest1x.cse 5/9/12
;	"Default cseRSYS:DuctWrapMaterial:matCondCT"		cseRSYS:DuctWrapMaterial:matCondCT	= {	0.00418  }
;	"Default cseRSYS:DuctWrapMaterial:matSpHt"		cseRSYS:DuctWrapMaterial:matSpHt  	= {	0.2  }
;	"Default cseRSYS:DuctWrapMaterial:matDens"		cseRSYS:DuctWrapMaterial:matDens  	= {	0.7  }
;	"Default cseRSYS:DuctWrapMaterial:matThk"			cseRSYS:DuctWrapMaterial:matThk   	= {	4/12  }


; SAC 5/13/13 - moved UP to include in logic related to setting rsDSEC & rsDSEH
;	"Set cseRSYS:Cr8SupplyDuct"		cseRSYS:Cr8SupplyDuct	= {
;				if (LocalCompAssigned( SourceHVACSys:DistribSystem ) == 0) then  0
;				else if (SourceHVACSys:DistribSystem:DuctsPresent == 0) then  0
;				else if (SourceHVACSys:DistribSystem:DuctLeakageValUse <= 0 .OR.
;							SourceHVACSys:DistribSystem:DuctInsAdjRval <= 0 .OR.
;							SourceHVACSys:DistribSystem:SupplyDuctArea <= 0 .OR.
;							SourceHVACSys:DistribSystem:SupplyDuctDiam <= 0 ) then  0
;				else  1  endif endif endif  }
;
;	"Set cseRSYS:Cr8ReturnDuct"		cseRSYS:Cr8ReturnDuct	= {
;				if (LocalCompAssigned( SourceHVACSys:DistribSystem ) == 0) then  0
;				else if (SourceHVACSys:DistribSystem:DuctsPresent == 0) then  0
;				else if (SourceHVACSys:DistribSystem:DuctLeakageValUse <= 0 .OR.
;							SourceHVACSys:DistribSystem:RetDuctInsAdjRval <= 0 .OR.
;							SourceHVACSys:DistribSystem:ReturnDuctArea <= 0 .OR.
;							SourceHVACSys:DistribSystem:ReturnDuctDiam <= 0 ) then  0
;				else  1  endif endif endif  }


	"Create a CSE Supply DUCTSEG for each cseRSYS"	cseRSYS:SupplyDuct	= {	if (Cr8SupplyDuct < 0.5) then  UNCHANGED
																										else  CreateComp( cseDUCTSEG, "SupplyDuct-" + substr( Name, 0, 42 ) )  endif  }
	"Set cseRSYS:SupplyDuct:Parent"			cseRSYS:SupplyDuct:Parent		= {	Local( Name )  }
	"Set cseRSYS:SupplyDuct:dsTy"				cseRSYS:SupplyDuct:dsTy			= {	"SUPPLY"  }
	"Set cseRSYS:SupplyDuct:dsInArea"		cseRSYS:SupplyDuct:dsInArea	= {	SourceHVACSys:DistribSystem:SupplyDuctArea  }
	"Set cseRSYS:SupplyDuct:dsDiameter"		cseRSYS:SupplyDuct:dsDiameter	= {	SourceHVACSys:DistribSystem:SupplyDuctDiam / 12  }
	"Set cseRSYS:SupplyDuct:dsInsulR"		cseRSYS:SupplyDuct:dsInsulR	= {	SourceHVACSys:DistribSystem:DuctInsAdjRval  }
	"Set cseRSYS:SupplyDuct:dsLeakF"			cseRSYS:SupplyDuct:dsLeakF		= {	SourceHVACSys:DistribSystem:DuctLeakageValUse * 0.585 / 100  }
	"Set cseRSYS:SupplyDuct:dsExCnd"			cseRSYS:SupplyDuct:dsExCnd		= {	if (SourceHVACSys:DistribSystem:DuctLocation == 6) then  "AMBIENT"		; DuctLocation = "Outside"  - SAC 9/4/13 - to address GC issue 164
																										else  UNDEFINED  endif  }
; SupplyDuctLoc could point to several different object types, meaning eval-time parsing of LocalRef() is required
	"Set cseRSYS:SupplyDuct:dsAdjZn"			cseRSYS:SupplyDuct:dsAdjZn		= {	if (SourceHVACSys:DistribSystem:DuctLocation == 6 .OR.
																											 LocalCompAssigned( SourceHVACSys:DistribSystem:SupplyDuctLocUse ) < 0.5) then  UNDEFINED
																										else  SourceHVACSys:DistribSystem:SupplyDuctLocUse:CSE_ZONE  endif  }

;	"Set cseRSYS:SupplyDuct:dsAdjZn - 1"	cseRSYS:SupplyDuct:dsAdjZn		= {	if (ComponentCount( Attic ) > 0.5)
;																										then	if (GlobalCompAssigned( Attic:CSE_ZONE ) > 0.5)
;																												then	Global( Attic:CSE_ZONE )
;																												else  UNDEFINED  endif
;																										else  UNDEFINED  endif  }
;	"Set cseRSYS:SupplyDuct:dsAdjZn - 2"	cseRSYS:SupplyDuct:dsAdjZn		= {	if (LocalCompAssigned( SupplyDuct:dsAdjZn ) > 0.5) then  UNCHANGED
;																										else	if (ComponentCount( CrawlSpace ) > 0.5)
;																												then	if (GlobalCompAssigned( CrawlSpace:CSE_ZONE ) > 0.5)
;																														then	Global( CrawlSpace:CSE_ZONE )
;																														else  UNCHANGED  endif
;																												else  UNCHANGED  endif endif  }
;	"Set cseRSYS:SupplyDuct:dsAdjZn - 3"	cseRSYS:SupplyDuct:dsAdjZn		= {	if (LocalCompAssigned( SupplyDuct:dsAdjZn ) > 0.5) then  UNCHANGED
;																										else	if (ComponentCount( cseZONE ) > 0.5)
;																												then	MaxAllComp( cseZONE:znVol )
;																												else	UNCHANGED  endif endif  }
;	"Set cseRSYS:SupplyDuct:dsInsulMat"		cseRSYS:SupplyDuct:dsInsulMat	= {	Local( DuctWrapMaterial )  }


	"Create a CSE Return DUCTSEG for each cseRSYS"	cseRSYS:ReturnDuct	= {	if (Cr8ReturnDuct < 0.5) then  UNCHANGED
																										else  CreateComp( cseDUCTSEG, "ReturnDuct-" + substr( Name, 0, 42 ) )  endif  }
	"Set cseRSYS:ReturnDuct:Parent"			cseRSYS:ReturnDuct:Parent		= {	Local( Name )  }
	"Set cseRSYS:ReturnDuct:dsTy"				cseRSYS:ReturnDuct:dsTy			= {	"RETURN"  }
	"Set cseRSYS:ReturnDuct:dsInArea"		cseRSYS:ReturnDuct:dsInArea	= {	SourceHVACSys:DistribSystem:ReturnDuctArea  }
	"Set cseRSYS:ReturnDuct:dsDiameter"		cseRSYS:ReturnDuct:dsDiameter	= {	SourceHVACSys:DistribSystem:ReturnDuctDiam / 12  }
	"Set cseRSYS:ReturnDuct:dsInsulR"		cseRSYS:ReturnDuct:dsInsulR	= {	SourceHVACSys:DistribSystem:RetDuctInsAdjRval  }
	"Set cseRSYS:ReturnDuct:dsLeakF"			cseRSYS:ReturnDuct:dsLeakF		= {	SourceHVACSys:DistribSystem:DuctLeakageValUse * 0.415 / 100  }
	"Set cseRSYS:ReturnDuct:dsExCnd"			cseRSYS:ReturnDuct:dsExCnd		= {	if (SourceHVACSys:DistribSystem:DuctLocation == 6) then  "AMBIENT"		; DuctLocation = "Outside"  - SAC 9/4/13 - to address GC issue 164
																										else  UNDEFINED  endif  }
; ReturnDuctLoc could point to several different object types, meaning eval-time parsing of LocalRef() is required
	"Set cseRSYS:ReturnDuct:dsAdjZn"			cseRSYS:ReturnDuct:dsAdjZn		= {	if (SourceHVACSys:DistribSystem:DuctLocation == 6 .OR.
																											 LocalCompAssigned( SourceHVACSys:DistribSystem:ReturnDuctLocUse ) < 0.5) then  UNDEFINED
																										else  SourceHVACSys:DistribSystem:ReturnDuctLocUse:CSE_ZONE  endif  }

;	"Set cseRSYS:ReturnDuct:dsAdjZn - 1"	cseRSYS:ReturnDuct:dsAdjZn		= {	if (ComponentCount( Attic ) > 0.5)
;																										then	if (GlobalCompAssigned( Attic:CSE_ZONE ) > 0.5)
;																												then	Global( Attic:CSE_ZONE )
;																												else  UNDEFINED  endif
;																										else  UNDEFINED  endif  }
;	"Set cseRSYS:ReturnDuct:dsAdjZn - 2"	cseRSYS:ReturnDuct:dsAdjZn		= {	if (LocalCompAssigned( ReturnDuct:dsAdjZn ) > 0.5) then  UNCHANGED
;																										else	if (ComponentCount( CrawlSpace ) > 0.5)
;																												then	if (GlobalCompAssigned( CrawlSpace:CSE_ZONE ) > 0.5)
;																														then	Global( CrawlSpace:CSE_ZONE )
;																														else  UNCHANGED  endif
;																												else  UNCHANGED  endif endif  }
;	"Set cseRSYS:ReturnDuct:dsAdjZn - 3"	cseRSYS:ReturnDuct:dsAdjZn		= {	if (LocalCompAssigned( ReturnDuct:dsAdjZn ) > 0.5) then  UNCHANGED
;																										else	if (ComponentCount( cseZONE ) > 0.5)
;																												then	MaxAllComp( cseZONE:znVol )
;																												else	UNCHANGED  endif endif  }
;	"Set cseRSYS:ReturnDuct:dsInsulMat"		cseRSYS:ReturnDuct:dsInsulMat	= {	Local( DuctWrapMaterial )  }


;  0,  "Zone",     "Zone (not attic)",    100,  0,  0, "Project", "", "", "", "", -1,  1,  0,   3000
;  1,           "Type",              BEMP_Sym,  1, "",                 0, "",         0, "",             3004, "Zone type"    
;	1,           "HVACSystem",        BEMP_Obj,  1,  0,  0, "",         0,  1, "HVACSys",  1, "Type",  3006, "HVAC system assignment" 
;	1,           "CoolVentSystem",    BEMP_Obj,  1,  0,  0, "",         0,  1, "HVACSys", 10, "Type",  3006, "Cooling Ventilation System assignment" 
;	1,           "IAQVentSystem",     BEMP_Obj,  1,  0,  0, "",         0,  1, "HVACSys", 20, "Type",  3006, "IAQ Ventilation System assignment" 
;  
;  0,  "cseZONE",  "cseZONE",            200,  0,  0, "Project", "", "", "", "", -1,  1,  0,   3400
;  1,           "SourceZone",        BEMP_Obj,  1, "",                 0, "Zone",     0, "",             6095, "CZone that is the source of this component" 
;  1,           "znRSysH",           BEMP_Obj,  1, "",                 0, "cseRSYS",  0, "",             6095, "RSYS component supplying Space Heating to this ZONE" 
;  1,           "znRSysC",           BEMP_Obj,  1, "",                 0, "cseRSYS",  0, "",             6095, "RSYS component supplying Cooling to this ZONE" 
;  
;  0,  "HVACSys", "HVAC System",         100,  0,  0, "",        "", "", "", "", -1,  1,  0,   8000
;  1,           "Type",              BEMP_Sym,  1, "",                 0, "",            0, "",             8001, "HVAC system type"    
;  1,           "HeatSystem",        BEMP_Obj,  1, "",                 0, "HVACHeat",    0, "",             8004, "Heating component"    
;  1,           "CoolSystem",        BEMP_Obj,  1, "",                 0, "HVACCool",    0, "",             8006, "Cooling component"    
;  1,           "DistribSystem",     BEMP_Obj,  1, "",                 0, "HVACDist",    0, "",             8008, "Distribution system"    
;  1,           "Fan",               BEMP_Obj,  1, "",                 0, "HVACFan",     0, "",             8010, "Fan type/system"    
;  1,           "FloorAreaServed",   BEMP_Flt,  1, "ft2",              0, "",            0, "",             8008, "Floor area served by this system"    
;  1,           "HasCentralFurnace", BEMP_Int,  1, "",                 0, "",            0, "",             8008, "Flag indicating presence of central furnace"    
;  1,           "CSE_RSYS",          BEMP_Obj,  1, "",                 0, "cseRSYS",     0, "",             7010, "CSE RSYS component" 
;  
;  0,  "cseMETER", "cseMETER",            100,  0,  0, "",        "", "", "", "", -1,  1,  0,   1800
;  
;  0,  "cseRSYS",  "cseRSYS",            1000,  0,  0, "",        "", "", "", "", -1,  1,  0,   3000
;  1,           "rsEffH",            BEMP_Flt,  1, "??",               0, "",         0, "",            3208, "Heating efficiency"    
;  1,           "rsEffC",            BEMP_Flt,  1, "??",               0, "",         0, "",            3208, "Cooling efficiency"    
;  1,           "rsMtrH",            BEMP_Obj,  1, "",                 0, "cseMETER", 0, "",            3208, "Heating energy use meter"    
;  1,           "rsMtrC",            BEMP_Obj,  1, "",                 0, "cseMETER", 0, "",            3208, "Cooling energy use meter"    
;  1,           "SourceHVACSys",     BEMP_Obj,  1, "",                 0, "HVACSys",  0, "",            7010, "HVACSys that is the source of this component" 


 ;-----------------------
 ; HVACSys AirNet
 ;-----------------------
; old (second round version) of cool vent (ClVent) data
; SAC 8/27/13 - RESTORED use of HVACSys:AirNet_CoolVent & HVACSys:AirNet_CoolVentWpCFM for CFI-based CoolVent
	"Set HVACSys:AirNet_CoolVent"			HVACSys:AirNet_CoolVent			= {	CFIClVentFlow  }
	"Set HVACSys:AirNet_CoolVentWpCFM"	HVACSys:AirNet_CoolVentWpCFM	= {	CFIClVentPwr   }
;	"Set HVACSys:AirNet_CoolVent"			HVACSys:AirNet_CoolVent			= {	if (Local( Type ) == 1 .OR. Local( Type ) == 10)  ; central cool/heat or cooling vent systems
;																									then	if (LocalCompAssigned( Fan ))
;																											then	LocalRef( Fan:CoolingVent )
;																											else	0  endif
;																									else	0  endif  }
;	"Set HVACSys:AirNet_CoolVentWpCFM"	HVACSys:AirNet_CoolVentWpCFM	= {	if (Local( Type ) == 1 .OR. Local( Type ) == 10)  ; central cool/heat or cooling vent systems
;																									then	if (LocalCompAssigned( Fan ))
;																											then	LocalRef( Fan:WperCFMCool )
;																											else	0  endif
;																									else	0  endif  }

;	mjb	use Evap Cond Effectiveness in CSE string to define outdoor air temp seen by HVACSys (if CoolSystem = EvapCond)	7/29/14
;	"Set HVACSys:cseRSYS:rsTdbOut_x"			HVACSys:cseRSYS:rsTdbOut_x		= {	if (HaveEvapCond > 0 .AND. Proj:RunNumber < 2) then
;																											Format("%g * $tWbO + %g * $tDbO", SysEvapCondEff, (1 - SysEvapCondEff))
;																										else  UNDEFINED  endif  }
;	"debugging"		HVACSys:Action	= {	MessageBox( "cseRSYS rsTdbOut:  %s", HVACSys:cseRSYS:rsTdbOut_x )  }

; testing response to CSE ERRORS
;	"Blast HVACSys:cseRSYS:rsType"		HVACSys:cseRSYS:rsType	= {   UNDEFINED  }
;	"Blast HVACSys:cseRSYS:rsSEER"		HVACSys:cseRSYS:rsSEER	= {	UNDEFINED  }
;	"Blast HVACSys:cseRSYS:rsEER"			HVACSys:cseRSYS:rsEER	= {	UNDEFINED  }

END
;*************************************************************************


;************************************************************************* SAC 12/04/22
RULELIST "HVACSys_SetupRSYS_AWHP" 1 0 0 1
;*************************************************************************
   "Set HVACSys:cseRSYS:rsFEffC_x"     HVACSys:cseRSYS:rsFEffC_x    = {  if (IfValidAnd( ClSysMultiSpeed > 0 )) then  "1/FAWHPC"     else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsFanPwrC"     HVACSys:cseRSYS:rsFanPwrC    = {  if (IfValidAnd( ClSysMultiSpeed > 0 )) then  UNDEFINED      else  0.45       endif  }
   "Set HVACSys:cseRSYS:rsFanPwrC_x"   HVACSys:cseRSYS:rsFanPwrC_x  = {  if (IfValidAnd( ClSysMultiSpeed > 0 )) then  "0.45*FAWHPC"  else  UNDEFINED  endif  }

   "Set HVACSys:cseRSYS:rsFEffH_x"     HVACSys:cseRSYS:rsFEffH_x    = {  if (IfValidAnd( ClSysMultiSpeed > 0 )) then  "1/FAWHPH"     else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsFanPwrH"     HVACSys:cseRSYS:rsFanPwrH    = {  if (IfValidAnd( ClSysMultiSpeed > 0 ) .OR.  IfValidAnd( HtPumpDucted > 0 )==0) then  UNDEFINED      else  0.45       endif  }
   "Set HVACSys:cseRSYS:rsFanPwrH_x"   HVACSys:cseRSYS:rsFanPwrH_x  = {  if (IfValidAnd( ClSysMultiSpeed > 0 ) .AND. IfValidAnd( HtPumpDucted > 0 )   ) then  "0.45*FAWHPH"  else  UNDEFINED  endif  }




;	"Set HVACSys:cseRSYS:rsFChg"				HVACSys:cseRSYS:rsFChg			= {	if (HaveCooling == 0) then  UNDEFINED
;																										else if (LocalStatus( ClSysRefrigChgAdjFctr ) < 2) then  UNDEFINED
;																										else if (ClSysRefrigChgAdjFctr > 0 .AND. ClSysRefrigChgAdjFctr <= 1) then  ClSysRefrigChgAdjFctr
;																										else  UNDEFINED  endif endif endif    }
;
;
;   rsFChg = 0.96                        // Refrigerant charge adjustment factor
;   rsSEER = 15.052632                   // Cooling SEER
;   rsEER = 12.1875                      // Cooling EER (required for *PkgRoom types)
;   rsVfPerTon = 350                     // CFM per Ton (default = 350)
;   rsFanPwrC = 0.45*FAWHPC              // Cooling fan power.



   "Blast HVACSys:cseRSYS:rsCap35"     HVACSys:cseRSYS:rsCap35      = {  UNDEFINED  }
   "Blast HVACSys:cseRSYS:rsCap17"     HVACSys:cseRSYS:rsCap17      = {  UNDEFINED  }

   "Set HVACSys:cseRSYS:rsDefrostModel"   HVACSys:cseRSYS:rsDefrostModel  = {  "REVCYCLE"  }
END
;*************************************************************************

;************************************************************************* HeatPumpDHWCombo - SAC 03/31/23 (tic #1349)
RULELIST "HVACSys_SetupRSYS_HeatPumpDHWCombo" 1 0 0 1
;*************************************************************************

;   "Set HVACSys:cseRSYS:rsFEffC_x"     HVACSys:cseRSYS:rsFEffC_x    = {  if (IfValidAnd( ClSysMultiSpeed > 0 )) then  "1/FAWHPC"     else  UNDEFINED  endif  }
;   "Set HVACSys:cseRSYS:rsFanPwrC"     HVACSys:cseRSYS:rsFanPwrC    = {  if (IfValidAnd( ClSysMultiSpeed > 0 )) then  UNDEFINED      else  0.45       endif  }
;   "Set HVACSys:cseRSYS:rsFanPwrC_x"   HVACSys:cseRSYS:rsFanPwrC_x  = {  if (IfValidAnd( ClSysMultiSpeed > 0 )) then  "0.45*FAWHPC"  else  UNDEFINED  endif  }
;
;   "Set HVACSys:cseRSYS:rsFEffH_x"     HVACSys:cseRSYS:rsFEffH_x    = {  if (IfValidAnd( ClSysMultiSpeed > 0 )) then  "1/FAWHPH"     else  UNDEFINED  endif  }
;   "Set HVACSys:cseRSYS:rsFanPwrH"     HVACSys:cseRSYS:rsFanPwrH    = {  if (IfValidAnd( ClSysMultiSpeed > 0 ) .OR.  IfValidAnd( HtPumpDucted > 0 )==0) then  UNDEFINED      else  0.45       endif  }
;   "Set HVACSys:cseRSYS:rsFanPwrH_x"   HVACSys:cseRSYS:rsFanPwrH_x  = {  if (IfValidAnd( ClSysMultiSpeed > 0 ) .AND. IfValidAnd( HtPumpDucted > 0 )   ) then  "0.45*FAWHPH"  else  UNDEFINED  endif  }
;
;
;
;
;;	"Set HVACSys:cseRSYS:rsFChg"				HVACSys:cseRSYS:rsFChg			= {	if (HaveCooling == 0) then  UNDEFINED
;;																										else if (LocalStatus( ClSysRefrigChgAdjFctr ) < 2) then  UNDEFINED
;;																										else if (ClSysRefrigChgAdjFctr > 0 .AND. ClSysRefrigChgAdjFctr <= 1) then  ClSysRefrigChgAdjFctr
;;																										else  UNDEFINED  endif endif endif    }
;;
;;
;;   rsFChg = 0.96                        // Refrigerant charge adjustment factor
;;   rsSEER = 15.052632                   // Cooling SEER
;;   rsEER = 12.1875                      // Cooling EER (required for *PkgRoom types)
;;   rsVfPerTon = 350                     // CFM per Ton (default = 350)
;;   rsFanPwrC = 0.45*FAWHPC              // Cooling fan power.
;
;
;
;   "Blast HVACSys:cseRSYS:rsCap35"     HVACSys:cseRSYS:rsCap35      = {  UNDEFINED  }
;   "Blast HVACSys:cseRSYS:rsCap17"     HVACSys:cseRSYS:rsCap17      = {  UNDEFINED  }
;
;   "Set HVACSys:cseRSYS:rsDefrostModel"   HVACSys:cseRSYS:rsDefrostModel  = {  "REVCYCLE"  }

;"store BEMProc details"  HVACSys:Action = {  StoreBEMProc( Format( "HeatPumpDHWCombo-HVAC-%s-%s", Name, Proj:RunAbbrev ), 0 )  }

   "blast HVACSys:cseRSYS:rsFxCapAuxH"    HVACSys:cseRSYS:rsFxCapAuxH = {  UNDEFINED  }

   "blast HVACSys:cseRSYS:rsHSPF"         HVACSys:cseRSYS:rsHSPF      = {  UNDEFINED  }      ; prevent specification of HSPF for HeatPumpDHWCombo systems - SAC 08/15/23

   "Set HVACSys:cseRSYS:rsSEER"        HVACSys:cseRSYS:rsSEER       =
      {  if (IfValidAnd( HtPumpSystem[1]:IncludesCooling > 0 ) .AND.
             IfValidAnd( ClSysSEER2 > 0 ) .AND. IfValidAnd( ClSysSEER2perSEER > 0 ))   ; replace w/ check for user-defined cooling
         then  ClSysSEER2 / ClSysSEER2perSEER
         else if (T24RCoolingEquipment:SEERValid( "CodeBase", Proj:StdDesignBase, "StdVer", Proj:StandardsVersion, "SysType", HtPumpSysTypeAbbrev ) < 1) then  UNDEFINED
         else     T24RCoolingEquipment:SEER(      "CodeBase", Proj:StdDesignBase, "StdVer", Proj:StandardsVersion, "SysType", HtPumpSysTypeAbbrev )  endif endif  }
   "Set HVACSys:cseRSYS:rsEER"         HVACSys:cseRSYS:rsEER        =
      {  if (IfValidAnd( HtPumpSystem[1]:IncludesCooling > 0 ) .AND.
             IfValidAnd( ClSysEER2 > 0 ) .AND. IfValidAnd( ClSysEER2perEER > 0 ))   ; replace w/ check for user-defined cooling
         then  ClSysEER2 / ClSysEER2perEER
         else if (T24RCoolingEquipment:EERValid( "CodeBase", Proj:StdDesignBase, "StdVer", Proj:StandardsVersion, "SysType", HtPumpSysTypeAbbrev ) < 1) then  UNDEFINED
         else     T24RCoolingEquipment:EER(      "CodeBase", Proj:StdDesignBase, "StdVer", Proj:StandardsVersion, "SysType", HtPumpSysTypeAbbrev )  endif endif  }

;   "Set HVACSys:cseRSYS:rsCapC"        HVACSys:cseRSYS:rsCapC  = {  36000  }     ; hardwire?

   "Blast HVACSys:cseRSYS:rsParElec_x" HVACSys:cseRSYS:rsParElec_x  = {  UNDEFINED  }     ; HeatPumpDHWCombo - SAC 04/18/23 (tic #1349)
   ;"Set HVACSys:cseRSYS:rsParElec_x"   HVACSys:cseRSYS:rsParElec_x  = {  "5"  }        ; HeatPumpDHWCombo - SAC 03/31/23 (tic #1349)

   "Set HVACSys:cseRSYS:rsFanMotTy"    HVACSys:cseRSYS:rsFanMotTy   = {  "PSC"  }         ; for consistency w/ std design - HeatPumpDHWCombo - SAC 04/18/23 (tic #1349)

; rsFanPwrH per user input?  Default is 0.273 W/cfm for CHDHW
; rsCapH is ignored, should not be written.

END
;************************************************************************* HeatPumpDHWCombo - SAC 04/02/23 (tic #1349)
RULELIST "DHWSys_SetupDHWSYS_HeatPumpDHWCombo" 1 0 0 1
;*************************************************************************
   "Set cseDHWSYS:wsDRMethod"                                     cseDHWSYS:wsDRMethod     = {  "StateOfCharge"  }
   "Set cseDHWSYS:wsTargetSOC_x"                                  cseDHWSYS:wsTargetSOC_x  = 
         {  if (IfValidAnd( SourceDHWSys:DHWHeater[1]:HtPumpSystem[1]:DHWComboTankVol > 75 ))
            then  Format( "select(\n  $month > 11 || $month < 3,\n      hourval(.70,.70,.70,.70,.70,.70,.70,.30,.95,.95,.95,.95,\n              .95,.95,.95,.95,.95,.70,.70,.70,.70,.70,.70,.70),\n" +
                  "  $month==3 || $month== 4,\n      hourval(.50,.50,.50,.50,.50,.50,.50,.30,.95,.95,.95,.95,\n              .95,.95,.95,.95,.95,.50,.50,.50,.50,.50,.50,.50),\n" +
                  "  default\n      hourval(.15,.15,.15,.15,.15,.15,.15,.15,.15,.15,.15,.15,\n              .15,.60,.60,.60,.15,.15,.15,.15,.15,.15,.15,.15))" )
            else  Format( "select(\n        $month > 11 || $month < 3,\n          hourval(.75,.80,.85,.90,.95,.95,.90,.80,.50,.95,.95,.95,\n                  .95,.95,.95,.95,.70,.40,.40,.40,.40,.40,.40,.50),\n" +
                  "        $month == 3,\n          hourval(.70,.75,.80,.85,.90,.90,.90,.80,.50,.95,.95,.95,\n                  .95,.95,.95,.95,.70,.40,.40,.40,.40,.40,.40,.40),\n" +
                  "        $month == 4,\n          hourval(.60,.65,.70,.75,.80,.80,.80,.70,.50,.90,.90,.90,\n                  .90,.90,.90,.90,.70,.40,.40,.40,.40,.40,.40,.40),\n" +
                  "        $month == 5,\n          hourval(.50,.55,.60,.65,.70,.70,.70,.70,.50,.70,.70,.70,\n                  .70,.70,.70,.70,.70,.30,.30,.30,.30,.30,.30,.30),\n" +
                  "        $month >=5 && $month <= 10,\n          hourval(.30,.30,.30,.30,.30,.30,.30,.30,.30,.30,.30,.50,\n                  .50,.50,.50,.30,.30,.30,.30,.30,.30,.30,.30,.30),\n" +
                  "        default\n          hourval(.60,.65,.70,.75,.80,.80,.80,.70,.50,.90,.90,.90,\n                  .90,.90,.90,.90,.70,.40,.40,.40,.40,.40,.40,.40))" )
            endif  }
   "Adjust cseDHWSYS:wsTUse (if necessary)"     cseDHWSYS:wsTUse  =                 ; CSE throws error if wsTUse < 120 for DHWSys used for space htg - SAC 04/03/23 (tic #1349)
      {  if (IfValidAnd( wsTUse >= 120 )==0) then  120  else  UNCHANGED  endif  }
   "blast cseDHWSYS:wsTSetpoint"    cseDHWSYS:wsTSetpoint = {  UNDEFINED  }      ; SAC 04/11/23 (tic #1349)

   ; use main/local cseDHWSYS as a Central system and create subordinate system as the first in the series of use shuffles - SAC 04/11/23 (tic #1349)
   "Create cseDHWSYS:FirstSubShuffleDHWSYS"                 cseDHWSYS:FirstSubShuffleDHWSYS  = {  CreateComp( cseDHWSYS, substr( Name, 0, 48 ) + "-1" )  }
   "Set cseDHWSYS:FirstSubShuffleDHWSYS:wsCentralDHWSYS"    cseDHWSYS:FirstSubShuffleDHWSYS:wsCentralDHWSYS  = {  Name  }
   ; shift several settings from main central DHWSys to first shuffle DHWSys
   "Set cseDHWSYS:FirstSubShuffleDHWSYS:wsDayUse_x"         cseDHWSYS:FirstSubShuffleDHWSYS:wsDayUse_x      = {  wsDayUse_x  }
   "Set cseDHWSYS:FirstSubShuffleDHWSYS:wsMult"             cseDHWSYS:FirstSubShuffleDHWSYS:wsMult          = {  wsMult    }
   "Set cseDHWSYS:FirstSubShuffleDHWSYS:wsWF"               cseDHWSYS:FirstSubShuffleDHWSYS:wsWF            = {  wsWF      }
   "Set cseDHWSYS:FirstSubShuffleDHWSYS:wsSDLM"             cseDHWSYS:FirstSubShuffleDHWSYS:wsSDLM          = {  wsSDLM    }
   "Set cseDHWSYS:FirstSubShuffleDHWSYS:wsDSM"              cseDHWSYS:FirstSubShuffleDHWSYS:wsDSM           = {  wsDSM     }
   "Set cseDHWSYS:FirstSubShuffleDHWSYS:wsShowerCount"      cseDHWSYS:FirstSubShuffleDHWSYS:wsShowerCount   = {  wsShowerCount  }
   "Set cseDHWSYS:FirstSubShuffleDHWSYS:wsBathCount"        cseDHWSYS:FirstSubShuffleDHWSYS:wsBathCount     = {  wsBathCount  }
   "Set cseDHWSYS:FirstSubShuffleDHWSYS:wsFaucetCount"      cseDHWSYS:FirstSubShuffleDHWSYS:wsFaucetCount   = {  wsFaucetCount  }
   "Set cseDHWSYS:FirstSubShuffleDHWSYS:wsCWashrCount"      cseDHWSYS:FirstSubShuffleDHWSYS:wsCWashrCount   = {  wsCWashrCount  }
   "Set cseDHWSYS:FirstSubShuffleDHWSYS:wsDWashrCount"      cseDHWSYS:FirstSubShuffleDHWSYS:wsDWashrCount   = {  wsDWashrCount  }
   ; and blast those properties of the main central DHWSys that were moved to the first shuffle DHWSys
   "blast cseDHWSYS:wsDayUse_x"      cseDHWSYS:wsDayUse_x      = {  UNDEFINED  }
   "blast cseDHWSYS:wsMult"          cseDHWSYS:wsMult          = {  UNDEFINED  }
   "blast cseDHWSYS:wsWF"            cseDHWSYS:wsWF            = {  UNDEFINED  }
   "blast cseDHWSYS:wsSDLM"          cseDHWSYS:wsSDLM          = {  UNDEFINED  }
   "blast cseDHWSYS:wsDSM"           cseDHWSYS:wsDSM           = {  UNDEFINED  }
   "blast cseDHWSYS:wsShowerCount"   cseDHWSYS:wsShowerCount   = {  UNDEFINED  }
   "blast cseDHWSYS:wsBathCount"     cseDHWSYS:wsBathCount     = {  UNDEFINED  }
   "Set cseDHWSYS:wsFaucetCount"     cseDHWSYS:wsFaucetCount   = {  UNDEFINED  }
   "Set cseDHWSYS:wsCWashrCount"     cseDHWSYS:wsCWashrCount   = {  UNDEFINED  }
   "Set cseDHWSYS:wsDWashrCount"     cseDHWSYS:wsDWashrCount   = {  UNDEFINED  }

END
;*************************************************************************


;*************************************************************************
RULELIST "HVACSys_SetupRSYS_VCHP" 1 0 0 1
;*************************************************************************
   "Set HVACSys:cseRSYS:rsFEffC_x"     HVACSys:cseRSYS:rsFEffC_x    = {  "1/FVCHPC"  }
   "Set HVACSys:cseRSYS:rsFanPwrC"     HVACSys:cseRSYS:rsFanPwrC    = {  UNDEFINED  }
   "Set HVACSys:cseRSYS:rsFanPwrC_x"   HVACSys:cseRSYS:rsFanPwrC_x  = {  "0.35*FVCHPC"  }

   "Set HVACSys:cseRSYS:rsFEffH_x"     HVACSys:cseRSYS:rsFEffH_x    = {  "1/FVCHPH"  }
   "Set HVACSys:cseRSYS:rsFanPwrH"     HVACSys:cseRSYS:rsFanPwrH    = {  UNDEFINED  }
   "Set HVACSys:cseRSYS:rsFanPwrH_x"   HVACSys:cseRSYS:rsFanPwrH_x  = {  "0.35*FVCHPH"  }

   "Blast HVACSys:cseRSYS:rsCap35"     HVACSys:cseRSYS:rsCap35      = {  UNDEFINED  }  ; SAC 11/13/18 - removed Cap35 & Cap17 for VCHP
   "Blast HVACSys:cseRSYS:rsCap17"     HVACSys:cseRSYS:rsCap17      = {  UNDEFINED  }

   "Set HVACSys:cseRSYS:rsDefrostModel"   HVACSys:cseRSYS:rsDefrostModel  = {  UNDEFINED  }   ; switched to undef from: "REVCYCLE" - SAC 06/01/23 (VCHP)

   "Set HVACSys:cseRSYS:rsFEffAuxHDefrost_x" HVACSys:cseRSYS:rsFEffAuxHDefrost_x = {  "1/FVCHPH"  }   ; SAC 06/01/23 (VCHP)
END
;*************************************************************************

;************************************************************************* - SAC 11/01/20 - SAC 11/10/20
RULELIST "HVACSys_SetupRSYS_VCHP2" 1 0 0 1
;*************************************************************************
   "Set HVACSys:cseRSYS:rsFEffC_x"     HVACSys:cseRSYS:rsFEffC_x    = {  UNDEFINED  }   ; "1/FVCHPC"  }
   "Set HVACSys:cseRSYS:rsFanPwrC"     HVACSys:cseRSYS:rsFanPwrC    =
      {  if (IfValidAnd( HtPumpSystem[1]:VCHPFanPwrHC[2] > 0 ))
         then  HtPumpSystem[1]:VCHPFanPwrHC[2]
         else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsFanPwrC_x"   HVACSys:cseRSYS:rsFanPwrC_x  = {  UNDEFINED  }   ; "0.35*FVCHPC"  }

   "Set HVACSys:cseRSYS:rsFEffH_x"     HVACSys:cseRSYS:rsFEffH_x    = {  UNDEFINED  }   ; "1"  }     ; don't use VCHP mult for htg - was: 1/FVCHPH - SAC 11/01/20
   "Set HVACSys:cseRSYS:rsFanPwrH"     HVACSys:cseRSYS:rsFanPwrH    =
      {  if (IfValidAnd( HtPumpSystem[1]:VCHPFanPwrHC[1] > 0 ))
         then  HtPumpSystem[1]:VCHPFanPwrHC[1]
         else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsFanPwrH_x"   HVACSys:cseRSYS:rsFanPwrH_x  = {  UNDEFINED  }   ; "0.35*FVCHPH"  }

   "Blast HVACSys:cseRSYS:rsCap17"     HVACSys:cseRSYS:rsCap17      = {  UNDEFINED  }     ; removed Cap17 & Cap05 for VCHP2 - SAC 07/26/21
;   "Blast HVACSys:cseRSYS:rsCap05"     HVACSys:cseRSYS:rsCap05      = {  UNDEFINED  } 

   ; SAC 03/03/22 - was: {  1.2  }  ; UNDEFINED  }      ; undef -> 1.2 - SAC 02/25/22
   "Set HVACSys:cseRSYS:rsFxCapAuxH"   HVACSys:cseRSYS:rsFxCapAuxH   =   ; revised logic to set rsFxCapAuxH regardless of AutoSize flag - SAC 03/22/22
      {  if (IfValidAnd( Proj:EnableResearchMode > 0.5 ) .AND.
             IfValidAnd( HtPumpSystem[1]:HtgAuxSizingFactor > 0 ))
         then  HtPumpSystem[1]:HtgAuxSizingFactor
         else  1.2  endif  }

	"throw error if HVACSys:cseRSYS:rsOAVType != 'None'"		HVACSys:Action		=     ; VCHP2 - SAC 11/10/20
      {	if (IfValidAnd( cseRSYS:rsOAVType > 0 ))
         then  switch (cseRSYS:rsOAVType)
                  case  1 :   PostError( "OAV type 'FixedFlow' incompatible with VCHP2 system '%s' (CSE RSYS '%s')", Name, cseRSYS:Name )
                  case  2 :   PostError( "OAV type 'VarFlow' incompatible with VCHP2 system '%s' (CSE RSYS '%s')", Name, cseRSYS:Name )
                  default :  UNCHANGED
               endswitch
         else  UNCHANGED  endif  }

   "Set HVACSys:cseRSYS:rsCap17"       HVACSys:cseRSYS:rsCap17  =             ; SAC 09/23/21
      {  if (IfValidAnd( HtPumpSystem[1]:AutoSize > 0 )==0 .AND.
             IfValidAnd( HtPumpSystem[1]:Cap17 > 0 ))
         then  HtPumpSystem[1]:Cap17
         else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsCapRat1747_x" HVACSys:cseRSYS:rsCapRat1747_x  =     ; SAC 02/11/22
      {  if (IfValidAnd( HtPumpSystem[1]:AutoSize > 0 ) .AND.
             IfValidAnd( HtPumpSystem[1]:Cap17 > 0 ) .AND.
             IfValidAnd( HtPumpSystem[1]:Cap47  > 0 ))
         then  Format( "%.1f/%.1f", HtPumpSystem[1]:Cap17, HtPumpSystem[1]:Cap47 )
         else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsCapRat1747"  HVACSys:cseRSYS:rsCapRat1747  =        ; mod to output even when autosizing - SAC 07/26/21
      {  if (LocalStatus( cseRSYS:rsCapRat1747_x ) < 1 .AND.
             IfValidAnd( HtPumpSystem[1]:AutoSize > 0 ) .AND.
             IfValidAnd( HtPumpSystem[1]:Cap1747Ratio > 0 ))
         then  HtPumpSystem[1]:Cap1747Ratio
         else  UNDEFINED  endif  }

   "Set HVACSys:cseRSYS:rsCap115"      HVACSys:cseRSYS:rsCap115  =            ; SAC 09/22/21
      {  if (IfValidAnd( HtPumpSystem[1]:AutoSize > 0 )==0 .AND.
             IfValidAnd( HtPumpSystem[1]:Cap115 > 0 ))
         then  HtPumpSystem[1]:Cap115
         else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsCapRat11595_x" HVACSys:cseRSYS:rsCapRat11595_x  =   ; SAC 02/11/22
      {  if (IfValidAnd( HtPumpSystem[1]:AutoSize > 0 ) .AND.
             IfValidAnd( HtPumpSystem[1]:Cap115 > 0 ) .AND.
             IfValidAnd( HtPumpSystem[1]:Cap95  > 0 ))
         then  Format( "%.1f/%.1f", HtPumpSystem[1]:Cap115, HtPumpSystem[1]:Cap95 )
         else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsCapRat11595" HVACSys:cseRSYS:rsCapRat11595  =       ; SAC 09/22/21
      {  if (LocalStatus( cseRSYS:rsCapRat11595_x ) < 1 .AND.
             IfValidAnd( HtPumpSystem[1]:AutoSize > 0 ) .AND.
             IfValidAnd( HtPumpSystem[1]:Cap11595Ratio > 0 ))
         then  HtPumpSystem[1]:Cap11595Ratio
         else  UNDEFINED  endif  }

;   "Set HVACSys:cseRSYS:rsCap95"       HVACSys:cseRSYS:rsCap95  =             ; SAC 09/22/21
   "Set HVACSys:cseRSYS:rsCapC"        HVACSys:cseRSYS:rsCapC  =              ; SAC 09/23/21
      {  if (IfValidAnd( HtPumpSystem[1]:AutoSize > 0 )==0 .AND.
             IfValidAnd( HtPumpSystem[1]:Cap95 > 0 ))
         then  HtPumpSystem[1]:Cap95
         else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsCapRat9547_x" HVACSys:cseRSYS:rsCapRat9547_x  =     ; SAC 02/11/22
      {  if (IfValidAnd( HtPumpSystem[1]:AutoSize > 0 ) .AND.
             IfValidAnd( HtPumpSystem[1]:Cap95 > 0 ) .AND.
             IfValidAnd( HtPumpSystem[1]:Cap47  > 0 ))
         then  Format( "%.1f/%.1f", HtPumpSystem[1]:Cap95, HtPumpSystem[1]:Cap47 )
         else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsCapRat9547"  HVACSys:cseRSYS:rsCapRat9547  =        ; SAC 01/08/22
      {  if (LocalStatus( cseRSYS:rsCapRat9547_x ) < 1 .AND.
             IfValidAnd( HtPumpSystem[1]:AutoSize > 0 ) .AND.
             IfValidAnd( HtPumpSystem[1]:Cap95 > 0 ) .AND.
             IfValidAnd( HtPumpSystem[1]:Cap47 > 0 ))
         then  HtPumpSystem[1]:Cap95 / HtPumpSystem[1]:Cap47
         else  UNDEFINED  endif  }

   "Set HVACSys:cseRSYS:rsCap82"       HVACSys:cseRSYS:rsCap82  =             ; SAC 09/22/21
      {  if (IfValidAnd( HtPumpSystem[1]:AutoSize > 0 )==0 .AND.
             IfValidAnd( HtPumpSystem[1]:Cap82 > 0 ))
         then  HtPumpSystem[1]:Cap82
         else  UNDEFINED  endif  }

   "Set HVACSys:cseRSYS:rsCapRat8295_x" HVACSys:cseRSYS:rsCapRat8295_x  =     ; SAC 02/11/22
      {  if (IfValidAnd( HtPumpSystem[1]:AutoSize > 0 ) .AND.
             IfValidAnd( HtPumpSystem[1]:Cap82 > 0 ) .AND.
             IfValidAnd( HtPumpSystem[1]:Cap95  > 0 ))
         then  Format( "%.1f/%.1f", HtPumpSystem[1]:Cap82, HtPumpSystem[1]:Cap95 )
         else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsCapRat8295"  HVACSys:cseRSYS:rsCapRat8295  =        ; SAC 09/22/21
      {  if (LocalStatus( cseRSYS:rsCapRat8295_x ) < 1 .AND.
             IfValidAnd( HtPumpSystem[1]:AutoSize > 0 ) .AND.
             IfValidAnd( HtPumpSystem[1]:Cap8295Ratio > 0 ))
         then  HtPumpSystem[1]:Cap8295Ratio
         else  UNDEFINED  endif  }

   "Set HVACSys:cseRSYS:rsCap05"       HVACSys:cseRSYS:rsCap05  =             ; SAC 09/22/21
      {  if (IfValidAnd( HtPumpSystem[1]:AutoSize > 0 )==0 .AND.
             IfValidAnd( HtPumpSystem[1]:Cap05 > 0 ))
         then  HtPumpSystem[1]:Cap05
         else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsCapRat0547_x" HVACSys:cseRSYS:rsCapRat0547_x  =     ; SAC 02/11/22
      {  if (IfValidAnd( HtPumpSystem[1]:AutoSize > 0 ) .AND.
             IfValidAnd( HtPumpSystem[1]:Cap05 > 0 ) .AND.
             IfValidAnd( HtPumpSystem[1]:Cap47  > 0 ))
         then  Format( "%.1f/%.1f", HtPumpSystem[1]:Cap05, HtPumpSystem[1]:Cap47 )
         else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsCapRat0547"  HVACSys:cseRSYS:rsCapRat0547  =        ; SAC 07/26/21   ; mod to only output when autosizing - SAC 09/22/21
      {  if (LocalStatus( cseRSYS:rsCapRat0547_x ) < 1 .AND.
             IfValidAnd( HtPumpSystem[1]:AutoSize > 0 ) .AND.
             IfValidAnd( HtPumpSystem[1]:Cap0547Ratio > 0 ))
         then  HtPumpSystem[1]:Cap0547Ratio
         else  UNDEFINED  endif  }

   "Set HVACSys:cseRSYS:rsCOP115"      HVACSys:cseRSYS:rsCOP115      =        ; SAC 09/22/21
      {  if (IfValidAnd( HtPumpSystem[1]:COP115 > 0 ))
         then  HtPumpSystem[1]:COP115
         else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsCOPMin115"   HVACSys:cseRSYS:rsCOPMin115   =  
      {  if (IfValidAnd( HtPumpSystem[1]:COPMin115 > 0 ))
         then  HtPumpSystem[1]:COPMin115
         else  UNDEFINED  endif  }

   "Set HVACSys:cseRSYS:rsCOP95"       HVACSys:cseRSYS:rsCOP95       =  
      {  if (IfValidAnd( HtPumpSystem[1]:COP95 > 0 ))
         then  HtPumpSystem[1]:COP95
         else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsCOPMin95"    HVACSys:cseRSYS:rsCOPMin95    =  
      {  if (IfValidAnd( HtPumpSystem[1]:COPMin95 > 0 ))
         then  HtPumpSystem[1]:COPMin95
         else  UNDEFINED  endif  }

   "Set HVACSys:cseRSYS:rsCOP82"       HVACSys:cseRSYS:rsCOP82       =  
      {  if (IfValidAnd( HtPumpSystem[1]:COP82 > 0 ))
         then  HtPumpSystem[1]:COP82
         else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsCOPMin82"    HVACSys:cseRSYS:rsCOPMin82    =  
      {  if (IfValidAnd( HtPumpSystem[1]:COPMin82 > 0 ))
         then  HtPumpSystem[1]:COPMin82
         else  UNDEFINED  endif  }

   "Set HVACSys:cseRSYS:rsCOP05"       HVACSys:cseRSYS:rsCOP05       =        ; SAC 07/26/21
      {  if (IfValidAnd( HtPumpSystem[1]:COP05 > 0 ))
         then  HtPumpSystem[1]:COP05
         else  UNDEFINED  endif  }

   "Set HVACSys:cseRSYS:rsCOPMin47"    HVACSys:cseRSYS:rsCOPMin47    =
      {  if (IfValidAnd( HtPumpSystem[1]:COPMin47 > 0 ))
         then  HtPumpSystem[1]:COPMin47
         else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsCOPMin17"    HVACSys:cseRSYS:rsCOPMin17    =
      {  if (IfValidAnd( HtPumpSystem[1]:COPMin17 > 0 ))
         then  HtPumpSystem[1]:COPMin17
         else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsCOPMin05"    HVACSys:cseRSYS:rsCOPMin05    =        ; SAC 07/26/21
      {  if (IfValidAnd( HtPumpSystem[1]:COPMin05 > 0 ))
         then  HtPumpSystem[1]:COPMin05
         else  UNDEFINED  endif  }

;   "Set HVACSys:cseRSYS:rsLoadFMinH"     HVACSys:cseRSYS:rsLoadFMinH     =      ; removed - SAC 07/24/21
;      {  if (IfValidAnd( HtPumpSystem[1]:VCHPTurndnRat > 0 ))
;         then  HtPumpSystem[1]:VCHPTurndnRat
;         else  UNDEFINED  endif  }

   "Set HVACSys:cseRSYS:rsLoadFMin115"    HVACSys:cseRSYS:rsLoadFMin115   =      ; SAC 09/22/21
      {  if (IfValidAnd( HtPumpSystem[1]:CapMin115 > 0 ) .AND.
             IfValidAnd( HtPumpSystem[1]:Cap115    > 0 ))
         then  (HtPumpSystem[1]:CapMin115 / HtPumpSystem[1]:Cap115)
         else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsLoadFMin95"     HVACSys:cseRSYS:rsLoadFMin95    =  
      {  if (IfValidAnd( HtPumpSystem[1]:CapMin95 > 0 ) .AND.
             IfValidAnd( HtPumpSystem[1]:Cap95    > 0 ))
         then  (HtPumpSystem[1]:CapMin95 / HtPumpSystem[1]:Cap95)
         else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsLoadFMin82"     HVACSys:cseRSYS:rsLoadFMin82    =  
      {  if (IfValidAnd( HtPumpSystem[1]:CapMin82 > 0 ) .AND.
             IfValidAnd( HtPumpSystem[1]:Cap82    > 0 ))
         then  (HtPumpSystem[1]:CapMin82 / HtPumpSystem[1]:Cap82)
         else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsLoadFMin47"     HVACSys:cseRSYS:rsLoadFMin47    =      ; SAC 07/26/21
      {  if (IfValidAnd( HtPumpSystem[1]:CapMin47 > 0 ) .AND.
             IfValidAnd( HtPumpSystem[1]:Cap47    > 0 ))
         then  (HtPumpSystem[1]:CapMin47 / HtPumpSystem[1]:Cap47)
         else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsLoadFMin17"     HVACSys:cseRSYS:rsLoadFMin17    =
      {  if (IfValidAnd( HtPumpSystem[1]:CapMin17 > 0 ) .AND.
             IfValidAnd( HtPumpSystem[1]:Cap17    > 0 ))
         then  (HtPumpSystem[1]:CapMin17 / HtPumpSystem[1]:Cap17)
         else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsLoadFMin05"     HVACSys:cseRSYS:rsLoadFMin05    =
      {  if (IfValidAnd( HtPumpSystem[1]:CapMin05 > 0 ) .AND.
             IfValidAnd( HtPumpSystem[1]:Cap05    > 0 ))
         then  (HtPumpSystem[1]:CapMin05 / HtPumpSystem[1]:Cap05)
         else  UNDEFINED  endif  }

   ; VCHP2 - SAC 11/10/20  ; removed 0.75 denominator & default to 1.1 - SAC 02/11/22 (VCHP2)
   ; default 1.1->1.2 - SAC 02/25/22  ; disable when not autosizing and specify only when EnableResearchMode activated - SAC 03/03/22
   "Set HVACSys:cseRSYS:rsFxCapH"      HVACSys:cseRSYS:rsFxCapH      =        ; exsure 1.1 for 2025+ analysis - SAC 07/22/24
      {  if (IfValidAnd( HtPumpSystem[1]:AutoSize > 0 )==0) then  UNDEFINED
         else if (Proj:IsStdOrSMFRun .OR. Proj:RunAbbrev == "dr") 
         then  if (Proj:EnergyCodeYearNum < 2025)
               then  0.75
               else  1.1   endif
         else if (IfValidAnd( Proj:EnableResearchMode > 0.5 ) .AND.
                  IfValidAnd( HtPumpSystem[1]:HtgSizingFactor > 0 ))
         then  HtPumpSystem[1]:HtgSizingFactor
         else  1.2  endif endif endif  }
	"Set HVACSys:cseRSYS:rsParElec_x"	HVACSys:cseRSYS:rsParElec_x   =        ; VCHP2 - SAC 11/10/20
      {  if (LocalStatus( HtPumpSystem[1]:ParElecExprs ))
         then  HtPumpSystem[1]:ParElecExprs
         else  UNCHANGED  endif  }

   "Set HVACSys:cseRSYS:rsDefrostModel"   HVACSys:cseRSYS:rsDefrostModel  = {  "REVCYCLE"  }
END
;*************************************************************************

;************************************************************************* VCHP3 - SAC 05/16/24 (tic #1379)
RULELIST "HVACSys_SetupRSYS_VCHP3" 1 0 0 1
;*************************************************************************
   "Set HVACSys:cseRSYS:rsFEffC_x"     HVACSys:cseRSYS:rsFEffC_x    = {  UNDEFINED  }   ; for VCHP2 was: "1/FVCHPC" 
   "Set HVACSys:cseRSYS:rsFanPwrC"     HVACSys:cseRSYS:rsFanPwrC    =      ; SAC 05/17/24 (tic #1379)  ; leave fan pwr alone for ducted - SAC 05/21/24 (tic #1379)
      {  if (IfValidAnd( HtOrClDucted > 0 ))
         then  UNCHANGED  ; 0.281  
         else  0.171  endif  }
   "Set HVACSys:cseRSYS:rsFanPwrC_x"   HVACSys:cseRSYS:rsFanPwrC_x  = {  UNDEFINED  }   ; for VCHP2 was: "0.35*FVCHPC" 

   "Set HVACSys:cseRSYS:rsFEffH_x"     HVACSys:cseRSYS:rsFEffH_x    = {  UNDEFINED  }   ; for VCHP2 was: "1"      ; don't use VCHP mult for htg - was: 1/FVCHPH - SAC 11/01/20
   "Set HVACSys:cseRSYS:rsFanPwrH"     HVACSys:cseRSYS:rsFanPwrH    =      ; SAC 05/17/24 (tic #1379)  ; leave fan pwr alone for ducted - SAC 05/21/24 (tic #1379)
      {  if (IfValidAnd( HtOrClDucted > 0 ))
         then  UNCHANGED  ; 0.281  
         else  0.171  endif  }
   "Set HVACSys:cseRSYS:rsFanPwrH_x"   HVACSys:cseRSYS:rsFanPwrH_x  = {  UNDEFINED  }   ; for VCHP2 was: "0.35*FVCHPH" 

   "Set HVACSys:cseRSYS:rsFanMotTy"    HVACSys:cseRSYS:rsFanMotTy   =         ; switched from basing FanMotTy on Variable vs. Single speed as opposed to Eff Metric - SAC 03/03/25 (tic #1379)
      {  if (IfValidAnd( HtPumpSystem[1]:Speeds != 1 ))
         then  "BPM"
         else  "PSC"  endif  }

   "Blast HVACSys:cseRSYS:rsCap17"     HVACSys:cseRSYS:rsCap17      = {  UNDEFINED  }     ; removed Cap17 & Cap05 for VCHP2 - SAC 07/26/21
;   "Blast HVACSys:cseRSYS:rsCap05"     HVACSys:cseRSYS:rsCap05      = {  UNDEFINED  } 

   "Blast HVACSys:cseRSYS:rsFxCapAuxH"   HVACSys:cseRSYS:rsFxCapAuxH   = {  UNDEFINED  }

	"throw error if HVACSys:cseRSYS:rsOAVType != 'None'"		HVACSys:Action		=     ; VCHP2 - SAC 11/10/20
      {	if (IfValidAnd( cseRSYS:rsOAVType > 0 ))
         then  switch (cseRSYS:rsOAVType)
                  case  1 :   PostError( "OAV type 'FixedFlow' incompatible with VCHP2 system '%s' (CSE RSYS '%s')", Name, cseRSYS:Name )
                  case  2 :   PostError( "OAV type 'VarFlow' incompatible with VCHP2 system '%s' (CSE RSYS '%s')", Name, cseRSYS:Name )
                  default :  UNCHANGED
               endswitch
         else  UNCHANGED  endif  }

   "Set HVACSys:cseRSYS:rsCap17"       HVACSys:cseRSYS:rsCap17  = {  UNDEFINED  }
      ;{  if (IfValidAnd( HtPumpSystem[1]:AutoSize > 0 )==0 .AND.
      ;       IfValidAnd( HtPumpSystem[1]:Cap17 > 0 ))
      ;   then  HtPumpSystem[1]:Cap17
      ;   else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsCapRat1747_x" HVACSys:cseRSYS:rsCapRat1747_x  = {  UNDEFINED  }
      ;{  if (IfValidAnd( HtPumpSystem[1]:AutoSize > 0 ) .AND.
      ;       IfValidAnd( HtPumpSystem[1]:Cap17 > 0 ) .AND.
      ;       IfValidAnd( HtPumpSystem[1]:Cap47  > 0 ))
      ;   then  Format( "%.1f/%.1f", HtPumpSystem[1]:Cap17, HtPumpSystem[1]:Cap47 )
      ;   else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsCapRat1747"  HVACSys:cseRSYS:rsCapRat1747  = {  UNDEFINED  }
      ;{  if (LocalStatus( cseRSYS:rsCapRat1747_x ) < 1 .AND.
      ;       IfValidAnd( HtPumpSystem[1]:AutoSize > 0 ) .AND.
      ;       IfValidAnd( HtPumpSystem[1]:Cap1747Ratio > 0 ))
      ;   then  HtPumpSystem[1]:Cap1747Ratio
      ;   else  UNDEFINED  endif  }

   "Set HVACSys:cseRSYS:rsCap115"      HVACSys:cseRSYS:rsCap115  = {  UNDEFINED  }
      ;{  if (IfValidAnd( HtPumpSystem[1]:AutoSize > 0 )==0 .AND.
      ;       IfValidAnd( HtPumpSystem[1]:Cap115 > 0 ))
      ;   then  HtPumpSystem[1]:Cap115
      ;   else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsCapRat11595_x" HVACSys:cseRSYS:rsCapRat11595_x  = {  UNDEFINED  }
      ;{  if (IfValidAnd( HtPumpSystem[1]:AutoSize > 0 ) .AND.
      ;       IfValidAnd( HtPumpSystem[1]:Cap115 > 0 ) .AND.
      ;       IfValidAnd( HtPumpSystem[1]:Cap95  > 0 ))
      ;   then  Format( "%.1f/%.1f", HtPumpSystem[1]:Cap115, HtPumpSystem[1]:Cap95 )
      ;   else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsCapRat11595" HVACSys:cseRSYS:rsCapRat11595  = {  UNDEFINED  }
      ;{  if (LocalStatus( cseRSYS:rsCapRat11595_x ) < 1 .AND.
      ;       IfValidAnd( HtPumpSystem[1]:AutoSize > 0 ) .AND.
      ;       IfValidAnd( HtPumpSystem[1]:Cap11595Ratio > 0 ))
      ;   then  HtPumpSystem[1]:Cap11595Ratio
      ;   else  UNDEFINED  endif  }

;   "Set HVACSys:cseRSYS:rsCap95"       HVACSys:cseRSYS:rsCap95  =             ; SAC 09/22/21
   "Set HVACSys:cseRSYS:rsCapC"        HVACSys:cseRSYS:rsCapC  =              ; SAC 09/23/21
      {  if (IfValidAnd( HtPumpSystem[1]:AutoSize > 0 )==0 .AND.
             IfValidAnd( HtPumpSystem[1]:Cap95 > 0 ))
         then  HtPumpSystem[1]:Cap95
         else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsCapRat9547_x" HVACSys:cseRSYS:rsCapRat9547_x  = {  UNDEFINED  }
      ;{  if (IfValidAnd( HtPumpSystem[1]:AutoSize > 0 ) .AND.
      ;       IfValidAnd( HtPumpSystem[1]:Cap95 > 0 ) .AND.
      ;       IfValidAnd( HtPumpSystem[1]:Cap47  > 0 ))
      ;   then  Format( "%.1f/%.1f", HtPumpSystem[1]:Cap95, HtPumpSystem[1]:Cap47 )
      ;   else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsCapRat9547"  HVACSys:cseRSYS:rsCapRat9547  = {  UNDEFINED  }
      ;{  if (LocalStatus( cseRSYS:rsCapRat9547_x ) < 1 .AND.
      ;       IfValidAnd( HtPumpSystem[1]:AutoSize > 0 ) .AND.
      ;       IfValidAnd( HtPumpSystem[1]:Cap95 > 0 ) .AND.
      ;       IfValidAnd( HtPumpSystem[1]:Cap47 > 0 ))
      ;   then  HtPumpSystem[1]:Cap95 / HtPumpSystem[1]:Cap47
      ;   else  UNDEFINED  endif  }

   "Set HVACSys:cseRSYS:rsCap82"       HVACSys:cseRSYS:rsCap82  = {  UNDEFINED  }
      ;{  if (IfValidAnd( HtPumpSystem[1]:AutoSize > 0 )==0 .AND.
      ;       IfValidAnd( HtPumpSystem[1]:Cap82 > 0 ))
      ;   then  HtPumpSystem[1]:Cap82
      ;   else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsCapRat8295_x" HVACSys:cseRSYS:rsCapRat8295_x  = {  UNDEFINED  }
      ;{  if (IfValidAnd( HtPumpSystem[1]:AutoSize > 0 ) .AND.
      ;       IfValidAnd( HtPumpSystem[1]:Cap82 > 0 ) .AND.
      ;       IfValidAnd( HtPumpSystem[1]:Cap95  > 0 ))
      ;   then  Format( "%.1f/%.1f", HtPumpSystem[1]:Cap82, HtPumpSystem[1]:Cap95 )
      ;   else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsCapRat8295"  HVACSys:cseRSYS:rsCapRat8295  = {  UNDEFINED  }
      ;{  if (LocalStatus( cseRSYS:rsCapRat8295_x ) < 1 .AND.
      ;       IfValidAnd( HtPumpSystem[1]:AutoSize > 0 ) .AND.
      ;       IfValidAnd( HtPumpSystem[1]:Cap8295Ratio > 0 ))
      ;   then  HtPumpSystem[1]:Cap8295Ratio
      ;   else  UNDEFINED  endif  }

   "Set HVACSys:cseRSYS:rsCap05"       HVACSys:cseRSYS:rsCap05  = {  UNDEFINED  }
      ;{  if (IfValidAnd( HtPumpSystem[1]:AutoSize > 0 )==0 .AND.
      ;       IfValidAnd( HtPumpSystem[1]:Cap05 > 0 ))
      ;   then  HtPumpSystem[1]:Cap05
      ;   else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsCapRat0547_x" HVACSys:cseRSYS:rsCapRat0547_x  = {  UNDEFINED  }
      ;{  if (IfValidAnd( HtPumpSystem[1]:AutoSize > 0 ) .AND.
      ;       IfValidAnd( HtPumpSystem[1]:Cap05 > 0 ) .AND.
      ;       IfValidAnd( HtPumpSystem[1]:Cap47  > 0 ))
      ;   then  Format( "%.1f/%.1f", HtPumpSystem[1]:Cap05, HtPumpSystem[1]:Cap47 )
      ;   else  UNDEFINED  endif  }
   "Set HVACSys:cseRSYS:rsCapRat0547"  HVACSys:cseRSYS:rsCapRat0547  = {  UNDEFINED  }
      ;{  if (LocalStatus( cseRSYS:rsCapRat0547_x ) < 1 .AND.
      ;       IfValidAnd( HtPumpSystem[1]:AutoSize > 0 ) .AND.
      ;       IfValidAnd( HtPumpSystem[1]:Cap0547Ratio > 0 ))
      ;   then  HtPumpSystem[1]:Cap0547Ratio
      ;   else  UNDEFINED  endif  }

   ;"Set HVACSys:cseRSYS:rsCOP115"      HVACSys:cseRSYS:rsCOP115      =        ; SAC 09/22/21
   ;   {  if (IfValidAnd( HtPumpSystem[1]:COP115 > 0 ))
   ;      then  HtPumpSystem[1]:COP115
   ;      else  UNDEFINED  endif  }
   ;"Set HVACSys:cseRSYS:rsCOPMin115"   HVACSys:cseRSYS:rsCOPMin115   =  
   ;   {  if (IfValidAnd( HtPumpSystem[1]:COPMin115 > 0 ))
   ;      then  HtPumpSystem[1]:COPMin115
   ;      else  UNDEFINED  endif  }

   ;"Set HVACSys:cseRSYS:rsCOP95"       HVACSys:cseRSYS:rsCOP95       =  
   ;   {  if (IfValidAnd( HtPumpSystem[1]:COP95 > 0 ))
   ;      then  HtPumpSystem[1]:COP95
   ;      else  UNDEFINED  endif  }
   ;"Set HVACSys:cseRSYS:rsCOPMin95"    HVACSys:cseRSYS:rsCOPMin95    =  
   ;   {  if (IfValidAnd( HtPumpSystem[1]:COPMin95 > 0 ))
   ;      then  HtPumpSystem[1]:COPMin95
   ;      else  UNDEFINED  endif  }

   ;"Set HVACSys:cseRSYS:rsCOP82"       HVACSys:cseRSYS:rsCOP82       =  
   ;   {  if (IfValidAnd( HtPumpSystem[1]:COP82 > 0 ))
   ;      then  HtPumpSystem[1]:COP82
   ;      else  UNDEFINED  endif  }
   ;"Set HVACSys:cseRSYS:rsCOPMin82"    HVACSys:cseRSYS:rsCOPMin82    =  
   ;   {  if (IfValidAnd( HtPumpSystem[1]:COPMin82 > 0 ))
   ;      then  HtPumpSystem[1]:COPMin82
   ;      else  UNDEFINED  endif  }

   ;"Set HVACSys:cseRSYS:rsCOP05"       HVACSys:cseRSYS:rsCOP05       =        ; SAC 07/26/21
   ;   {  if (IfValidAnd( HtPumpSystem[1]:COP05 > 0 ))
   ;      then  HtPumpSystem[1]:COP05
   ;      else  UNDEFINED  endif  }

   ;"Set HVACSys:cseRSYS:rsCOPMin47"    HVACSys:cseRSYS:rsCOPMin47    =
   ;   {  if (IfValidAnd( HtPumpSystem[1]:COPMin47 > 0 ))
   ;      then  HtPumpSystem[1]:COPMin47
   ;      else  UNDEFINED  endif  }
   ;"Set HVACSys:cseRSYS:rsCOPMin17"    HVACSys:cseRSYS:rsCOPMin17    =
   ;   {  if (IfValidAnd( HtPumpSystem[1]:COPMin17 > 0 ))
   ;      then  HtPumpSystem[1]:COPMin17
   ;      else  UNDEFINED  endif  }
   ;"Set HVACSys:cseRSYS:rsCOPMin05"    HVACSys:cseRSYS:rsCOPMin05    =        ; SAC 07/26/21
   ;   {  if (IfValidAnd( HtPumpSystem[1]:COPMin05 > 0 ))
   ;      then  HtPumpSystem[1]:COPMin05
   ;      else  UNDEFINED  endif  }

   ;"Set HVACSys:cseRSYS:rsLoadFMin115"    HVACSys:cseRSYS:rsLoadFMin115   =      ; SAC 09/22/21
   ;   {  if (IfValidAnd( HtPumpSystem[1]:CapMin115 > 0 ) .AND.
   ;          IfValidAnd( HtPumpSystem[1]:Cap115    > 0 ))
   ;      then  (HtPumpSystem[1]:CapMin115 / HtPumpSystem[1]:Cap115)
   ;      else  UNDEFINED  endif  }
   ;"Set HVACSys:cseRSYS:rsLoadFMin95"     HVACSys:cseRSYS:rsLoadFMin95    =  
   ;   {  if (IfValidAnd( HtPumpSystem[1]:CapMin95 > 0 ) .AND.
   ;          IfValidAnd( HtPumpSystem[1]:Cap95    > 0 ))
   ;      then  (HtPumpSystem[1]:CapMin95 / HtPumpSystem[1]:Cap95)
   ;      else  UNDEFINED  endif  }
   ;"Set HVACSys:cseRSYS:rsLoadFMin82"     HVACSys:cseRSYS:rsLoadFMin82    =  
   ;   {  if (IfValidAnd( HtPumpSystem[1]:CapMin82 > 0 ) .AND.
   ;          IfValidAnd( HtPumpSystem[1]:Cap82    > 0 ))
   ;      then  (HtPumpSystem[1]:CapMin82 / HtPumpSystem[1]:Cap82)
   ;      else  UNDEFINED  endif  }
   ;"Set HVACSys:cseRSYS:rsLoadFMin47"     HVACSys:cseRSYS:rsLoadFMin47    =      ; SAC 07/26/21
   ;   {  if (IfValidAnd( HtPumpSystem[1]:CapMin47 > 0 ) .AND.
   ;          IfValidAnd( HtPumpSystem[1]:Cap47    > 0 ))
   ;      then  (HtPumpSystem[1]:CapMin47 / HtPumpSystem[1]:Cap47)
   ;      else  UNDEFINED  endif  }
   ;"Set HVACSys:cseRSYS:rsLoadFMin17"     HVACSys:cseRSYS:rsLoadFMin17    =
   ;   {  if (IfValidAnd( HtPumpSystem[1]:CapMin17 > 0 ) .AND.
   ;          IfValidAnd( HtPumpSystem[1]:Cap17    > 0 ))
   ;      then  (HtPumpSystem[1]:CapMin17 / HtPumpSystem[1]:Cap17)
   ;      else  UNDEFINED  endif  }
   ;"Set HVACSys:cseRSYS:rsLoadFMin05"     HVACSys:cseRSYS:rsLoadFMin05    =
   ;   {  if (IfValidAnd( HtPumpSystem[1]:CapMin05 > 0 ) .AND.
   ;          IfValidAnd( HtPumpSystem[1]:Cap05    > 0 ))
   ;      then  (HtPumpSystem[1]:CapMin05 / HtPumpSystem[1]:Cap05)
   ;      else  UNDEFINED  endif  }

   ; removed 0.75 denominator & default to 1.1 - SAC 02/11/22 (VCHP2)
   "Set HVACSys:cseRSYS:rsFxCapH"      HVACSys:cseRSYS:rsFxCapH      =        ; VCHP2 - SAC 11/10/20  ; default 1.1->1.2 - SAC 02/25/22  ; disable when not autosizing and specify only when EnableResearchMode activated - SAC 03/03/22
      {  if (IfValidAnd( HtPumpSystem[1]:AutoSize > 0 )==0) then  UNDEFINED
         else if (Proj:IsStdOrSMFRun .OR. Proj:RunAbbrev == "dr") 
         then  if (Proj:EnergyCodeYearNum < 2025)
               then  0.75
               else  1.1   endif
         else if (IfValidAnd( Proj:EnableResearchMode > 0.5 ) .AND.
                  IfValidAnd( HtPumpSystem[1]:HtgSizingFactor > 0 ))
         then  HtPumpSystem[1]:HtgSizingFactor
         else  1.1  endif endif endif  }
      ;{  1.5  }      ; VCHP3 - SAC 05/16/24 (tic #1379)  ; removed and restored prior logic w/ mods to 1.1 for 2025 std + prop - SAC 05/21/24 (tic #1379)

	"Set HVACSys:cseRSYS:rsParElec_x"	HVACSys:cseRSYS:rsParElec_x   =        ; VCHP2 - SAC 11/10/20
      {  if (LocalStatus( HtPumpSystem[1]:ParElecExprs ))
         then  HtPumpSystem[1]:ParElecExprs
         else  UNCHANGED  endif  }

   "Set HVACSys:cseRSYS:rsASHPLockOutT"      HVACSys:cseRSYS:rsASHPLockOutT =    ; SAC 09/05/24
      {  if (IfValidAnd( HPLockoutTemp > -999 ))
         then  HPLockoutTemp
         else  UNDEFINED  endif  }

; removed, now set above w/ other generic RSYS inputs - SAC 02/24/25 (tic #1379)
;   "Set HVACSys:cseRSYS:rsDefrostModel"   HVACSys:cseRSYS:rsDefrostModel  = {  "REVCYCLE"  }    ; turned back on - SAC 05/21/24 (tic #1379)

;   "Remove HVACSys:cseRSYS:rsSEER"        HVACSys:cseRSYS:rsSEER     = {  UNDEFINED  }
   "Remove HVACSys:cseRSYS:rsEER"         HVACSys:cseRSYS:rsEER      = {  UNDEFINED  }
;   "Remove HVACSys:cseRSYS:rsHSPF"        HVACSys:cseRSYS:rsHSPF     = {  UNDEFINED  }
   "Hardwire HVACSys:cseRSYS:rsCapAuxH"   HVACSys:cseRSYS:rsCapAuxH  = {  65000  }        ; updated 25k -> 65k per group conf. call - SAC 09/06/24

   "Hardwire HVACSys:cseRSYS:rsCdH"       HVACSys:cseRSYS:rsCdH      =        ; SAC 09/09/24 (VCHP3)   ; updated to vary by HPSys data - SAC 09/18/24
      {  if (IfValidAnd( HtPumpSystem[1]:HP3_Cd > 0 )) then  HtPumpSystem[1]:HP3_Cd  else  UNDEFINED  endif  }      
   "Hardwire HVACSys:cseRSYS:rsCdC"       HVACSys:cseRSYS:rsCdC      = {  cseRSYS:rsCdH  } 

   ; VCHP3 - SAC 05/16/24 (tic #1379)
   "Set HVACSys:cseRSYS:rsPerfMapHtg"   HVACSys:cseRSYS:rsPerfMapHtg  = {  if (LocalCompAssigned( HtPumpSystem[1]:VCHP3PerfMapHtgRef ) < 1) then  UNDEFINED
                                                                           else  HtPumpSystem[1]:VCHP3PerfMapHtgRef:Name  endif  }
   "Set HVACSys:cseRSYS:rsPerfMapClg"   HVACSys:cseRSYS:rsPerfMapClg  = {  if (LocalCompAssigned( HtPumpSystem[1]:VCHP3PerfMapClgRef ) < 1) then  UNDEFINED
                                                                           else  HtPumpSystem[1]:VCHP3PerfMapClgRef:Name  endif  }
END
;*************************************************************************


;*************************************************************************
RULELIST "ForceDefault_CSE_AirNet_ELA" 1 0 0 1
;*************************************************************************
; "debug"		Proj:Action	= {	if (LocalStatus( RunNumber ) < 1) then  MessageBox( "Force-default CSE_AirNet_ELA:  RunNumber undefined" )
; 										else  MessageBox( "Force-default CSE_AirNet_ELA:  RunNumber = %.0f", RunNumber )  endif  }
	"Blast Proj:EffLeakageArea"		Proj:EffLeakageArea			= {	UNDEFINED  }
	"Blast Proj:SlabRatio"				Proj:SlabRatio					= {	UNDEFINED  }
	"Blast Proj:UncondZnTotSF"			Proj:UncondZnTotSF			= {	UNDEFINED  }
   "Blast Proj:BldgELA_CeilSF"		Proj:BldgELA_CeilSF			= {   UNDEFINED  }
   "Blast Proj:BldgELA_RaisedFlrSF"	Proj:BldgELA_RaisedFlrSF	= {   UNDEFINED  }
   "Blast Proj:BldgELA_GarageSF"		Proj:BldgELA_GarageSF		= {   UNDEFINED  }
   "Blast Proj:BldgELA_WallSF"		Proj:BldgELA_WallSF			= {   UNDEFINED  }
END
;*************************************************************************
RULELIST "Default_CSE_AirNet_ELA" 0 0 0 1
;*************************************************************************
; SAC 2/2/15 - moved here from following rulelist (SimPrep_CSE_AirNet) to facilitate review and mods in BypassRuleLimits scenarios (analysis R&D)
; SAC 7/11/20 - modified to better handle MFam zonal leakage
	"Set Proj:EffLeakageArea"		Proj:EffLeakageArea		= {	ValidOr( CondVolume, 0 ) * ACH50 * 0.00000917  }   ; update ELA calc for AirNetAlgorithm v14->15 - SAC 10/09/23 (tic #1252)
                                                            ;  Local( CondFloorArea ) * Local( ACH50 ) / (2 * 10000)  }    ; SAC 9/7/12 - restore original formula per write-up v7 // SAC 8/31/12 - revise formula per update in airnet write-up (rev 5->6)
	"Set Proj:SlabRatio"				Proj:SlabRatio				= {	if (BldgSlabFloorArea < 0.0001 .AND. BldgExtFloorArea < 0.0001 .AND.
	                                                                BldgOZSlabFloorArea < 0.0001 .AND. BldgOZExtFloorArea < 0.0001) then  0
																					else  (BldgSlabFloorArea + BldgOZSlabFloorArea) /
																					      (BldgSlabFloorArea + BldgExtFloorArea + BldgOZSlabFloorArea + BldgOZExtFloorArea)  endif  }
	"Set Proj:UncondZnTotSF"		Proj:UncondZnTotSF		= {  BldgZnAdjUZnArea + BldgOZAdjUZnArea  }        ; OtherZone garage mods - SAC 11/30/20
      ;{	if (HasGarage < 0.1 .AND. SumAcrossIf( OtherZone:Area, OtherZone:Isgarage > 0 ) < 0.1) then  0
      ;   else  SumAll( Zone:AdjUncondZnArea ) + SumAll( OtherZone:AdjUncondZnArea )  endif  }
		;																			else  SumAll( IntWall:ParUZnAdjCndZnArea ) + SumAll( InteriorFloor:ParCndZnAdjUZnArea ) +
		;																					SumAll( IntWall:ParCndZnAdjUZnArea ) + SumAll( InteriorCeiling:ParUZnAdjCndZnArea )  endif  }

;   "Set Proj:NResLeakageRatio - ratio of NRes surface leakage (per ft2) / Res surface leakage"     Proj:NResLeakageRatio =    ; SAC 7/12/20

   ; SAC 7/12/20 - revised following rules for new Zonal vent control mechanism
   "Set Proj:BldgELA_CeilSF"        Proj:BldgELA_CeilSF       =
      {  if (CSEVentAvailZonal)
         then  EffLeakageArea / (BldgClgBlwAtticArea + BldgCathCeilingArea + BldgExtFloorArea + BldgZnAdjUZnArea + BldgExtWallArea +
                                 (NResLeakageRatio * (BldgOZClgBlwAtticArea + BldgOZCathCeilingArea + BldgOZExtFloorArea + BldgOZAdjUZnArea + BldgOZExtWallArea)))
         else if (BldgClgBlwAtticArea < 0.0001 .AND. BldgCathCeilingArea < 0.0001 .AND.
                  BldgOZClgBlwAtticArea < 0.0001 .AND. BldgOZCathCeilingArea < 0.0001) then  0
         else  EffLeakageArea * (0.4 + (0.1 * SlabRatio)) /
               (BldgClgBlwAtticArea + BldgCathCeilingArea + BldgOZClgBlwAtticArea + BldgOZCathCeilingArea)
         endif endif  }
   "Set Proj:BldgELA_RaisedFlrSF"   Proj:BldgELA_RaisedFlrSF  =
      {  if (CSEVentAvailZonal) then  BldgELA_CeilSF
         else if (BldgExtFloorArea < 0.0001 .AND. BldgOZExtFloorArea < 0.0001) then  0
         else  EffLeakageArea * (0.2 * (  1 - SlabRatio)) / (BldgExtFloorArea + BldgOZExtFloorArea)
         endif endif  }
   "Set Proj:BldgELA_GarageSF"      Proj:BldgELA_GarageSF     =
      {  if (CSEVentAvailZonal) then  BldgELA_CeilSF
         else if (UncondZnTotSF < 0.0001) then  0
         else  EffLeakageArea * 0.1 / UncondZnTotSF
         endif endif  }
   "Set Proj:BldgELA_WallSF"        Proj:BldgELA_WallSF       =
      {  if (CSEVentAvailZonal) then  BldgELA_CeilSF
         else if (BldgExtWallArea < 0.0001 .AND. BldgOZExtWallArea < 0.0001) then  0
         else if (UncondZnTotSF < 0.0001)
         then  EffLeakageArea * (0.4 + (0.1 * SlabRatio)) / (BldgExtWallArea + BldgOZExtWallArea)
         else  EffLeakageArea * (0.3 + (0.1 * SlabRatio)) / (BldgExtWallArea + BldgOZExtWallArea)
         endif endif endif  }
   ; added for screen display
   "Set Proj:BldgELA_Total"      Proj:BldgELA_Total   =
      {  (BldgELA_CeilSF      * (BldgClgBlwAtticArea + BldgCathCeilingArea +
                                                    (ValidOr( NResLeakageRatio, 0 ) * (BldgOZClgBlwAtticArea + BldgOZCathCeilingArea)))) +
         (BldgELA_RaisedFlrSF * (BldgExtFloorArea + (ValidOr( NResLeakageRatio, 0 ) *  BldgOZExtFloorArea ))) +
         (BldgELA_GarageSF    * (BldgZnAdjUZnArea + (ValidOr( NResLeakageRatio, 0 ) *  BldgOZAdjUZnArea   )))     +
         (BldgELA_WallSF      * (BldgExtWallArea  + (ValidOr( NResLeakageRatio, 0 ) *  BldgOZExtWallArea  )))  }
   "Set Proj:BldgELA_Msg[1]"     Proj:BldgELA_Msg[1]  = {   if (CSEVentAvailZonal) then  Format( "Zn: %.1f ft2 | OZ: %.1f ft2", (BldgClgBlwAtticArea + BldgCathCeilingArea), (BldgOZClgBlwAtticArea + BldgOZCathCeilingArea) )
                                                            else  Format( "x  %.1f ft2", (BldgClgBlwAtticArea + BldgCathCeilingArea + BldgOZClgBlwAtticArea + BldgOZCathCeilingArea) )  endif  }
   "Set Proj:BldgELA_Msg[2]"     Proj:BldgELA_Msg[2]  = {   if (CSEVentAvailZonal) then  Format( "Zn: %.1f ft2 | OZ: %.1f ft2", BldgExtFloorArea, BldgOZExtFloorArea )
                                                            else  Format( "x  %.1f ft2", (BldgExtFloorArea + BldgOZExtFloorArea) )  endif  }
   "Set Proj:BldgELA_Msg[3]"     Proj:BldgELA_Msg[3]  = {   if (CSEVentAvailZonal) then  Format( "Zn: %.1f ft2 | OZ: %.1f ft2", BldgZnAdjUZnArea, BldgOZAdjUZnArea )
                                                            else  Format( "x  %.1f ft2",  UncondZnTotSF    )  endif  }
   "Set Proj:BldgELA_Msg[4]"     Proj:BldgELA_Msg[4]  = {   if (CSEVentAvailZonal) then  Format( "Zn: %.1f ft2 | OZ: %.1f ft2", BldgExtWallArea, BldgOZExtWallArea )
                                                            else  Format( "x  %.1f ft2", (BldgExtWallArea + BldgOZExtWallArea)   )  endif  }
   "Set Proj:BldgELA_Msg[5]"     Proj:BldgELA_Msg[5]  = {   if (CSEVentAvailZonal) then  Format( "Total Lkg Area Calc Check:  %.3f ft2 =? %.3f ft2", BldgELA_Total, EffLeakageArea )
                                                            else  Format( "Total above = %.3f ft2  (vs. total lkg area of %.3f)", BldgELA_Total, EffLeakageArea )  endif  }      ; updated message removing 'ELA' - SAC 09/24/20
END

;*************************************************************************
RULELIST "SimPrep_CSE_AirNet" 0 0 0 1
;*************************************************************************

;;	"Set Proj:BldgExtWallArea"			Proj:BldgExtWallArea			= {	SumAll( Zone:ExtWallArea     )  }
;;	"Set Proj:BldgClgBlwAtticArea"	Proj:BldgClgBlwAtticArea	= {	SumAll( Zone:ClgBlwAtticArea )  }
;;	"Set Proj:BldgCathCeilingArea"	Proj:BldgCathCeilingArea	= {	SumAll( Zone:CathCeilingArea )  }
;;	"Set Proj:BldgSlabFloorArea"		Proj:BldgSlabFloorArea		= {	SumAll( Zone:SlabFloorArea   )  }
;;	"Set Proj:BldgExtFloorArea"		Proj:BldgExtFloorArea		= {	SumAll( Zone:ExtFloorArea    )  }
;;
;;	"Set Proj:CondFloorArea"			Proj:CondFloorArea			= {	SumAll( Zone:CondFloorArea   )  }

; SAC 2/9/15 - rules to force re-default of (possibly user-defined) AirNet properties
; "debug"		Proj:Action	= {	if (LocalStatus( RunNumber ) < 1) then  MessageBox( "SimPrep_CSE_AirNet:  RunNumber undefined" )
; 										else  MessageBox( "SimPrep_CSE_AirNet:  RunNumber = %.0f", RunNumber )  endif  }
; SAC 8/4/17 - replaced if statement logic dependent on RunNumber - was:							(	(AllOrientations < 0.5 .AND. RunNumber < 2) .OR.
;																																(AllOrientations > 0.5 .AND. RunNumber < 5) ) ) then  UNCHANGED
   ; modified to prevent ForceDefault_CSE_AirNet_ELA when EnableResearchMode activated - SAC 12/02/20
	"force-default of (possibly user-defined) AirNet properties"		Proj:Action	= {	if ((BypassRuleLimits > 0.5 .OR. EnableResearchMode > 0.5) .AND. 
	                                                                                          RunAbbrev != "s" .AND. Proj:RunAbbrev != "smf" .AND. RunAbbrev != "dr") then  UNCHANGED
																													else	EvalRulelist( "ForceDefault_CSE_AirNet_ELA" )  endif  }
; SAC 2/2/15 - moved various AirNet ELA setting rules from this rulelist to 'Default_CSE_AirNet_ELA' in order to facilitate review and mods in BypassRuleLimits scenarios (analysis R&D)
	"Default various AirNet ELA settings"	Proj:Action		= {	EvalRulelist( "Default_CSE_AirNet_ELA" )  }
;	"Set Proj:EffLeakageArea"		Proj:EffLeakageArea		= {	Local( CondFloorArea ) * Local( ACH50 ) / (2 * 10000)  }    ; SAC 9/7/12 - restore original formula per write-up v7 // SAC 8/31/12 - revise formula per update in airnet write-up (rev 5->6)
;	"Set Proj:SlabRatio"				Proj:SlabRatio				= {	if (Local( BldgSlabFloorArea ) < 0.0001 .AND. Local( BldgExtFloorArea ) < 0.0001) then  0
;																					else  Local( BldgSlabFloorArea ) / (Local( BldgSlabFloorArea ) + Local( BldgExtFloorArea ))  endif  }
;	"Set Proj:UncondZnTotSF"		Proj:UncondZnTotSF		= {	if (HasGarage < 0.1) then  0
;																					else  SumAll( IntWall:ParUZnAdjCndZnArea ) + SumAll( InteriorFloor:ParCndZnAdjUZnArea ) +
;																							SumAll( IntWall:ParCndZnAdjUZnArea ) + SumAll( InteriorCeiling:ParUZnAdjCndZnArea )  endif  }
;
;   "Set Proj:BldgELA_CeilSF"			Proj:BldgELA_CeilSF			= {   if (Local( BldgClgBlwAtticArea ) < 0.0001 .AND. Local( BldgCathCeilingArea ) < 0.0001) then  0
;																							else  Local( EffLeakageArea ) * (0.4 + (0.1 * Local( SlabRatio ))) / (Local( BldgClgBlwAtticArea ) + Local( BldgCathCeilingArea ))  endif  }
;   "Set Proj:BldgELA_RaisedFlrSF"	Proj:BldgELA_RaisedFlrSF	= {   if (Local( BldgExtFloorArea ) < 0.0001) then  0
;																							else  Local( EffLeakageArea ) * (0.2 * (  1 - Local( SlabRatio ))) /  Local( BldgExtFloorArea )  endif  }
;   "Set Proj:BldgELA_GarageSF"		Proj:BldgELA_GarageSF		= {   if (Local( UncondZnTotSF ) < 0.0001) then  0
;																							else  Local( EffLeakageArea ) * 0.1 / Local( UncondZnTotSF )  endif  }
;   "Set Proj:BldgELA_WallSF"			Proj:BldgELA_WallSF			= {   if (BldgExtWallArea < 0.0001) then  0
;																							else if (UncondZnTotSF < 0.0001)
;																							then  EffLeakageArea * (0.4 + (0.1 * SlabRatio)) / BldgExtWallArea
;																							else  EffLeakageArea * (0.3 + (0.1 * SlabRatio)) / BldgExtWallArea  endif endif  }


;           "BldgExtWallArea",       BEMP_Flt,  1, "ft2",              0, "",         0, "",             3008, "Sum of areas of children ExtWall:Area"    
;           "BldgClgBlwAtticArea",   BEMP_Flt,  1, "ft2",              0, "",         0, "",             3008, "Sum of areas of children CeilingBelowAttic:Area"    
;           "BldgCathCeilingArea",   BEMP_Flt,  1, "ft2",              0, "",         0, "",             3008, "Sum of areas of children CathedralCeiling:Area"    
;           "BldgSlabFloorArea",     BEMP_Flt,  1, "ft2",              0, "",         0, "",             3008, "Sum of areas of children SlabFloor:Area"    
;           "BldgExtFloorArea",      BEMP_Flt,  1, "ft2",              0, "",         0, "",             3008, "Sum of areas of children ExteriorFloor:Area"    
;
;           "EffLeakageArea",        BEMP_Flt,  1, "ft2",              0, "",         0, "",             3008, "Effective leakage area (ELAtot for AirNet)"    
;           "SlabRatio",             BEMP_Flt,  1, "",                 0, "",         0, "",             3008, "Ratio of slab/total floor area (for AirNet)"    
;           "UncondZnTotSF",         BEMP_Flt,  1, "ft2",              0, "",         0, "",             3008, "Total area of all (cond zone) surfaces adjacent to uncond zones (for AirNet)"    
;
;           "BldgELA_CeilSF",        BEMP_Flt,  1, "ft2",              0, "",         0, "",             3008, "Effective Leakage Area through Ceiling surfaces (for AirNet)"
;           "BldgELA_RaisedFlrSF",   BEMP_Flt,  1, "ft2",              0, "",         0, "",             3008, "Effective Leakage Area through Raised Floor surfaces (for AirNet)"
;           "BldgELA_GarageSF",      BEMP_Flt,  1, "ft2",              0, "",         0, "",             3008, "Effective Leakage Area through Garage surfaces (for AirNet)"
;           "BldgELA_WallSF",        BEMP_Flt,  1, "ft2",              0, "",         0, "",             3008, "Effective Leakage Area through Other Wall surfaces (for AirNet)"

	; SAC 5/1/13 - new rulelists to handle IAQ summing into referenced ZONES
	"Set Zone:IAQ*"		Proj:Action	= {	if (IsMultiFamily < 0.5)
														then  EvalRulelist( "Set_ZoneIAQ_SFam" )
														else	EvalRulelist( "Set_ZoneIAQ_MFam" )  endif  }

; SAC 7/25/14 - moved some Zone AirNet rules out of subordinate rulelist to ensure they are evaluated across entire model before evaluating individual Zone AirNet stuff
	"Set Zone:ZoneBotZ"				Zone:ZoneBotZ     		= {	Local( Bottom )  }
	"Set Zone:ZoneTopZ"				Zone:ZoneTopZ     		= {	Local( ZoneBotZ ) + (Local( NumStories ) * Local( FloorHeight )) - max( 0, (Local( FloorHeight ) - Local( CeilingHeight )) )  }
	"Set Zone:ZoneHeight"			Zone:ZoneHeight   		= {	Local( ZoneTopZ ) - Local( ZoneBotZ )  }
  ; SAC 9/12/12 - restored this rule that was previously commented out
;	"Set Zone:WinHHTop"				Zone:WinHHTop     		= {	Local( ZoneBotZ ) + (Local( FloorHeight ) * (Local( NumStories ) - 1)) + Local( WinHeadHeight )  }
;	"Set Zone:WinHHTopUse"			Zone:WinHHTopUse			= {	Local( ZoneBotZ ) + Local( WinHeadHeight )  }   ; SAC 5/22/13 - adjust for airnet algorithm 14
	"Set Zone:WinHHTopUse[1]"		Zone:WinHHTopUse[1]		= {	if (IfValidAnd( FloorHeight > 1 ) .AND. IfValidAnd( NumStories > 0.5 ))
																					then	if (WinHeadHeight > FloorHeight)
																							then	ZoneBotZ + WinHeadHeight		; user accounting for multi-stories in WinHeadHeight already
																							else	ZoneBotZ + WinHeadHeight + (FloorHeight * (NumStories - 1))    endif
																					else			ZoneBotZ + WinHeadHeight    endif  }
; SAC 7/24/14 - revised WinHHTopUse[1] (above) to take into account multi-story zones (essentially reverting back to a earlier logic) AND added second array value (below) to account for SFam/MFam differences
	"Set Zone:WinHHTopUse[2]"		Zone:WinHHTopUse[2]		= {	if (Proj:IsMultiFamily > 0.5) then  WinHHTopUse[1]
																					else  MaxAll( Zone:WinHHTopUse[1] )  endif  }

   ; SAC 9/19/19 - OtherZOne (MFamProto)
	"Set OtherZone:ZoneBotZ"			OtherZone:ZoneBotZ     		= {	Local( Bottom )  }
	"Set OtherZone:ZoneTopZ"			OtherZone:ZoneTopZ     		= {	Local( ZoneBotZ ) + (Local( NumStories ) * Local( FloorHeight )) - max( 0, (Local( FloorHeight ) - Local( CeilingHeight )) )  }
	"Set OtherZone:ZoneHeight"			OtherZone:ZoneHeight   		= {	Local( ZoneTopZ ) - Local( ZoneBotZ )  }
	"Set OtherZone:WinHHTopUse[1]"	OtherZone:WinHHTopUse[1]	= {	if (IfValidAnd( FloorHeight > 1 ) .AND. IfValidAnd( NumStories > 0.5 ))
																							then	if (WinHeadHeight > FloorHeight)
																									then	ZoneBotZ + WinHeadHeight		; user accounting for multi-stories in WinHeadHeight already
																									else	ZoneBotZ + WinHeadHeight + (FloorHeight * (NumStories - 1))    endif
																							else			ZoneBotZ + WinHeadHeight    endif  }
	"Set OtherZone:WinHHTopUse[2]"	OtherZone:WinHHTopUse[2]	= {	WinHHTopUse[1]  }

	"Setup AirNet Zone IZXFER objects"			Zone:Action		= {	if (Local( Type ) == 10) then  UNCHANGED		; Unconditioned
																						else  EvalRulelist( "SimPrep_CSE_AirNet_Zone", 1 )  endif  }
	"Setup AirNet Zone IZXFER objects"		OtherZone:Action	= {	if (Local( Type ) == 10) then  UNCHANGED		; Unconditioned
																						else  EvalRulelist( "SimPrep_CSE_AirNet_OtherZone", 1 )  endif  }

   "Setup airnet IZXFERs for CondZn/UncondZn vertical (wall) boundaries (when CSEVentAvailZonal)"   Proj:Action =    ; SAC 12/01/20
      {  if (CSEVentAvailZonal)
         then  EvalRulelist( "SimPrep_CSE_AirNet_ZoneUncondZone_ByWall" )
         else  UNCHANGED  endif  }

   "Setup MFam DwellingUnit HRV IAQ IZXFERs for individual fans"     DwellingUnit:Action  =     ; SAC 2/6/20 (tic #1174)
      {  if (IfValidAnd( Proj:AnalysisVersion >= 190200 ) .AND. IfValidAnd( IAQHRVCFMxSRE[1] > 0 ) .AND. Proj:IsMultiFamily > 0.5)
         then  EvalRulelist( "Setup_HRVIAQ_IZXFERs_MFamDwellUnit", 0, "Proj:HRVIAQ_IZXFER_DwellUnitRef" ) 
         else  UNCHANGED  endif  }

	"Setup AirNet (other) IZXFER objects"		Proj:Action		= {	EvalRulelist( "SimPrep_CSE_AirNet_Other" )  }

   ; SAC 10/19/20
	"Create OtherZone:ExhaustIZXFERs[1] (exhaust)"		OtherZone:ExhaustIZXFERs[1]	= {	if (CodeExhPerArea <= 0 .OR. Area <= 0) then  UNCHANGED
																														else  CreateComp( cseIZXFER, substr( Name, 0, 44 ) + "-Exhst" )  endif  }
	"Set OtherZone:ExhaustIZXFERs[1]:izNVType"			OtherZone:ExhaustIZXFERs[1]:izNVType		=	{	6  }		; AIRNETEXTFAN  - Fan from exterior to zone
	"Set OtherZone:ExhaustIZXFERs[1]:izZn1"				OtherZone:ExhaustIZXFERs[1]:izZn1			=	{	CSE_ZONE  }
	"Set OtherZone:ExhaustIZXFERs[1]:izVFmin"				OtherZone:ExhaustIZXFERs[1]:izVFmin			=	{	CodeExhPerArea * Area * -1  }
	"Set OtherZone:ExhaustIZXFERs[1]:izVFmax"				OtherZone:ExhaustIZXFERs[1]:izVFmax   		=	{	CodeExhPerArea * Area * -1  }
	"Set OtherZone:ExhaustIZXFERs[1]:izFanVfDs"			OtherZone:ExhaustIZXFERs[1]:izFanVfDs 		=	{	CodeExhPerArea * Area  }
	"Set OtherZone:ExhaustIZXFERs[1]:izFanElecPwr"		OtherZone:ExhaustIZXFERs[1]:izFanElecPwr	=	{	if (IfValidAnd( CodeExhFanPwr > 0 )==0) then  UNDEFINED
                                                                                                      else  CodeExhFanPwr  endif   }
	"Set OtherZone:ExhaustIZXFERs[1]:izFanMtr"			OtherZone:ExhaustIZXFERs[1]:izFanMtr  		=	{	Proj:CSE_ElecMETER  }
	"Set OtherZone:ExhaustIZXFERs[1]:izFanEndUse"		OtherZone:ExhaustIZXFERs[1]:izFanEndUse	=	{	"FANV"          }

   "Create OtherZone:ExhaustIZXFERs[2]"         OtherZone:ExhaustIZXFERs[2]  =  {   if (ExhstOutsideOpening <= 0) then  UNDEFINED
                                                                                    else  CreateComp( cseIZXFER, substr( Name, 0, 44 ) + "-ExhstOpn" )  endif  }
   "Set OtherZone:ExhaustIZXFERs[2]:izNVType"   OtherZone:ExhaustIZXFERs[2]:izNVType  = {  4  }       ; AIRNETEXT - Single opening to ambient
   "Set OtherZone:ExhaustIZXFERs[2]:izZn1"      OtherZone:ExhaustIZXFERs[2]:izZn1     = {  CSE_ZONE  }
   "Set OtherZone:ExhaustIZXFERs[2]:izALo"      OtherZone:ExhaustIZXFERs[2]:izALo     = {  ExhstOutsideOpening  }
   "Set OtherZone:ExhaustIZXFERs[2]:izHD"       OtherZone:ExhaustIZXFERs[2]:izHD      = {  max( 0, Bottom )  }
   "Set OtherZone:ExhaustIZXFERs[2]:izNVEff"    OtherZone:ExhaustIZXFERs[2]:izNVEff   = {  1  }
   "Set OtherZone:ExhaustIZXFERs[2]:izExp"      OtherZone:ExhaustIZXFERs[2]:izExp     = {  0.65  }
   "Set OtherZone:ExhaustIZXFERs[2]:izAFCat"    OtherZone:ExhaustIZXFERs[2]:izAFCat   = {  "VentEx"  }

END


;*************************************************************************
RULELIST "SimPrep_CSE_AirNet_Zone" 0 0 0 1
;*************************************************************************

   "Set Zone:ELA_ACeil"				Zone:ELA_ACeil				= {   Global( Proj:BldgELA_CeilSF      ) *  Local( ClgBlwAtticArea )  }
   "Set Zone:ELA_XCeil"				Zone:ELA_XCeil				= {   Global( Proj:BldgELA_CeilSF      ) * (				0				  + Local( CathCeilingArea ))  }   ; AtticEdgeArea to be inserted for 0 here
   "Set Zone:ELA_XWall"				Zone:ELA_XWall				= {   Global( Proj:BldgELA_WallSF      ) *  Local( ExtWallArea     )  }
;   "Set Zone:ELA_GWall"				Zone:ELA_GWall				= {   0  }     ; Global( Proj:BldgELA_GarageSF    ) *  Local( <area of zone walls adjacent to garage spaces> )  }
   "Set Zone:ELA_Floor"				Zone:ELA_Floor				= {   Global( Proj:BldgELA_RaisedFlrSF ) *  Local( ExtFloorArea    )  }
;   "Set Zone:ELA_GFloor"			Zone:ELA_GFloor			= {   if (Proj:HasGarage > 0.1) then  SumAll( Garage:Area ) * Local( FlrOverUncondZnArea ) * 1.45
;																					else  0  endif  }

; SAC 7/25/14 - moved following rules into calling rulelist to ensure they are evaluated across entire model before evaluating individual Zone AirNet stuff
;		"Set Zone:ZoneBotZ"				Zone:ZoneBotZ     		= {	Local( Bottom )  }
;		"Set Zone:ZoneTopZ"				Zone:ZoneTopZ     		= {	Local( ZoneBotZ ) + (Local( NumStories ) * Local( FloorHeight )) - max( 0, (Local( FloorHeight ) - Local( CeilingHeight )) )  }
;		"Set Zone:ZoneHeight"			Zone:ZoneHeight   		= {	Local( ZoneTopZ ) - Local( ZoneBotZ )  }
;	  ; SAC 9/12/12 - restored this rule that was previously commented out
;	;	"Set Zone:WinHHTop"				Zone:WinHHTop     		= {	Local( ZoneBotZ ) + (Local( FloorHeight ) * (Local( NumStories ) - 1)) + Local( WinHeadHeight )  }
;	;	"Set Zone:WinHHTopUse"			Zone:WinHHTopUse			= {	Local( ZoneBotZ ) + Local( WinHeadHeight )  }   ; SAC 5/22/13 - adjust for airnet algorithm 14
;		"Set Zone:WinHHTopUse[1]"		Zone:WinHHTopUse[1]		= {	if (IfValidAnd( FloorHeight > 1 ) .AND. IfValidAnd( NumStories > 0.5 ))
;																						then	if (WinHeadHeight > FloorHeight)
;																								then	ZoneBotZ + WinHeadHeight		; user accounting for multi-stories in WinHeadHeight already
;																								else	ZoneBotZ + WinHeadHeight + (FloorHeight * (NumStories - 1))    endif
;																						else			ZoneBotZ + WinHeadHeight    endif  }
;	; SAC 7/24/14 - revised WinHHTopUse[1] (above) to take into account multi-story zones (essentially reverting back to a earlier logic) AND added second array value (below) to account for SFam/MFam differences
;		"Set Zone:WinHHTopUse[2]"		Zone:WinHHTopUse[2]		= {	if (Proj:IsMultiFamily > 0.5) then  WinHHTopUse[1]
;																						else  MaxAll( Zone:WinHHTopUse[1] )  endif  }

	"Set Zone:WallHoleSize"			Zone:WallHoleSize			= {	Local( ELA_XWall ) / 8  }     ; removed 1.45 multiplier for AirNet Algorithm v14->15 update - SAC 10/09/23 (tic #1252)

	"Create & setup Zone:AirNetIZXFERs[1-6] iff WallHoleSize > 0"
			Zone:Action	 = {	if (WallHoleSize <= 0) then  UNCHANGED
									else  EvalRulelist( "SimPrep_CSE_AirNet_Zone_ExtWall", 1 )  endif  }

 ;-----------------------
 ; WINDOW AirNet
 ;-----------------------
; SAC 6/17/14 - switched to array of 3 for nat vent testing
;	"Set Zone:WinVentHtDiff"		Zone:WinVentHtDiff 	= {	2.0  }
	; Expression describing hourly window hole area (1=>WnLU/LD, 2=>WnLS)
	; from AirNetAlgorithm2.txt -- WnHole = 0.5*(WnVentArea/8.)*Win_hr*Windowmode // 1/8th in each hole,  ft2.  1/2 of nominal area to account for screens etc.  Hourly and seasonal availability 

				; 2.  Cooling Ventilation Setup:  4 types:  Windows only (all types have windows for some part of the year), Whole house fan, Smart Vent, NightBreeze
				;       Set up seasonal window control
				;  #if Smart Vent or NightBreeze //Windows are on in Winter, but off in summer when mechanical ventilation is on
				; 	   #redefine Windowmode select( @weather.taDbAvg07 >60., 0.00001,default 1.) 
				; 	   #define VentDiffMult  select( @top.tDbOSh < (@znRes[Single].prior.S.tAir-VentDiff), 1,default 0.000001) //Vent off if Tin-Vendiff > Tout  !! 110413  XXX
				; 	#Else  //everything but Econ and NightBreeeze Windows are on year round
				; 	   #reDefine Windowmode 1.       //Always available
				; 	   #Define VentDiff 0          // Differential.  No differential for windows or WWF  110309 BAW

	"Create & setup Zone:WinAirNetIZXFERs[1-6] iff WinVentArea > 0"
			Zone:Action	 = {	if (WinVentArea < 0.0001) then  UNCHANGED
									else	EvalRulelist( "SimPrep_CSE_AirNet_Zone_Windows_1Story", 1 )  endif  }
; SAC 7/24/14 - revised logic to ALWAYS generate window AirNet objects using the single story logic (removing below)
;									else if (NumStories < 1.5)
;									then  EvalRulelist( "SimPrep_CSE_AirNet_Zone_Windows_1Story", 1 )
;									else  EvalRulelist( "SimPrep_CSE_AirNet_Zone_Windows_MultiStory", 1 )  endif endif  }

; SAC 8/29/13 - moved to "SimPrep_CSE_AirNet_Other" rulelist, since rules here need to be evaluated on Proj as well as Zone
; ;-----------------------
; ; AirNet for ceiling below attic in Conditioned Zone
; ;-----------------------

   "Setup airnet IZXFERs for CondZn/UncondZn vertical (wall) boundaries"   Zone:Action =
      {  if (Proj:CSEVentAvailZonal) then  UNCHANGED
         else  EvalRulelist( "SimPrep_CSE_AirNet_ZoneUncondZone_ByZone", 1 )  endif  }
; moved into rulelist(s) called above - SAC 11/30/20
;	; for garage wall
;	"Set Zone:AdjUncondZnWallArea"						Zone:AdjUncondZnWallArea		=	{	SumChildren( IntWall:ParCndZnAdjUZnArea)
;																													+ SumRevRef( IntWall:Outside, IntWall:ParUZnAdjCndZnArea)	}
;	"Set Zone:GrgWallH"										Zone:GrgWallH						=	{	Global(Proj:BldgELA_GarageSF) * AdjUncondZnWallArea / 2.		}
;	"Set Zone:GrgWallTopZ"									Zone:GrgWallTopZ					=	{	min( Local(Top), Local(Top) )						}	;Global(Garage:Top)
;	"Set Zone:GrgWallBotZ"									Zone:GrgWallBotZ					=	{	min( Local(Bottom), Local(Bottom) )					}	;Global(Garage:Bottom)
;	"Set Zone:GrgWallHt"										Zone:GrgWallHt						=	{	Local(GrgWallTopZ) - Local(GrgWallBotZ)						}
;	"Set Zone:GrgWallHoleHiZ"								Zone:GrgWallHoleHiZ				=	{	Local(GrgWallBotZ) + (0.75 * Local(GrgWallHt))				}
;	"Set Zone:GrgWallHoleLoZ"								Zone:GrgWallHoleLoZ				=	{	Local(GrgWallBotZ) + (0.25 * Local(GrgWallHt))				}
;
;	"Create Zone:GrgWallAirNetIZXFERs[1]"				Zone:GrgWallAirNetIZXFERs[1]	=	{	if ( Local(GrgWallH) > 0. ) 
;																															then CreateComp( cseIZXFER, Local( Name ) + "-xGarageH")
;																															else UNDEFINED
;																															endif  }
;	"Set Zone:GrgWallAirNetIZXFERs[1]:izNVType"			Zone:GrgWallAirNetIZXFERs[1]:izNVType	=	{	3  }		; AIRNETIZ - Single opening to another zone
;	"Set Zone:GrgWallAirNetIZXFERs[1]:izZn1"				Zone:GrgWallAirNetIZXFERs[1]:izZn1		=	{	Local( CSE_ZONE )  }
;	"Set Zone:GrgWallAirNetIZXFERs[1]:izALo"				Zone:GrgWallAirNetIZXFERs[1]:izALo		=	{	Local( GrgWallH )  }
;	"Set Zone:GrgWallAirNetIZXFERs[1]:izHD"				Zone:GrgWallAirNetIZXFERs[1]:izHD   	=	{	Local( GrgWallHoleHiZ )  }
;	"Set Zone:GrgWallAirNetIZXFERs[1]:izNVEff"			Zone:GrgWallAirNetIZXFERs[1]:izNVEff	=	{	1.0  }
;	"Set Zone:GrgWallAirNetIZXFERs[1]:izExp"				Zone:GrgWallAirNetIZXFERs[1]:izExp  	=	{	0.65  }
;	"Set Zone:GrgWallAirNetIZXFERs[1]:izZN2"				Zone:GrgWallAirNetIZXFERs[1]:izZN2  	=	{	Global( Garage:CSE_ZONE )  }
;																					
;	"Create Zone:GrgWallAirNetIZXFERs[2]"					Zone:GrgWallAirNetIZXFERs[2]		=	{	if ( Local(GrgWallH) > 0. ) 
;																															then CreateComp( cseIZXFER, Local( Name ) + "-xGarageL")
;																															else UNDEFINED
;																															endif  }
;	"Set Zone:GrgWallAirNetIZXFERs[2]:izNVType"			Zone:GrgWallAirNetIZXFERs[2]:izNVType	=	{	3  }		; AIRNETIZ - Single opening to another zone
;	"Set Zone:GrgWallAirNetIZXFERs[2]:izZn1"				Zone:GrgWallAirNetIZXFERs[2]:izZn1		=	{	Local( CSE_ZONE )  }
;	"Set Zone:GrgWallAirNetIZXFERs[2]:izALo"				Zone:GrgWallAirNetIZXFERs[2]:izALo		=	{	Local( GrgWallH )  }
;	"Set Zone:GrgWallAirNetIZXFERs[2]:izHD"				Zone:GrgWallAirNetIZXFERs[2]:izHD   	=	{	Local( GrgWallHoleLoZ )  }
;	"Set Zone:GrgWallAirNetIZXFERs[2]:izNVEff"			Zone:GrgWallAirNetIZXFERs[2]:izNVEff	=	{	1.0  }
;	"Set Zone:GrgWallAirNetIZXFERs[2]:izExp"				Zone:GrgWallAirNetIZXFERs[2]:izExp  	=	{	0.65  }
;	"Set Zone:GrgWallAirNetIZXFERs[2]:izZN2"				Zone:GrgWallAirNetIZXFERs[2]:izZN2  	=	{	Global( Garage:CSE_ZONE )  }

 ;-----------------------
 ; AirNet for IAQ Ventilation
 ;-----------------------
	;   IAQ ventilation  For MF flows may be summed accross units being modelled together in a single zone with W/CFM and ASEF flow weighted.  130517
	;       Inputs for each zone
	;         IAQVentCFM     	// CFM of IAQ vent   
	;         IAQfanWperCFM  	// W/CFM of IAQ vent   
	;         Type IAQExhaust     	// "IAQExhaust", "IAQSupply", "IAQBalanced" "NoIAQVent"
	;	 ASEF     	// If type is IAQBalanced, the apparent sensible effectiveness, fraction (includes fan heat).  Range 0 - 1, default 0  130517
	;		Write Airnet Objects to CSE Input		
	;    
	;	 If Exhaust 
	;	    IZXFER (Zone)IAQfan izNVTYPE = AirNetExtFan izZN1 = (Zone) izVFmin=-IAQVentCFM izVFmax=-IAQVentCFM izFanVfDs=IAQVentCFM izFanElecPwr=IAQfanWperCFM izFanMtr=IAQventMtr
	;	
	;	 If IAQSupply
	;            IZXFER (Zone)IAQfan izNVTYPE = AirNetExtFan izZN1 = (Zone) izVFmin=IAQVentCFM izVFmax=-IAQVentCFM izFanVfDs=IAQVentCFM izFanElecPwr=IAQfanWperCFM izFanMtr=IAQventMtr
	;	
	;	 If IAQBalanced  // Balanced or Heat recovery ventilator 130517
	;	     IZXFER (Zone)IAQHRV  izNVTYPE = AIRNETHERV izZN1 = (Zone) izFanVFDS = IAQVentCFM  izFanElecPwr=IAQfanWperCFM izFanMtr=IAQventMtr izASEF=ASEF  

	;					where:		0, HVACFan:IAQFanType,  1
	;									2,              1,    "Exhaust"
	;									2,              2,    "Supply"
	;									2,              3,    "Balanced"

   ; SAC 3/20/19 - added in references to new IAQCFMScaleFactor[3&4] - used by CEC in testing IAQ CFM limits (tic #1083)
   ; SAC 4/17/19 - removed references to new IAQCFMScaleFactor[3&4] from rules setting izFanElecPwr to ensure same W/CFM between Prop & Std models (tic #1083)
   ; SAC 12/16/19 - switched from Proj to Zone IAQCFMScaleFactors and added use of Zone:IAQPwrScaleFactor
	"Create Zone:IAQVentAirNetIZXFERs[1] (supply)"		Zone:IAQVentAirNetIZXFERs[1]	= {	if (IAQCFM_Supply[1] <= 0 .OR. IAQPwr_Supply[1] <= 0) then  UNCHANGED
																														else  CreateComp( cseIZXFER, substr( Name, 0, 44 ) + "-IAQFanS" )  endif  }
	"Set Zone:IAQVentAirNetIZXFERs[1]:izNVType"			Zone:IAQVentAirNetIZXFERs[1]:izNVType		=	{	6  }		; AIRNETEXTFAN  - Fan from exterior to zone
	"Set Zone:IAQVentAirNetIZXFERs[1]:izZn1"				Zone:IAQVentAirNetIZXFERs[1]:izZn1			=	{	CSE_ZONE  }
	"Set Zone:IAQVentAirNetIZXFERs[1]:izVFmin"			Zone:IAQVentAirNetIZXFERs[1]:izVFmin		=	{	IAQCFM_Supply[1] * ValidOr( IAQCFMScaleFactor[1], 1 )  }
	"Set Zone:IAQVentAirNetIZXFERs[1]:izVFmax"			Zone:IAQVentAirNetIZXFERs[1]:izVFmax   	=	{	IAQCFM_Supply[1] * ValidOr( IAQCFMScaleFactor[1], 1 )  }
	"Set Zone:IAQVentAirNetIZXFERs[1]:izFanVfDs"			Zone:IAQVentAirNetIZXFERs[1]:izFanVfDs 	=	{	IAQCFM_Supply[1] * ValidOr( IAQCFMScaleFactor[1], 1 )  }
	"Set Zone:IAQVentAirNetIZXFERs[1]:izFanElecPwr"		Zone:IAQVentAirNetIZXFERs[1]:izFanElecPwr	=	{	IAQPwr_Supply[1] * ValidOr( IAQPwrScaleFactor[1], 1 ) / IAQCFM_Supply[1]   }
	"Set Zone:IAQVentAirNetIZXFERs[1]:izFanMtr"			Zone:IAQVentAirNetIZXFERs[1]:izFanMtr  	=	{	Proj:CSE_ElecMETER  }
	"Set Zone:IAQVentAirNetIZXFERs[1]:izFanEndUse"		Zone:IAQVentAirNetIZXFERs[1]:izFanEndUse	=	{	"FANV"          }

	"Create Zone:IAQVentAirNetIZXFERs[2] (exhaust)"		Zone:IAQVentAirNetIZXFERs[2]	= {	if (IAQCFM_Exhaust[1] <= 0 .OR. IAQPwr_Exhaust[1] <= 0) then  UNCHANGED
																														else  CreateComp( cseIZXFER, substr( Name, 0, 44 ) + "-IAQFanE" )  endif  }
	"Set Zone:IAQVentAirNetIZXFERs[2]:izNVType"			Zone:IAQVentAirNetIZXFERs[2]:izNVType		=	{	6  }		; AIRNETEXTFAN  - Fan from zone to exterior
	"Set Zone:IAQVentAirNetIZXFERs[2]:izZn1"				Zone:IAQVentAirNetIZXFERs[2]:izZn1			=	{	CSE_ZONE  }
	"Set Zone:IAQVentAirNetIZXFERs[2]:izVFmin"			Zone:IAQVentAirNetIZXFERs[2]:izVFmin		=	{	IAQCFM_Exhaust[1] * -1 * ValidOr( IAQCFMScaleFactor[1], 1 )  }
	"Set Zone:IAQVentAirNetIZXFERs[2]:izVFmax"			Zone:IAQVentAirNetIZXFERs[2]:izVFmax   	=	{	IAQCFM_Exhaust[1] * -1 * ValidOr( IAQCFMScaleFactor[1], 1 )  }
	"Set Zone:IAQVentAirNetIZXFERs[2]:izFanVfDs"			Zone:IAQVentAirNetIZXFERs[2]:izFanVfDs 	=	{	IAQCFM_Exhaust[1]      * ValidOr( IAQCFMScaleFactor[1], 1 )  }
	"Set Zone:IAQVentAirNetIZXFERs[2]:izFanElecPwr"		Zone:IAQVentAirNetIZXFERs[2]:izFanElecPwr	=	{	IAQPwr_Exhaust[1]      * ValidOr( IAQPwrScaleFactor[1], 1 ) / IAQCFM_Exhaust[1]   }
	"Set Zone:IAQVentAirNetIZXFERs[2]:izFanMtr"			Zone:IAQVentAirNetIZXFERs[2]:izFanMtr  	=	{	Proj:CSE_ElecMETER  }
	"Set Zone:IAQVentAirNetIZXFERs[2]:izFanEndUse"		Zone:IAQVentAirNetIZXFERs[2]:izFanEndUse	=	{	"FANV"          }

   ; SAC 2/5/20 - mods to BYPASS creation of HRV IZXFER HERE for 2019.2.0+ - now needs to happen by individual zone & fan...
   ; revised to create Zone Balanced IZXFER if any Balanced-only fans assigned - SAC 7/25/20 (tic #1174)
	"Create Zone:IAQVentAirNetIZXFERs[3] (balanced)"	Zone:IAQVentAirNetIZXFERs[3]	= {	if (IAQHRVCFM[1] <= 0 .OR. IAQHRVPwr[1] <= 0 .OR.
	                                                                                           (IfValidAnd( Proj:AnalysisVersion >= 190200 ) .AND. IfValidAnd( IAQBalCFM[1] = 0 ))) then  UNCHANGED
																														else  CreateComp( cseIZXFER, substr( Name, 0, 44 ) + "-IAQHRV" )  endif  }
	"Set Zone:IAQVentAirNetIZXFERs[3]:izNVType"			Zone:IAQVentAirNetIZXFERs[3]:izNVType		=	{	10  }		; AIRNETHERV  - IAQ balanced / heat recovery ventilator
	"Set Zone:IAQVentAirNetIZXFERs[3]:izZn1"				Zone:IAQVentAirNetIZXFERs[3]:izZn1			=	{	CSE_ZONE  }
	"Set Zone:IAQVentAirNetIZXFERs[3]:izFanVfDs"			Zone:IAQVentAirNetIZXFERs[3]:izFanVfDs 	=	{	if (IfValidAnd( Proj:AnalysisVersion >= 190200 ))
	                                                                                                   then  IAQBalCFM[1] * ValidOr( IAQCFMScaleFactor[1], 1 )
	                                                                                                   else  IAQHRVCFM[1] * ValidOr( IAQCFMScaleFactor[1], 1 )  endif       }
	"Set Zone:IAQVentAirNetIZXFERs[3]:izFanElecPwr"		Zone:IAQVentAirNetIZXFERs[3]:izFanElecPwr	=	{	if (IfValidAnd( Proj:AnalysisVersion >= 190200 ))
	                                                                                                   then  IAQBalPwr[1] * ValidOr( IAQPwrScaleFactor[1], 1 ) / IAQBalCFM[1]
	                                                                                                   else  IAQHRVPwr[1] * ValidOr( IAQPwrScaleFactor[1], 1 ) / IAQHRVCFM[1]  endif   }
	; removed heat recovery settings for main house balanced fans (these settings now exclusive to fan-specific IZXFERs) - SAC 04/10/24 (tic #1304)
	;"Set Zone:IAQVentAirNetIZXFERs[3]:izASEF"				Zone:IAQVentAirNetIZXFERs[3]:izASEF			=
   ;   {  if (IAQHRVCFMxRcvEff[1] <= 0 .OR. IAQHRVCFMxRcvEff[1] > (IAQHRVCFM[1] * ValidOr( IAQCFMScaleFactor[1], 1 ) * 100) .OR.
   ;          (IfValidAnd( IAQHRVCFMxSRE[1] > 0 ) .AND. IfValidAnd( IAQHRVCFMxASRE[1] >= IAQHRVCFMxSRE[1] ))) then  UNDEFINED
   ;      else  (IAQHRVCFMxRcvEff[1] / (IAQHRVCFM[1] * ValidOr( IAQCFMScaleFactor[1], 1 ))) / 100  endif  }
	;"Set Zone:IAQVentAirNetIZXFERs[3]:izSRE"				Zone:IAQVentAirNetIZXFERs[3]:izSRE			=        ; SAC 10/21/19
   ;   {  if (IfValidAnd( IAQHRVCFMxSRE[1] > 0 ) .AND. IfValidAnd( IAQHRVCFMxASRE[1] >= IAQHRVCFMxSRE[1] ))
   ;      then  (IAQHRVCFMxSRE[1] / (IAQHRVCFM[1] * ValidOr( IAQCFMScaleFactor[1], 1 ))) / 100
   ;      else  UNDEFINED  endif  }
	;"Set Zone:IAQVentAirNetIZXFERs[3]:izASRE"				Zone:IAQVentAirNetIZXFERs[3]:izASRE			=
   ;   {  if (IfValidAnd( IAQHRVCFMxSRE[1] > 0 ) .AND. IfValidAnd( IAQHRVCFMxASRE[1] >= IAQHRVCFMxSRE[1] ))
   ;      then  (IAQHRVCFMxASRE[1] / (IAQHRVCFM[1] * ValidOr( IAQCFMScaleFactor[1], 1 ))) / 100
   ;      else  UNDEFINED  endif  }
	"Set Zone:IAQVentAirNetIZXFERs[3]:izFanMtr"			Zone:IAQVentAirNetIZXFERs[3]:izFanMtr  	=	{	Proj:CSE_ElecMETER  }
	"Set Zone:IAQVentAirNetIZXFERs[3]:izFanEndUse"		Zone:IAQVentAirNetIZXFERs[3]:izFanEndUse	=	{	"FANV"          }
   ; SAC 2/5/20 - initiate rulelist calls to setup individual HRV IAQ IZXFERs by Fan... (tic #1174)
   "Setup SFam (main home) HRV IAQ IZXFERs for individual fans"      Zone:Action  =
      {  if (IfValidAnd( Proj:AnalysisVersion >= 190200 ) .AND. IfValidAnd( IAQHRVCFMxSRE[1] > 0 ) .AND. Proj:IsMultiFamily < 0.5)
         then  EvalRulelist( "Setup_HRVIAQ_IZXFERs_SFamZone", 0, "Proj:HRVIAQ_IZXFER_ZoneRef" ) 
         else  UNCHANGED  endif  }

   ; SAC 4/22/19 - added ADU IAQ object output  --------------
	"Create Zone:IAQVentAirNetIZXFERs[4] (supply)"		Zone:IAQVentAirNetIZXFERs[4]	= {	if (IAQCFM_Supply[2] <= 0 .OR. IAQPwr_Supply[2] <= 0) then  UNCHANGED
																														else  CreateComp( cseIZXFER, substr( Name, 0, 40 ) + "-ADUIAQFanS" )  endif  }
	"Set Zone:IAQVentAirNetIZXFERs[4]:izNVType"			Zone:IAQVentAirNetIZXFERs[4]:izNVType		=	{	6  }		; AIRNETEXTFAN  - Fan from exterior to zone
	"Set Zone:IAQVentAirNetIZXFERs[4]:izZn1"				Zone:IAQVentAirNetIZXFERs[4]:izZn1			=	{	CSE_ZONE  }
	"Set Zone:IAQVentAirNetIZXFERs[4]:izVFmin"			Zone:IAQVentAirNetIZXFERs[4]:izVFmin		=	{	IAQCFM_Supply[2] * ValidOr( IAQCFMScaleFactor[2], 1 )  }
	"Set Zone:IAQVentAirNetIZXFERs[4]:izVFmax"			Zone:IAQVentAirNetIZXFERs[4]:izVFmax   	=	{	IAQCFM_Supply[2] * ValidOr( IAQCFMScaleFactor[2], 1 )  }
	"Set Zone:IAQVentAirNetIZXFERs[4]:izFanVfDs"			Zone:IAQVentAirNetIZXFERs[4]:izFanVfDs 	=	{	IAQCFM_Supply[2] * ValidOr( IAQCFMScaleFactor[2], 1 )  }
	"Set Zone:IAQVentAirNetIZXFERs[4]:izFanElecPwr"		Zone:IAQVentAirNetIZXFERs[4]:izFanElecPwr	=	{	IAQPwr_Supply[2] * ValidOr( IAQPwrScaleFactor[2], 1 ) / IAQCFM_Supply[2]   }
	"Set Zone:IAQVentAirNetIZXFERs[4]:izFanMtr"			Zone:IAQVentAirNetIZXFERs[4]:izFanMtr  	=	{	Proj:CSE_ElecMETER  }
	"Set Zone:IAQVentAirNetIZXFERs[4]:izFanEndUse"		Zone:IAQVentAirNetIZXFERs[4]:izFanEndUse	=	{	"FANV"          }

	"Create Zone:IAQVentAirNetIZXFERs[5] (exhaust)"		Zone:IAQVentAirNetIZXFERs[5]	= {	if (IAQCFM_Exhaust[2] <= 0 .OR. IAQPwr_Exhaust[2] <= 0) then  UNCHANGED
																														else  CreateComp( cseIZXFER, substr( Name, 0, 40 ) + "-ADUIAQFanE" )  endif  }
	"Set Zone:IAQVentAirNetIZXFERs[5]:izNVType"			Zone:IAQVentAirNetIZXFERs[5]:izNVType		=	{	6  }		; AIRNETEXTFAN  - Fan from exterior to zone
	"Set Zone:IAQVentAirNetIZXFERs[5]:izZn1"				Zone:IAQVentAirNetIZXFERs[5]:izZn1			=	{	CSE_ZONE  }
	"Set Zone:IAQVentAirNetIZXFERs[5]:izVFmin"			Zone:IAQVentAirNetIZXFERs[5]:izVFmin		=	{	IAQCFM_Exhaust[2] * -1 * ValidOr( IAQCFMScaleFactor[2], 1 )  }
	"Set Zone:IAQVentAirNetIZXFERs[5]:izVFmax"			Zone:IAQVentAirNetIZXFERs[5]:izVFmax   	=	{	IAQCFM_Exhaust[2] * -1 * ValidOr( IAQCFMScaleFactor[2], 1 )  }
	"Set Zone:IAQVentAirNetIZXFERs[5]:izFanVfDs"			Zone:IAQVentAirNetIZXFERs[5]:izFanVfDs 	=	{	IAQCFM_Exhaust[2]      * ValidOr( IAQCFMScaleFactor[2], 1 )  }
	"Set Zone:IAQVentAirNetIZXFERs[5]:izFanElecPwr"		Zone:IAQVentAirNetIZXFERs[5]:izFanElecPwr	=	{	IAQPwr_Exhaust[2]      * ValidOr( IAQPwrScaleFactor[2], 1 ) / IAQCFM_Exhaust[2]   }
	"Set Zone:IAQVentAirNetIZXFERs[5]:izFanMtr"			Zone:IAQVentAirNetIZXFERs[5]:izFanMtr  	=	{	Proj:CSE_ElecMETER  }
	"Set Zone:IAQVentAirNetIZXFERs[5]:izFanEndUse"		Zone:IAQVentAirNetIZXFERs[5]:izFanEndUse	=	{	"FANV"          }

   ; SAC 2/6/20 - mods to BYPASS creation of ADU HRV IZXFER HERE for 2019.2.0+ - now needs to happen by individual zone & fan...
   ; revised to create Zone Balanced IZXFER if any Balanced-only fans assigned - SAC 7/25/20 (tic #1174)
	"Create Zone:IAQVentAirNetIZXFERs[6] (balanced)"	Zone:IAQVentAirNetIZXFERs[6]	= {	if (IAQHRVCFM[2] <= 0 .OR. IAQHRVPwr[2] <= 0 .OR.
	                                                                                           (IfValidAnd( Proj:AnalysisVersion >= 190200 ) .AND. IfValidAnd( IAQBalCFM[2] = 0 ))) then  UNCHANGED
																														else  CreateComp( cseIZXFER, substr( Name, 0, 40 ) + "-ADUIAQHRV" )  endif  }
	"Set Zone:IAQVentAirNetIZXFERs[6]:izNVType"			Zone:IAQVentAirNetIZXFERs[6]:izNVType		=	{	10  }		; AIRNETHERV  - IAQ balanced / heat recovery ventilator
	"Set Zone:IAQVentAirNetIZXFERs[6]:izZn1"				Zone:IAQVentAirNetIZXFERs[6]:izZn1			=	{	CSE_ZONE  }
	"Set Zone:IAQVentAirNetIZXFERs[6]:izFanVfDs"			Zone:IAQVentAirNetIZXFERs[6]:izFanVfDs 	=	{	if (IfValidAnd( Proj:AnalysisVersion >= 190200 ))
	                                                                                                   then  IAQBalCFM[2] * ValidOr( IAQCFMScaleFactor[2], 1 )
	                                                                                                   else  IAQHRVCFM[2] * ValidOr( IAQCFMScaleFactor[2], 1 )  endif       }
	"Set Zone:IAQVentAirNetIZXFERs[6]:izFanElecPwr"		Zone:IAQVentAirNetIZXFERs[6]:izFanElecPwr	=	{	if (IfValidAnd( Proj:AnalysisVersion >= 190200 ))
	                                                                                                   then  IAQBalPwr[2] * ValidOr( IAQPwrScaleFactor[2], 1 ) / IAQBalCFM[2]
	                                                                                                   else  IAQHRVPwr[2] * ValidOr( IAQPwrScaleFactor[2], 1 ) / IAQHRVCFM[2]  endif   }
	; removed heat recovery settings for ADU balanced fans (these settings exclusive to fan-specific IZXFERs) - SAC 04/10/24 (tic #1304)
   ;"Set Zone:IAQVentAirNetIZXFERs[6]:izASEF"				Zone:IAQVentAirNetIZXFERs[6]:izASEF			=
   ;   {  if (IAQHRVCFMxRcvEff[2] <= 0 .OR. IAQHRVCFMxRcvEff[2] > (IAQHRVCFM[2] * ValidOr( IAQCFMScaleFactor[2], 1 ) * 100) .OR.
   ;          (IfValidAnd( IAQHRVCFMxSRE[2] > 0 ) .AND. IfValidAnd( IAQHRVCFMxASRE[2] >= IAQHRVCFMxSRE[2] ))) then  UNDEFINED
   ;      else  (IAQHRVCFMxRcvEff[2] / (IAQHRVCFM[2] * ValidOr( IAQCFMScaleFactor[2], 1 ))) / 100  endif  }
	;"Set Zone:IAQVentAirNetIZXFERs[6]:izSRE"				Zone:IAQVentAirNetIZXFERs[6]:izSRE			=        ; SAC 10/21/19
   ;   {  if (IfValidAnd( IAQHRVCFMxSRE[2] > 0 ) .AND. IfValidAnd( IAQHRVCFMxASRE[2] >= IAQHRVCFMxSRE[2] ))
   ;      then  (IAQHRVCFMxSRE[2] / (IAQHRVCFM[2] * ValidOr( IAQCFMScaleFactor[2], 1 ))) / 100
   ;      else  UNDEFINED  endif  }
	;"Set Zone:IAQVentAirNetIZXFERs[6]:izASRE"				Zone:IAQVentAirNetIZXFERs[6]:izASRE			=
   ;   {  if (IfValidAnd( IAQHRVCFMxSRE[2] > 0 ) .AND. IfValidAnd( IAQHRVCFMxASRE[2] >= IAQHRVCFMxSRE[2] ))
   ;      then  (IAQHRVCFMxASRE[2] / (IAQHRVCFM[2] * ValidOr( IAQCFMScaleFactor[2], 1 ))) / 100
   ;      else  UNDEFINED  endif  }
	"Set Zone:IAQVentAirNetIZXFERs[6]:izFanMtr"			Zone:IAQVentAirNetIZXFERs[6]:izFanMtr  	=	{	Proj:CSE_ElecMETER  }
	"Set Zone:IAQVentAirNetIZXFERs[6]:izFanEndUse"		Zone:IAQVentAirNetIZXFERs[6]:izFanEndUse	=	{	"FANV"          }
   ; SAC 2/6/20 - initiate rulelist calls to setup individual ADU HRV IAQ IZXFERs by Fan... (tic #1174)
   "Setup ADU HRV IAQ IZXFERs for individual fans"    Zone:Action  =
      {  if (IfValidAnd( Proj:AnalysisVersion >= 190200 ) .AND. IfValidAnd( IAQHRVCFMxSRE[2] > 0 ))
         then  EvalRulelist( "Setup_HRVIAQ_IZXFERs_SFamADUZone", 0, "Proj:HRVIAQ_IZXFER_ZoneRef" ) 
         else  UNCHANGED  endif  }

   ; -------- std design IAQ fans to supplement inadequate main house Existing fan CFM - SAC 04/08/24 (tic #1304) --------
	"Create Zone:IAQVentAirNetIZXFERs[7] (supply)"		Zone:IAQVentAirNetIZXFERs[7]	=
      {  if (IfValidAnd( Proj:AddStdIAQFanType[1] = 2 ) .AND. IfValidAnd( Proj:AddStdIAQExistCFM[1] > 0 ) .AND.
             IfValidAnd( Proj:AddStdIAQZone[1]:Name = Name )) then  CreateComp( cseIZXFER, substr( Name, 0, 44 ) + "-IAQFanS-Supp" )
         else  UNCHANGED  endif  }
	"Set Zone:IAQVentAirNetIZXFERs[7]:izNVType"			Zone:IAQVentAirNetIZXFERs[7]:izNVType		=	{	6  }		; AIRNETEXTFAN  - Fan from exterior to zone
	"Set Zone:IAQVentAirNetIZXFERs[7]:izZn1"				Zone:IAQVentAirNetIZXFERs[7]:izZn1			=	{	CSE_ZONE  }
	"Set Zone:IAQVentAirNetIZXFERs[7]:izVFmin"			Zone:IAQVentAirNetIZXFERs[7]:izVFmin		=	{	Proj:AddStdIAQExistCFM[1]  }
	"Set Zone:IAQVentAirNetIZXFERs[7]:izVFmax"			Zone:IAQVentAirNetIZXFERs[7]:izVFmax   	=	{	Proj:AddStdIAQExistCFM[1]  }
	"Set Zone:IAQVentAirNetIZXFERs[7]:izFanVfDs"			Zone:IAQVentAirNetIZXFERs[7]:izFanVfDs 	=	{	Proj:AddStdIAQExistCFM[1]  }
	"Set Zone:IAQVentAirNetIZXFERs[7]:izFanElecPwr"		Zone:IAQVentAirNetIZXFERs[7]:izFanElecPwr	=	{	0.35  }
	"Set Zone:IAQVentAirNetIZXFERs[7]:izFanMtr"			Zone:IAQVentAirNetIZXFERs[7]:izFanMtr  	=	{	Proj:CSE_ElecMETER  }
	"Set Zone:IAQVentAirNetIZXFERs[7]:izFanEndUse"		Zone:IAQVentAirNetIZXFERs[7]:izFanEndUse	=	{	"FANV"          }

	"Create Zone:IAQVentAirNetIZXFERs[8] (exhaust)"		Zone:IAQVentAirNetIZXFERs[8]	=
      {  if (IfValidAnd( Proj:AddStdIAQFanType[1] = 1 ) .AND. IfValidAnd( Proj:AddStdIAQExistCFM[1] > 0 ) .AND.
             IfValidAnd( Proj:AddStdIAQZone[1]:Name = Name )) then  CreateComp( cseIZXFER, substr( Name, 0, 44 ) + "-IAQFanE-Supp" )
         else  UNCHANGED  endif  }
	"Set Zone:IAQVentAirNetIZXFERs[8]:izNVType"			Zone:IAQVentAirNetIZXFERs[8]:izNVType		=	{	6  }		; AIRNETEXTFAN  - Fan from zone to exterior
	"Set Zone:IAQVentAirNetIZXFERs[8]:izZn1"				Zone:IAQVentAirNetIZXFERs[8]:izZn1			=	{	CSE_ZONE  }
	"Set Zone:IAQVentAirNetIZXFERs[8]:izVFmin"			Zone:IAQVentAirNetIZXFERs[8]:izVFmin		=	{	Proj:AddStdIAQExistCFM[1] * -1  }
	"Set Zone:IAQVentAirNetIZXFERs[8]:izVFmax"			Zone:IAQVentAirNetIZXFERs[8]:izVFmax   	=	{	Proj:AddStdIAQExistCFM[1] * -1  }
	"Set Zone:IAQVentAirNetIZXFERs[8]:izFanVfDs"			Zone:IAQVentAirNetIZXFERs[8]:izFanVfDs 	=	{	Proj:AddStdIAQExistCFM[1]       }
	"Set Zone:IAQVentAirNetIZXFERs[8]:izFanElecPwr"		Zone:IAQVentAirNetIZXFERs[8]:izFanElecPwr	=	{	0.35  }
	"Set Zone:IAQVentAirNetIZXFERs[8]:izFanMtr"			Zone:IAQVentAirNetIZXFERs[8]:izFanMtr  	=	{	Proj:CSE_ElecMETER  }
	"Set Zone:IAQVentAirNetIZXFERs[8]:izFanEndUse"		Zone:IAQVentAirNetIZXFERs[8]:izFanEndUse	=	{	"FANV"          }

	"Create Zone:IAQVentAirNetIZXFERs[9] (balanced)"	Zone:IAQVentAirNetIZXFERs[9]	=
      {  if (IfValidAnd( Proj:AddStdIAQFanType[1] = 3 ) .AND. IfValidAnd( Proj:AddStdIAQExistCFM[1] > 0 ) .AND.
             IfValidAnd( Proj:AddStdIAQZone[1]:Name = Name )) then  CreateComp( cseIZXFER, substr( Name, 0, 44 ) + "-IAQFanB-Supp" )
         else  UNCHANGED  endif  }
	"Set Zone:IAQVentAirNetIZXFERs[9]:izNVType"			Zone:IAQVentAirNetIZXFERs[9]:izNVType		=	{	10  }		; AIRNETHERV  - IAQ balanced
	"Set Zone:IAQVentAirNetIZXFERs[9]:izZn1"				Zone:IAQVentAirNetIZXFERs[9]:izZn1			=	{	CSE_ZONE  }
	"Set Zone:IAQVentAirNetIZXFERs[9]:izFanVfDs"			Zone:IAQVentAirNetIZXFERs[9]:izFanVfDs 	=	{	Proj:AddStdIAQExistCFM[1]  }
	"Set Zone:IAQVentAirNetIZXFERs[9]:izFanElecPwr"		Zone:IAQVentAirNetIZXFERs[9]:izFanElecPwr	=	{	0.7  }
	"Set Zone:IAQVentAirNetIZXFERs[9]:izFanMtr"			Zone:IAQVentAirNetIZXFERs[9]:izFanMtr  	=	{	Proj:CSE_ElecMETER  }
	"Set Zone:IAQVentAirNetIZXFERs[9]:izFanEndUse"		Zone:IAQVentAirNetIZXFERs[9]:izFanEndUse	=	{	"FANV"          }

   ; -------- std design IAQ fans to supplement inadequate ADU Existing fan CFM - SAC 04/08/24 (tic #1304) --------
	"Create Zone:IAQVentAirNetIZXFERs[10] (supply)"		Zone:IAQVentAirNetIZXFERs[10]	=
      {  if (IfValidAnd( Proj:AddStdIAQFanType[2] = 2 ) .AND. IfValidAnd( Proj:AddStdIAQExistCFM[2] > 0 ) .AND.
             IfValidAnd( Proj:AddStdIAQZone[2]:Name = Name )) then  CreateComp( cseIZXFER, substr( Name, 0, 44 ) + "-IAQFanS-Supp" )
         else  UNCHANGED  endif  }
	"Set Zone:IAQVentAirNetIZXFERs[10]:izNVType"			Zone:IAQVentAirNetIZXFERs[10]:izNVType		=	{	6  }		; AIRNETEXTFAN  - Fan from exterior to zone
	"Set Zone:IAQVentAirNetIZXFERs[10]:izZn1"				Zone:IAQVentAirNetIZXFERs[10]:izZn1			=	{	CSE_ZONE  }
	"Set Zone:IAQVentAirNetIZXFERs[10]:izVFmin"			Zone:IAQVentAirNetIZXFERs[10]:izVFmin		=	{	Proj:AddStdIAQExistCFM[2]  }
	"Set Zone:IAQVentAirNetIZXFERs[10]:izVFmax"			Zone:IAQVentAirNetIZXFERs[10]:izVFmax   	=	{	Proj:AddStdIAQExistCFM[2]  }
	"Set Zone:IAQVentAirNetIZXFERs[10]:izFanVfDs"		Zone:IAQVentAirNetIZXFERs[10]:izFanVfDs 	=	{	Proj:AddStdIAQExistCFM[2]  }
	"Set Zone:IAQVentAirNetIZXFERs[10]:izFanElecPwr"	Zone:IAQVentAirNetIZXFERs[10]:izFanElecPwr =	{	0.35  }
	"Set Zone:IAQVentAirNetIZXFERs[10]:izFanMtr"			Zone:IAQVentAirNetIZXFERs[10]:izFanMtr  	=	{	Proj:CSE_ElecMETER  }
	"Set Zone:IAQVentAirNetIZXFERs[10]:izFanEndUse"		Zone:IAQVentAirNetIZXFERs[10]:izFanEndUse	=	{	"FANV"          }

	"Create Zone:IAQVentAirNetIZXFERs[11] (exhaust)"		Zone:IAQVentAirNetIZXFERs[11]	=
      {  if (IfValidAnd( Proj:AddStdIAQFanType[2] = 1 ) .AND. IfValidAnd( Proj:AddStdIAQExistCFM[2] > 0 ) .AND.
             IfValidAnd( Proj:AddStdIAQZone[2]:Name = Name )) then  CreateComp( cseIZXFER, substr( Name, 0, 44 ) + "-IAQFanE-Supp" )
         else  UNCHANGED  endif  }
	"Set Zone:IAQVentAirNetIZXFERs[11]:izNVType"			Zone:IAQVentAirNetIZXFERs[11]:izNVType		=	{	6  }		; AIRNETEXTFAN  - Fan from zone to exterior
	"Set Zone:IAQVentAirNetIZXFERs[11]:izZn1"				Zone:IAQVentAirNetIZXFERs[11]:izZn1			=	{	CSE_ZONE  }
	"Set Zone:IAQVentAirNetIZXFERs[11]:izVFmin"			Zone:IAQVentAirNetIZXFERs[11]:izVFmin		=	{	Proj:AddStdIAQExistCFM[2] * -1  }
	"Set Zone:IAQVentAirNetIZXFERs[11]:izVFmax"			Zone:IAQVentAirNetIZXFERs[11]:izVFmax   	=	{	Proj:AddStdIAQExistCFM[2] * -1  }
	"Set Zone:IAQVentAirNetIZXFERs[11]:izFanVfDs"		Zone:IAQVentAirNetIZXFERs[11]:izFanVfDs 	=	{	Proj:AddStdIAQExistCFM[2]       }
	"Set Zone:IAQVentAirNetIZXFERs[11]:izFanElecPwr"	Zone:IAQVentAirNetIZXFERs[11]:izFanElecPwr =	{	0.35  }
	"Set Zone:IAQVentAirNetIZXFERs[11]:izFanMtr"			Zone:IAQVentAirNetIZXFERs[11]:izFanMtr  	=	{	Proj:CSE_ElecMETER  }
	"Set Zone:IAQVentAirNetIZXFERs[11]:izFanEndUse"		Zone:IAQVentAirNetIZXFERs[11]:izFanEndUse	=	{	"FANV"          }

	"Create Zone:IAQVentAirNetIZXFERs[12] (balanced)"	Zone:IAQVentAirNetIZXFERs[12]	=
      {  if (IfValidAnd( Proj:AddStdIAQFanType[2] = 3 ) .AND. IfValidAnd( Proj:AddStdIAQExistCFM[2] > 0 ) .AND.
             IfValidAnd( Proj:AddStdIAQZone[2]:Name = Name )) then  CreateComp( cseIZXFER, substr( Name, 0, 44 ) + "-IAQFanB-Supp" )
         else  UNCHANGED  endif  }
	"Set Zone:IAQVentAirNetIZXFERs[12]:izNVType"			Zone:IAQVentAirNetIZXFERs[12]:izNVType		=	{	10  }		; AIRNETHERV  - IAQ balanced
	"Set Zone:IAQVentAirNetIZXFERs[12]:izZn1"				Zone:IAQVentAirNetIZXFERs[12]:izZn1			=	{	CSE_ZONE  }
	"Set Zone:IAQVentAirNetIZXFERs[12]:izFanVfDs"		Zone:IAQVentAirNetIZXFERs[12]:izFanVfDs 	=	{	Proj:AddStdIAQExistCFM[2]  }
	"Set Zone:IAQVentAirNetIZXFERs[12]:izFanElecPwr"	Zone:IAQVentAirNetIZXFERs[12]:izFanElecPwr =	{	0.7  }
	"Set Zone:IAQVentAirNetIZXFERs[12]:izFanMtr"			Zone:IAQVentAirNetIZXFERs[12]:izFanMtr  	=	{	Proj:CSE_ElecMETER  }
	"Set Zone:IAQVentAirNetIZXFERs[12]:izFanEndUse"		Zone:IAQVentAirNetIZXFERs[12]:izFanEndUse	=	{	"FANV"          }

; previous version
;	"Create Zone:IAQVentAirNetIZXFERs[1] (supply)"		Zone:IAQVentAirNetIZXFERs[1]	= {	if (LocalCompAssigned( IAQVentSystem ) == 0) then  UNCHANGED
;																														else if (LocalRef( IAQVentSystem:Fan:IAQCFM ) > 0 .AND.
;																																	LocalRef( IAQVentSystem:Fan:IAQFanType ) > 1.1)  ; Supply or Balanced
;																														then  CreateComp( cseIZXFER, Local( Name ) + "-IAQFanS" )
;																														else  UNCHANGED  endif endif  }
;	"Set Zone:IAQVentAirNetIZXFERs[1]:izNVType"			Zone:IAQVentAirNetIZXFERs[1]:izNVType		=	{	6  }		; AIRNETEXTFAN  - Fan from exterior to zone
;	"Set Zone:IAQVentAirNetIZXFERs[1]:izZn1"				Zone:IAQVentAirNetIZXFERs[1]:izZn1			=	{	CSE_ZONE  }
;	"Set Zone:IAQVentAirNetIZXFERs[1]:izVFmin"			Zone:IAQVentAirNetIZXFERs[1]:izVFmin		=	{	IAQVentSystem:Fan:IAQCFM * CondFloorArea / IAQVentSystem:FloorAreaServed  }
;	"Set Zone:IAQVentAirNetIZXFERs[1]:izVFmax"			Zone:IAQVentAirNetIZXFERs[1]:izVFmax   	=	{	IAQVentSystem:Fan:IAQCFM * CondFloorArea / IAQVentSystem:FloorAreaServed  }
;	"Set Zone:IAQVentAirNetIZXFERs[1]:izFanVfDs"			Zone:IAQVentAirNetIZXFERs[1]:izFanVfDs 	=	{	IAQVentSystem:Fan:IAQCFM * CondFloorArea / IAQVentSystem:FloorAreaServed  }
;	"Set Zone:IAQVentAirNetIZXFERs[1]:izFanElecPwr"		Zone:IAQVentAirNetIZXFERs[1]:izFanElecPwr	=	{	IAQVentSystem:Fan:WperCFMIAQ   }
;	"Set Zone:IAQVentAirNetIZXFERs[1]:izFanMtr"			Zone:IAQVentAirNetIZXFERs[1]:izFanMtr  	=	{	Proj:CSE_ElecMETER  }
;	"Set Zone:IAQVentAirNetIZXFERs[1]:izFanEndUse"		Zone:IAQVentAirNetIZXFERs[1]:izFanEndUse	=	{	"FANV"          }
;
;	"Create Zone:IAQVentAirNetIZXFERs[2] (exhaust)"		Zone:IAQVentAirNetIZXFERs[2]	= {	if (LocalCompAssigned( IAQVentSystem ) == 0) then  UNCHANGED
;																														else if (LocalRef( IAQVentSystem:Fan:IAQCFM ) > 0 .AND.
;																																	LocalRef( IAQVentSystem:Fan:IAQFanType ) != 2)  ; Exhaust or Balanced
;																														then  CreateComp( cseIZXFER, Local( Name ) + "-IAQFanE" )
;																														else  UNCHANGED  endif endif  }
;	"Set Zone:IAQVentAirNetIZXFERs[2]:izNVType"			Zone:IAQVentAirNetIZXFERs[2]:izNVType		=	{	6  }		; AIRNETEXTFAN  - Fan from exterior to zone
;	"Set Zone:IAQVentAirNetIZXFERs[2]:izZn1"				Zone:IAQVentAirNetIZXFERs[2]:izZn1			=	{	CSE_ZONE  }
;	"Set Zone:IAQVentAirNetIZXFERs[2]:izVFmin"			Zone:IAQVentAirNetIZXFERs[2]:izVFmin		=	{	IAQVentSystem:Fan:IAQCFM * -1 * CondFloorArea / IAQVentSystem:FloorAreaServed  }
;	"Set Zone:IAQVentAirNetIZXFERs[2]:izVFmax"			Zone:IAQVentAirNetIZXFERs[2]:izVFmax   	=	{	IAQVentSystem:Fan:IAQCFM * -1 * CondFloorArea / IAQVentSystem:FloorAreaServed  }
;	"Set Zone:IAQVentAirNetIZXFERs[2]:izFanVfDs"			Zone:IAQVentAirNetIZXFERs[2]:izFanVfDs 	=	{	IAQVentSystem:Fan:IAQCFM      * CondFloorArea / IAQVentSystem:FloorAreaServed  }
;	"Set Zone:IAQVentAirNetIZXFERs[2]:izFanElecPwr"		Zone:IAQVentAirNetIZXFERs[2]:izFanElecPwr	=	{	IAQVentSystem:Fan:WperCFMIAQ   }
;	"Set Zone:IAQVentAirNetIZXFERs[2]:izFanMtr"			Zone:IAQVentAirNetIZXFERs[2]:izFanMtr  	=	{	Proj:CSE_ElecMETER  }
;	"Set Zone:IAQVentAirNetIZXFERs[2]:izFanEndUse"		Zone:IAQVentAirNetIZXFERs[2]:izFanEndUse	=	{	"FANV"          }

; SAC 4/18/13 - revised CoolVent whole house fan air net stuff to generate a single whole house fan per system, rather than per zone
; SAC 5/2/13 - RESTORED this call w/ revised logic, since now generating whole house fans (again) by zone and not system
 ;-----------------------
 ; AirNet for Cooling Ventilation (whole house fan / economizer / night breeze)
 ;-----------------------
   ; SAC 8/3/14 - added logic to prevent creation of IZXFER if no valid attic exists (and log this issue to project log file)
   ; SAC 1/20/19 - revised to prevent warning msg regardless of Attic presence/status for new Proj:UnitClVentOption = 'Whole House Fan exhausting to outside' (tic #1040)
   "Log invalid WHF generation issue"     Zone:Action  =
      {  if (ClVentAirFlow[1] > 0 .AND. ClVentPower[1] > 0 .AND. Proj:IsMultiFamily < 1)
         then  if (ComponentCount( Attic ) < 1)
               then  PostWarning( "Zone '%s' should be modeled with whole house fan, but cannot be due to no Attic present.", Name )
               else  if (IfValidAnd( Proj:CondFloorArea > 1 ))
                     then  if ((SumAll( Attic:FloorAreaOverCond ) / Proj:CondFloorArea) < 0.1)
                           then  PostWarning( "Zone '%s' should be modeled with whole house fan, but cannot be due to Attic not adjacent to at least 10% of overall conditioned floor area.", Name )
                           else  UNCHANGED  endif
                     else  UNCHANGED  endif
               endif
         else  UNCHANGED  endif  }
   "Call subordinate rulelist to setup ClVent IZXFER object(s) to ATTIC"   Zone:Action  =
      {  if (ClVentAirFlow[1] < 0.1 .OR. ClVentPower[1] < 0.1) then  UNCHANGED
         else if (LocalCompAssigned( MaxClVentableAttic ) > 0.5)
         then  if (IfValidAnd( Proj:CondFloorArea > 1 ) .AND. LocalCompAssigned( MaxClVentableAttic:CSE_ZONE ) > 0.5)
               then  if ((SumAll( Attic:FloorAreaOverCond ) / Proj:CondFloorArea) >= 0.1)
                     then  EvalRulelist( "SimPrep_CSE_AirNet_Zone_WholeHouseFan_ToAttic", 1 )
                     else  UNCHANGED  endif
               else  UNCHANGED  endif
         else  UNCHANGED  endif endif  }
   "Call subordinate rulelist to setup ClVent IZXFER object(s) to OUTSIDE"   Zone:Action  =
      {  if (ClVentAirFlow[2] < 0.1 .OR. ClVentPower[2] < 0.1) then  UNCHANGED
         else if (Proj:IsMultiFamily < 1 .AND. IfValidAnd( Proj:CondFloorArea > 1 ))
         then  EvalRulelist( "SimPrep_CSE_AirNet_Zone_WholeHouseFan_ToOutside", 1 )
         else  UNCHANGED  endif endif  }

   "Call subordinate rulelist to setup ClVent IZXFER object to model WHF damper to outside (for ClVent to outside)"     ; SAC 1/20/19 (tic #1040)
      Zone:Action  = {  if (ClVentAirFlow[2] > 0 .AND. ClVentPower[2] > 0 .AND.
                            IfValidAnd( Proj:CondFloorArea > 1 ))
                        then  EvalRulelist( "SimPrep_CSE_AirNet_Zone_WholeHouseFan_OutsideDamper", 1 )
                        else  UNCHANGED  endif  }
END

;*************************************************************************
RULELIST "SimPrep_CSE_AirNet_Zone_WholeHouseFan_ToAttic" 0 0 0 1
;*************************************************************************
	; from AirNetAlogorithm9.txt:
	;	7.  Mechanical Cooling Ventilation   //  The following does not work for multi-zone systems with Econ, NightBreeze.  Revise along with ducts model
	;		For each Cooling Ventilation System
	;		Inputs 
	;	         CoolVentType		//type of MECHANICAL cooling ventilation,  Choice of WHF, Econ, NightBreeze
	;		 CoolVentCFM		//Rated air flow of the mechanical cooling system
	;		 CoolVent W/CFM		// 
	;		 ReturnRegister		// If WHF the conditoned zone where it is located
	;		 
	;		 Calculate
	;			Relief = CoolVentCFM/375  // The minimum size of the attic vents required to let the WHF flow out of the attic
	;			
	;		If WHF  		// Whole House Fan
	;		   Calculate
	;		   	Relief = CoolVentCFM/375  // The minimum size of the attic vent required for this fan to let the WHF flow out of the attic
	;		   Write Airnet Objects to CSE Input
	;		   	       	IZXFER (Zone)WHF izNVTYPE=AirNetIZFan izZN1=(Zone) izVFmin=0. izVFMax=-CoolVentCFM*Win_hr izFanVfDs=CoolVentCFM izZn2=Attic izFanElecPwr=CoolVentWperCFM izFanMtr=CoolVentMtr
	;
	;  SAC 9/19/12 - now dividing user-specified CoolingVent by 4 per Bruce's bug rpt 027

   ; SAC 5/2/13 - new mechanism based on zone again (w/ original Zone version commented out)
	"Create Zone:ClVentAirNetIZXFERs[1] (WHF)"			Zone:ClVentAirNetIZXFERs[1]					= {	CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-WHF2Atc" )  }
	"Set Zone:ClVentAirNetIZXFERs[1]:izNVType"			Zone:ClVentAirNetIZXFERs[1]:izNVType		= {	7 	}	; AIRNETIZFAN  - Fan between two zones
	"Set Zone:ClVentAirNetIZXFERs[1]:izZn1"				Zone:ClVentAirNetIZXFERs[1]:izZn1			= {	CSE_ZONE  }
	"Set Zone:ClVentAirNetIZXFERs[1]:izZn2"				Zone:ClVentAirNetIZXFERs[1]:izZn2			= {	MaxClVentableAttic:CSE_ZONE  }
	"Set Zone:ClVentAirNetIZXFERs[1]:izVFmin"				Zone:ClVentAirNetIZXFERs[1]:izVFmin			= {	0         }

; SAC 12/31/15 - added reference to new Proj:ClVentAirFlowMult used to reduce WHF CFM for reduced attic relief vent free area (tic #596)
; SAC 11/5/17 - added effect of ClVentVerified (ClVentVerifMult) for 2019 analysis (tic #920)
	"Set Zone:ClVentAirNetIZXFERs[1]:izVFmax_x"			Zone:ClVentAirNetIZXFERs[1]:izVFmax_x 		=        ; SAC 2/13/20 - installed mod for 2019.2.0+ (tic #1175)     ; enable 19.2.0+ mod for 2019.1.3 - SAC 7/15/20
      {  if (IfValidAnd( AnalysisVersion >= 190103 ))
         then  Format( "%.1f * WINDOWVENTAVAIL * FANVENTAVAIL * (@ZONE[%c%s%c].tzls - $tDbOSh > 3)",
                           ((ClVentAirFlow[1] * ValidOr( ClVentVerifMult, 1 ) * Proj:ClVentAirFlowMult /
                           T24RClimateZoneCodeBase:WHFcfmdivisor( "ClimateZone", Proj:ClimateZone, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )) * -1), 34, CSE_ZONE:Name, 34 )
         else  Format( "%.1f * WINDOWVENTAVAIL * FANVENTAVAIL", ((ClVentAirFlow[1] * ValidOr( ClVentVerifMult, 1 ) * Proj:ClVentAirFlowMult /
                           T24RClimateZoneCodeBase:WHFcfmdivisor( "ClimateZone", Proj:ClimateZone, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )) * -1) )  endif  }
	"Set Zone:ClVentAirNetIZXFERs[1]:izFanVfDs"			Zone:ClVentAirNetIZXFERs[1]:izFanVfDs 		= {
         ClVentAirFlow[1] * ValidOr( ClVentVerifMult, 1 ) * Proj:ClVentAirFlowMult /
                     T24RClimateZoneCodeBase:WHFcfmdivisor( "ClimateZone", Proj:ClimateZone, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )  }

	"Set Zone:ClVentAirNetIZXFERs[1]:izFanElecPwr"		Zone:ClVentAirNetIZXFERs[1]:izFanElecPwr	= {	ClVentPower[1] / ClVentAirFlow[1]   }
	"Set Zone:ClVentAirNetIZXFERs[1]:izFanMtr"			Zone:ClVentAirNetIZXFERs[1]:izFanMtr  		= {	Proj:CSE_ElecMETER  }
	"Set Zone:ClVentAirNetIZXFERs[1]:izFanEndUse"		Zone:ClVentAirNetIZXFERs[1]:izFanEndUse	= {	"FANC"          }
	   ; SAC 2/13/20 - rolled BACK following mod which caused confusion in testing when revising WHF modeling for 2019.2.0+ (tic #175)
	   ;{  if (IfValidAnd( Proj:EnableResearchMode > 0.5 ) .AND. GlobalStatus( Proj:ClVentFanAvailExp ) > 0) then  "FAN"     ; SAC 1/10/20 - TEMPORARY logic to enable quicker ID of WHF energy use during testing (tic #1175)
	   ;   else  "FANC"  endif  }
END
;*************************************************************************
RULELIST "SimPrep_CSE_AirNet_Zone_WholeHouseFan_ToOutside" 0 0 0 1
;*************************************************************************
   ; SAC 1/20/19 - revisions to facilitate WHF to Outside (via Zone:ClVentToOutside) (tic #1040)
	"Create Zone:ClVentAirNetIZXFERs[1] (WHF)"			Zone:ClVentAirNetIZXFERs[1]					= {	CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-WHF2Out" )  }
	"Set Zone:ClVentAirNetIZXFERs[1]:izNVType"			Zone:ClVentAirNetIZXFERs[1]:izNVType		= {	6  }   ; AIRNETEXTFAN - Fan from exterior to zone
	"Set Zone:ClVentAirNetIZXFERs[1]:izZn1"				Zone:ClVentAirNetIZXFERs[1]:izZn1			= {	CSE_ZONE   }
	"Set Zone:ClVentAirNetIZXFERs[1]:izZn2"				Zone:ClVentAirNetIZXFERs[1]:izZn2			= {	UNDEFINED  }
	"Set Zone:ClVentAirNetIZXFERs[1]:izVFmin"				Zone:ClVentAirNetIZXFERs[1]:izVFmin			= {	0          }

; SAC 12/31/15 - added reference to new Proj:ClVentAirFlowMult used to reduce WHF CFM for reduced attic relief vent free area (tic #596)
; SAC 11/5/17 - added effect of ClVentVerified (ClVentVerifMult) for 2019 analysis (tic #920)
	"Set Zone:ClVentAirNetIZXFERs[1]:izVFmax_x"			Zone:ClVentAirNetIZXFERs[1]:izVFmax_x 		=        ; SAC 2/13/20 - installed mod for 2019.2.0+ (tic #1175)     ; enable 19.2.0+ mod for 2019.1.3 - SAC 7/15/20
      {  if (IfValidAnd( AnalysisVersion >= 190103 ))
         then  Format( "%.1f * WINDOWVENTAVAIL * FANVENTAVAIL * (@ZONE[%c%s%c].tzls - $tDbOSh > 3)", 
                           ((ClVentAirFlow[2] * ValidOr( ClVentVerifMult, 1 ) * Proj:ClVentAirFlowMult /
                           T24RClimateZoneCodeBase:WHFcfmdivisor( "ClimateZone", Proj:ClimateZone, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )) * -1), 34, CSE_ZONE:Name, 34 )
         else  Format( "%.1f * WINDOWVENTAVAIL * FANVENTAVAIL", ((ClVentAirFlow[2] * ValidOr( ClVentVerifMult, 1 ) * Proj:ClVentAirFlowMult /
                           T24RClimateZoneCodeBase:WHFcfmdivisor( "ClimateZone", Proj:ClimateZone, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )) * -1) )  endif  }
	"Set Zone:ClVentAirNetIZXFERs[1]:izFanVfDs"			Zone:ClVentAirNetIZXFERs[1]:izFanVfDs 		= {
         ClVentAirFlow[2] * ValidOr( ClVentVerifMult, 1 ) * Proj:ClVentAirFlowMult /
                     T24RClimateZoneCodeBase:WHFcfmdivisor( "ClimateZone", Proj:ClimateZone, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )  }

	"Set Zone:ClVentAirNetIZXFERs[1]:izFanElecPwr"		Zone:ClVentAirNetIZXFERs[1]:izFanElecPwr	= {	ClVentPower[2] / ClVentAirFlow[2]   }
	"Set Zone:ClVentAirNetIZXFERs[1]:izFanMtr"			Zone:ClVentAirNetIZXFERs[1]:izFanMtr  		= {	Proj:CSE_ElecMETER  }
	"Set Zone:ClVentAirNetIZXFERs[1]:izFanEndUse"		Zone:ClVentAirNetIZXFERs[1]:izFanEndUse	= {	"FANC"          }
	   ; SAC 2/13/20 - rolled BACK following mod which caused confusion in testing when revising WHF modeling for 2019.2.0+ (tic #175)
	   ;{  if (IfValidAnd( Proj:EnableResearchMode > 0.5 ) .AND. GlobalStatus( Proj:ClVentFanAvailExp ) > 0) then  "FAN"     ; SAC 1/10/20 - TEMPORARY logic to enable quicker ID of WHF energy use during testing (tic #1175)
	   ;   else  "FANC"  endif  }
END

;*************************************************************************
RULELIST "SimPrep_CSE_AirNet_Zone_WholeHouseFan_OutsideDamper" 0 0 0 1
;*************************************************************************
   "Create Zone:ClVentAirNetIZXFERs[3] (WHF outside damper)"      Zone:ClVentAirNetIZXFERs[3]  =
      {  CreateComp( cseIZXFER, substr( Name, 0, 44 ) + "-WHFdamper" )  }
   "Set Zone:ClVentAirNetIZXFERs[3]:izNVType"   Zone:ClVentAirNetIZXFERs[3]:izNVType  = {  4  }       ; AIRNETEXT - Single opening to ambient
   "Set Zone:ClVentAirNetIZXFERs[3]:izZn1"      Zone:ClVentAirNetIZXFERs[3]:izZn1     = {  CSE_ZONE  }
   "Set Zone:ClVentAirNetIZXFERs[3]:izALo"      Zone:ClVentAirNetIZXFERs[3]:izALo     = {
         0.10  }  ; constant??
         ; ((Proj:BldgELA_CeilSF *ClVentableClgArea* 1.45) + 0.11 )* ClVentableArea / Zone:ClVentableClgArea  }
   "Set Zone:ClVentAirNetIZXFERs[3]:izHD"       Zone:ClVentAirNetIZXFERs[3]:izHD      = {  Zone:ZoneTopZ  }
   "Set Zone:ClVentAirNetIZXFERs[3]:izNVEff"    Zone:ClVentAirNetIZXFERs[3]:izNVEff   = {  1  }
   "Set Zone:ClVentAirNetIZXFERs[3]:izExp"      Zone:ClVentAirNetIZXFERs[3]:izExp     = {  0.65  }
   "Set Zone:ClVentAirNetIZXFERs[3]:izAFCat"    Zone:ClVentAirNetIZXFERs[3]:izAFCat   = {  "VentEx"  }    ; SAC 09/17/20 (tic #1247)
END

;*************************************************************************
RULELIST "SimPrep_CSE_AirNet_Zone_ExtWall" 0 0 0 1
;*************************************************************************
	"Create Zone:AirNetIZXFERs[1] - WlLU"		Zone:AirNetIZXFERs[1]	= {	CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-InfLU", "Default_ZoneIZXFER" )  }
	"Create Zone:AirNetIZXFERs[2] - WlLS"		Zone:AirNetIZXFERs[2]	= {	CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-InfLS", "Default_ZoneIZXFER" )  }
	"Create Zone:AirNetIZXFERs[3] - WlLD"		Zone:AirNetIZXFERs[3]	= {	CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-InfLD", "Default_ZoneIZXFER" )  }
	"Create Zone:AirNetIZXFERs[4] - WlHU"		Zone:AirNetIZXFERs[4]	= {	CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-InfHU", "Default_ZoneIZXFER" )  }
	"Create Zone:AirNetIZXFERs[5] - WlHS"		Zone:AirNetIZXFERs[5]	= {	CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-InfHS", "Default_ZoneIZXFER" )  }
	"Create Zone:AirNetIZXFERs[6] - WlHD"		Zone:AirNetIZXFERs[6]	= {	CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-InfHD", "Default_ZoneIZXFER" )  }

	"Set Zone:AirNetIZXFERs[1]:izZn1 - WlLU"		Zone:AirNetIZXFERs[1]:izZn1	= {	Local( CSE_ZONE )  }
	"Set Zone:AirNetIZXFERs[2]:izZn1 - WlLS"		Zone:AirNetIZXFERs[2]:izZn1	= {	Local( CSE_ZONE )  }
	"Set Zone:AirNetIZXFERs[3]:izZn1 - WlLD"		Zone:AirNetIZXFERs[3]:izZn1	= {	Local( CSE_ZONE )  }
	"Set Zone:AirNetIZXFERs[4]:izZn1 - WlHU"		Zone:AirNetIZXFERs[4]:izZn1	= {	Local( CSE_ZONE )  }
	"Set Zone:AirNetIZXFERs[5]:izZn1 - WlHS"		Zone:AirNetIZXFERs[5]:izZn1	= {	Local( CSE_ZONE )  }
	"Set Zone:AirNetIZXFERs[6]:izZn1 - WlHD"		Zone:AirNetIZXFERs[6]:izZn1	= {	Local( CSE_ZONE )  }

	"Set Zone:AirNetIZXFERs[1]:izALo - WlLU"		Zone:AirNetIZXFERs[1]:izALo	= {	Local( WallHoleSize )      }
	"Set Zone:AirNetIZXFERs[2]:izALo - WlLS"		Zone:AirNetIZXFERs[2]:izALo	= {	Local( WallHoleSize ) * 2  }
	"Set Zone:AirNetIZXFERs[3]:izALo - WlLD"		Zone:AirNetIZXFERs[3]:izALo	= {	Local( WallHoleSize )      }
	"Set Zone:AirNetIZXFERs[4]:izALo - WlHU"		Zone:AirNetIZXFERs[4]:izALo	= {	Local( WallHoleSize )      }
	"Set Zone:AirNetIZXFERs[5]:izALo - WlHS"		Zone:AirNetIZXFERs[5]:izALo	= {	Local( WallHoleSize ) * 2  }
	"Set Zone:AirNetIZXFERs[6]:izALo - WlHD"		Zone:AirNetIZXFERs[6]:izALo	= {	Local( WallHoleSize )      }

; SAC 11/18/14 - allow negative airnet hole positions
	"Set Zone:AirNetIZXFERs[1]:izHD - WlLU"		Zone:AirNetIZXFERs[1]:izHD		= {	Local( ZoneBotZ ) + (0.25 * Local( ZoneHeight ))   }  ; max( 0.1, Local( ZoneBotZ ) + (0.25 * Local( ZoneHeight )) )  }
	"Set Zone:AirNetIZXFERs[2]:izHD - WlLS"		Zone:AirNetIZXFERs[2]:izHD		= {	Local( ZoneBotZ ) + (0.25 * Local( ZoneHeight ))   }  ; max( 0.1, Local( ZoneBotZ ) + (0.25 * Local( ZoneHeight )) )  }
	"Set Zone:AirNetIZXFERs[3]:izHD - WlLD"		Zone:AirNetIZXFERs[3]:izHD		= {	Local( ZoneBotZ ) + (0.25 * Local( ZoneHeight ))   }  ; max( 0.1, Local( ZoneBotZ ) + (0.25 * Local( ZoneHeight )) )  }
	"Set Zone:AirNetIZXFERs[4]:izHD - WlHU"		Zone:AirNetIZXFERs[4]:izHD		= {	Local( ZoneBotZ ) + (0.75 * Local( ZoneHeight ))   }  ; max( 0.1, Local( ZoneBotZ ) + (0.75 * Local( ZoneHeight )) )  }
	"Set Zone:AirNetIZXFERs[5]:izHD - WlHS"		Zone:AirNetIZXFERs[5]:izHD		= {	Local( ZoneBotZ ) + (0.75 * Local( ZoneHeight ))   }  ; max( 0.1, Local( ZoneBotZ ) + (0.75 * Local( ZoneHeight )) )  }
	"Set Zone:AirNetIZXFERs[6]:izHD - WlHD"		Zone:AirNetIZXFERs[6]:izHD		= {	Local( ZoneBotZ ) + (0.75 * Local( ZoneHeight ))   }  ; max( 0.1, Local( ZoneBotZ ) + (0.75 * Local( ZoneHeight )) )  }

;	"Set Zone:AirNetIZXFERs[1]:izCpr - WlLU"		Zone:AirNetIZXFERs[1]:izCpr	= {	 0.6   }
	"Set Zone:AirNetIZXFERs[2]:izCpr - WlLS"		Zone:AirNetIZXFERs[2]:izCpr	= {	-0.65  }
	"Set Zone:AirNetIZXFERs[3]:izCpr - WlLD"		Zone:AirNetIZXFERs[3]:izCpr	= {	-0.3   }
;	"Set Zone:AirNetIZXFERs[4]:izCpr - WlHU"		Zone:AirNetIZXFERs[4]:izCpr	= {	 0.6   }
	"Set Zone:AirNetIZXFERs[5]:izCpr - WlHS"		Zone:AirNetIZXFERs[5]:izCpr	= {	-0.65  }
	"Set Zone:AirNetIZXFERs[6]:izCpr - WlHD"		Zone:AirNetIZXFERs[6]:izCpr	= {	-0.3   }
END

;*************************************************************************
RULELIST "SimPrep_CSE_AirNet_Zone_Windows_1Story" 0 0 0 1
;*************************************************************************
	"Set Zone:WinHoleAreaExp[1]"		Zone:WinHoleAreaExp[1]	= {	Format( "%.3f * WINDOWVENTAVAIL", (Local( WinVentArea ) / 16) )  }
	"Set Zone:WinHoleAreaExp[2]"		Zone:WinHoleAreaExp[2]	= {	Format( "%.3f * WINDOWVENTAVAIL", (Local( WinVentArea ) /  8) )  }

	"Create Zone:WinAirNetIZXFERs[1] - WnLU"			Zone:WinAirNetIZXFERs[1]			= {	CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-NVLU", "Default_ZoneWinIZXFER" )  }
	"Create Zone:WinAirNetIZXFERs[2] - WnLS"			Zone:WinAirNetIZXFERs[2]			= {	CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-NVLS", "Default_ZoneWinIZXFER" )  }
	"Create Zone:WinAirNetIZXFERs[3] - WnLD"			Zone:WinAirNetIZXFERs[3]			= {	CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-NVLD", "Default_ZoneWinIZXFER" )  }
	"Create Zone:WinAirNetIZXFERs[4] - WnHU"			Zone:WinAirNetIZXFERs[4]			= {	CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-NVHU", "Default_ZoneWinIZXFER" )  }
	"Create Zone:WinAirNetIZXFERs[5] - WnHS"			Zone:WinAirNetIZXFERs[5]			= {	CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-NVHS", "Default_ZoneWinIZXFER" )  }
	"Create Zone:WinAirNetIZXFERs[6] - WnHD"			Zone:WinAirNetIZXFERs[6]			= {	CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-NVHD", "Default_ZoneWinIZXFER" )  }

	"Set Zone:WinAirNetIZXFERs[1]:izZn1 - WnLU"		Zone:WinAirNetIZXFERs[1]:izZn1	= {	Local( CSE_ZONE )  }
	"Set Zone:WinAirNetIZXFERs[2]:izZn1 - WnLS"		Zone:WinAirNetIZXFERs[2]:izZn1	= {	Local( CSE_ZONE )  }
	"Set Zone:WinAirNetIZXFERs[3]:izZn1 - WnLD"		Zone:WinAirNetIZXFERs[3]:izZn1	= {	Local( CSE_ZONE )  }
	"Set Zone:WinAirNetIZXFERs[4]:izZn1 - WnHU"		Zone:WinAirNetIZXFERs[4]:izZn1	= {	Local( CSE_ZONE )  }
	"Set Zone:WinAirNetIZXFERs[5]:izZn1 - WnHS"		Zone:WinAirNetIZXFERs[5]:izZn1	= {	Local( CSE_ZONE )  }
	"Set Zone:WinAirNetIZXFERs[6]:izZn1 - WnHD"		Zone:WinAirNetIZXFERs[6]:izZn1	= {	Local( CSE_ZONE )  }

	"Set Zone:WinAirNetIZXFERs[1]:izAHi_x - WnLU"	Zone:WinAirNetIZXFERs[1]:izAHi_x	= {	Local( WinHoleAreaExp[1] )  }
	"Set Zone:WinAirNetIZXFERs[2]:izAHi_x - WnLS"	Zone:WinAirNetIZXFERs[2]:izAHi_x	= {	Local( WinHoleAreaExp[2] )  }
	"Set Zone:WinAirNetIZXFERs[3]:izAHi_x - WnLD"	Zone:WinAirNetIZXFERs[3]:izAHi_x	= {	Local( WinHoleAreaExp[1] )  }
	"Set Zone:WinAirNetIZXFERs[4]:izAHi_x - WnHU"	Zone:WinAirNetIZXFERs[4]:izAHi_x	= {	Local( WinHoleAreaExp[1] )  }
	"Set Zone:WinAirNetIZXFERs[5]:izAHi_x - WnHS"	Zone:WinAirNetIZXFERs[5]:izAHi_x	= {	Local( WinHoleAreaExp[2] )  }
	"Set Zone:WinAirNetIZXFERs[6]:izAHi_x - WnHD"	Zone:WinAirNetIZXFERs[6]:izAHi_x	= {	Local( WinHoleAreaExp[1] )  }

;	"Set Zone:WinAirNetIZXFERs[1]:izHD - WnLU"		Zone:WinAirNetIZXFERs[1]:izHD		= {	max( 0.1, Local( WinHHTopUse ) - (3 + Local( WinVentHtDiff )) )  }
;	"Set Zone:WinAirNetIZXFERs[2]:izHD - WnLS"		Zone:WinAirNetIZXFERs[2]:izHD		= {	max( 0.1, Local( WinHHTopUse ) - (3 + Local( WinVentHtDiff )) )  }
;	"Set Zone:WinAirNetIZXFERs[3]:izHD - WnLD"		Zone:WinAirNetIZXFERs[3]:izHD		= {	max( 0.1, Local( WinHHTopUse ) - (3 + Local( WinVentHtDiff )) )  }
; SAC 7/24/14 - switched to second element of WinHHTopUse[] to address SFam vs. MFam differences
; SAC 11/18/14 - allow negative airnet hole positions
	"Set Zone:WinAirNetIZXFERs[1]:izHD - WnLU"		Zone:WinAirNetIZXFERs[1]:izHD		= {	if (WinVentHtDiff[1] < -900 .OR. Proj:BypassRuleLimits < 0.5)
																														then	Local( WinHHTopUse[2] ) - 3                                  ; max( 0.1, Local( WinHHTopUse[2] ) - 3 )                   
																														else	Local( WinHHTopUse[2] ) - 3 + WinVentHtDiff[1]   endif  }    ; max( 0.1, Local( WinHHTopUse[2] ) - 3 + WinVentHtDiff[1] )
	"Set Zone:WinAirNetIZXFERs[2]:izHD - WnLS"		Zone:WinAirNetIZXFERs[2]:izHD		= {	if (WinVentHtDiff[1] < -900 .OR. Proj:BypassRuleLimits < 0.5)
																														then	Local( WinHHTopUse[2] ) - 3 
																														else	Local( WinHHTopUse[2] ) - 3 + WinVentHtDiff[1]   endif  }
	"Set Zone:WinAirNetIZXFERs[3]:izHD - WnLD"		Zone:WinAirNetIZXFERs[3]:izHD		= {	if (WinVentHtDiff[1] < -900 .OR. Proj:BypassRuleLimits < 0.5)
																														then	Local( WinHHTopUse[2] ) - 3 
																														else	Local( WinHHTopUse[2] ) - 3 + WinVentHtDiff[1]   endif  }
	"Set Zone:WinAirNetIZXFERs[4]:izHD - WnHU"		Zone:WinAirNetIZXFERs[4]:izHD		= {	if (WinVentHtDiff[2] < -900 .OR. Proj:BypassRuleLimits < 0.5)
																														then	Local( WinHHTopUse[2] ) - 1 
																														else	Local( WinHHTopUse[2] ) - 1 + WinVentHtDiff[2]   endif  }
	"Set Zone:WinAirNetIZXFERs[5]:izHD - WnHS"		Zone:WinAirNetIZXFERs[5]:izHD		= {	if (WinVentHtDiff[2] < -900 .OR. Proj:BypassRuleLimits < 0.5)
																														then	Local( WinHHTopUse[2] ) - 1 
																														else	Local( WinHHTopUse[2] ) - 1 + WinVentHtDiff[2]   endif  }
	"Set Zone:WinAirNetIZXFERs[6]:izHD - WnHD"		Zone:WinAirNetIZXFERs[6]:izHD		= {	if (WinVentHtDiff[2] < -900 .OR. Proj:BypassRuleLimits < 0.5)
																														then	Local( WinHHTopUse[2] ) - 1 
																														else	Local( WinHHTopUse[2] ) - 1 + WinVentHtDiff[2]   endif  }

	"Set Zone:WinAirNetIZXFERs[1]:izCpr - WnLU"		Zone:WinAirNetIZXFERs[1]:izCpr	= {	 0.6  * NatVentWindPresCoefMult  }     ; SAC 7/13/20
	"Set Zone:WinAirNetIZXFERs[2]:izCpr - WnLS"		Zone:WinAirNetIZXFERs[2]:izCpr	= {	-0.65 * NatVentWindPresCoefMult  }
	"Set Zone:WinAirNetIZXFERs[3]:izCpr - WnLD"		Zone:WinAirNetIZXFERs[3]:izCpr	= {	-0.3  * NatVentWindPresCoefMult  }
	"Set Zone:WinAirNetIZXFERs[4]:izCpr - WnHU"		Zone:WinAirNetIZXFERs[4]:izCpr	= {	 0.6  * NatVentWindPresCoefMult  }
	"Set Zone:WinAirNetIZXFERs[5]:izCpr - WnHS"		Zone:WinAirNetIZXFERs[5]:izCpr	= {	-0.65 * NatVentWindPresCoefMult  }
	"Set Zone:WinAirNetIZXFERs[6]:izCpr - WnHD"		Zone:WinAirNetIZXFERs[6]:izCpr	= {	-0.3  * NatVentWindPresCoefMult  }
END

; SAC 7/24/14 - revised logic to ALWAYS generate window AirNet objects using the single story logic (hence removal of the following rulelist)
;		;*************************************************************************
;		RULELIST "SimPrep_CSE_AirNet_Zone_Windows_MultiStory" 0 0 0 1
;		;*************************************************************************
;			"Set Zone:WinHoleAreaExp[1]"		Zone:WinHoleAreaExp[1]	= {	Format( "%.3f * WINDOWVENTAVAIL", (WinVentArea / (8 * NumStories)) )  }
;			"Set Zone:WinHoleAreaExp[2]"		Zone:WinHoleAreaExp[2]	= {	Format( "%.3f * WINDOWVENTAVAIL", (WinVentArea / (4 * NumStories)) )  }
;		
;			"Create Zone:WinAirNetIZXFERs[1] - Wn1U"			Zone:WinAirNetIZXFERs[1]			= {	CreateComp( cseIZXFER, Local( Name ) + "-NV1U", "Default_ZoneWinIZXFER" )  }
;			"Create Zone:WinAirNetIZXFERs[2] - Wn1S"			Zone:WinAirNetIZXFERs[2]			= {	CreateComp( cseIZXFER, Local( Name ) + "-NV1S", "Default_ZoneWinIZXFER" )  }
;			"Create Zone:WinAirNetIZXFERs[3] - Wn1D"			Zone:WinAirNetIZXFERs[3]			= {	CreateComp( cseIZXFER, Local( Name ) + "-NV1D", "Default_ZoneWinIZXFER" )  }
;			"Create Zone:WinAirNetIZXFERs[4] - Wn2U"			Zone:WinAirNetIZXFERs[4]			= {	CreateComp( cseIZXFER, Local( Name ) + "-NV2U", "Default_ZoneWinIZXFER" )  }
;			"Create Zone:WinAirNetIZXFERs[5] - Wn2S"			Zone:WinAirNetIZXFERs[5]			= {	CreateComp( cseIZXFER, Local( Name ) + "-NV2S", "Default_ZoneWinIZXFER" )  }
;			"Create Zone:WinAirNetIZXFERs[6] - Wn2D"			Zone:WinAirNetIZXFERs[6]			= {	CreateComp( cseIZXFER, Local( Name ) + "-NV2D", "Default_ZoneWinIZXFER" )  }
;			"Create Zone:WinAirNetIZXFERs[7] - Wn3U"			Zone:WinAirNetIZXFERs[7]			= {	if (NumStories < 2.5) then  UNCHANGED
;																																else	CreateComp( cseIZXFER, Local( Name ) + "-NV3U", "Default_ZoneWinIZXFER" )  endif  }
;			"Create Zone:WinAirNetIZXFERs[8] - Wn3S"			Zone:WinAirNetIZXFERs[8]			= {	if (NumStories < 2.5) then  UNCHANGED
;																																else	CreateComp( cseIZXFER, Local( Name ) + "-NV3S", "Default_ZoneWinIZXFER" )  endif  }
;			"Create Zone:WinAirNetIZXFERs[9] - Wn3D"			Zone:WinAirNetIZXFERs[9]			= {	if (NumStories < 2.5) then  UNCHANGED
;																																else	CreateComp( cseIZXFER, Local( Name ) + "-NV3D", "Default_ZoneWinIZXFER" )  endif  }
;		
;			"Set Zone:WinAirNetIZXFERs[1]:izZn1 - Wn1U"		Zone:WinAirNetIZXFERs[1]:izZn1	= {	Local( CSE_ZONE )  }
;			"Set Zone:WinAirNetIZXFERs[2]:izZn1 - Wn1S"		Zone:WinAirNetIZXFERs[2]:izZn1	= {	Local( CSE_ZONE )  }
;			"Set Zone:WinAirNetIZXFERs[3]:izZn1 - Wn1D"		Zone:WinAirNetIZXFERs[3]:izZn1	= {	Local( CSE_ZONE )  }
;			"Set Zone:WinAirNetIZXFERs[4]:izZn1 - Wn2U"		Zone:WinAirNetIZXFERs[4]:izZn1	= {	Local( CSE_ZONE )  }
;			"Set Zone:WinAirNetIZXFERs[5]:izZn1 - Wn2S"		Zone:WinAirNetIZXFERs[5]:izZn1	= {	Local( CSE_ZONE )  }
;			"Set Zone:WinAirNetIZXFERs[6]:izZn1 - Wn2D"		Zone:WinAirNetIZXFERs[6]:izZn1	= {	Local( CSE_ZONE )  }
;			"Set Zone:WinAirNetIZXFERs[7]:izZn1 - Wn3U"		Zone:WinAirNetIZXFERs[7]:izZn1	= {	Local( CSE_ZONE )  }
;			"Set Zone:WinAirNetIZXFERs[8]:izZn1 - Wn3S"		Zone:WinAirNetIZXFERs[8]:izZn1	= {	Local( CSE_ZONE )  }
;			"Set Zone:WinAirNetIZXFERs[9]:izZn1 - Wn3D"		Zone:WinAirNetIZXFERs[9]:izZn1	= {	Local( CSE_ZONE )  }
;		
;			"Set Zone:WinAirNetIZXFERs[1]:izAHi_x - Wn1U"	Zone:WinAirNetIZXFERs[1]:izAHi_x	= {	Local( WinHoleAreaExp[1] )  }
;			"Set Zone:WinAirNetIZXFERs[2]:izAHi_x - Wn1S"	Zone:WinAirNetIZXFERs[2]:izAHi_x	= {	Local( WinHoleAreaExp[2] )  }
;			"Set Zone:WinAirNetIZXFERs[3]:izAHi_x - Wn1D"	Zone:WinAirNetIZXFERs[3]:izAHi_x	= {	Local( WinHoleAreaExp[1] )  }
;			"Set Zone:WinAirNetIZXFERs[4]:izAHi_x - Wn2U"	Zone:WinAirNetIZXFERs[4]:izAHi_x	= {	Local( WinHoleAreaExp[1] )  }
;			"Set Zone:WinAirNetIZXFERs[5]:izAHi_x - Wn2S"	Zone:WinAirNetIZXFERs[5]:izAHi_x	= {	Local( WinHoleAreaExp[2] )  }
;			"Set Zone:WinAirNetIZXFERs[6]:izAHi_x - Wn2D"	Zone:WinAirNetIZXFERs[6]:izAHi_x	= {	Local( WinHoleAreaExp[1] )  }
;			"Set Zone:WinAirNetIZXFERs[7]:izAHi_x - Wn3U"	Zone:WinAirNetIZXFERs[7]:izAHi_x	= {	Local( WinHoleAreaExp[1] )  }
;			"Set Zone:WinAirNetIZXFERs[8]:izAHi_x - Wn3S"	Zone:WinAirNetIZXFERs[8]:izAHi_x	= {	Local( WinHoleAreaExp[2] )  }
;			"Set Zone:WinAirNetIZXFERs[9]:izAHi_x - Wn3D"	Zone:WinAirNetIZXFERs[9]:izAHi_x	= {	Local( WinHoleAreaExp[1] )  }
;		
;			"Set Zone:WinAirNetIZXFERs[1]:izHD - Wn1U"		Zone:WinAirNetIZXFERs[1]:izHD		= {	if (WinVentHtDiff[1] < -900 .OR. Proj:BypassRuleLimits < 0.5)
;																																then	max( 0.1, Local( WinHHTopUse ) - 2 )
;																																else	max( 0.1, Local( WinHHTopUse ) - 2 + WinVentHtDiff[1] )  endif  }
;			"Set Zone:WinAirNetIZXFERs[2]:izHD - Wn1S"		Zone:WinAirNetIZXFERs[2]:izHD		= {	if (WinVentHtDiff[1] < -900 .OR. Proj:BypassRuleLimits < 0.5)
;																																then	max( 0.1, Local( WinHHTopUse ) - 2 )
;																																else	max( 0.1, Local( WinHHTopUse ) - 2 + WinVentHtDiff[1] )  endif  }
;			"Set Zone:WinAirNetIZXFERs[3]:izHD - Wn1D"		Zone:WinAirNetIZXFERs[3]:izHD		= {	if (WinVentHtDiff[1] < -900 .OR. Proj:BypassRuleLimits < 0.5)
;																																then	max( 0.1, Local( WinHHTopUse ) - 2 )
;																																else	max( 0.1, Local( WinHHTopUse ) - 2 + WinVentHtDiff[1] )  endif  }
;			"Set Zone:WinAirNetIZXFERs[4]:izHD - Wn2U"		Zone:WinAirNetIZXFERs[4]:izHD		= {	if (WinVentHtDiff[2] < -900 .OR. Proj:BypassRuleLimits < 0.5)
;																																then	max( 0.1, Local( WinHHTopUse ) - 2 + FloorHeight )
;																																else	max( 0.1, Local( WinHHTopUse ) - 2 + WinVentHtDiff[2] )  endif  }
;			"Set Zone:WinAirNetIZXFERs[5]:izHD - Wn2S"		Zone:WinAirNetIZXFERs[5]:izHD		= {	if (WinVentHtDiff[2] < -900 .OR. Proj:BypassRuleLimits < 0.5)
;																																then	max( 0.1, Local( WinHHTopUse ) - 2 + FloorHeight )
;																																else	max( 0.1, Local( WinHHTopUse ) - 2 + WinVentHtDiff[2] )  endif  }
;			"Set Zone:WinAirNetIZXFERs[6]:izHD - Wn2D"		Zone:WinAirNetIZXFERs[6]:izHD		= {	if (WinVentHtDiff[2] < -900 .OR. Proj:BypassRuleLimits < 0.5)
;																																then	max( 0.1, Local( WinHHTopUse ) - 2 + FloorHeight )
;																																else	max( 0.1, Local( WinHHTopUse ) - 2 + WinVentHtDiff[2] )  endif  }
;			"Set Zone:WinAirNetIZXFERs[7]:izHD - Wn3U"		Zone:WinAirNetIZXFERs[7]:izHD		= {	if (WinVentHtDiff[3] < -900 .OR. Proj:BypassRuleLimits < 0.5)
;																																then	max( 0.1, Local( WinHHTopUse ) - 2 + (2 * FloorHeight) )
;																																else	max( 0.1, Local( WinHHTopUse ) - 2 + WinVentHtDiff[3] )  endif  }
;			"Set Zone:WinAirNetIZXFERs[8]:izHD - Wn3S"		Zone:WinAirNetIZXFERs[8]:izHD		= {	if (WinVentHtDiff[3] < -900 .OR. Proj:BypassRuleLimits < 0.5)
;																																then	max( 0.1, Local( WinHHTopUse ) - 2 + (2 * FloorHeight) )
;																																else	max( 0.1, Local( WinHHTopUse ) - 2 + WinVentHtDiff[3] )  endif  }
;			"Set Zone:WinAirNetIZXFERs[9]:izHD - Wn3D"		Zone:WinAirNetIZXFERs[9]:izHD		= {	if (WinVentHtDiff[3] < -900 .OR. Proj:BypassRuleLimits < 0.5)
;																																then	max( 0.1, Local( WinHHTopUse ) - 2 + (2 * FloorHeight) )
;																																else	max( 0.1, Local( WinHHTopUse ) - 2 + WinVentHtDiff[3] )  endif  }
;		
;		;	"Set Zone:WinAirNetIZXFERs[1]:izCpr - Wn1U"		Zone:WinAirNetIZXFERs[1]:izCpr	= {	 0.6   }
;			"Set Zone:WinAirNetIZXFERs[2]:izCpr - Wn1S"		Zone:WinAirNetIZXFERs[2]:izCpr	= {	-0.65  }
;			"Set Zone:WinAirNetIZXFERs[3]:izCpr - Wn1D"		Zone:WinAirNetIZXFERs[3]:izCpr	= {	-0.3   }
;		;	"Set Zone:WinAirNetIZXFERs[4]:izCpr - Wn2U"		Zone:WinAirNetIZXFERs[4]:izCpr	= {	 0.6   }
;			"Set Zone:WinAirNetIZXFERs[5]:izCpr - Wn2S"		Zone:WinAirNetIZXFERs[5]:izCpr	= {	-0.65  }
;			"Set Zone:WinAirNetIZXFERs[6]:izCpr - Wn2D"		Zone:WinAirNetIZXFERs[6]:izCpr	= {	-0.3   }
;		;	"Set Zone:WinAirNetIZXFERs[7]:izCpr - Wn3U"		Zone:WinAirNetIZXFERs[7]:izCpr	= {	 0.6   }
;			"Set Zone:WinAirNetIZXFERs[8]:izCpr - Wn3S"		Zone:WinAirNetIZXFERs[8]:izCpr	= {	-0.65  }
;			"Set Zone:WinAirNetIZXFERs[9]:izCpr - Wn3D"		Zone:WinAirNetIZXFERs[9]:izCpr	= {	-0.3   }
;		END

;************************************************************************* - SAC 11/30/20
RULELIST "SimPrep_CSE_AirNet_ZoneUncondZone_ByZone" 0 0 0 1
;*************************************************************************
	; for garage wall
	"Set Zone:AdjUncondZnWallArea"						Zone:AdjUncondZnWallArea		=	{	SumChildren( IntWall:ParCndZnAdjUZnArea)
																													+ SumRevRef( IntWall:Outside, IntWall:ParUZnAdjCndZnArea)	}
	"Set Zone:GrgWallH"										Zone:GrgWallH						=	{	Global(Proj:BldgELA_GarageSF) * AdjUncondZnWallArea / 2.		}
	"Set Zone:GrgWallTopZ"									Zone:GrgWallTopZ					=	{	min( Local(Top), Local(Top) )						}	;Global(Garage:Top)
	"Set Zone:GrgWallBotZ"									Zone:GrgWallBotZ					=	{	min( Local(Bottom), Local(Bottom) )					}	;Global(Garage:Bottom)
	"Set Zone:GrgWallHt"										Zone:GrgWallHt						=	{	Local(GrgWallTopZ) - Local(GrgWallBotZ)						}
	"Set Zone:GrgWallHoleHiZ"								Zone:GrgWallHoleHiZ				=	{	Local(GrgWallBotZ) + (0.75 * Local(GrgWallHt))				}
	"Set Zone:GrgWallHoleLoZ"								Zone:GrgWallHoleLoZ				=	{	Local(GrgWallBotZ) + (0.25 * Local(GrgWallHt))				}

	"Create Zone:GrgWallAirNetIZXFERs[1]"				Zone:GrgWallAirNetIZXFERs[1]	=	{	if ( Local(GrgWallH) > 0. ) 
																															then CreateComp( cseIZXFER, substr( Name, 0, 44 ) + "-xGarageH")
																															else UNDEFINED
																															endif  }
	"Set Zone:GrgWallAirNetIZXFERs[1]:izNVType"			Zone:GrgWallAirNetIZXFERs[1]:izNVType	=	{	3  }		; AIRNETIZ - Single opening to another zone
	"Set Zone:GrgWallAirNetIZXFERs[1]:izZn1"				Zone:GrgWallAirNetIZXFERs[1]:izZn1		=	{	Local( CSE_ZONE )  }
	"Set Zone:GrgWallAirNetIZXFERs[1]:izALo"				Zone:GrgWallAirNetIZXFERs[1]:izALo		=	{	Local( GrgWallH )  }
	"Set Zone:GrgWallAirNetIZXFERs[1]:izHD"				Zone:GrgWallAirNetIZXFERs[1]:izHD   	=	{	Local( GrgWallHoleHiZ )  }
	"Set Zone:GrgWallAirNetIZXFERs[1]:izNVEff"			Zone:GrgWallAirNetIZXFERs[1]:izNVEff	=	{	1.0  }
	"Set Zone:GrgWallAirNetIZXFERs[1]:izExp"				Zone:GrgWallAirNetIZXFERs[1]:izExp  	=	{	0.65  }
	"Set Zone:GrgWallAirNetIZXFERs[1]:izZN2"				Zone:GrgWallAirNetIZXFERs[1]:izZN2  	=	{	Global( Garage:CSE_ZONE )  }
																					
	"Create Zone:GrgWallAirNetIZXFERs[2]"					Zone:GrgWallAirNetIZXFERs[2]		=	{	if ( Local(GrgWallH) > 0. ) 
																															then CreateComp( cseIZXFER, substr( Name, 0, 44 ) + "-xGarageL")
																															else UNDEFINED
																															endif  }
	"Set Zone:GrgWallAirNetIZXFERs[2]:izNVType"			Zone:GrgWallAirNetIZXFERs[2]:izNVType	=	{	3  }		; AIRNETIZ - Single opening to another zone
	"Set Zone:GrgWallAirNetIZXFERs[2]:izZn1"				Zone:GrgWallAirNetIZXFERs[2]:izZn1		=	{	Local( CSE_ZONE )  }
	"Set Zone:GrgWallAirNetIZXFERs[2]:izALo"				Zone:GrgWallAirNetIZXFERs[2]:izALo		=	{	Local( GrgWallH )  }
	"Set Zone:GrgWallAirNetIZXFERs[2]:izHD"				Zone:GrgWallAirNetIZXFERs[2]:izHD   	=	{	Local( GrgWallHoleLoZ )  }
	"Set Zone:GrgWallAirNetIZXFERs[2]:izNVEff"			Zone:GrgWallAirNetIZXFERs[2]:izNVEff	=	{	1.0  }
	"Set Zone:GrgWallAirNetIZXFERs[2]:izExp"				Zone:GrgWallAirNetIZXFERs[2]:izExp  	=	{	0.65  }
	"Set Zone:GrgWallAirNetIZXFERs[2]:izZN2"				Zone:GrgWallAirNetIZXFERs[2]:izZN2  	=	{	Global( Garage:CSE_ZONE )  }
END
;************************************************************************* - SAC 11/30/20
RULELIST "SimPrep_CSE_AirNet_ZoneUncondZone_ByOtherZone" 0 0 0 1
;*************************************************************************
	; for garage wall
	"Set OtherZone:AdjUncondZnWallArea"							OtherZone:AdjUncondZnWallArea			=	{	SumChildren( IntWall:ParCndOZnAdjUZnArea)
																													+ SumRevRef( IntWall:Outside, IntWall:ParUZnAdjCndOZnArea)	}
	"Set OtherZone:GrgWallH"										OtherZone:GrgWallH						=	{	Global(Proj:BldgELA_GarageSF) * AdjUncondZnWallArea / 2.		}
	"Set OtherZone:GrgWallTopZ"									OtherZone:GrgWallTopZ					=	{	min( Local(Top), Local(Top) )						}	;Global(Garage:Top)
	"Set OtherZone:GrgWallBotZ"									OtherZone:GrgWallBotZ					=	{	min( Local(Bottom), Local(Bottom) )					}	;Global(Garage:Bottom)
	"Set OtherZone:GrgWallHt"										OtherZone:GrgWallHt						=	{	Local(GrgWallTopZ) - Local(GrgWallBotZ)						}
	"Set OtherZone:GrgWallHoleHiZ"								OtherZone:GrgWallHoleHiZ				=	{	Local(GrgWallBotZ) + (0.75 * Local(GrgWallHt))				}
	"Set OtherZone:GrgWallHoleLoZ"								OtherZone:GrgWallHoleLoZ				=	{	Local(GrgWallBotZ) + (0.25 * Local(GrgWallHt))				}

	"Create OtherZone:GrgWallAirNetIZXFERs[1]"				OtherZone:GrgWallAirNetIZXFERs[1]		=	{	if ( Local(GrgWallH) > 0. ) 
																															then CreateComp( cseIZXFER, substr( Name, 0, 44 ) + "-xGarageH")
																															else UNDEFINED
																															endif  }
	"Set OtherZone:GrgWallAirNetIZXFERs[1]:izNVType"		OtherZone:GrgWallAirNetIZXFERs[1]:izNVType	=	{	3  }		; AIRNETIZ - Single opening to another zone
	"Set OtherZone:GrgWallAirNetIZXFERs[1]:izZn1"			OtherZone:GrgWallAirNetIZXFERs[1]:izZn1		=	{	Local( CSE_ZONE )  }
	"Set OtherZone:GrgWallAirNetIZXFERs[1]:izALo"			OtherZone:GrgWallAirNetIZXFERs[1]:izALo		=	{	Local( GrgWallH )  }
	"Set OtherZone:GrgWallAirNetIZXFERs[1]:izHD"				OtherZone:GrgWallAirNetIZXFERs[1]:izHD   	=	{	Local( GrgWallHoleHiZ )  }
	"Set OtherZone:GrgWallAirNetIZXFERs[1]:izNVEff"			OtherZone:GrgWallAirNetIZXFERs[1]:izNVEff	=	{	1.0  }
	"Set OtherZone:GrgWallAirNetIZXFERs[1]:izExp"			OtherZone:GrgWallAirNetIZXFERs[1]:izExp  	=	{	0.65  }
	"Set OtherZone:GrgWallAirNetIZXFERs[1]:izZN2"			OtherZone:GrgWallAirNetIZXFERs[1]:izZN2  	=	{	Global( Garage:CSE_ZONE )  }
																					
	"Create OtherZone:GrgWallAirNetIZXFERs[2]"				OtherZone:GrgWallAirNetIZXFERs[2]		=	{	if ( Local(GrgWallH) > 0. ) 
																															then CreateComp( cseIZXFER, substr( Name, 0, 44 ) + "-xGarageL")
																															else UNDEFINED
																															endif  }
	"Set OtherZone:GrgWallAirNetIZXFERs[2]:izNVType"		OtherZone:GrgWallAirNetIZXFERs[2]:izNVType	=	{	3  }		; AIRNETIZ - Single opening to another zone
	"Set OtherZone:GrgWallAirNetIZXFERs[2]:izZn1"			OtherZone:GrgWallAirNetIZXFERs[2]:izZn1		=	{	Local( CSE_ZONE )  }
	"Set OtherZone:GrgWallAirNetIZXFERs[2]:izALo"			OtherZone:GrgWallAirNetIZXFERs[2]:izALo		=	{	Local( GrgWallH )  }
	"Set OtherZone:GrgWallAirNetIZXFERs[2]:izHD"				OtherZone:GrgWallAirNetIZXFERs[2]:izHD   	=	{	Local( GrgWallHoleLoZ )  }
	"Set OtherZone:GrgWallAirNetIZXFERs[2]:izNVEff"			OtherZone:GrgWallAirNetIZXFERs[2]:izNVEff	=	{	1.0  }
	"Set OtherZone:GrgWallAirNetIZXFERs[2]:izExp"			OtherZone:GrgWallAirNetIZXFERs[2]:izExp  	=	{	0.65  }
	"Set OtherZone:GrgWallAirNetIZXFERs[2]:izZN2"			OtherZone:GrgWallAirNetIZXFERs[2]:izZN2  	=	{	Global( Garage:CSE_ZONE )  }
END
;************************************************************************* - SAC 11/30/20
RULELIST "SimPrep_CSE_AirNet_ZoneUncondZone_ByWall" 0 0 0 1
;*************************************************************************
   "Create IntWall:CndUCndAirNetIZXFERs[1]-H IZXFER"  IntWall:CndUCndAirNetIZXFERs[1] =
      {  if (ParentCompAssigned( CSE_ZONE ) > 0 .AND. LocalCompAssigned( Outside:CSE_ZONE ) > 0 .AND.
             (ParCndZnAdjUZnArea > 0 .OR. ParCndOZnAdjUZnArea > 0 .OR. ParUZnAdjCndZnArea > 0 .OR. ParUZnAdjCndOZnArea > 0))
         then  CreateComp( cseIZXFER, substr( Name, 0, 42 ) + "-xCndUCndH")
         else  UNDEFINED  endif  }

   "Set IntWall:CndUCndAirNetIZXFERs[1]:izNVType"     IntWall:CndUCndAirNetIZXFERs[1]:izNVType  =  {  3  }      ; AIRNETIZ - Single opening to another zone
   "Set IntWall:CndUCndAirNetIZXFERs[1]:izZn1"        IntWall:CndUCndAirNetIZXFERs[1]:izZn1     =  {  Parent( CSE_ZONE )  }
   "Set IntWall:CndUCndAirNetIZXFERs[1]:izZN2"        IntWall:CndUCndAirNetIZXFERs[1]:izZN2     =  {  Outside:CSE_ZONE    }
   "Set IntWall:CndUCndAirNetIZXFERs[1]:izALo"        IntWall:CndUCndAirNetIZXFERs[1]:izALo     =
      {  if (ParCndZnAdjUZnArea > 0 .OR. ParUZnAdjCndZnArea > 0)
         then  Proj:BldgELA_GarageSF * (ParCndZnAdjUZnArea  + ParUZnAdjCndZnArea ) / 2.
         else  Proj:BldgELA_GarageSF * (ParCndOZnAdjUZnArea + ParUZnAdjCndOZnArea) * ValidOr( Proj:NResLeakageRatio, 1 ) / 2.
         endif  }
   "Set IntWall:CndUCndAirNetIZXFERs[1]:izHD"         IntWall:CndUCndAirNetIZXFERs[1]:izHD      =  {  Parent( Bottom ) + (0.75 * max( 4, (Parent( Top ) - Parent( Bottom ))))  }
   "Set IntWall:CndUCndAirNetIZXFERs[1]:izNVEff"      IntWall:CndUCndAirNetIZXFERs[1]:izNVEff   =  {  1.0  }
   "Set IntWall:CndUCndAirNetIZXFERs[1]:izExp"        IntWall:CndUCndAirNetIZXFERs[1]:izExp     =  {  0.65  }

   "Create IntWall:CndUCndAirNetIZXFERs[2]-L IZXFER"  IntWall:CndUCndAirNetIZXFERs[2] =
      {  if (LocalCompAssigned( CndUCndAirNetIZXFERs[1] ) > 0)
         then  CreateComp( cseIZXFER, substr( Name, 0, 42 ) + "-xCndUCndL")
         else  UNDEFINED  endif  }
   "Set IntWall:CndUCndAirNetIZXFERs[2]:izNVType"     IntWall:CndUCndAirNetIZXFERs[2]:izNVType  =  {  3  }      ; AIRNETIZ - Single opening to another zone
   "Set IntWall:CndUCndAirNetIZXFERs[2]:izZn1"        IntWall:CndUCndAirNetIZXFERs[2]:izZn1     =  {  Parent( CSE_ZONE )  }
   "Set IntWall:CndUCndAirNetIZXFERs[2]:izZN2"        IntWall:CndUCndAirNetIZXFERs[2]:izZN2     =  {  Outside:CSE_ZONE    }
   "Set IntWall:CndUCndAirNetIZXFERs[2]:izALo"        IntWall:CndUCndAirNetIZXFERs[2]:izALo     =  {  CndUCndAirNetIZXFERs[1]:izALo  }
   "Set IntWall:CndUCndAirNetIZXFERs[2]:izHD"         IntWall:CndUCndAirNetIZXFERs[2]:izHD      =  {  Parent( Bottom ) + (0.25 * max( 4, (Parent( Top ) - Parent( Bottom ))))  }
   "Set IntWall:CndUCndAirNetIZXFERs[2]:izNVEff"      IntWall:CndUCndAirNetIZXFERs[2]:izNVEff   =  {  1.0  }
   "Set IntWall:CndUCndAirNetIZXFERs[2]:izExp"        IntWall:CndUCndAirNetIZXFERs[2]:izExp     =  {  0.65  }
END
;*************************************************************************


; SAC 9/19/19 - OtherZone (MFamProto)
;*************************************************************************
RULELIST "SimPrep_CSE_AirNet_OtherZone" 0 0 0 1
;*************************************************************************

   "Set OtherZone:ELA_ACeil"				OtherZone:ELA_ACeil				= {   Proj:BldgELA_CeilSF      * ValidOr( Proj:NResLeakageRatio, 1 ) *  Local( ClgBlwAtticArea )  }
   "Set OtherZone:ELA_XCeil"				OtherZone:ELA_XCeil				= {   Proj:BldgELA_CeilSF      * ValidOr( Proj:NResLeakageRatio, 1 ) * (				0				  + Local( CathCeilingArea ))  }   ; AtticEdgeArea to be inserted for 0 here
   "Set OtherZone:ELA_XWall"				OtherZone:ELA_XWall				= {   Proj:BldgELA_WallSF      * ValidOr( Proj:NResLeakageRatio, 1 ) *  Local( ExtWallArea     )  }
   "Set OtherZone:ELA_Floor"				OtherZone:ELA_Floor				= {   Proj:BldgELA_RaisedFlrSF * ValidOr( Proj:NResLeakageRatio, 1 ) *  Local( ExtFloorArea    )  }

	"Set OtherZone:WallHoleSize"			OtherZone:WallHoleSize			= {	ELA_XWall / 8  }        ; removed 1.45 multiplier for AirNet Algorithm v14->15 update - SAC 10/09/23 (tic #1252)

	"Create & setup OtherZone:AirNetIZXFERs[1-6] iff WallHoleSize > 0"
			OtherZone:Action	 = {	if (WallHoleSize <= 0) then  UNCHANGED
									else  EvalRulelist( "SimPrep_CSE_AirNet_OtherZone_ExtWall", 1 )  endif  }

 ;-----------------------
 ; WINDOW AirNet
 ;-----------------------
;	"Set OtherZone:WinVentHtDiff"		OtherZone:WinVentHtDiff 	= {	2.0  }
	; Expression describing hourly window hole area (1=>WnLU/LD, 2=>WnLS)
	; from AirNetAlgorithm2.txt -- WnHole = 0.5*(WnVentArea/8.)*Win_hr*Windowmode // 1/8th in each hole,  ft2.  1/2 of nominal area to account for screens etc.  Hourly and seasonal availability 

				; 2.  Cooling Ventilation Setup:  4 types:  Windows only (all types have windows for some part of the year), Whole house fan, Smart Vent, NightBreeze
				;       Set up seasonal window control
				;  #if Smart Vent or NightBreeze //Windows are on in Winter, but off in summer when mechanical ventilation is on
				; 	   #redefine Windowmode select( @weather.taDbAvg07 >60., 0.00001,default 1.) 
				; 	   #define VentDiffMult  select( @top.tDbOSh < (@znRes[Single].prior.S.tAir-VentDiff), 1,default 0.000001) //Vent off if Tin-Vendiff > Tout  !! 110413  XXX
				; 	#Else  //everything but Econ and NightBreeeze Windows are on year round
				; 	   #reDefine Windowmode 1.       //Always available
				; 	   #Define VentDiff 0          // Differential.  No differential for windows or WWF  110309 BAW

; REMOVED Window (natural vent) airnet from OtherZone (NonRes) objects - SAC 7/13/20
;	"Create & setup OtherZone:WinAirNetIZXFERs[1-6] iff WinVentArea > 0"
;			OtherZone:Action	 = {	if (WinVentArea < 0.0001) then  UNCHANGED
;									else	EvalRulelist( "SimPrep_CSE_AirNet_OtherZone_Windows_1Story", 1 )  endif  }

; ;-----------------------
; ; AirNet for ceiling below attic in Conditioned OtherZone
; ;-----------------------

   "Setup airnet IZXFERs for CondZn/UncondZn vertical (wall) boundaries"   OtherZone:Action =
      {  if (CSEVentAvailZonal) then  UNCHANGED
         else  EvalRulelist( "SimPrep_CSE_AirNet_ZoneUncondZone_ByOtherZone", 1 )  endif  }
; moved into rulelist(s) called above - SAC 11/30/20
;	; for garage wall
;	"Set OtherZone:AdjUncondZnWallArea"							OtherZone:AdjUncondZnWallArea			=	{	SumChildren( IntWall:ParCndOZnAdjUZnArea)
;																													+ SumRevRef( IntWall:Outside, IntWall:ParUZnAdjCndOZnArea)	}
;	"Set OtherZone:GrgWallH"										OtherZone:GrgWallH						=	{	Global(Proj:BldgELA_GarageSF) * AdjUncondZnWallArea / 2.		}
;	"Set OtherZone:GrgWallTopZ"									OtherZone:GrgWallTopZ					=	{	min( Local(Top), Local(Top) )						}	;Global(Garage:Top)
;	"Set OtherZone:GrgWallBotZ"									OtherZone:GrgWallBotZ					=	{	min( Local(Bottom), Local(Bottom) )					}	;Global(Garage:Bottom)
;	"Set OtherZone:GrgWallHt"										OtherZone:GrgWallHt						=	{	Local(GrgWallTopZ) - Local(GrgWallBotZ)						}
;	"Set OtherZone:GrgWallHoleHiZ"								OtherZone:GrgWallHoleHiZ				=	{	Local(GrgWallBotZ) + (0.75 * Local(GrgWallHt))				}
;	"Set OtherZone:GrgWallHoleLoZ"								OtherZone:GrgWallHoleLoZ				=	{	Local(GrgWallBotZ) + (0.25 * Local(GrgWallHt))				}
;
;	"Create OtherZone:GrgWallAirNetIZXFERs[1]"				OtherZone:GrgWallAirNetIZXFERs[1]		=	{	if ( Local(GrgWallH) > 0. ) 
;																															then CreateComp( cseIZXFER, Local( Name ) + "-xGarageH")
;																															else UNDEFINED
;																															endif  }
;	"Set OtherZone:GrgWallAirNetIZXFERs[1]:izNVType"		OtherZone:GrgWallAirNetIZXFERs[1]:izNVType	=	{	3  }		; AIRNETIZ - Single opening to another zone
;	"Set OtherZone:GrgWallAirNetIZXFERs[1]:izZn1"			OtherZone:GrgWallAirNetIZXFERs[1]:izZn1		=	{	Local( CSE_ZONE )  }
;	"Set OtherZone:GrgWallAirNetIZXFERs[1]:izALo"			OtherZone:GrgWallAirNetIZXFERs[1]:izALo		=	{	Local( GrgWallH )  }
;	"Set OtherZone:GrgWallAirNetIZXFERs[1]:izHD"				OtherZone:GrgWallAirNetIZXFERs[1]:izHD   	=	{	Local( GrgWallHoleHiZ )  }
;	"Set OtherZone:GrgWallAirNetIZXFERs[1]:izNVEff"			OtherZone:GrgWallAirNetIZXFERs[1]:izNVEff	=	{	1.0  }
;	"Set OtherZone:GrgWallAirNetIZXFERs[1]:izExp"			OtherZone:GrgWallAirNetIZXFERs[1]:izExp  	=	{	0.65  }
;	"Set OtherZone:GrgWallAirNetIZXFERs[1]:izZN2"			OtherZone:GrgWallAirNetIZXFERs[1]:izZN2  	=	{	Global( Garage:CSE_ZONE )  }
;																					
;	"Create OtherZone:GrgWallAirNetIZXFERs[2]"				OtherZone:GrgWallAirNetIZXFERs[2]		=	{	if ( Local(GrgWallH) > 0. ) 
;																															then CreateComp( cseIZXFER, Local( Name ) + "-xGarageL")
;																															else UNDEFINED
;																															endif  }
;	"Set OtherZone:GrgWallAirNetIZXFERs[2]:izNVType"		OtherZone:GrgWallAirNetIZXFERs[2]:izNVType	=	{	3  }		; AIRNETIZ - Single opening to another zone
;	"Set OtherZone:GrgWallAirNetIZXFERs[2]:izZn1"			OtherZone:GrgWallAirNetIZXFERs[2]:izZn1		=	{	Local( CSE_ZONE )  }
;	"Set OtherZone:GrgWallAirNetIZXFERs[2]:izALo"			OtherZone:GrgWallAirNetIZXFERs[2]:izALo		=	{	Local( GrgWallH )  }
;	"Set OtherZone:GrgWallAirNetIZXFERs[2]:izHD"				OtherZone:GrgWallAirNetIZXFERs[2]:izHD   	=	{	Local( GrgWallHoleLoZ )  }
;	"Set OtherZone:GrgWallAirNetIZXFERs[2]:izNVEff"			OtherZone:GrgWallAirNetIZXFERs[2]:izNVEff	=	{	1.0  }
;	"Set OtherZone:GrgWallAirNetIZXFERs[2]:izExp"			OtherZone:GrgWallAirNetIZXFERs[2]:izExp  	=	{	0.65  }
;	"Set OtherZone:GrgWallAirNetIZXFERs[2]:izZN2"			OtherZone:GrgWallAirNetIZXFERs[2]:izZN2  	=	{	Global( Garage:CSE_ZONE )  }

 ;-----------------------
 ; AirNet for IAQ Ventilation
 ;-----------------------
	;   IAQ ventilation  For MF flows may be summed accross units being modelled together in a single zone with W/CFM and ASEF flow weighted.  130517
	;       Inputs for each zone
	;         IAQVentCFM     	// CFM of IAQ vent   
	;         IAQfanWperCFM  	// W/CFM of IAQ vent   
	;         Type IAQExhaust     	// "IAQExhaust", "IAQSupply", "IAQBalanced" "NoIAQVent"
	;	 ASEF     	// If type is IAQBalanced, the apparent sensible effectiveness, fraction (includes fan heat).  Range 0 - 1, default 0  130517
	;		Write Airnet Objects to CSE Input		
	;    
	;	 If Exhaust 
	;	    IZXFER (Zone)IAQfan izNVTYPE = AirNetExtFan izZN1 = (Zone) izVFmin=-IAQVentCFM izVFmax=-IAQVentCFM izFanVfDs=IAQVentCFM izFanElecPwr=IAQfanWperCFM izFanMtr=IAQventMtr
	;	
	;	 If IAQSupply
	;            IZXFER (Zone)IAQfan izNVTYPE = AirNetExtFan izZN1 = (Zone) izVFmin=IAQVentCFM izVFmax=-IAQVentCFM izFanVfDs=IAQVentCFM izFanElecPwr=IAQfanWperCFM izFanMtr=IAQventMtr
	;	
	;	 If IAQBalanced  // Balanced or Heat recovery ventilator 130517
	;	     IZXFER (Zone)IAQHRV  izNVTYPE = AIRNETHERV izZN1 = (Zone) izFanVFDS = IAQVentCFM  izFanElecPwr=IAQfanWperCFM izFanMtr=IAQventMtr izASEF=ASEF  

	;					where:		0, HVACFan:IAQFanType,  1
	;									2,              1,    "Exhaust"
	;									2,              2,    "Supply"
	;									2,              3,    "Balanced"

	"Create OtherZone:IAQVentAirNetIZXFERs[1] (supply)"		OtherZone:IAQVentAirNetIZXFERs[1]	= {	if (IAQCFM_Supply[1] <= 0 .OR. IAQPwr_Supply[1] <= 0) then  UNCHANGED
																														else  CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-IAQFanS" )  endif  }
	"Set OtherZone:IAQVentAirNetIZXFERs[1]:izNVType"			OtherZone:IAQVentAirNetIZXFERs[1]:izNVType		=	{	6  }		; AIRNETEXTFAN  - Fan from exterior to zone
	"Set OtherZone:IAQVentAirNetIZXFERs[1]:izZn1"				OtherZone:IAQVentAirNetIZXFERs[1]:izZn1			=	{	CSE_ZONE  }
	"Set OtherZone:IAQVentAirNetIZXFERs[1]:izVFmin"			OtherZone:IAQVentAirNetIZXFERs[1]:izVFmin		=	{	IAQCFM_Supply[1] * ValidOr( IAQCFMScaleFactor, 1 )  }
	"Set OtherZone:IAQVentAirNetIZXFERs[1]:izVFmax"			OtherZone:IAQVentAirNetIZXFERs[1]:izVFmax   	=	{	IAQCFM_Supply[1] * ValidOr( IAQCFMScaleFactor, 1 )  }
	"Set OtherZone:IAQVentAirNetIZXFERs[1]:izFanVfDs"			OtherZone:IAQVentAirNetIZXFERs[1]:izFanVfDs 	=	{	IAQCFM_Supply[1] * ValidOr( IAQCFMScaleFactor, 1 )  }
	"Set OtherZone:IAQVentAirNetIZXFERs[1]:izFanElecPwr"		OtherZone:IAQVentAirNetIZXFERs[1]:izFanElecPwr	=	{	IAQPwr_Supply[1] * ValidOr( IAQPwrScaleFactor, 1 ) / IAQCFM_Supply[1]   }
	"Set OtherZone:IAQVentAirNetIZXFERs[1]:izFanMtr"			OtherZone:IAQVentAirNetIZXFERs[1]:izFanMtr  	=	{	Proj:CSE_ElecMETER  }
	"Set OtherZone:IAQVentAirNetIZXFERs[1]:izFanEndUse"		OtherZone:IAQVentAirNetIZXFERs[1]:izFanEndUse	=	{	"FANV"          }

	"Create OtherZone:IAQVentAirNetIZXFERs[2] (exhaust)"		OtherZone:IAQVentAirNetIZXFERs[2]	= {	if (IAQCFM_Exhaust[1] <= 0 .OR. IAQPwr_Exhaust[1] <= 0) then  UNCHANGED
																														else  CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-IAQFanE" )  endif  }
	"Set OtherZone:IAQVentAirNetIZXFERs[2]:izNVType"			OtherZone:IAQVentAirNetIZXFERs[2]:izNVType		=	{	6  }		; AIRNETEXTFAN  - Fan from exterior to zone
	"Set OtherZone:IAQVentAirNetIZXFERs[2]:izZn1"				OtherZone:IAQVentAirNetIZXFERs[2]:izZn1			=	{	CSE_ZONE  }
	"Set OtherZone:IAQVentAirNetIZXFERs[2]:izVFmin"			OtherZone:IAQVentAirNetIZXFERs[2]:izVFmin		=	{	IAQCFM_Exhaust[1] * -1 * ValidOr( IAQCFMScaleFactor, 1 )  }
	"Set OtherZone:IAQVentAirNetIZXFERs[2]:izVFmax"			OtherZone:IAQVentAirNetIZXFERs[2]:izVFmax   	=	{	IAQCFM_Exhaust[1] * -1 * ValidOr( IAQCFMScaleFactor, 1 )  }
	"Set OtherZone:IAQVentAirNetIZXFERs[2]:izFanVfDs"			OtherZone:IAQVentAirNetIZXFERs[2]:izFanVfDs 	=	{	IAQCFM_Exhaust[1]      * ValidOr( IAQCFMScaleFactor, 1 )  }
	"Set OtherZone:IAQVentAirNetIZXFERs[2]:izFanElecPwr"		OtherZone:IAQVentAirNetIZXFERs[2]:izFanElecPwr	=	{	IAQPwr_Exhaust[1]      * ValidOr( IAQPwrScaleFactor, 1 ) / IAQCFM_Exhaust[1]   }
	"Set OtherZone:IAQVentAirNetIZXFERs[2]:izFanMtr"			OtherZone:IAQVentAirNetIZXFERs[2]:izFanMtr  	=	{	Proj:CSE_ElecMETER  }
	"Set OtherZone:IAQVentAirNetIZXFERs[2]:izFanEndUse"		OtherZone:IAQVentAirNetIZXFERs[2]:izFanEndUse	=	{	"FANV"          }

	"Create OtherZone:IAQVentAirNetIZXFERs[3] (balanced)"	OtherZone:IAQVentAirNetIZXFERs[3]	= {	if (IAQHRVCFM[1] <= 0 .OR. IAQHRVPwr[1] <= 0) then  UNCHANGED
																														else  CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-IAQHRV" )  endif  }
	"Set OtherZone:IAQVentAirNetIZXFERs[3]:izNVType"			OtherZone:IAQVentAirNetIZXFERs[3]:izNVType		=	{	10  }		; AIRNETHERV  - IAQ balanced / heat recovery ventilator
	"Set OtherZone:IAQVentAirNetIZXFERs[3]:izZn1"				OtherZone:IAQVentAirNetIZXFERs[3]:izZn1			=	{	CSE_ZONE  }
	"Set OtherZone:IAQVentAirNetIZXFERs[3]:izFanVfDs"			OtherZone:IAQVentAirNetIZXFERs[3]:izFanVfDs 	=	{	IAQHRVCFM[1] * ValidOr( IAQCFMScaleFactor, 1 )       }
	"Set OtherZone:IAQVentAirNetIZXFERs[3]:izFanElecPwr"		OtherZone:IAQVentAirNetIZXFERs[3]:izFanElecPwr	=	{	IAQHRVPwr[1] * ValidOr( IAQPwrScaleFactor, 1 ) / IAQHRVCFM[1]   }
	"Set OtherZone:IAQVentAirNetIZXFERs[3]:izASEF"				OtherZone:IAQVentAirNetIZXFERs[3]:izASEF			=
      {  if (IAQHRVCFMxRcvEff[1] <= 0 .OR. IAQHRVCFMxRcvEff[1] > (IAQHRVCFM[1] * ValidOr( IAQCFMScaleFactor, 1 ) * 100) .OR.
             (IfValidAnd( IAQHRVCFMxSRE[1] > 0 ) .AND. IfValidAnd( IAQHRVCFMxASRE[1] >= IAQHRVCFMxSRE[1] ))) then  UNDEFINED
         else  (IAQHRVCFMxRcvEff[1] / (IAQHRVCFM[1] * ValidOr( IAQCFMScaleFactor, 1 ))) / 100  endif  }
	"Set OtherZone:IAQVentAirNetIZXFERs[3]:izSRE"				OtherZone:IAQVentAirNetIZXFERs[3]:izSRE			=        ; SAC 10/21/19
      {  if (IfValidAnd( IAQHRVCFMxSRE[1] > 0 ) .AND. IfValidAnd( IAQHRVCFMxASRE[1] >= IAQHRVCFMxSRE[1] ))
         then  (IAQHRVCFMxSRE[1] / (IAQHRVCFM[1] * ValidOr( IAQCFMScaleFactor, 1 ))) / 100
         else  UNDEFINED  endif  }
	"Set OtherZone:IAQVentAirNetIZXFERs[3]:izASRE"				OtherZone:IAQVentAirNetIZXFERs[3]:izASRE			=
      {  if (IfValidAnd( IAQHRVCFMxSRE[1] > 0 ) .AND. IfValidAnd( IAQHRVCFMxASRE[1] >= IAQHRVCFMxSRE[1] ))
         then  (IAQHRVCFMxASRE[1] / (IAQHRVCFM[1] * ValidOr( IAQCFMScaleFactor, 1 ))) / 100
         else  UNDEFINED  endif  }
	"Set OtherZone:IAQVentAirNetIZXFERs[3]:izFanMtr"			OtherZone:IAQVentAirNetIZXFERs[3]:izFanMtr  	=	{	Proj:CSE_ElecMETER  }
	"Set OtherZone:IAQVentAirNetIZXFERs[3]:izFanEndUse"		OtherZone:IAQVentAirNetIZXFERs[3]:izFanEndUse	=	{	"FANV"          }


; ;-----------------------
; ; AirNet for Cooling Ventilation (whole house fan / economizer / night breeze)
; ;-----------------------
;   "Log invalid WHF generation issue"     OtherZone:Action  =
;      {  if (ClVentAirFlow[1] > 0 .AND. ClVentPower[1] > 0 .AND. Proj:IsMultiFamily < 1)
;         then  if (ComponentCount( Attic ) < 1)
;               then  PostWarning( "OtherZone '%s' should be modeled with whole house fan, but cannot be due to no Attic present.", Name )
;               else  if (IfValidAnd( Proj:CondFloorArea > 1 ))
;                     then  if ((SumAll( Attic:FloorAreaOverCond ) / Proj:CondFloorArea) < 0.1)
;                           then  PostWarning( "OtherZone '%s' should be modeled with whole house fan, but cannot be due to Attic not adjacent to at least 10% of overall conditioned floor area.", Name )
;                           else  UNCHANGED  endif
;                     else  UNCHANGED  endif
;               endif
;         else  UNCHANGED  endif  }
;   "Call subordinate rulelist to setup ClVent IZXFER object(s) to ATTIC"   OtherZone:Action  =
;      {  if (ClVentAirFlow[1] < 0.1 .OR. ClVentPower[1] < 0.1) then  UNCHANGED
;         else if (LocalCompAssigned( MaxClVentableAttic ) > 0.5)
;         then  if (IfValidAnd( Proj:CondFloorArea > 1 ) .AND. LocalCompAssigned( MaxClVentableAttic:CSE_ZONE ) > 0.5)
;               then  if ((SumAll( Attic:FloorAreaOverCond ) / Proj:CondFloorArea) >= 0.1)
;                     then  EvalRulelist( "SimPrep_CSE_AirNet_OtherZone_WholeHouseFan_ToAttic", 1 )
;                     else  UNCHANGED  endif
;               else  UNCHANGED  endif
;         else  UNCHANGED  endif endif  }
;   "Call subordinate rulelist to setup ClVent IZXFER object(s) to OUTSIDE"   OtherZone:Action  =
;      {  if (ClVentAirFlow[2] < 0.1 .OR. ClVentPower[2] < 0.1) then  UNCHANGED
;         else if (Proj:IsMultiFamily < 1 .AND. IfValidAnd( Proj:CondFloorArea > 1 ))
;         then  EvalRulelist( "SimPrep_CSE_AirNet_OtherZone_WholeHouseFan_ToOutside", 1 )
;         else  UNCHANGED  endif endif  }
;
;   "Call subordinate rulelist to setup ClVent IZXFER object to model WHF damper to outside (for ClVent to outside)"     ; SAC 1/20/19 (tic #1040)
;      OtherZone:Action  = {  if (ClVentAirFlow[2] > 0 .AND. ClVentPower[2] > 0 .AND.
;                            IfValidAnd( Proj:CondFloorArea > 1 ))
;                        then  EvalRulelist( "SimPrep_CSE_AirNet_OtherZone_WholeHouseFan_OutsideDamper", 1 )
;                        else  UNCHANGED  endif  }
END

;;*************************************************************************
;RULELIST "SimPrep_CSE_AirNet_OtherZone_WholeHouseFan_ToAttic" 0 0 0 1
;;*************************************************************************
;	; from AirNetAlogorithm9.txt:
;	;	7.  Mechanical Cooling Ventilation   //  The following does not work for multi-zone systems with Econ, NightBreeze.  Revise along with ducts model
;	;		For each Cooling Ventilation System
;	;		Inputs 
;	;	         CoolVentType		//type of MECHANICAL cooling ventilation,  Choice of WHF, Econ, NightBreeze
;	;		 CoolVentCFM		//Rated air flow of the mechanical cooling system
;	;		 CoolVent W/CFM		// 
;	;		 ReturnRegister		// If WHF the conditoned zone where it is located
;	;		 
;	;		 Calculate
;	;			Relief = CoolVentCFM/375  // The minimum size of the attic vents required to let the WHF flow out of the attic
;	;			
;	;		If WHF  		// Whole House Fan
;	;		   Calculate
;	;		   	Relief = CoolVentCFM/375  // The minimum size of the attic vent required for this fan to let the WHF flow out of the attic
;	;		   Write Airnet Objects to CSE Input
;	;		   	       	IZXFER (Zone)WHF izNVTYPE=AirNetIZFan izZN1=(Zone) izVFmin=0. izVFMax=-CoolVentCFM*Win_hr izFanVfDs=CoolVentCFM izZn2=Attic izFanElecPwr=CoolVentWperCFM izFanMtr=CoolVentMtr
;
;	"Create OtherZone:ClVentAirNetIZXFERs[1] (WHF)"			OtherZone:ClVentAirNetIZXFERs[1]					= {	CreateComp( cseIZXFER, Local( Name ) + "-WHF2Atc" )  }
;	"Set OtherZone:ClVentAirNetIZXFERs[1]:izNVType"			OtherZone:ClVentAirNetIZXFERs[1]:izNVType		= {	7 	}	; AIRNETIZFAN  - Fan between two zones
;	"Set OtherZone:ClVentAirNetIZXFERs[1]:izZn1"				OtherZone:ClVentAirNetIZXFERs[1]:izZn1			= {	CSE_ZONE  }
;	"Set OtherZone:ClVentAirNetIZXFERs[1]:izZn2"				OtherZone:ClVentAirNetIZXFERs[1]:izZn2			= {	MaxClVentableAttic:CSE_ZONE  }
;	"Set OtherZone:ClVentAirNetIZXFERs[1]:izVFmin"				OtherZone:ClVentAirNetIZXFERs[1]:izVFmin			= {	0         }
;
;	"Set OtherZone:ClVentAirNetIZXFERs[1]:izVFmax_x"			OtherZone:ClVentAirNetIZXFERs[1]:izVFmax_x 		= {
;         Format( "%.1f * WINDOWVENTAVAIL * FANVENTAVAIL", ((ClVentAirFlow[1] * ValidOr( ClVentVerifMult, 1 ) * Proj:ClVentAirFlowMult /
;                     T24RClimateZoneCodeBase:WHFcfmdivisor( "ClimateZone", Proj:ClimateZone, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )) * -1) )  }
;	"Set OtherZone:ClVentAirNetIZXFERs[1]:izFanVfDs"			OtherZone:ClVentAirNetIZXFERs[1]:izFanVfDs 		= {
;         ClVentAirFlow[1] * ValidOr( ClVentVerifMult, 1 ) * Proj:ClVentAirFlowMult /
;                     T24RClimateZoneCodeBase:WHFcfmdivisor( "ClimateZone", Proj:ClimateZone, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )  }
;
;	"Set OtherZone:ClVentAirNetIZXFERs[1]:izFanElecPwr"		OtherZone:ClVentAirNetIZXFERs[1]:izFanElecPwr	= {	ClVentPower[1] / ClVentAirFlow[1]   }
;	"Set OtherZone:ClVentAirNetIZXFERs[1]:izFanMtr"			OtherZone:ClVentAirNetIZXFERs[1]:izFanMtr  		= {	Proj:CSE_ElecMETER  }
;	"Set OtherZone:ClVentAirNetIZXFERs[1]:izFanEndUse"		OtherZone:ClVentAirNetIZXFERs[1]:izFanEndUse	= {	"FANC"          }
;END
;;*************************************************************************
;RULELIST "SimPrep_CSE_AirNet_OtherZone_WholeHouseFan_ToOutside" 0 0 0 1
;;*************************************************************************
;	"Create OtherZone:ClVentAirNetIZXFERs[1] (WHF)"			OtherZone:ClVentAirNetIZXFERs[1]					= {	CreateComp( cseIZXFER, Local( Name ) + "-WHF2Out" )  }
;	"Set OtherZone:ClVentAirNetIZXFERs[1]:izNVType"			OtherZone:ClVentAirNetIZXFERs[1]:izNVType		= {	6  }   ; AIRNETEXTFAN - Fan from exterior to zone
;	"Set OtherZone:ClVentAirNetIZXFERs[1]:izZn1"				OtherZone:ClVentAirNetIZXFERs[1]:izZn1			= {	CSE_ZONE   }
;	"Set OtherZone:ClVentAirNetIZXFERs[1]:izZn2"				OtherZone:ClVentAirNetIZXFERs[1]:izZn2			= {	UNDEFINED  }
;	"Set OtherZone:ClVentAirNetIZXFERs[1]:izVFmin"				OtherZone:ClVentAirNetIZXFERs[1]:izVFmin			= {	0          }
;
;	"Set OtherZone:ClVentAirNetIZXFERs[1]:izVFmax_x"			OtherZone:ClVentAirNetIZXFERs[1]:izVFmax_x 		= {
;         Format( "%.1f * WINDOWVENTAVAIL * FANVENTAVAIL", ((ClVentAirFlow[2] * ValidOr( ClVentVerifMult, 1 ) * Proj:ClVentAirFlowMult /
;                     T24RClimateZoneCodeBase:WHFcfmdivisor( "ClimateZone", Proj:ClimateZone, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )) * -1) )  }
;	"Set OtherZone:ClVentAirNetIZXFERs[1]:izFanVfDs"			OtherZone:ClVentAirNetIZXFERs[1]:izFanVfDs 		= {
;         ClVentAirFlow[2] * ValidOr( ClVentVerifMult, 1 ) * Proj:ClVentAirFlowMult /
;                     T24RClimateZoneCodeBase:WHFcfmdivisor( "ClimateZone", Proj:ClimateZone, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )  }
;
;	"Set OtherZone:ClVentAirNetIZXFERs[1]:izFanElecPwr"		OtherZone:ClVentAirNetIZXFERs[1]:izFanElecPwr	= {	ClVentPower[2] / ClVentAirFlow[2]   }
;	"Set OtherZone:ClVentAirNetIZXFERs[1]:izFanMtr"			OtherZone:ClVentAirNetIZXFERs[1]:izFanMtr  		= {	Proj:CSE_ElecMETER  }
;	"Set OtherZone:ClVentAirNetIZXFERs[1]:izFanEndUse"		OtherZone:ClVentAirNetIZXFERs[1]:izFanEndUse	= {	"FANC"          }
;END
;
;;*************************************************************************
;RULELIST "SimPrep_CSE_AirNet_OtherZone_WholeHouseFan_OutsideDamper" 0 0 0 1
;;*************************************************************************
;   "Create OtherZone:ClVentAirNetIZXFERs[3] (WHF outside damper)"      OtherZone:ClVentAirNetIZXFERs[3]  =
;      {  CreateComp( cseIZXFER, Local( Name ) + "-WHFdamper" )  }
;   "Set OtherZone:ClVentAirNetIZXFERs[3]:izNVType"   OtherZone:ClVentAirNetIZXFERs[3]:izNVType  = {  4  }       ; AIRNETEXT - Single opening to ambient
;   "Set OtherZone:ClVentAirNetIZXFERs[3]:izZn1"      OtherZone:ClVentAirNetIZXFERs[3]:izZn1     = {  CSE_ZONE  }
;   "Set OtherZone:ClVentAirNetIZXFERs[3]:izALo"      OtherZone:ClVentAirNetIZXFERs[3]:izALo     = {
;         0.10  }  ; constant??
;         ; ((Proj:BldgELA_CeilSF *ClVentableClgArea* 1.45) + 0.11 )* ClVentableArea / OtherZone:ClVentableClgArea  }
;   "Set OtherZone:ClVentAirNetIZXFERs[3]:izHD"       OtherZone:ClVentAirNetIZXFERs[3]:izHD      = {  OtherZone:ZoneTopZ  }
;   "Set OtherZone:ClVentAirNetIZXFERs[3]:izNVEff"    OtherZone:ClVentAirNetIZXFERs[3]:izNVEff   = {  1  }
;   "Set OtherZone:ClVentAirNetIZXFERs[3]:izExp"      OtherZone:ClVentAirNetIZXFERs[3]:izExp     = {  0.65  }
;END

;*************************************************************************
RULELIST "SimPrep_CSE_AirNet_OtherZone_ExtWall" 0 0 0 1
;*************************************************************************
	"Create OtherZone:AirNetIZXFERs[1] - WlLU"		OtherZone:AirNetIZXFERs[1]	= {	CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-InfLU", "Default_ZoneIZXFER" )  }
	"Create OtherZone:AirNetIZXFERs[2] - WlLS"		OtherZone:AirNetIZXFERs[2]	= {	CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-InfLS", "Default_ZoneIZXFER" )  }
	"Create OtherZone:AirNetIZXFERs[3] - WlLD"		OtherZone:AirNetIZXFERs[3]	= {	CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-InfLD", "Default_ZoneIZXFER" )  }
	"Create OtherZone:AirNetIZXFERs[4] - WlHU"		OtherZone:AirNetIZXFERs[4]	= {	CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-InfHU", "Default_ZoneIZXFER" )  }
	"Create OtherZone:AirNetIZXFERs[5] - WlHS"		OtherZone:AirNetIZXFERs[5]	= {	CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-InfHS", "Default_ZoneIZXFER" )  }
	"Create OtherZone:AirNetIZXFERs[6] - WlHD"		OtherZone:AirNetIZXFERs[6]	= {	CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-InfHD", "Default_ZoneIZXFER" )  }

	"Set OtherZone:AirNetIZXFERs[1]:izZn1 - WlLU"		OtherZone:AirNetIZXFERs[1]:izZn1	= {	Local( CSE_ZONE )  }
	"Set OtherZone:AirNetIZXFERs[2]:izZn1 - WlLS"		OtherZone:AirNetIZXFERs[2]:izZn1	= {	Local( CSE_ZONE )  }
	"Set OtherZone:AirNetIZXFERs[3]:izZn1 - WlLD"		OtherZone:AirNetIZXFERs[3]:izZn1	= {	Local( CSE_ZONE )  }
	"Set OtherZone:AirNetIZXFERs[4]:izZn1 - WlHU"		OtherZone:AirNetIZXFERs[4]:izZn1	= {	Local( CSE_ZONE )  }
	"Set OtherZone:AirNetIZXFERs[5]:izZn1 - WlHS"		OtherZone:AirNetIZXFERs[5]:izZn1	= {	Local( CSE_ZONE )  }
	"Set OtherZone:AirNetIZXFERs[6]:izZn1 - WlHD"		OtherZone:AirNetIZXFERs[6]:izZn1	= {	Local( CSE_ZONE )  }

	"Set OtherZone:AirNetIZXFERs[1]:izALo - WlLU"		OtherZone:AirNetIZXFERs[1]:izALo	= {	Local( WallHoleSize )      }
	"Set OtherZone:AirNetIZXFERs[2]:izALo - WlLS"		OtherZone:AirNetIZXFERs[2]:izALo	= {	Local( WallHoleSize ) * 2  }
	"Set OtherZone:AirNetIZXFERs[3]:izALo - WlLD"		OtherZone:AirNetIZXFERs[3]:izALo	= {	Local( WallHoleSize )      }
	"Set OtherZone:AirNetIZXFERs[4]:izALo - WlHU"		OtherZone:AirNetIZXFERs[4]:izALo	= {	Local( WallHoleSize )      }
	"Set OtherZone:AirNetIZXFERs[5]:izALo - WlHS"		OtherZone:AirNetIZXFERs[5]:izALo	= {	Local( WallHoleSize ) * 2  }
	"Set OtherZone:AirNetIZXFERs[6]:izALo - WlHD"		OtherZone:AirNetIZXFERs[6]:izALo	= {	Local( WallHoleSize )      }

	"Set OtherZone:AirNetIZXFERs[1]:izHD - WlLU"		OtherZone:AirNetIZXFERs[1]:izHD		= {	Local( ZoneBotZ ) + (0.25 * Local( ZoneHeight ))   }  ; max( 0.1, Local( ZoneBotZ ) + (0.25 * Local( ZoneHeight )) )  }
	"Set OtherZone:AirNetIZXFERs[2]:izHD - WlLS"		OtherZone:AirNetIZXFERs[2]:izHD		= {	Local( ZoneBotZ ) + (0.25 * Local( ZoneHeight ))   }  ; max( 0.1, Local( ZoneBotZ ) + (0.25 * Local( ZoneHeight )) )  }
	"Set OtherZone:AirNetIZXFERs[3]:izHD - WlLD"		OtherZone:AirNetIZXFERs[3]:izHD		= {	Local( ZoneBotZ ) + (0.25 * Local( ZoneHeight ))   }  ; max( 0.1, Local( ZoneBotZ ) + (0.25 * Local( ZoneHeight )) )  }
	"Set OtherZone:AirNetIZXFERs[4]:izHD - WlHU"		OtherZone:AirNetIZXFERs[4]:izHD		= {	Local( ZoneBotZ ) + (0.75 * Local( ZoneHeight ))   }  ; max( 0.1, Local( ZoneBotZ ) + (0.75 * Local( ZoneHeight )) )  }
	"Set OtherZone:AirNetIZXFERs[5]:izHD - WlHS"		OtherZone:AirNetIZXFERs[5]:izHD		= {	Local( ZoneBotZ ) + (0.75 * Local( ZoneHeight ))   }  ; max( 0.1, Local( ZoneBotZ ) + (0.75 * Local( ZoneHeight )) )  }
	"Set OtherZone:AirNetIZXFERs[6]:izHD - WlHD"		OtherZone:AirNetIZXFERs[6]:izHD		= {	Local( ZoneBotZ ) + (0.75 * Local( ZoneHeight ))   }  ; max( 0.1, Local( ZoneBotZ ) + (0.75 * Local( ZoneHeight )) )  }

	"Set OtherZone:AirNetIZXFERs[2]:izCpr - WlLS"		OtherZone:AirNetIZXFERs[2]:izCpr	= {	-0.65  }
	"Set OtherZone:AirNetIZXFERs[3]:izCpr - WlLD"		OtherZone:AirNetIZXFERs[3]:izCpr	= {	-0.3   }
	"Set OtherZone:AirNetIZXFERs[5]:izCpr - WlHS"		OtherZone:AirNetIZXFERs[5]:izCpr	= {	-0.65  }
	"Set OtherZone:AirNetIZXFERs[6]:izCpr - WlHD"		OtherZone:AirNetIZXFERs[6]:izCpr	= {	-0.3   }
END

;*************************************************************************
RULELIST "SimPrep_CSE_AirNet_OtherZone_Windows_1Story" 0 0 0 1
;*************************************************************************
	"Set OtherZone:WinHoleAreaExp[1]"		OtherZone:WinHoleAreaExp[1]	= {	Format( "%.3f * WINDOWVENTAVAIL", (Local( WinVentArea ) / 16) )  }
	"Set OtherZone:WinHoleAreaExp[2]"		OtherZone:WinHoleAreaExp[2]	= {	Format( "%.3f * WINDOWVENTAVAIL", (Local( WinVentArea ) /  8) )  }

	"Create OtherZone:WinAirNetIZXFERs[1] - WnLU"			OtherZone:WinAirNetIZXFERs[1]			= {	CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-NVLU", "Default_ZoneWinIZXFER" )  }
	"Create OtherZone:WinAirNetIZXFERs[2] - WnLS"			OtherZone:WinAirNetIZXFERs[2]			= {	CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-NVLS", "Default_ZoneWinIZXFER" )  }
	"Create OtherZone:WinAirNetIZXFERs[3] - WnLD"			OtherZone:WinAirNetIZXFERs[3]			= {	CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-NVLD", "Default_ZoneWinIZXFER" )  }
	"Create OtherZone:WinAirNetIZXFERs[4] - WnHU"			OtherZone:WinAirNetIZXFERs[4]			= {	CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-NVHU", "Default_ZoneWinIZXFER" )  }
	"Create OtherZone:WinAirNetIZXFERs[5] - WnHS"			OtherZone:WinAirNetIZXFERs[5]			= {	CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-NVHS", "Default_ZoneWinIZXFER" )  }
	"Create OtherZone:WinAirNetIZXFERs[6] - WnHD"			OtherZone:WinAirNetIZXFERs[6]			= {	CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-NVHD", "Default_ZoneWinIZXFER" )  }

	"Set OtherZone:WinAirNetIZXFERs[1]:izZn1 - WnLU"		OtherZone:WinAirNetIZXFERs[1]:izZn1	= {	Local( CSE_ZONE )  }
	"Set OtherZone:WinAirNetIZXFERs[2]:izZn1 - WnLS"		OtherZone:WinAirNetIZXFERs[2]:izZn1	= {	Local( CSE_ZONE )  }
	"Set OtherZone:WinAirNetIZXFERs[3]:izZn1 - WnLD"		OtherZone:WinAirNetIZXFERs[3]:izZn1	= {	Local( CSE_ZONE )  }
	"Set OtherZone:WinAirNetIZXFERs[4]:izZn1 - WnHU"		OtherZone:WinAirNetIZXFERs[4]:izZn1	= {	Local( CSE_ZONE )  }
	"Set OtherZone:WinAirNetIZXFERs[5]:izZn1 - WnHS"		OtherZone:WinAirNetIZXFERs[5]:izZn1	= {	Local( CSE_ZONE )  }
	"Set OtherZone:WinAirNetIZXFERs[6]:izZn1 - WnHD"		OtherZone:WinAirNetIZXFERs[6]:izZn1	= {	Local( CSE_ZONE )  }

	"Set OtherZone:WinAirNetIZXFERs[1]:izAHi_x - WnLU"	OtherZone:WinAirNetIZXFERs[1]:izAHi_x	= {	Local( WinHoleAreaExp[1] )  }
	"Set OtherZone:WinAirNetIZXFERs[2]:izAHi_x - WnLS"	OtherZone:WinAirNetIZXFERs[2]:izAHi_x	= {	Local( WinHoleAreaExp[2] )  }
	"Set OtherZone:WinAirNetIZXFERs[3]:izAHi_x - WnLD"	OtherZone:WinAirNetIZXFERs[3]:izAHi_x	= {	Local( WinHoleAreaExp[1] )  }
	"Set OtherZone:WinAirNetIZXFERs[4]:izAHi_x - WnHU"	OtherZone:WinAirNetIZXFERs[4]:izAHi_x	= {	Local( WinHoleAreaExp[1] )  }
	"Set OtherZone:WinAirNetIZXFERs[5]:izAHi_x - WnHS"	OtherZone:WinAirNetIZXFERs[5]:izAHi_x	= {	Local( WinHoleAreaExp[2] )  }
	"Set OtherZone:WinAirNetIZXFERs[6]:izAHi_x - WnHD"	OtherZone:WinAirNetIZXFERs[6]:izAHi_x	= {	Local( WinHoleAreaExp[1] )  }

	"Set OtherZone:WinAirNetIZXFERs[1]:izHD - WnLU"		OtherZone:WinAirNetIZXFERs[1]:izHD		= {	if (WinVentHtDiff[1] < -900 .OR. Proj:BypassRuleLimits < 0.5)
																														then	Local( WinHHTopUse[2] ) - 3                                  ; max( 0.1, Local( WinHHTopUse[2] ) - 3 )                   
																														else	Local( WinHHTopUse[2] ) - 3 + WinVentHtDiff[1]   endif  }    ; max( 0.1, Local( WinHHTopUse[2] ) - 3 + WinVentHtDiff[1] )
	"Set OtherZone:WinAirNetIZXFERs[2]:izHD - WnLS"		OtherZone:WinAirNetIZXFERs[2]:izHD		= {	if (WinVentHtDiff[1] < -900 .OR. Proj:BypassRuleLimits < 0.5)
																														then	Local( WinHHTopUse[2] ) - 3 
																														else	Local( WinHHTopUse[2] ) - 3 + WinVentHtDiff[1]   endif  }
	"Set OtherZone:WinAirNetIZXFERs[3]:izHD - WnLD"		OtherZone:WinAirNetIZXFERs[3]:izHD		= {	if (WinVentHtDiff[1] < -900 .OR. Proj:BypassRuleLimits < 0.5)
																														then	Local( WinHHTopUse[2] ) - 3 
																														else	Local( WinHHTopUse[2] ) - 3 + WinVentHtDiff[1]   endif  }
	"Set OtherZone:WinAirNetIZXFERs[4]:izHD - WnHU"		OtherZone:WinAirNetIZXFERs[4]:izHD		= {	if (WinVentHtDiff[2] < -900 .OR. Proj:BypassRuleLimits < 0.5)
																														then	Local( WinHHTopUse[2] ) - 1 
																														else	Local( WinHHTopUse[2] ) - 1 + WinVentHtDiff[2]   endif  }
	"Set OtherZone:WinAirNetIZXFERs[5]:izHD - WnHS"		OtherZone:WinAirNetIZXFERs[5]:izHD		= {	if (WinVentHtDiff[2] < -900 .OR. Proj:BypassRuleLimits < 0.5)
																														then	Local( WinHHTopUse[2] ) - 1 
																														else	Local( WinHHTopUse[2] ) - 1 + WinVentHtDiff[2]   endif  }
	"Set OtherZone:WinAirNetIZXFERs[6]:izHD - WnHD"		OtherZone:WinAirNetIZXFERs[6]:izHD		= {	if (WinVentHtDiff[2] < -900 .OR. Proj:BypassRuleLimits < 0.5)
																														then	Local( WinHHTopUse[2] ) - 1 
																														else	Local( WinHHTopUse[2] ) - 1 + WinVentHtDiff[2]   endif  }

	"Set OtherZone:WinAirNetIZXFERs[1]:izCpr - WnLU"		OtherZone:WinAirNetIZXFERs[1]:izCpr	= {	 0.6  * NatVentWindPresCoefMult  }     ; SAC 7/13/20
	"Set OtherZone:WinAirNetIZXFERs[2]:izCpr - WnLS"		OtherZone:WinAirNetIZXFERs[2]:izCpr	= {	-0.65 * NatVentWindPresCoefMult  }
	"Set OtherZone:WinAirNetIZXFERs[3]:izCpr - WnLD"		OtherZone:WinAirNetIZXFERs[3]:izCpr	= {	-0.3  * NatVentWindPresCoefMult  }
	"Set OtherZone:WinAirNetIZXFERs[4]:izCpr - WnHU"		OtherZone:WinAirNetIZXFERs[4]:izCpr	= {	 0.6  * NatVentWindPresCoefMult  }
	"Set OtherZone:WinAirNetIZXFERs[5]:izCpr - WnHS"		OtherZone:WinAirNetIZXFERs[5]:izCpr	= {	-0.65 * NatVentWindPresCoefMult  }
	"Set OtherZone:WinAirNetIZXFERs[6]:izCpr - WnHD"		OtherZone:WinAirNetIZXFERs[6]:izCpr	= {	-0.3  * NatVentWindPresCoefMult  }
END


;*************************************************************************
RULELIST "SimPrep_CSE_AirNet_Other" 0 0 0 1
;*************************************************************************

; SAC 8/29/13 - moved from "SimPrep_CSE_AirNet_Zone" rulelist (since rules here need to be evaluated on Proj as well as Zone)
 ;-----------------------
 ; AirNet for ceiling below attic in Conditioned Zone
 ;-----------------------
   ; d.  Ceiling
   ;    		Calculate
   ;           		If ceiling below attic
	;			ELA_Aceil(zone) = ELAceilsf * AceilGross(zone)  //knee walls to attic not included in determining the conditioned to attic leakage distribution of
	;		If Whole House fan, Ceiling leak through WWF when off   
	;		     	If Improved WHFAe = .05  //  Rev 11
	;		     	else  WHFAe = .11  // Rev 1
	;      		If ceiling to outside
   ;             		ELA_Xceil(zone) = ELAceilsf * AEdge(zone) + area of exterior ceilings(zone) 
   ;       
   ;       CeilHole     = ELA_Aceil(zone) + WHFAe //Ceil Hole size.  Rev 9
   ; 		  CathCeilHole = ELA_Xceil(zone)       //Cathedral Ceil  Hole size. Rev 9
   ;
   ;             Write Airnet Objects to CSE Input
   ;             
	;		IZXFER (ZoneName)xAttic  izNVTYPE = AirNetIZ  izZN1=(ZoneName) izALo=CeilHole     izHD = ZoneTopZ izNVEff=1. izExp=0.65 izZN2 = Attic 		Rev 9
   ;  	IZXFER (ZoneName)CC  	 izNVTYPE = AirNetExt izZN1=(ZoneName) izALo=CathCeilHole izHD = ZoneTopZ izNVEff=1. izExp=0.65    					Rev 9

  ; SAC 1/14/13 - removed logic adjusting WHFanHole based on "Improved" status - logic was referencing WRONG Std/Improved property.  Improved WHFan not yet provided in data model.
	"Init Zone:WHFanHole to 0"			Zone:WHFanHole			= {	0  }
	"Init OtherZone:WHFanHole to 0"	OtherZone:WHFanHole	= {	0  }     ; SAC 9/19/19 (MFamProto)
	"Set Whole house fan hole (for AirNet) - 1"
			Proj:UnitClVentZone[1]:WHFanHole = {	if (UnitClVentZone[1]:ClVentAirFlow[1] <= 0 .OR. EnableClVent < 0.5 .OR. UnitClVentOption == 3) then  UNCHANGED
																else if ((UnitClVentOption == 2 .AND. LocalCompAssigned( UnitClVentFan[1] )) .OR. UnitClVentOption == 1) then  0.11  else  UNCHANGED  endif endif  }
	"Set Whole house fan hole (for AirNet) - 2"
			Proj:UnitClVentZone[2]:WHFanHole = {	if (UnitClVentZone[2]:ClVentAirFlow[1] <= 0 .OR. EnableClVent < 0.5 .OR. UnitClVentOption != 2) then  UNCHANGED
																else if (LocalCompAssigned( UnitClVentFan[2] )) then  0.11  else  UNCHANGED  endif endif  }
	"Set Whole house fan hole (for AirNet) - 3"
			Proj:UnitClVentZone[3]:WHFanHole = {	if (UnitClVentZone[3]:ClVentAirFlow[1] <= 0 .OR. EnableClVent < 0.5 .OR. UnitClVentOption != 2) then  UNCHANGED
																else if (LocalCompAssigned( UnitClVentFan[3] )) then  0.11  else  UNCHANGED  endif endif  }
	"Set Whole house fan hole (for AirNet) - 4"
			Proj:UnitClVentZone[4]:WHFanHole = {	if (UnitClVentZone[4]:ClVentAirFlow[1] <= 0 .OR. EnableClVent < 0.5 .OR. UnitClVentOption != 2) then  UNCHANGED
																else if (LocalCompAssigned( UnitClVentFan[4] )) then  0.11  else  UNCHANGED  endif endif  }
	"Set Whole house fan hole (for AirNet) - 5"
			Proj:UnitClVentZone[5]:WHFanHole = {	if (UnitClVentZone[5]:ClVentAirFlow[1] <= 0 .OR. EnableClVent < 0.5 .OR. UnitClVentOption != 2) then  UNCHANGED
																else if (LocalCompAssigned( UnitClVentFan[5] )) then  0.11  else  UNCHANGED  endif endif  }
	"Set Whole house fan hole (for AirNet) - 6"
			Proj:UnitClVentZone[6]:WHFanHole = {	if (UnitClVentZone[6]:ClVentAirFlow[1] <= 0 .OR. EnableClVent < 0.5 .OR. UnitClVentOption != 2) then  UNCHANGED
																else if (LocalCompAssigned( UnitClVentFan[6] )) then  0.11  else  UNCHANGED  endif endif  }
; SAC 8/29/13 - replaced below w/ above and removed old zone cool vent system references to address GC issue 149
;	"Set Zone:WHFanHole - Whole house fan hole (for AirNet)"
;			Zone:WHFanHole	= {	if (LocalCompAssigned( CoolVentSystem ))
;										then  0.11
;							;			then	if (Proj:InsulConsQuality == 2) then  0.05		; improved
;							;					else  0.11
;							;					endif
;										else  0  endif  }

	; for Ceilings below attic -
; ; DEBUGGING
; 	"Debug log message - Zone:Type"							Zone:Action		= {	PostMessageToLog( "Zone '%s' Type = %g", Name, Type )  }
; 	"Debug log message - Zone:ELA_ACeil"					Zone:Action		= {	PostMessageToLog( "Zone '%s' ELA_ACeil = %g", Name, ELA_ACeil )  }
; 	"Debug log message - Zone:ZoneTopZ"						Zone:Action		= {	PostMessageToLog( "Zone '%s' ZoneTopZ = %g", Name, ZoneTopZ )  }
; 	"Debug log message - Attic count"						Proj:Action		= {	PostMessageToLog( "ComponentCount( Attic ) = %g", ComponentCount( Attic ) )  }
; 	"Debug log message - Attic:CSE_ZONE assignment"		Proj:Action		= {	PostMessageToLog( "GlobalCompAssigned( Attic:CSE_ZONE ) = %g", GlobalCompAssigned( Attic:CSE_ZONE ) )  }
;	"Create Zone:CeilAirNetIZXFERs[1] - xAttic"				Zone:CeilAirNetIZXFERs[1]	= {	if (Type == 10 .OR. ELA_ACeil <= 0 .OR. ZoneTopZ <= 0 .OR. ComponentCount( Attic ) < 1 .OR.
;																															 GlobalCompAssigned( Attic:CSE_ZONE ) == 0) then  UNDEFINED
;																														else  CreateComp( cseIZXFER, Local( Name ) + "-xAttic" )  endif  }
;	"Set Zone:CeilAirNetIZXFERs[1]:izZn1 - xAttic"			Zone:CeilAirNetIZXFERs[1]:izZn1		= {	Local( CSE_ZONE )  }
;	"Set Zone:CeilAirNetIZXFERs[1]:izNVType - xAttic"		Zone:CeilAirNetIZXFERs[1]:izNVType	= {	3  }		; AIRNETIZ" - Single opening to another zone
;	"Set Zone:CeilAirNetIZXFERs[1]:izALo - xAttic"			Zone:CeilAirNetIZXFERs[1]:izALo	 	= {	if (Global( Attic:Type ) == 1)
;																																	then	(ELA_ACeil * 1.45) * 10				; SAC 4/25/14 - crank up zone-attic hole for conditioned attics, since not sealed
;																																	else	(ELA_ACeil * 1.45) + WHFanHole  	; SAC 3/19/13 - excluded WHFanHole from 1.45 multiplication (from AirNetAlgorithm11.txt)
;																																	endif  }
;	"Set Zone:CeilAirNetIZXFERs[1]:izHD - xAttic"			Zone:CeilAirNetIZXFERs[1]:izHD   	= {	ZoneTopZ  }
;	"Set Zone:CeilAirNetIZXFERs[1]:izNVEff - xAttic"		Zone:CeilAirNetIZXFERs[1]:izNVEff  	= {	1  }
;	"Set Zone:CeilAirNetIZXFERs[1]:izExp - xAttic"			Zone:CeilAirNetIZXFERs[1]:izExp   	= {	0.65  }
;	"Set Zone:CeilAirNetIZXFERs[1]:izZN2 - xAttic"			Zone:CeilAirNetIZXFERs[1]:izZN2   	= {	Attic:CSE_ZONE  }
; SAC 10/16/14 - replaced above w/ following to accommodate multiple Attics
	"Create CeilingBelowAttic:CeilAirNetIZXFER - xAttic"			CeilingBelowAttic:CeilAirNetIZXFER	= {	if ((ParentComponentType() != "Zone" .AND. ParentComponentType() != "OtherZone") .OR.
	                                                                                                          LocalCompAssigned( AtticZone ) < 1 .OR. LocalCompAssigned( AtticZone:CSE_ZONE ) < 1) then  UNCHANGED
																																			else if (Parent( Type ) == 10 .OR. IfValidAnd( ELA_ACeil > 0 )==0 .OR. ZoneTopZ <= 0 .OR. Area < 0.1) then  UNDEFINED
																																			else  CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-xAttic" )  endif endif  }
	"Set CeilingBelowAttic:CeilAirNetIZXFER:izZn1 - xAttic"		CeilingBelowAttic:CeilAirNetIZXFER:izZn1		= {	Parent( CSE_ZONE )  }
	"Set CeilingBelowAttic:CeilAirNetIZXFER:izNVType - xAttic"	CeilingBelowAttic:CeilAirNetIZXFER:izNVType	= {	3  }		; AIRNETIZ" - Single opening to another zone

;	"Post debug message"    CeilingBelowAttic:Action = {
;PostMessageToLog( "      setting CeilingBelowAttic:CeilAirNetIZXFER:izALo -- Proj:BldgELA_CeilSF = %g / Area  = %g / Zone:WHFanHole = %g / ClVentableArea = %g / Zone:ClVentableClgArea = %g -- for ceiling '%s'",
;          Proj:BldgELA_CeilSF, Area, Zone:WHFanHole, ClVentableArea, Zone:ClVentableClgArea, Name )  }

	"Set CeilingBelowAttic:CeilAirNetIZXFER:izALo - xAttic"		CeilingBelowAttic:CeilAirNetIZXFER:izALo	 	=     ; added OtherZone NResLeakageRatio adjustment - SAC 11/30/20  ; removed 1.45 multiplier for AirNet Algorithm v14->15 update - SAC 10/09/23 (tic #1252)
			{		if (AtticZone:Type == 1 .OR. ClVentableArea < 0.1)
					then	(Proj:BldgELA_CeilSF * ClVentableClgArea      ) * 10						; SAC 4/25/14 - crank up zone-attic hole for conditioned attics, since not sealed
					else if (ParentComponentType() == "Zone")
					then	((Proj:BldgELA_CeilSF *ClVentableClgArea      ) + Zone:WHFanHole )* ClVentableArea / Zone:ClVentableClgArea  	; SAC 3/19/13 - excluded WHFanHole from 1.45 multiplication (from AirNetAlgorithm11.txt)
					else if (ParentComponentType() == "OtherZone")
					then	((Proj:BldgELA_CeilSF * ClVentableArea  * ValidOr( Proj:NResLeakageRatio, 1 ))  )   	; SAC 9/19/19 - OtherZone (MFamProto)   ; SAC 11/30/20
					else	(Proj:BldgELA_CeilSF *ClVentableClgArea       ) + WHFanHole 			; SAC 12/17/14 - generic IZXFER w/out any ClVent adjustment ??
					endif endif endif  }
	"Set CeilingBelowAttic:CeilAirNetIZXFER:izHD - xAttic"		CeilingBelowAttic:CeilAirNetIZXFER:izHD   	= {	if (ParentComponentType() == "OtherZone") then  OtherZone:ZoneTopZ
	                                                                                                               else  Zone:ZoneTopZ  endif  }
	"Set CeilingBelowAttic:CeilAirNetIZXFER:izNVEff - xAttic"	CeilingBelowAttic:CeilAirNetIZXFER:izNVEff  	= {	1  }
	"Set CeilingBelowAttic:CeilAirNetIZXFER:izExp - xAttic"		CeilingBelowAttic:CeilAirNetIZXFER:izExp   	= {	0.65  }
	"Set CeilingBelowAttic:CeilAirNetIZXFER:izZN2 - xAttic"		CeilingBelowAttic:CeilAirNetIZXFER:izZN2   	= {	AtticZone:CSE_ZONE  }

	; for Cathedral Ceilings -
	"Create Zone:CeilAirNetIZXFER - CC"				Zone:CeilAirNetIZXFER				= {	if (Type == 10 .OR. IfValidAnd( ELA_XCeil > 0 )==0 .OR. ZoneTopZ <= 0) then  UNDEFINED
																													else  CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-CC" )  endif  }
	"Set Zone:CeilAirNetIZXFER:izZn1 - CC"			Zone:CeilAirNetIZXFER:izZn1		= {	Local( CSE_ZONE )  }
	"Set Zone:CeilAirNetIZXFER:izNVType - CC"		Zone:CeilAirNetIZXFER:izNVType	= {	4  }		; AIRNETEXT - Single opening to ambient
;"Post debug message"    Zone:CeilAirNetIZXFER:Action = {
;PostMessageToLog( "      setting Zone:CeilAirNetIZXFER:izALo -- ELA_XCeil= %g-- '%s'",
;          ELA_XCeil, Name )  }
	"Set Zone:CeilAirNetIZXFER:izALo - CC"			Zone:CeilAirNetIZXFER:izALo	 	= {	ELA_XCeil  }      ; removed 1.45 multiplier for AirNet Algorithm v14->15 update - SAC 10/09/23 (tic #1252)
	"Set Zone:CeilAirNetIZXFER:izHD - CC"			Zone:CeilAirNetIZXFER:izHD   		= {	ZoneTopZ  }
	"Set Zone:CeilAirNetIZXFER:izNVEff - CC"		Zone:CeilAirNetIZXFER:izNVEff  	= {	1  }
	"Set Zone:CeilAirNetIZXFER:izExp - CC"			Zone:CeilAirNetIZXFER:izExp   	= {	0.65  }

	; for Cathedral Ceilings -   SAC 9/19/19 - OtherZone (MFamProto)
	"Create OtherZone:CeilAirNetIZXFER - CC"			OtherZone:CeilAirNetIZXFER				= {	if (Type == 10 .OR. IfValidAnd( ELA_XCeil > 0 )==0 .OR. ZoneTopZ <= 0) then  UNDEFINED
																															else  CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-CC" )  endif  }
	"Set OtherZone:CeilAirNetIZXFER:izZn1 - CC"		OtherZone:CeilAirNetIZXFER:izZn1		= {	Local( CSE_ZONE )  }
	"Set OtherZone:CeilAirNetIZXFER:izNVType - CC"	OtherZone:CeilAirNetIZXFER:izNVType	= {	4  }		; AIRNETEXT - Single opening to ambient
	"Set OtherZone:CeilAirNetIZXFER:izALo - CC"		OtherZone:CeilAirNetIZXFER:izALo	 	= {	ELA_XCeil  }      ; removed 1.45 multiplier for AirNet Algorithm v14->15 update - SAC 10/09/23 (tic #1252)
	"Set OtherZone:CeilAirNetIZXFER:izHD - CC"		OtherZone:CeilAirNetIZXFER:izHD   	= {	ZoneTopZ  }
	"Set OtherZone:CeilAirNetIZXFER:izNVEff - CC"	OtherZone:CeilAirNetIZXFER:izNVEff  = {	1  }
	"Set OtherZone:CeilAirNetIZXFER:izExp - CC"		OtherZone:CeilAirNetIZXFER:izExp   	= {	0.65  }


; SAC 4/18/13 - revised CoolVent whole house fan air net stuff to generate a single whole house fan per system, rather than per zone
 ;-----------------------
 ; AirNet for Cooling Ventilation (whole house fan / economizer / night breeze)
 ;-----------------------
; second gen mechanism that setup ClVent airnet by system - now replaced by mechanism by zone
;	"Call subordinate rulelist to setup ClVent IZXFER object(s)"
;			HVACSys:Action	= {	if (Type != 10 .OR. Proj:IsMultiFamily > 0.5 .OR. LocalCompAssigned( AirNet_CoolVentZone ) == 0) then  UNCHANGED
;										else if (LocalRef( Fan:Type ) == 2 .AND.		; Whole House Fan
;													LocalRef( Fan:CoolingVent ) > 0)
;										then  EvalRulelist( "SimPrep_CSE_AirNet_System_WholeHouseFan", 1 )
;										else  UNCHANGED  endif endif  }


 ;-----------------------
 ; CEILING AirNet
 ;-----------------------


 ;-----------------------
 ; EXTERIOR FLOOR AirNet
 ;-----------------------
 ;      2.  ELAraisedFloorsf   = ELAtot* (.2* 1-SlabRatio)/( ExFloortotSF-ExFloorSlabSF)
 ;
 ;	     e.  Floor over outside
 ;	            	For each floor over outside calculate       	     	
 ;           	     		ELAfloor(Name) = ELAraisedFloorsf * AreaExtfloor   (floors whose outside condition is Ambient)
 ;	     		Write Airnet Object to CSE Input
 ;	     			IZXFER (Name)  izNVTYPE = AirNetExt izZN1 = (ZoneName) izALo = ELAfloor(Name)  izHD = Floor Height izNVEff = 1 izExp=0.65 izCpr=0.  // located at the Extfloor elevation, no wind effect
 ;           
 ;           e.  Floor over Crawl
 ;	            	For each floor over outside calculate       	     	
 ;           	     		ELAfloor(Name) = ELAraisedFloorsf * AreaCrawlfloor   (floors whose outside condition is  Crawl)
 ;	     		Write Airnet Object to CSE Input
 ;	     			IZXFER (Name)xCrawl  izNVTYPE = AirNetIZ izZN1=(ZoneName) izALo=ELAfloor(Name) izHD = Floor Height izNVEff=1. izExp=0.65 izZN2 = Crawl 

; duplicate (but now out incomplete) of formula used in rule in 'Default_CSE_AirNet_ELA' rulelist - SAC 7/12/20
;   "Set Proj:BldgELA_RaisedFlrSF"	Proj:BldgELA_RaisedFlrSF	= {   if (Local( BldgExtFloorArea ) < 0.0001) then  0
;																							else  Local( EffLeakageArea ) * (0.2 * (  1 - Local( SlabRatio ))) /  Local( BldgExtFloorArea )  endif  }

   "Set ExteriorFloor:FloorELA_Ext"      ExteriorFloor:FloorELA_Ext      =    ; OtherZone adjustment - SAC 11/30/20   ; removed 1.45 multiplier for AirNet Algorithm v14->15 update - SAC 10/09/23 (tic #1252)
      {  if (IfValidAnd( Area > 0.1 )==0) then  -1
         else if (ParentComponentType() == "OtherZone")
         then  Proj:BldgELA_RaisedFlrSF * Area * ValidOr( Proj:NResLeakageRatio, 1 )
         else  Proj:BldgELA_RaisedFlrSF * Area
         endif endif  }
	"Create ExteriorFloor:AirNetIZXFER_Ext"			ExteriorFloor:AirNetIZXFER_Ext				= {	if (Local( FloorELA_Ext ) < 0.00001) then  UNCHANGED
																																	else  CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-Ext" )  endif  }
	"Set ExteriorFloor:AirNetIZXFER_Ext:izNVType"	ExteriorFloor:AirNetIZXFER_Ext:izNVType	= {	"AIRNETEXT"  }		; Single opening to ambient
	"Set ExteriorFloor:AirNetIZXFER_Ext:izZn1"		ExteriorFloor:AirNetIZXFER_Ext:izZn1		= {	Parent( CSE_ZONE )  }
	"Set ExteriorFloor:AirNetIZXFER_Ext:izALo"		ExteriorFloor:AirNetIZXFER_Ext:izALo		= {	Local( FloorELA_Ext )  }
	; SAC 11/18/14 - allow negative airnet hole positions
	"Set ExteriorFloor:AirNetIZXFER_Ext:izHD"			ExteriorFloor:AirNetIZXFER_Ext:izHD			= {	max( FloorZ, Parent( Bottom ) )  }   ; max( FloorZ, max( 0.1, Parent( Bottom ) ) )  }   ; SAC 1/26/13 - added reference to FloorZ
	"Set ExteriorFloor:AirNetIZXFER_Ext:izNVEff"		ExteriorFloor:AirNetIZXFER_Ext:izNVEff		= {	1.0   }
	"Set ExteriorFloor:AirNetIZXFER_Ext:izExp"		ExteriorFloor:AirNetIZXFER_Ext:izExp		= {	0.65  }
	"Set ExteriorFloor:AirNetIZXFER_Ext:izCpr"		ExteriorFloor:AirNetIZXFER_Ext:izCpr		= {	0.0   }

	"Set FloorOverCrawl:FloorELA_Crawl"		FloorOverCrawl:FloorELA_Crawl		=    ; OtherZone adjustment - SAC 11/30/20   ; removed 1.45 multiplier for AirNet Algorithm v14->15 update - SAC 10/09/23 (tic #1252)
      {  if (IfValidAnd( Area > 0.1 )==0) then  -1
         else if (ParentComponentType() == "OtherZone")
         then  Proj:BldgELA_RaisedFlrSF * Area * ValidOr( Proj:NResLeakageRatio, 1 )
         else  Proj:BldgELA_RaisedFlrSF * Area
         endif endif  }
	"Create FloorOverCrawl:AirNetIZXFER_Crl"			FloorOverCrawl:AirNetIZXFER_Crl				= {	if (Local( FloorELA_Crawl ) < 0.00001 .OR. ComponentCount( CrawlSpace ) < 0.5) then  UNCHANGED
																																	else  CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-Crawl" )  endif  }
	"Set FloorOverCrawl:AirNetIZXFER_Crl:izNVType"	FloorOverCrawl:AirNetIZXFER_Crl:izNVType	= {	"AIRNETIZ"  }			; Single opening to another zone
	"Set FloorOverCrawl:AirNetIZXFER_Crl:izZn1"		FloorOverCrawl:AirNetIZXFER_Crl:izZn1		= {	Parent( CSE_ZONE )  }
	"Set FloorOverCrawl:AirNetIZXFER_Crl:izALo"		FloorOverCrawl:AirNetIZXFER_Crl:izALo		= {	Local( FloorELA_Crawl )  }
	; SAC 11/18/14 - allow negative airnet hole positions
	"Set FloorOverCrawl:AirNetIZXFER_Crl:izHD"		FloorOverCrawl:AirNetIZXFER_Crl:izHD		= {	max( FloorZ, Parent( Bottom ) )  }   ; max( FloorZ, max( 0.1, Parent( Bottom ) ) )  }   ; SAC 1/26/13 - added reference to FloorZ
	"Set FloorOverCrawl:AirNetIZXFER_Crl:izNVEff"	FloorOverCrawl:AirNetIZXFER_Crl:izNVEff	= {	1.0   }
	"Set FloorOverCrawl:AirNetIZXFER_Crl:izExp"		FloorOverCrawl:AirNetIZXFER_Crl:izExp		= {	0.65  }
	"Set FloorOverCrawl:AirNetIZXFER_Crl:izZn2"		FloorOverCrawl:AirNetIZXFER_Crl:izZn2		= {	Global( CrawlSpace:CSE_ZONE )  }


 ;-----------------------
 ; ATTIC AirNet
 ;-----------------------
;	"Set Zone:AtticBottom"		Zone:AtticBottom	= {	if (SumChildren( CeilingBelowAttic:Area ) > 1) then  min( 99999, Local( ZoneTopZ ) )
;																		else  99999  endif  }
;	"Set Attic:Bottom"			Attic:Bottom		= {	MinAll( Zone:AtticBottom )  }
; SAC 10/16/14 - replaced above w/ below to accommodate multiple Attics
	"Set CeilingBelowAttic:AtticBottom"		CeilingBelowAttic:AtticBottom		= {
															if (LocalCompAssigned( AtticZone ) < 0.5) then  99999
															else if (ParentComponentType() == "Zone") then  min( 99999, Zone:ZoneTopZ )
															else if (ParentComponentType() == "OtherZone") then  min( 99999, OtherZone:ZoneTopZ )
															else if (ParentComponentType() == "Garage")
															then	if (IfValidAnd( Garage:Volume > 0.1 ) .AND. IfValidAnd( Garage:Area > 0.1 ) .AND. IfValidAnd( Garage:Bottom > -9999 ))
																	then	Garage:Bottom + (Garage:Volume / Garage:Area)
																	else  99999  endif
															else  99999  endif endif endif endif  }
	"Set Attic:Bottom"	Attic:Bottom	= {	MinRevRef( CeilingBelowAttic:AtticZone, CeilingBelowAttic:AtticBottom )  }

; SAC 12/28/14 - revised EvalRulelist() calls to include second argument of '1' so that those rules get evaluated ONLY on the active Attic.  W/o this, N times too many attic vents are created PER Attic, where N is the total # of attics
	"Setup Attic AirNet properties via subordinate rulelist"
			Attic:Action	 = {	if (Local( FloorArea ) > 0.1 .AND. Local( Bottom ) <= 99990)
										then	switch (Local( Type ))
													case  0 :	EvalRulelist( "SimPrep_CSE_AirNet_Attic_Vented", 1 )			; "Ventilated"
													case  1 :	EvalRulelist( "SimPrep_CSE_AirNet_Attic_Conditioned", 1 )	; "Conditioned"
													default :	UNCHANGED
												endswitch
										else	UNCHANGED  endif  }


 ;-----------------------
 ; Interior Floor over Garage AirNet
 ;-----------------------
 ; - based on Floor of a conditioned zone -
	"Set InteriorFloor:ELA_Floor"		InteriorFloor:ELA_Floor		 =    ; rev for OtherZone surfaces - SAC 11/30/20
      {	Proj:BldgELA_GarageSF * (ParCndZnAdjUZnArea + ParUZnAdjCndZnArea +
                                  (ValidOr( Proj:NResLeakageRatio, 1 ) * (ParCndOZnAdjUZnArea + ParUZnAdjCndOZnArea)))  }     ; removed 1.45 multiplier for AirNet Algorithm v14->15 update - SAC 10/09/23 (tic #1252)
	"Create CondZone/Garage IZXFER InteriorFloor:AirNetGarIZXFER"
			InteriorFloor:AirNetGarIZXFER		= {	if (ELA_Floor < 0.000001) then  UNCHANGED
																else  CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "xGarage" )  endif  }
	"Set InteriorFloor:AirNetGarIZXFER:izNVType"	InteriorFloor:AirNetGarIZXFER:izNVType	= {	"AIRNETIZ"  }		; Single opening to another zone
	"Set InteriorFloor:AirNetGarIZXFER:izZn1"		InteriorFloor:AirNetGarIZXFER:izZn1		= {	Parent( CSE_ZONE )  }
	"Set InteriorFloor:AirNetGarIZXFER:izALo"		InteriorFloor:AirNetGarIZXFER:izALo		= {	ELA_Floor  }
	; SAC 11/18/14 - allow negative airnet hole positions
	"Set InteriorFloor:AirNetGarIZXFER:izHD"		InteriorFloor:AirNetGarIZXFER:izHD		= {	if (LocalStatus( FloorZ ) > 0.1) then  FloorZ
																															else if (IfValidAnd( Outside:Volume > 0 ) && IfValidAnd( Outside:Area > 0 ))
																															then	Outside:Volume / Outside:Area
																															else  UNDEFINED  endif endif  }
																														;	if (FloorZ > 0.1) then	FloorZ	   ; SAC 1/26/13 - added reference to FloorZ
																														;	else if (LocalRef( Outside:Volume ) > 0 && LocalRef( Outside:Area ) > 0)
																														;	then	max( 0.1, LocalRef( Outside:Volume ) / LocalRef( Outside:Area ) )
																														;	else  UNDEFINED  endif endif  }
	"Set InteriorFloor:AirNetGarIZXFER:izNVEff"	InteriorFloor:AirNetGarIZXFER:izNVEff	= {	1.0   }
	"Set InteriorFloor:AirNetGarIZXFER:izExp"		InteriorFloor:AirNetGarIZXFER:izExp		= {	0.65  }
	"Set InteriorFloor:AirNetGarIZXFER:izZn2"		InteriorFloor:AirNetGarIZXFER:izZn2		= {	LocalRef( Outside:CSE_ZONE )   }     ; SAC 4/9/13 - fixed bug izCpr -> izZn2

 ; - based on Ceiling of a Garage zone -
	"Set InteriorCeiling:ELA_Floor"		InteriorCeiling:ELA_Floor		 =    ; rev for OtherZone surfaces - SAC 11/30/20
      {  Proj:BldgELA_GarageSF * (ParUZnAdjCndZnArea + (ValidOr( Proj:NResLeakageRatio, 1 ) * ParUZnAdjCndOZnArea))  }        ; removed 1.45 multiplier for AirNet Algorithm v14->15 update - SAC 10/09/23 (tic #1252)
	"Create CondZone/Garage IZXFER InteriorCeiling:AirNetGarIZXFER"
			InteriorCeiling:AirNetGarIZXFER	= {	if (ELA_Floor < 0.000001) then  UNCHANGED
																else  CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "xGarage" )  endif  }
	"Set InteriorCeiling:AirNetGarIZXFER:izNVType"	InteriorCeiling:AirNetGarIZXFER:izNVType	= {	"AIRNETIZ"  }		; Single opening to another zone
	"Set InteriorCeiling:AirNetGarIZXFER:izZn1"		InteriorCeiling:AirNetGarIZXFER:izZn1		= {	LocalRef( Outside:CSE_ZONE )  }
	"Set InteriorCeiling:AirNetGarIZXFER:izALo"		InteriorCeiling:AirNetGarIZXFER:izALo		= {	ELA_Floor  }
	; SAC 11/18/14 - allow negative airnet hole positions
	"Set InteriorCeiling:AirNetGarIZXFER:izHD"		InteriorCeiling:AirNetGarIZXFER:izHD		= {	if (Parent( Volume ) > 0 && Parent( Area ) > 0)
																																	then	Parent( Volume ) / Parent( Area )		; max( 0.1, Parent( Volume ) / Parent( Area ) )
																																	else  UNDEFINED  endif  }
	"Set InteriorCeiling:AirNetGarIZXFER:izNVEff"	InteriorCeiling:AirNetGarIZXFER:izNVEff	= {	1.0   }
	"Set InteriorCeiling:AirNetGarIZXFER:izExp"		InteriorCeiling:AirNetGarIZXFER:izExp		= {	0.65  }
	"Set InteriorCeiling:AirNetGarIZXFER:izZn2"		InteriorCeiling:AirNetGarIZXFER:izZn2		= {	Parent( CSE_ZONE )   }		; SAC 4/9/13 - fixed bug izCpr -> izZn2


 ;-----------------------
 ; AirNet for Garage zone
 ;-----------------------
 ;  Assume California garage with a water heater and combustion air vents so it is pretty leaky  Guess 1 ft2 of free area (ignore other infiltration)
 ;     IZXFER GarageU   izNVTYPE = AirNetExt   izZN1 = Garage   izALo = Gvent     izHD = GarageBotZ +1   izNVEff = .6   izExp=0.65   izCpr=0.6
 ;     IZXFER GarageS   izNVTYPE = AirNetExt   izZN1 = Garage   izALo = 2*Gvent   izHD = GarageBotZ +1   izNVEff = .6   izExp=0.65   izCpr=-.65
 ;     IZXFER GarageD   izNVTYPE = AirNetExt   izZN1 = Garage   izALo = Gvent     izHD = GarageBotZ +1   izNVEff = .6   izExp=0.65   izCpr=-0.3 
 ;     IZXFER GarageDH  izNVTYPE = AirNetExt   izZN1 = Garage   izALo = Gvent     izHD = GarageBotZ +8   izNVEff = .6   izExp=0.65   izCpr=-0.3   <<-- this one added from phone call w/ Bruce 1/31/13
 ;-----------------------
	"Set Garage:GrgVent"			Garage:GrgVent		= {	0.20  }

	"Create Garage:GrgAirNetIZXFERs[1]"				Garage:GrgAirNetIZXFERs[1]		=	{	if (Proj:HasGarage < 0.5 .OR. Volume < 1) then  UNDEFINED
																												else CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-GrgU")  endif  }
	"Set Garage:GrgAirNetIZXFERs[1]:izNVType"		Garage:GrgAirNetIZXFERs[1]:izNVType	= {	4  }   ; AIRNETEXT - Single opening to ambient
	"Set Garage:GrgAirNetIZXFERs[1]:izZn1"			Garage:GrgAirNetIZXFERs[1]:izZn1		= {	Local( CSE_ZONE )  }
	"Set Garage:GrgAirNetIZXFERs[1]:izALo"			Garage:GrgAirNetIZXFERs[1]:izALo		= {	GrgVent     }
	"Set Garage:GrgAirNetIZXFERs[1]:izHD"			Garage:GrgAirNetIZXFERs[1]:izHD		= {	Bottom + 1  }
	"Set Garage:GrgAirNetIZXFERs[1]:izNVEff"		Garage:GrgAirNetIZXFERs[1]:izNVEff  = {	 0.6   }
	"Set Garage:GrgAirNetIZXFERs[1]:izExp"			Garage:GrgAirNetIZXFERs[1]:izExp		= {	 0.65  }
	"Set Garage:GrgAirNetIZXFERs[1]:izCpr"			Garage:GrgAirNetIZXFERs[1]:izCpr		= {	 0.6   }

	"Create Garage:GrgAirNetIZXFERs[2]"				Garage:GrgAirNetIZXFERs[2]		=	{	if (Proj:HasGarage < 0.5 .OR. Volume < 1) then  UNDEFINED
																												else CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-GrgS")  endif  }
	"Set Garage:GrgAirNetIZXFERs[2]:izNVType"		Garage:GrgAirNetIZXFERs[2]:izNVType	= {	4  }   ; AIRNETEXT - Single opening to ambient
	"Set Garage:GrgAirNetIZXFERs[2]:izZn1"			Garage:GrgAirNetIZXFERs[2]:izZn1		= {	Local( CSE_ZONE )  }
	"Set Garage:GrgAirNetIZXFERs[2]:izALo"			Garage:GrgAirNetIZXFERs[2]:izALo		= {	GrgVent * 2  }
	"Set Garage:GrgAirNetIZXFERs[2]:izHD"			Garage:GrgAirNetIZXFERs[2]:izHD		= {	Bottom + 1   }
	"Set Garage:GrgAirNetIZXFERs[2]:izNVEff"		Garage:GrgAirNetIZXFERs[2]:izNVEff  = {	 0.6   }
	"Set Garage:GrgAirNetIZXFERs[2]:izExp"			Garage:GrgAirNetIZXFERs[2]:izExp		= {	 0.65  }
	"Set Garage:GrgAirNetIZXFERs[2]:izCpr"			Garage:GrgAirNetIZXFERs[2]:izCpr		= {	-0.65  }

	"Create Garage:GrgAirNetIZXFERs[3]"				Garage:GrgAirNetIZXFERs[3]		=	{	if (Proj:HasGarage < 0.5 .OR. Volume < 1) then  UNDEFINED
																												else CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-GrgD")  endif  }
	"Set Garage:GrgAirNetIZXFERs[3]:izNVType"		Garage:GrgAirNetIZXFERs[3]:izNVType	= {	4  }   ; AIRNETEXT - Single opening to ambient
	"Set Garage:GrgAirNetIZXFERs[3]:izZn1"			Garage:GrgAirNetIZXFERs[3]:izZn1		= {	Local( CSE_ZONE )  }
	"Set Garage:GrgAirNetIZXFERs[3]:izALo"			Garage:GrgAirNetIZXFERs[3]:izALo		= {	GrgVent     }
	"Set Garage:GrgAirNetIZXFERs[3]:izHD"			Garage:GrgAirNetIZXFERs[3]:izHD		= {	Bottom + 1  }
	"Set Garage:GrgAirNetIZXFERs[3]:izNVEff"		Garage:GrgAirNetIZXFERs[3]:izNVEff  = {	 0.6   }
	"Set Garage:GrgAirNetIZXFERs[3]:izExp"			Garage:GrgAirNetIZXFERs[3]:izExp		= {	 0.65  }
	"Set Garage:GrgAirNetIZXFERs[3]:izCpr"			Garage:GrgAirNetIZXFERs[3]:izCpr		= {	-0.3   }

	"Create Garage:GrgAirNetIZXFERs[4]"				Garage:GrgAirNetIZXFERs[4]		=	{	if (Proj:HasGarage < 0.5 .OR. Volume < 1) then  UNDEFINED
																												else CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-GrgDH")  endif  }
	"Set Garage:GrgAirNetIZXFERs[4]:izNVType"		Garage:GrgAirNetIZXFERs[4]:izNVType	= {	4  }   ; AIRNETEXT - Single opening to ambient
	"Set Garage:GrgAirNetIZXFERs[4]:izZn1"			Garage:GrgAirNetIZXFERs[4]:izZn1		= {	Local( CSE_ZONE )  }
	"Set Garage:GrgAirNetIZXFERs[4]:izALo"			Garage:GrgAirNetIZXFERs[4]:izALo		= {	GrgVent     }
	"Set Garage:GrgAirNetIZXFERs[4]:izHD"			Garage:GrgAirNetIZXFERs[4]:izHD		= {	Bottom + 8  }
	"Set Garage:GrgAirNetIZXFERs[4]:izNVEff"		Garage:GrgAirNetIZXFERs[4]:izNVEff  = {	 0.6   }
	"Set Garage:GrgAirNetIZXFERs[4]:izExp"			Garage:GrgAirNetIZXFERs[4]:izExp		= {	 0.65  }
	"Set Garage:GrgAirNetIZXFERs[4]:izCpr"			Garage:GrgAirNetIZXFERs[4]:izCpr		= {	-0.3   }


 ;-----------------------
 ; AirNet for CrawlSpace zone
 ;-----------------------
 ;  from AirNetAlgorithm12.txt  (3/27/13)
 ; 	c.  Crawl space.  Has wall leakage plus optional vents.  3 types of vent.  Leakage = 10 sq.in. per 1,000 sq.ft. of floor area.  10/(144*1000)/ft2 of crawl.  (rev 12)
 ; 	             CrawlWallHeight DEFAULT IS 0.75 FT.  Need new input on Crawlspace screen.
 ; 		          Assume no stack inside crawl so all vents at top of foundation concrete wall, 8" above ground = 0.67  (rev 12)
 ; 		 Calculate  CrwlLeak = Sum of (Floor areas over Crawl) * 0.00007
 ;  		 Write Wall leakage objects:	      
 ;  		      IZXFER CrwlWu  izNVTYPE = AirNetExt izZN1 = (CrawlName) izALo = CrwlLeak/4  izHD = 0.67  izNVEff = 1 izExp=0.65 izCpr=0.6 
 ;  		      IZXFER CrwlWs  izNVTYPE = AirNetExt izZN1 = (CrawlName) izALo = CrwlLeak/2  izHD = 0.67  izNVEff = 1 izExp=0.65 izCpr=-.65
 ;  		      IZXFER CrwlWd  izNVTYPE = AirNetExt izZN1 = (CrawlName) izALo = CrwlLeak/4  izHD = 0.67  izNVEff = 1 izExp=0.65 izCpr=-0.3
 ;  	      	 Vent area    CrwlV  for three crawl types:
 ;  		1.  Conventional vented Crawl. CrwlVent = Sum of (Floor areas over Crawl)/150
 ;  		2.  Reduced vent Crawl.  CrwlVent = Sum of (Floor areas over Crawl)/1500
 ;  		3.  Sealed Crawl    CrwlVent = 0  (May have an exhaust fan)
 ;  		Center of vent above grade -- assume 4" vent at top of conc wall, center is 10" above grade  (rev 12)
 ;  		Write Crawl Vent Objects to CSE Input
 ;  			IZXFER CrwlVU  izNVTYPE = AirNetExt izZN1 = (CrawlName) izALo = CrwlVent/4  izHD = 10/12  izNVEff = .6 izExp=0.65 izCpr=0.6 
 ;  			IZXFER CrwlVS  izNVTYPE = AirNetExt izZN1 = (CrawlName) izALo = CrwlVent/2  izHD = 10/12  izNVEff = .6 izExp=0.65 izCpr=-.65
 ;  			IZXFER CrwlVD  izNVTYPE = AirNetExt izZN1 = (CrawlName) izALo = CrwlVent/4  izHD = 10/12  izNVEff = .6 izExp=0.65 izCpr=-0.3
 ;-----------------------
	"Set CrawlSpace:WallLeakageArea"		CrawlSpace:WallLeakageArea		= {	Area * 0.00007  }     ; for ver. 11 was:  Area / 14400  }      ; updated 0.0001 multiplier to 0.00007 for AirNet Algorithm v14->15 update - SAC 10/09/23 (tic #1252)
	"Set CrawlSpace:VentArea"				CrawlSpace:VentArea				= {	switch (Type)
																										case 0 :	 Area /  150   ; "Normal (vented)"                   
																										case 1 :  Area / 1500   ; "Insulated w/ Reduced Ventilation"  
																										case 2 :  0             ; "Sealed and Mechanically Ventilated"
																										default:  0
																									endswitch  }
	"Set CrawlSpace:VentHeight"			CrawlSpace:VentHeight			= {	0.67  }		; for ver. 11 was:  0.66 + (AvgWallHeight - 0.66) / 2  }

  ; AirNet for CrawlSpace Walls
	"Create CrawlSpace:AirNetCSWallIZXFERs[1]"				CrawlSpace:AirNetCSWallIZXFERs[1]		=	{	if (LocalStatus( Area ) < 1 .OR. Area < 0.5) then  UNDEFINED
																																		else CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-WU")  endif  }
	"Set CrawlSpace:AirNetCSWallIZXFERs[1]:izNVType"		CrawlSpace:AirNetCSWallIZXFERs[1]:izNVType	= {	4  }   ; AIRNETEXT - Single opening to ambient
	"Set CrawlSpace:AirNetCSWallIZXFERs[1]:izZn1"			CrawlSpace:AirNetCSWallIZXFERs[1]:izZn1		= {	Local( CSE_ZONE )  }
	"Set CrawlSpace:AirNetCSWallIZXFERs[1]:izALo"			CrawlSpace:AirNetCSWallIZXFERs[1]:izALo		= {	WallLeakageArea / 4  }
	"Set CrawlSpace:AirNetCSWallIZXFERs[1]:izHD"				CrawlSpace:AirNetCSWallIZXFERs[1]:izHD			= {	VentHeight  }
	"Set CrawlSpace:AirNetCSWallIZXFERs[1]:izNVEff"			CrawlSpace:AirNetCSWallIZXFERs[1]:izNVEff		= {	 1.0   }
	"Set CrawlSpace:AirNetCSWallIZXFERs[1]:izExp"			CrawlSpace:AirNetCSWallIZXFERs[1]:izExp		= {	 0.65  }
	"Set CrawlSpace:AirNetCSWallIZXFERs[1]:izCpr"			CrawlSpace:AirNetCSWallIZXFERs[1]:izCpr		= {	 0.6   }

	"Create CrawlSpace:AirNetCSWallIZXFERs[2]"				CrawlSpace:AirNetCSWallIZXFERs[2]		=	{	if (LocalStatus( Area ) < 1 .OR. Area < 0.5) then  UNDEFINED
																																		else CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-WS")  endif  }
	"Set CrawlSpace:AirNetCSWallIZXFERs[2]:izNVType"		CrawlSpace:AirNetCSWallIZXFERs[2]:izNVType	= {	4  }   ; AIRNETEXT - Single opening to ambient
	"Set CrawlSpace:AirNetCSWallIZXFERs[2]:izZn1"			CrawlSpace:AirNetCSWallIZXFERs[2]:izZn1		= {	Local( CSE_ZONE )  }
	"Set CrawlSpace:AirNetCSWallIZXFERs[2]:izALo"			CrawlSpace:AirNetCSWallIZXFERs[2]:izALo		= {	WallLeakageArea / 2  }
	"Set CrawlSpace:AirNetCSWallIZXFERs[2]:izHD"				CrawlSpace:AirNetCSWallIZXFERs[2]:izHD			= {	VentHeight  }
	"Set CrawlSpace:AirNetCSWallIZXFERs[2]:izNVEff"			CrawlSpace:AirNetCSWallIZXFERs[2]:izNVEff		= {	 1.0   }
	"Set CrawlSpace:AirNetCSWallIZXFERs[2]:izExp"			CrawlSpace:AirNetCSWallIZXFERs[2]:izExp		= {	 0.65  }
	"Set CrawlSpace:AirNetCSWallIZXFERs[2]:izCpr"			CrawlSpace:AirNetCSWallIZXFERs[2]:izCpr		= {	-0.65  }

	"Create CrawlSpace:AirNetCSWallIZXFERs[3]"				CrawlSpace:AirNetCSWallIZXFERs[3]		=	{	if (LocalStatus( Area ) < 1 .OR. Area < 0.5) then  UNDEFINED
																																		else CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-WD")  endif  }
	"Set CrawlSpace:AirNetCSWallIZXFERs[3]:izNVType"		CrawlSpace:AirNetCSWallIZXFERs[3]:izNVType	= {	4  }   ; AIRNETEXT - Single opening to ambient
	"Set CrawlSpace:AirNetCSWallIZXFERs[3]:izZn1"			CrawlSpace:AirNetCSWallIZXFERs[3]:izZn1		= {	Local( CSE_ZONE )  }
	"Set CrawlSpace:AirNetCSWallIZXFERs[3]:izALo"			CrawlSpace:AirNetCSWallIZXFERs[3]:izALo		= {	WallLeakageArea / 4  }
	"Set CrawlSpace:AirNetCSWallIZXFERs[3]:izHD"				CrawlSpace:AirNetCSWallIZXFERs[3]:izHD			= {	VentHeight  }
	"Set CrawlSpace:AirNetCSWallIZXFERs[3]:izNVEff"			CrawlSpace:AirNetCSWallIZXFERs[3]:izNVEff		= {	 1.0   }
	"Set CrawlSpace:AirNetCSWallIZXFERs[3]:izExp"			CrawlSpace:AirNetCSWallIZXFERs[3]:izExp		= {	 0.65  }
	"Set CrawlSpace:AirNetCSWallIZXFERs[3]:izCpr"			CrawlSpace:AirNetCSWallIZXFERs[3]:izCpr		= {	-0.3   }


  ; AirNet for CrawlSpace Venting
  ; SAC 10/17/13 - added checks to prevent IZXFERs from being created when VentArea <= 0
	"Create CrawlSpace:AirNetCSVentIZXFERs[1]"				CrawlSpace:AirNetCSVentIZXFERs[1]		=	{	if (LocalStatus( Area ) < 1 .OR. Area < 0.5 .OR. VentArea <= 0) then  UNDEFINED
																																		else CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-VU")  endif  }
	"Set CrawlSpace:AirNetCSVentIZXFERs[1]:izNVType"		CrawlSpace:AirNetCSVentIZXFERs[1]:izNVType	= {	4  }   ; AIRNETEXT - Single opening to ambient
	"Set CrawlSpace:AirNetCSVentIZXFERs[1]:izZn1"			CrawlSpace:AirNetCSVentIZXFERs[1]:izZn1		= {	Local( CSE_ZONE )  }
	"Set CrawlSpace:AirNetCSVentIZXFERs[1]:izALo"			CrawlSpace:AirNetCSVentIZXFERs[1]:izALo		= {	VentArea / 4  }
	"Set CrawlSpace:AirNetCSVentIZXFERs[1]:izHD"				CrawlSpace:AirNetCSVentIZXFERs[1]:izHD			= {	VentHeight + 0.1667  }
	"Set CrawlSpace:AirNetCSVentIZXFERs[1]:izNVEff"			CrawlSpace:AirNetCSVentIZXFERs[1]:izNVEff		= {	 0.6   }
	"Set CrawlSpace:AirNetCSVentIZXFERs[1]:izExp"			CrawlSpace:AirNetCSVentIZXFERs[1]:izExp		= {	 0.65  }
	"Set CrawlSpace:AirNetCSVentIZXFERs[1]:izCpr"			CrawlSpace:AirNetCSVentIZXFERs[1]:izCpr		= {	 0.6   }

	"Create CrawlSpace:AirNetCSVentIZXFERs[2]"				CrawlSpace:AirNetCSVentIZXFERs[2]		=	{	if (LocalStatus( Area ) < 1 .OR. Area < 0.5 .OR. VentArea <= 0) then  UNDEFINED
																																		else CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-VS")  endif  }
	"Set CrawlSpace:AirNetCSVentIZXFERs[2]:izNVType"		CrawlSpace:AirNetCSVentIZXFERs[2]:izNVType	= {	4  }   ; AIRNETEXT - Single opening to ambient
	"Set CrawlSpace:AirNetCSVentIZXFERs[2]:izZn1"			CrawlSpace:AirNetCSVentIZXFERs[2]:izZn1		= {	Local( CSE_ZONE )  }
	"Set CrawlSpace:AirNetCSVentIZXFERs[2]:izALo"			CrawlSpace:AirNetCSVentIZXFERs[2]:izALo		= {	VentArea / 2  }
	"Set CrawlSpace:AirNetCSVentIZXFERs[2]:izHD"				CrawlSpace:AirNetCSVentIZXFERs[2]:izHD			= {	VentHeight + 0.1667  }
	"Set CrawlSpace:AirNetCSVentIZXFERs[2]:izNVEff"			CrawlSpace:AirNetCSVentIZXFERs[2]:izNVEff		= {	 0.6   }
	"Set CrawlSpace:AirNetCSVentIZXFERs[2]:izExp"			CrawlSpace:AirNetCSVentIZXFERs[2]:izExp		= {	 0.65  }
	"Set CrawlSpace:AirNetCSVentIZXFERs[2]:izCpr"			CrawlSpace:AirNetCSVentIZXFERs[2]:izCpr		= {	-0.65  }

	"Create CrawlSpace:AirNetCSVentIZXFERs[3]"				CrawlSpace:AirNetCSVentIZXFERs[3]		=	{	if (LocalStatus( Area ) < 1 .OR. Area < 0.5 .OR. VentArea <= 0) then  UNDEFINED
																																		else CreateComp( cseIZXFER, substr( Name, 0, 46 ) + "-VD")  endif  }
	"Set CrawlSpace:AirNetCSVentIZXFERs[3]:izNVType"		CrawlSpace:AirNetCSVentIZXFERs[3]:izNVType	= {	4  }   ; AIRNETEXT - Single opening to ambient
	"Set CrawlSpace:AirNetCSVentIZXFERs[3]:izZn1"			CrawlSpace:AirNetCSVentIZXFERs[3]:izZn1		= {	Local( CSE_ZONE )  }
	"Set CrawlSpace:AirNetCSVentIZXFERs[3]:izALo"			CrawlSpace:AirNetCSVentIZXFERs[3]:izALo		= {	VentArea / 4  }
	"Set CrawlSpace:AirNetCSVentIZXFERs[3]:izHD"				CrawlSpace:AirNetCSVentIZXFERs[3]:izHD			= {	VentHeight + 0.1667  }
	"Set CrawlSpace:AirNetCSVentIZXFERs[3]:izNVEff"			CrawlSpace:AirNetCSVentIZXFERs[3]:izNVEff		= {	 0.6   }
	"Set CrawlSpace:AirNetCSVentIZXFERs[3]:izExp"			CrawlSpace:AirNetCSVentIZXFERs[3]:izExp		= {	 0.65  }
	"Set CrawlSpace:AirNetCSVentIZXFERs[3]:izCpr"			CrawlSpace:AirNetCSVentIZXFERs[3]:izCpr		= {	-0.3   }


 ;-----------------------
 ; AirNet for Inter-Zone (conditioned) Doors & Stairs
 ;-----------------------
 ;  from AirNetAlgorithm12.txt  (3/27/13)
 ;  	5.  Interzone Holes  --  Assume an open door or stair between any 2 conditioned zones with common surfaces, except between units in multi-family
 ;  		If 2 or more conditioned zones 
 ;  			Error if not at least one common surface for every conditioned zone (a surface in zone A whose outside condition is another conditoned zone)
 ;  			Door calculation for each pair of zones with a common wall surface (zoneA<>zoneB, zoneB<>zoneC, zoneA<>zoneC, etc)
 ;  				DoortopZ 	= Min(ZoneTopZ(zone A),(ZoneTopZ(zone B))    	//The top of the shared wall
 ;  	              		DoorBotZ 	= Max(ZoneBotZ(zone A),(ZoneBotZ(zone B))    	//The bottom of the shared wall
 ;  	              		DoorH		= DoortopZ - DoorBotZ				// Height of shared opening
 ;  	              		DH		= 20/						// Area of half of assumed door
 ;  	              		DHhZ		= GwallBotZ + .75 GwallH			// Height of top hole
 ;  	              		DHHlZ		= GwallBotZ + .25 GwallH			// Height of bottom hole
 ;  			For each zone pair write Airnet Objects to CSE Input		
 ;  				IZXFER (ZoneNameA)DHx(ZoneNameB)DH  izNVTYPE = AirNetIZ izZN1=(ZoneNameA) izALo=DH izHD = DHhZ izNVEff=1. izExp=0.5 izZN2 = (ZoneNameB) 
 ;  				IZXFER (ZoneNameA)DLx(ZoneNameB)DL  izNVTYPE = AirNetIZ izZN1=(ZoneNameA) izALo=DH izHD = DHlZ izNVEff=1. izExp=0.5 izZN2 = (ZoneNameB)
 ;  			Stair calculation for each pair of zones with only a floor/ceiling surface (zoneA<>zoneB, zoneB<>zoneC, zoneA<>zoneC, etc)
 ;  				StairZ		= Max(ZoneBotZ(zone A),(ZoneBotZ(zone B))    	//The height of the stair hole is at the upper floor floor
 ;  			For each zone pair write Airnet Objects to CSE Input	Note that izZN1 MUST be the lower of the 2 zones or the model doesn't work	
 ;  				IZXFER (ZoneNameA)Sx(ZoneNameB)S  izNVType = AIRNETHORIZ izZN1=(ZoneName of lowerzone) izZN2 = (ZoneName of upper zone) izL1=3 izL1=10 izHD =StairZ 
 ;-----------------------

  ; AirNet for Door between Conditioned Zones
	; SAC 6/5/13 - modified rule to REMOVE interior door holes if this is a multifamily project and the Zone on the other side is that of a different dwelling unit
	; SAC 9/18/19 - mods to handle OtherZone same as Zone (MFamProto)
	"Set IntWall:InterCondWallHt"			IntWall:InterCondWallHt		= {	if (LocalCompAssigned( Outside ) == 0) then  0
																								else if (ParentComponentType() == "Zone" .OR. ParentComponentType() == "OtherZone")
																								then	if (LocalCompAssigned( Outside ) == ComponentType( "Zone" ) .OR. LocalCompAssigned( Outside ) == ComponentType( "OtherZone" ))
																										then	min( Parent( Top ), Outside:Top ) - max( Parent( Bottom ), Outside:Bottom )
																										else if (LocalCompAssigned( Outside ) == ComponentType( "Garage" ))
																										then	if (IfValidAnd( Outside:Area > 0.1 ) .AND. IfValidAnd( Outside:Volume > 0.1 ) .AND. LocalStatus( Outside:Bottom ) > 0)
																												then	min( Parent( Top ), (Outside:Bottom + (Outside:Volume / Outside:Area)) ) - max( Parent( Bottom ), Outside:Bottom )
																												else	0  endif
																										else if (LocalCompAssigned( Outside ) == ComponentType( "Attic" ))
																										then	min( Parent( Top ), (Outside:Bottom + Outside:Height) ) - max( Parent( Bottom ), Outside:Bottom )
																										else	0  endif endif endif
																								else if (ParentComponentType() == "Garage")
																								then	if (IfValidAnd( Outside:Area > 0.1 ) .AND. IfValidAnd( Outside:Volume > 0.1 ) .AND. LocalStatus( Outside:Bottom ) > 0)
																										then	if (LocalCompAssigned( Outside ) == ComponentType( "Zone" ) .OR. LocalCompAssigned( Outside ) == ComponentType( "OtherZone" ))
																												then	min( (Parent( Bottom ) + (Parent( Volume ) / Parent( Area ))), Outside:Top ) - max( Parent( Bottom ), Outside:Bottom )
																												else if (LocalCompAssigned( Outside ) == ComponentType( "Garage" ))
																												then	if (IfValidAnd( Outside:Area > 0.1 ) .AND. IfValidAnd( Outside:Volume > 0.1 ) .AND. LocalStatus( Outside:Bottom ) > 0)
																														then	min( (Parent( Bottom ) + (Parent( Volume ) / Parent( Area ))), (Outside:Bottom + (Outside:Volume / Outside:Area)) ) - max( Parent( Bottom ), Outside:Bottom )
																														else	0  endif
																												else if (LocalCompAssigned( Outside ) == ComponentType( "Attic" ))
																												then	min( (Parent( Bottom ) + (Parent( Volume ) / Parent( Area ))), (Outside:Bottom + Outside:Height) ) - max( Parent( Bottom ), Outside:Bottom )
																												else	0  endif endif endif
																										else	0  endif
																								else	0	endif endif endif  }

  ; SAC 10/7/13 - revised rule to PREVENT creation of Door IZXFER for any party surface (IntWall:IsPartySurface)
	"Create IntWall:AirNetDoorIZXFER[1]"				IntWall:AirNetDoorIZXFER[1]		= {	if (InterCondZnArea < 0.5 .OR. InterCondWallHt < 0.5 .OR. IsPartySurface > 0.5) then  UNDEFINED
																														else if (CompExists( cseIZXFER, Format( "%sDHx%sDH", Parent( CSE_ZONE ), Outside:CSE_ZONE ) )) then  UNDEFINED
																														else if (CompExists( cseIZXFER, Format( "%sDHx%sDH", Outside:CSE_ZONE, Parent( CSE_ZONE ) ) )) then  UNDEFINED
																														else CreateComp( cseIZXFER, substr( Parent( CSE_ZONE ), 0, 28 ) + "DHx" + substr( Outside:CSE_ZONE, 0, 28 ) + "DH")  endif endif endif  }
	"Set IntWall:AirNetDoorIZXFER[1]:izNVType"		IntWall:AirNetDoorIZXFER[1]:izNVType	= {	3  }   ; AIRNETIZ - Single opening to another zone
	"Set IntWall:AirNetDoorIZXFER[1]:izZn1"			IntWall:AirNetDoorIZXFER[1]:izZn1		= {	Parent( CSE_ZONE )  }
	"Set IntWall:AirNetDoorIZXFER[1]:izALo"			IntWall:AirNetDoorIZXFER[1]:izALo		= {	20 / 2  }
	"Set IntWall:AirNetDoorIZXFER[1]:izHD"				IntWall:AirNetDoorIZXFER[1]:izHD			= {	max( Parent( Bottom ), Outside:Bottom ) + (6.67 * 0.75)  }  ; SAC 10/9/13 - revised to use typical door height - was: (InterCondWallHt * 0.75)  }
	"Set IntWall:AirNetDoorIZXFER[1]:izNVEff"			IntWall:AirNetDoorIZXFER[1]:izNVEff		= {	 1.0   }
	"Set IntWall:AirNetDoorIZXFER[1]:izExp"			IntWall:AirNetDoorIZXFER[1]:izExp		= {	 0.5  }
	"Set IntWall:AirNetDoorIZXFER[1]:izZn2"			IntWall:AirNetDoorIZXFER[1]:izZn2		= {	Outside:CSE_ZONE  }

  ; SAC 10/7/13 - revised rule to PREVENT creation of Door IZXFER for any party surface (IntWall:IsPartySurface)
	"Create IntWall:AirNetDoorIZXFER[2]"				IntWall:AirNetDoorIZXFER[2]		= {	if (InterCondZnArea < 0.5 .OR. InterCondWallHt < 0.5 .OR. IsPartySurface > 0.5) then  UNDEFINED
																														else if (CompExists( cseIZXFER, Format( "%sDLx%sDL", Parent( CSE_ZONE ), Outside:CSE_ZONE ) )) then  UNDEFINED
																														else if (CompExists( cseIZXFER, Format( "%sDLx%sDL", Outside:CSE_ZONE, Parent( CSE_ZONE ) ) )) then  UNDEFINED
																														else CreateComp( cseIZXFER, substr( Parent( CSE_ZONE ), 0, 28 ) + "DLx" + substr( Outside:CSE_ZONE, 0, 28 ) + "DL")  endif endif endif  }
	"Set IntWall:AirNetDoorIZXFER[2]:izNVType"		IntWall:AirNetDoorIZXFER[2]:izNVType	= {	3  }   ; AIRNETIZ - Single opening to another zone
	"Set IntWall:AirNetDoorIZXFER[2]:izZn1"			IntWall:AirNetDoorIZXFER[2]:izZn1		= {	Parent( CSE_ZONE )  }
	"Set IntWall:AirNetDoorIZXFER[2]:izALo"			IntWall:AirNetDoorIZXFER[2]:izALo		= {	20 / 2  }
	"Set IntWall:AirNetDoorIZXFER[2]:izHD"				IntWall:AirNetDoorIZXFER[2]:izHD			= {	max( Parent( Bottom ), Outside:Bottom ) + (6.67 * 0.25)  }  ; SAC 10/9/13 - revised to use typical door height - was: (InterCondWallHt * 0.25)  }
	"Set IntWall:AirNetDoorIZXFER[2]:izNVEff"			IntWall:AirNetDoorIZXFER[2]:izNVEff		= {	 1.0   }
	"Set IntWall:AirNetDoorIZXFER[2]:izExp"			IntWall:AirNetDoorIZXFER[2]:izExp		= {	 0.5  }
	"Set IntWall:AirNetDoorIZXFER[2]:izZn2"			IntWall:AirNetDoorIZXFER[2]:izZn2		= {	Outside:CSE_ZONE  }

   ; IZXFERs modeling Opening between Zones - SAC 07/30/20
   "Create Opening:AirNetIZXFER[1]"          Opening:AirNetIZXFER[1]  =
      {  if (LocalCompAssigned( Outside ) < 1 .OR. IfValidAnd( Area > 0 )==0 .OR.
             IfValidAnd( Height > 0 )==0 .OR. IfValidAnd( BottomHt >= 0 )==0) then  UNDEFINED
         else  CreateComp( cseIZXFER, substr( Name, 0, 48 ) + "-OH" )  endif  }
	"Set Opening:AirNetIZXFER[1]:izNVType"		Opening:AirNetIZXFER[1]:izNVType	= {	3  }   ; AIRNETIZ - Single opening to another zone
	"Set Opening:AirNetIZXFER[1]:izZn1"			Opening:AirNetIZXFER[1]:izZn1		= {	Parent( CSE_ZONE )  }
	"Set Opening:AirNetIZXFER[1]:izALo"			Opening:AirNetIZXFER[1]:izALo		= {	Area / 2  }
	"Set Opening:AirNetIZXFER[1]:izHD"			Opening:AirNetIZXFER[1]:izHD		= {	Parent( Bottom ) + BottomHt + (Height * 0.75)  }
	"Set Opening:AirNetIZXFER[1]:izNVEff"		Opening:AirNetIZXFER[1]:izNVEff	= {	 1.0   }
	"Set Opening:AirNetIZXFER[1]:izExp"			Opening:AirNetIZXFER[1]:izExp		= {	 0.5  }
	"Set Opening:AirNetIZXFER[1]:izZn2"			Opening:AirNetIZXFER[1]:izZn2		= {	Outside:CSE_ZONE  }
   "Create Opening:AirNetIZXFER[2]"          Opening:AirNetIZXFER[2]  =
      {  if (LocalCompAssigned( Outside ) < 1 .OR. IfValidAnd( Area > 0 )==0 .OR.
             IfValidAnd( Height > 0 )==0 .OR. IfValidAnd( BottomHt >= 0 )==0) then  UNDEFINED
         else  CreateComp( cseIZXFER, substr( Name, 0, 48 ) + "-OL" )  endif  }
	"Set Opening:AirNetIZXFER[2]:izNVType"		Opening:AirNetIZXFER[2]:izNVType	= {	3  }   ; AIRNETIZ - Single opening to another zone
	"Set Opening:AirNetIZXFER[2]:izZn1"			Opening:AirNetIZXFER[2]:izZn1		= {	Parent( CSE_ZONE )  }
	"Set Opening:AirNetIZXFER[2]:izALo"			Opening:AirNetIZXFER[2]:izALo		= {	Area / 2  }
	"Set Opening:AirNetIZXFER[2]:izHD"			Opening:AirNetIZXFER[2]:izHD		= {	Parent( Bottom ) + BottomHt + (Height * 0.25)  }
	"Set Opening:AirNetIZXFER[2]:izNVEff"		Opening:AirNetIZXFER[2]:izNVEff	= {	 1.0   }
	"Set Opening:AirNetIZXFER[2]:izExp"			Opening:AirNetIZXFER[2]:izExp		= {	 0.5  }
	"Set Opening:AirNetIZXFER[2]:izZn2"			Opening:AirNetIZXFER[2]:izZn2		= {	Outside:CSE_ZONE  }

  ; AirNet for Stairway between Conditioned Zones (via floor or ceiling)
	"Create InteriorCeiling:AirNetStairIZXFER"			InteriorCeiling:AirNetStairIZXFER		= {	if (InterCondZnArea < 0.5 .OR.
																													;						(Proj:IsMultiFamily > 0.5 .AND. IfValidAnd( OutsideDiffUnit > 0.5 ))) then  UNDEFINED
																																			(IsPartySurface > 0.5 .AND. OtherSideModeled > 0.5 .AND. LocalCompAssigned( Outside ))) then  UNDEFINED
																																	else CreateComp( cseIZXFER, substr( Parent( CSE_ZONE ), 0, 28 ) + "SCx" + substr( Outside:CSE_ZONE, 0, 28 ) + "SC")  endif  }
	"Set InteriorCeiling:AirNetStairIZXFER:izNVType"	InteriorCeiling:AirNetStairIZXFER:izNVType	= {	5  }   ; AIRNETHORIZ - Horizontal (large) opening between two zones
	"Set InteriorCeiling:AirNetStairIZXFER:izZn1"		InteriorCeiling:AirNetStairIZXFER:izZn1		= {	Parent( CSE_ZONE )  }
	"Set InteriorCeiling:AirNetStairIZXFER:izZn2"		InteriorCeiling:AirNetStairIZXFER:izZn2		= {	Outside:CSE_ZONE  }
	"Set InteriorCeiling:AirNetStairIZXFER:izL1"			InteriorCeiling:AirNetStairIZXFER:izL1			= {	3   }
	"Set InteriorCeiling:AirNetStairIZXFER:izL2"			InteriorCeiling:AirNetStairIZXFER:izL2			= {	10  }
	"Set InteriorCeiling:AirNetStairIZXFER:izHD"			InteriorCeiling:AirNetStairIZXFER:izHD			= {	max( Parent( Bottom ), Outside:Bottom )  }

; SAC 6/5/13 - modified rule to REMOVE stairwell hole if this is a multifamily project and the Zone on the other side is that of a different dwelling unit
	"Create InteriorFloor:AirNetStairIZXFER"				InteriorFloor:AirNetStairIZXFER			= {	if (InterCondZnArea < 0.5 .OR.
																													;						(Proj:IsMultiFamily > 0.5 .AND. IfValidAnd( OutsideDiffUnit > 0.5 ))) then  UNDEFINED
																																			(IsPartySurface > 0.5 .AND. OtherSideModeled > 0.5 .AND. LocalCompAssigned( Outside ))) then  UNDEFINED
																																	else CreateComp( cseIZXFER, substr( Outside:CSE_ZONE, 0, 28 ) + "Sx" + substr( Parent( CSE_ZONE ), 0, 28 ) + "S")  endif  }
	"Set InteriorFloor:AirNetStairIZXFER:izNVType"		InteriorFloor:AirNetStairIZXFER:izNVType		= {	5  }   ; AIRNETHORIZ - Horizontal (large) opening between two zones
	"Set InteriorFloor:AirNetStairIZXFER:izZn1"			InteriorFloor:AirNetStairIZXFER:izZn1			= {	Outside:CSE_ZONE    }
	"Set InteriorFloor:AirNetStairIZXFER:izZn2"			InteriorFloor:AirNetStairIZXFER:izZn2			= {	Parent( CSE_ZONE )  }
	"Set InteriorFloor:AirNetStairIZXFER:izL1"			InteriorFloor:AirNetStairIZXFER:izL1			= {	3   }
	"Set InteriorFloor:AirNetStairIZXFER:izL2"			InteriorFloor:AirNetStairIZXFER:izL2			= {	10  }
	"Set InteriorFloor:AirNetStairIZXFER:izHD"			InteriorFloor:AirNetStairIZXFER:izHD			= {	max( Parent( Bottom ), Outside:Bottom )  }


 ;-----------------------
 ; AirNet for Inter-Zone (conditioned) Party Walls - separating dwelling units
 ;-----------------------
 ;  from Google Code issue #114   (6/6/13)
 ;  	Add an interzone airnet hole between any 2 zones where one or more party surfaces exist.
 ;    The hole size is the area of the party surface(s) in ft2 * 0.0005.
 ;    The Z of the hole should be the midheight of the Party surface(s).
 ;    The area of party surfaces between zones can be summed and one hole created or a a hole can be created for each surface individually.
 ;    Here is an example of the hole for a party floor:
 ;        IZXFER   "Conditioned-znPSxConditioned-2-znPS"     ; switched 'S' to 'PS' to distinguish from Stairwell holes above
 ;           izNVType = "AIRNETIZ"
 ;           izZn1 = "Conditioned-zn"
 ;           izZn2 = "Conditioned-2-zn"
 ;           izALo = 1.3715
 ;           izHD = 9.7
 ;           izNVEff = 1
 ;           izExp = 0.65
 ;
 ;  correction sent from Bruce Wilcox via e-mail 10/8/13  (and posted back to Google Code issue #114)
 ;    after discussing this with Chip we are sure that 2 holes are needed in order to get the correct behavior.  So just like the airnet
 ;    leakage objects in exterior walls:  2 holes each 1/2 the area at 1/4 and 3/4 the absolute height of the wall.
 ;    MODS THEREFORE TO:  IZXFER names "..PSx..PS" -> "..PSHx..PSH" & "..PSLx..PSL"  /  each area (izALo / 2)  /  Hi/Low location mods to izHD (*0.5 -> *0.75/*0.25)
 ;-----------------------
 ; IntWall inter-party surface hole:
  ; SAC 10/7/13 - revised rule to ENSURE creation of PartySurface IZXFERs based on new party surface property (IntWall:IsPartySurface)
   "Create IntWall:AirNetPrtySrfIZXFER[1]"            IntWall:AirNetPrtySrfIZXFER[1]      =        ; mods to include holes only when both sides Conditioned - SAC 11/30/20
      {  if (Area < 0.1 .OR. InterCondWallHt < 0.1) then  UNCHANGED
      ;   else if (Proj:IsMultiFamily > 0.5 .AND. OutsideDiffUnit > 0.5)
         else if ( (ParentComponentType() == "Zone" .OR. ParentComponentType() == "OtherZone") .AND.
                   (LocalCompAssigned( Outside ) == ComponentType( "Zone" ) .OR.
                    LocalCompAssigned( Outside ) == ComponentType( "OtherZone" )))
         then  if (IsPartySurface > 0.5 .AND. OtherSideModeled > 0.5 .AND.
                   Parent( Type ) < 10 .AND. Outside:Type < 10)
               then  CreateComp( cseIZXFER, substr( Name, 0, 28 ) + "PSHx" + substr( Outside:Name, 0, 28 ) + "PSH")
               else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
	"Set IntWall:AirNetPrtySrfIZXFER[1]:izNVType"		IntWall:AirNetPrtySrfIZXFER[1]:izNVType	= {	3  }   ; AIRNETIZ - Single opening to another zone
	"Set IntWall:AirNetPrtySrfIZXFER[1]:izZn1"			IntWall:AirNetPrtySrfIZXFER[1]:izZn1		= {	Parent( CSE_ZONE )  }
	"Set IntWall:AirNetPrtySrfIZXFER[1]:izZn2"			IntWall:AirNetPrtySrfIZXFER[1]:izZn2		= {	Outside:CSE_ZONE  }
	"Set IntWall:AirNetPrtySrfIZXFER[1]:izALo"			IntWall:AirNetPrtySrfIZXFER[1]:izALo		=     ; SAC 7/13/20
      {  if (Proj:CSEVentAvailZonal)
         then  if (ParentComponentType() == "Zone" .AND. LocalCompAssigned( Outside ) == ComponentType( "Zone" ))
               then  Area * ValidOr( Proj:IntSurfHoleSzRatio[1], 0.0005 ) / 2
               else  Area * ValidOr( Proj:IntSurfHoleSzRatio[2], 0.0005 ) / 2
               endif
         else  Area * 0.00025    endif  }
	"Set IntWall:AirNetPrtySrfIZXFER[1]:izHD"				IntWall:AirNetPrtySrfIZXFER[1]:izHD			= {	max( Parent( Bottom ), Outside:Bottom ) + (InterCondWallHt * 0.75)  }
	"Set IntWall:AirNetPrtySrfIZXFER[1]:izNVEff"			IntWall:AirNetPrtySrfIZXFER[1]:izNVEff		= {	 1.0   }
	"Set IntWall:AirNetPrtySrfIZXFER[1]:izExp"			IntWall:AirNetPrtySrfIZXFER[1]:izExp		= {	 0.65  }

   "Create IntWall:AirNetPrtySrfIZXFER[2]"            IntWall:AirNetPrtySrfIZXFER[2]      =        ; mods to include holes only when both sides Conditioned - SAC 11/30/20
      {  if (Area < 0.1 .OR. InterCondWallHt < 0.1) then  UNCHANGED
      ;   else if (Proj:IsMultiFamily > 0.5 .AND. OutsideDiffUnit > 0.5)
         else if ( (ParentComponentType() == "Zone" .OR. ParentComponentType() == "OtherZone") .AND.
                   (LocalCompAssigned( Outside ) == ComponentType( "Zone" ) .OR.
                    LocalCompAssigned( Outside ) == ComponentType( "OtherZone" )))
         then  if (IsPartySurface > 0.5 .AND. OtherSideModeled > 0.5 .AND.
                   Parent( Type ) < 10 .AND. Outside:Type < 10)
               then  CreateComp( cseIZXFER, substr( Name, 0, 28 ) + "PSLx" + substr( Outside:Name, 0, 28 ) + "PSL")
               else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
	"Set IntWall:AirNetPrtySrfIZXFER[2]:izNVType"		IntWall:AirNetPrtySrfIZXFER[2]:izNVType	= {	3  }   ; AIRNETIZ - Single opening to another zone
	"Set IntWall:AirNetPrtySrfIZXFER[2]:izZn1"			IntWall:AirNetPrtySrfIZXFER[2]:izZn1		= {	Parent( CSE_ZONE )  }
	"Set IntWall:AirNetPrtySrfIZXFER[2]:izZn2"			IntWall:AirNetPrtySrfIZXFER[2]:izZn2		= {	Outside:CSE_ZONE  }
	"Set IntWall:AirNetPrtySrfIZXFER[2]:izALo"			IntWall:AirNetPrtySrfIZXFER[2]:izALo		=     ; SAC 7/13/20
      {  if (Proj:CSEVentAvailZonal)
         then  if (ParentComponentType() == "Zone" .AND. LocalCompAssigned( Outside ) == ComponentType( "Zone" ))
               then  Area * ValidOr( Proj:IntSurfHoleSzRatio[1], 0.0005 ) / 2
               else  Area * ValidOr( Proj:IntSurfHoleSzRatio[2], 0.0005 ) / 2
               endif
         else  Area * 0.00025    endif  }
	"Set IntWall:AirNetPrtySrfIZXFER[2]:izHD"				IntWall:AirNetPrtySrfIZXFER[2]:izHD			= {	max( Parent( Bottom ), Outside:Bottom ) + (InterCondWallHt * 0.25)  }
	"Set IntWall:AirNetPrtySrfIZXFER[2]:izNVEff"			IntWall:AirNetPrtySrfIZXFER[2]:izNVEff		= {	 1.0   }
	"Set IntWall:AirNetPrtySrfIZXFER[2]:izExp"			IntWall:AirNetPrtySrfIZXFER[2]:izExp		= {	 0.65  }
 ;
 ; InteriorFloor inter-party surface hole:
   "Create InteriorFloor:AirNetPrtySrfIZXFER"         InteriorFloor:AirNetPrtySrfIZXFER      =     ; mods to include holes only when both sides Conditioned - SAC 11/30/20
      {  if (Area < 0.1) then  UNCHANGED
      ;   else if (Proj:IsMultiFamily > 0.5 .AND. IfValidAnd( OutsideDiffUnit > 0.5 ))
         else if ( (ParentComponentType() == "Zone" .OR. ParentComponentType() == "OtherZone") .AND.
                   (LocalCompAssigned( Outside ) == ComponentType( "Zone" ) .OR.
                    LocalCompAssigned( Outside ) == ComponentType( "OtherZone" )))
         then  if (IsPartySurface > 0.5 .AND. OtherSideModeled > 0.5 .AND.
                   Parent( Type ) < 10 .AND. Outside:Type < 10)
               then  CreateComp( cseIZXFER, substr( Outside:Name, 0, 28 ) + "PSx" + substr( Name, 0, 28 ) + "PS")
               else  UNCHANGED  endif
         else  UNCHANGED  endif endif  }
	"Set InteriorFloor:AirNetPrtySrfIZXFER:izNVType"	InteriorFloor:AirNetPrtySrfIZXFER:izNVType	= {	3  }   ; AIRNETIZ - Single opening to another zone     -?->  5  }   ; AIRNETHORIZ - Horizontal (large) opening between two zones
	"Set InteriorFloor:AirNetPrtySrfIZXFER:izZn1"		InteriorFloor:AirNetPrtySrfIZXFER:izZn1		= {	Outside:CSE_ZONE    }
	"Set InteriorFloor:AirNetPrtySrfIZXFER:izZn2"		InteriorFloor:AirNetPrtySrfIZXFER:izZn2		= {	Parent( CSE_ZONE )  }
	"Set InteriorFloor:AirNetPrtySrfIZXFER:izALo"		InteriorFloor:AirNetPrtySrfIZXFER:izALo		=     ; SAC 7/13/20
      {  if (Proj:CSEVentAvailZonal)
         then  if (ParentComponentType() == "Zone" .AND. LocalCompAssigned( Outside ) == ComponentType( "Zone" ))
               then  Area * ValidOr( Proj:IntSurfHoleSzRatio[1], 0.0005 )
               else  Area * ValidOr( Proj:IntSurfHoleSzRatio[2], 0.0005 )
               endif
         else  Area * 0.0005    endif  }
	"Set InteriorFloor:AirNetPrtySrfIZXFER:izHD"			InteriorFloor:AirNetPrtySrfIZXFER:izHD			= {	Parent( Bottom )  }
	"Set InteriorFloor:AirNetPrtySrfIZXFER:izNVEff"		InteriorFloor:AirNetPrtySrfIZXFER:izNVEff		= {	1.0   }
	"Set InteriorFloor:AirNetPrtySrfIZXFER:izExp"		InteriorFloor:AirNetPrtySrfIZXFER:izExp		= {	0.65  }
  ; SAC 8/25/14 - added InteriorCeiling IZXFER (based on int flr)
   "Create InteriorCeiling:AirNetPrtySrfIZXFER"         InteriorCeiling:AirNetPrtySrfIZXFER      =    ; mods to include holes only when both sides Conditioned - SAC 11/30/20
      {  if (Area < 0.1) then  UNCHANGED
      ;   else if (Proj:IsMultiFamily > 0.5 .AND. IfValidAnd( OutsideDiffUnit > 0.5 ))
         else if ( (ParentComponentType() == "Zone" .OR. ParentComponentType() == "OtherZone") .AND.
                   (LocalCompAssigned( Outside ) == ComponentType( "Zone" ) .OR.
                    LocalCompAssigned( Outside ) == ComponentType( "OtherZone" )))
         then  if (IsPartySurface > 0.5 .AND. OtherSideModeled > 0.5 .AND.
                   Parent( Type ) < 10 .AND. Outside:Type < 10)
               then  CreateComp( cseIZXFER, substr( Outside:Name, 0, 28 ) + "PSCx" + substr( Name, 0, 28 ) + "PSC")
               else  UNCHANGED  endif
         else  UNCHANGED  endif endif  }
	"Set InteriorCeiling:AirNetPrtySrfIZXFER:izNVType"	InteriorCeiling:AirNetPrtySrfIZXFER:izNVType	= {	3  }   ; AIRNETIZ - Single opening to another zone     -?->  5  }   ; AIRNETHORIZ - Horizontal (large) opening between two zones
	"Set InteriorCeiling:AirNetPrtySrfIZXFER:izZn1"		InteriorCeiling:AirNetPrtySrfIZXFER:izZn1		= {	Parent( CSE_ZONE )  }
	"Set InteriorCeiling:AirNetPrtySrfIZXFER:izZn2"		InteriorCeiling:AirNetPrtySrfIZXFER:izZn2		= {	Outside:CSE_ZONE    }
	"Set InteriorCeiling:AirNetPrtySrfIZXFER:izALo"		InteriorCeiling:AirNetPrtySrfIZXFER:izALo		=     ; SAC 7/13/20
      {  if (Proj:CSEVentAvailZonal)
         then  if (ParentComponentType() == "Zone" .AND. LocalCompAssigned( Outside ) == ComponentType( "Zone" ))
               then  Area * ValidOr( Proj:IntSurfHoleSzRatio[1], 0.0005 )
               else  Area * ValidOr( Proj:IntSurfHoleSzRatio[2], 0.0005 )
               endif
         else  Area * 0.0005    endif  }
	"Set InteriorCeiling:AirNetPrtySrfIZXFER:izHD"		InteriorCeiling:AirNetPrtySrfIZXFER:izHD		= {	Outside:Bottom  }		; Parent( Bottom )  }
	"Set InteriorCeiling:AirNetPrtySrfIZXFER:izNVEff"	InteriorCeiling:AirNetPrtySrfIZXFER:izNVEff	= {	1.0   }
	"Set InteriorCeiling:AirNetPrtySrfIZXFER:izExp"		InteriorCeiling:AirNetPrtySrfIZXFER:izExp		= {	0.65  }

END

;*************************************************************************
RULELIST "SimPrep_CSE_AirNet_Attic_Vented" 1 0 0 0
;*************************************************************************
; SAC 10/17/14 - added logic to scale cool vent CFM by ratio of (cool-ventable) attic volumes
; KN 04/14/2015 Replaced code below to look up attic relief in codebase 
;	"Set Attic:AirNet_AtticRelief"	Attic:AirNet_AtticRelief	= {
;														if (ClVentableVolume < 0.1) then  0
;														else if (Proj:UnitClVentOption == 3)		; CFI Cool Vent
;														then	(ClVentableVolume / SumAll( Attic:ClVentableVolume )) * SumAll( HVACSys:AirNet_CoolVent   ) / 375
;														else	(ClVentableVolume / SumAll( Attic:ClVentableVolume )) * ValidOr( Proj:UnitClVentCFMTot, 0 ) / 375		endif endif  }
  ; SAC 12/31/15 - added reference to new Proj:UnitClVenTAreaMult property used to apply reduced attic vent free area (tic #596)
	"Set Attic:AirNet_AtticRelief"	Attic:AirNet_AtticRelief	= {
														if (ClVentableVolume < 0.1) then  0
														else if (Proj:UnitClVentOption == 3)		; CFI Cool Vent
														then	(ClVentableVolume / SumAll( Attic:ClVentableVolume )) * SumAll( HVACSys:AirNet_CoolVent   ) * Proj:UnitClVenTAreaMult / T24RClimateZoneCodeBase:WHFatticrelief( "ClimateZone", Proj:ClimateZone, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
														else	(ClVentableVolume / SumAll( Attic:ClVentableVolume )) * ValidOr( Proj:UnitClVentCFMTot, 0 ) * Proj:UnitClVenTAreaMult / T24RClimateZoneCodeBase:WHFatticrelief( "ClimateZone", Proj:ClimateZone, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )		endif endif  }

	"Set Attic:AirNet_PitchType"		Attic:AirNet_PitchType	= {		  if (Local( RoofPitch ) <= 0.00) then  0
																						else if (Local( RoofPitch ) <= 0.18) then  1
																						else if (Local( RoofPitch ) <= 0.27) then  2
																						else if (Local( RoofPitch ) <= 0.47) then  3
																						else if (Local( RoofPitch ) <= 0.70) then  4
																																		 else  5  endif endif endif endif endif  }

	"Set Attic:AirNet_AventTot"		Attic:AirNet_AventTot	= {	FloorArea * AVentFraction  }	; AceilGross * AVent
	"Set Attic:AirNet_SoffitVent"		Attic:AirNet_SoffitVent	= {	0.5 * 0.25 * (1.0 - FractionHigh) * max( AirNet_AventTot, AirNet_AtticRelief )  }
	"Set Attic:AirNet_DeckVent"		Attic:AirNet_DeckVent	= {	0.5 * 0.25 *        FractionHigh  * max( AirNet_AventTot, AirNet_AtticRelief )  }

	"Create Attic:AirNetIZXFERs[1] - SU"		Attic:AirNetIZXFERs[1]	= {	if (AirNet_SoffitVent <= 0) then  UNCHANGED
																									else  CreateComp( cseIZXFER, substr( Name, 0, 48 ) + "-SU", "Default_AtticIZXFER" )  endif  }
	"Create Attic:AirNetIZXFERs[2] - SS"		Attic:AirNetIZXFERs[2]	= {	if (AirNet_SoffitVent <= 0) then  UNCHANGED
																									else  CreateComp( cseIZXFER, substr( Name, 0, 48 ) + "-SS", "Default_AtticIZXFER" )  endif  }
	"Create Attic:AirNetIZXFERs[3] - SD"		Attic:AirNetIZXFERs[3]	= {	if (AirNet_SoffitVent <= 0) then  UNCHANGED
																									else  CreateComp( cseIZXFER, substr( Name, 0, 48 ) + "-SD", "Default_AtticIZXFER" )  endif  }
	"Create Attic:AirNetIZXFERs[4] - DU"		Attic:AirNetIZXFERs[4]	= {	if (AirNet_DeckVent <= 0) then  UNCHANGED
																									else  CreateComp( cseIZXFER, substr( Name, 0, 48 ) + "-DU", "Default_AtticIZXFER" )  endif  }
	"Create Attic:AirNetIZXFERs[5] - DS"		Attic:AirNetIZXFERs[5]	= {	if (AirNet_DeckVent <= 0) then  UNCHANGED
																									else  CreateComp( cseIZXFER, substr( Name, 0, 48 ) + "-DS", "Default_AtticIZXFER" )  endif  }
	"Create Attic:AirNetIZXFERs[6] - DD"		Attic:AirNetIZXFERs[6]	= {	if (AirNet_DeckVent <= 0) then  UNCHANGED
																									else  CreateComp( cseIZXFER, substr( Name, 0, 48 ) + "-DD", "Default_AtticIZXFER" )  endif  }

	"Set Attic:AirNetIZXFERs[1]:izZn1 - SU"		Attic:AirNetIZXFERs[1]:izZn1	= {	Local( CSE_ZONE )  }
	"Set Attic:AirNetIZXFERs[2]:izZn1 - SS"		Attic:AirNetIZXFERs[2]:izZn1	= {	Local( CSE_ZONE )  }
	"Set Attic:AirNetIZXFERs[3]:izZn1 - SD"		Attic:AirNetIZXFERs[3]:izZn1	= {	Local( CSE_ZONE )  }
	"Set Attic:AirNetIZXFERs[4]:izZn1 - DU"		Attic:AirNetIZXFERs[4]:izZn1	= {	Local( CSE_ZONE )  }
	"Set Attic:AirNetIZXFERs[5]:izZn1 - DS"		Attic:AirNetIZXFERs[5]:izZn1	= {	Local( CSE_ZONE )  }
	"Set Attic:AirNetIZXFERs[6]:izZn1 - DD"		Attic:AirNetIZXFERs[6]:izZn1	= {	Local( CSE_ZONE )  }

	"Set Attic:AirNetIZXFERs[1]:izALo - SU"		Attic:AirNetIZXFERs[1]:izALo	= {	Local( AirNet_SoffitVent )      }
	"Set Attic:AirNetIZXFERs[2]:izALo - SS"		Attic:AirNetIZXFERs[2]:izALo	= {	Local( AirNet_SoffitVent ) * 2  }
	"Set Attic:AirNetIZXFERs[3]:izALo - SD"		Attic:AirNetIZXFERs[3]:izALo	= {	Local( AirNet_SoffitVent )      }
	"Set Attic:AirNetIZXFERs[4]:izALo - DU"		Attic:AirNetIZXFERs[4]:izALo	= {	Local( AirNet_DeckVent   )      }
	"Set Attic:AirNetIZXFERs[5]:izALo - DS"		Attic:AirNetIZXFERs[5]:izALo	= {	Local( AirNet_DeckVent   ) * 2  }
	"Set Attic:AirNetIZXFERs[6]:izALo - DD"		Attic:AirNetIZXFERs[6]:izALo	= {	Local( AirNet_DeckVent   )      }

	"Set Attic:AirNetIZXFERs[1]:izHD - SU"			Attic:AirNetIZXFERs[1]:izHD	= {	max( 0.1, Local( Bottom ) )  }
	"Set Attic:AirNetIZXFERs[2]:izHD - SS"			Attic:AirNetIZXFERs[2]:izHD	= {	max( 0.1, Local( Bottom ) )  }
	"Set Attic:AirNetIZXFERs[3]:izHD - SD"			Attic:AirNetIZXFERs[3]:izHD	= {	max( 0.1, Local( Bottom ) )  }
	"Set Attic:AirNetIZXFERs[4]:izHD - DU"			Attic:AirNetIZXFERs[4]:izHD	= {	max( 0.1, Local( Bottom ) + (Local( Height ) * 0.67) )  }
	"Set Attic:AirNetIZXFERs[5]:izHD - DS"			Attic:AirNetIZXFERs[5]:izHD	= {	max( 0.1, Local( Bottom ) + (Local( Height ) * 0.67) )  }
	"Set Attic:AirNetIZXFERs[6]:izHD - DD"			Attic:AirNetIZXFERs[6]:izHD	= {	max( 0.1, Local( Bottom ) + (Local( Height ) * 0.67) )  }

	"Set Attic:AirNetIZXFERs[4]:izExp - DU"		Attic:AirNetIZXFERs[4]:izExp	= {	0.5  }
	"Set Attic:AirNetIZXFERs[5]:izExp - DS"		Attic:AirNetIZXFERs[5]:izExp	= {	0.5  }
	"Set Attic:AirNetIZXFERs[6]:izExp - DD"		Attic:AirNetIZXFERs[6]:izExp	= {	0.5  }

	"Set Attic:AirNetIZXFERs[2]:izCpr - SS"		Attic:AirNetIZXFERs[2]:izCpr	= {	-0.65  }
	"Set Attic:AirNetIZXFERs[3]:izCpr - SD"		Attic:AirNetIZXFERs[3]:izCpr	= {	-0.30  }
	"Set Attic:AirNetIZXFERs[4]:izCpr - DU"		Attic:AirNetIZXFERs[4]:izCpr	= {	switch( Local( AirNet_PitchType ) )
																													case 0 : -0.5		case 1 : -0.8		case 2 : -0.5
																													case 3 : -0.3		case 4 :  0.1		case 5 :  0.3
																													default : 0.0		endswitch  }
	"Set Attic:AirNetIZXFERs[5]:izCpr - DS"		Attic:AirNetIZXFERs[5]:izCpr	= {	-0.5  }
	"Set Attic:AirNetIZXFERs[6]:izCpr - DD"		Attic:AirNetIZXFERs[6]:izCpr	= {	switch( Local( AirNet_PitchType ) )
																													case  1 : -0.3
																													default : -0.5		endswitch  }
END

;*************************************************************************
RULELIST "SimPrep_CSE_AirNet_Attic_Conditioned" 1 0 0 0
;*************************************************************************
	"Create Attic:AirNetIZXFERs[1] - U"				Attic:AirNetIZXFERs[1]			= {	CreateComp( cseIZXFER, substr( Name, 0, 48 ) +  "-U", "Default_AtticIZXFER" )  }
	"Create Attic:AirNetIZXFERs[2] - S"				Attic:AirNetIZXFERs[2]			= {	CreateComp( cseIZXFER, substr( Name, 0, 48 ) +  "-S", "Default_AtticIZXFER" )  }
	"Create Attic:AirNetIZXFERs[3] - D"				Attic:AirNetIZXFERs[3]			= {	CreateComp( cseIZXFER, substr( Name, 0, 48 ) +  "-D", "Default_AtticIZXFER" )  }

	"Set Attic:AirNetIZXFERs[1]:izZn1 - U"			Attic:AirNetIZXFERs[1]:izZn1	= {	Local( CSE_ZONE )  }
	"Set Attic:AirNetIZXFERs[2]:izZn1 - S"			Attic:AirNetIZXFERs[2]:izZn1	= {	Local( CSE_ZONE )  }
	"Set Attic:AirNetIZXFERs[3]:izZn1 - D"			Attic:AirNetIZXFERs[3]:izZn1	= {	Local( CSE_ZONE )  }

	"Set Attic:AirNetIZXFERs[1]:izALo - U"			Attic:AirNetIZXFERs[1]:izALo	= {	Proj:BldgELA_CeilSF * FloorArea * 0.25  }       ; removed 1.45 multiplier for AirNet Algorithm v14->15 update - SAC 10/09/23 (tic #1252)
	"Set Attic:AirNetIZXFERs[2]:izALo - S"			Attic:AirNetIZXFERs[2]:izALo	= {	Proj:BldgELA_CeilSF * FloorArea * 0.5   }
	"Set Attic:AirNetIZXFERs[3]:izALo - D"			Attic:AirNetIZXFERs[3]:izALo	= {	Proj:BldgELA_CeilSF * FloorArea * 0.25  }

	"Set Attic:AirNetIZXFERs[1]:izHD - U"			Attic:AirNetIZXFERs[1]:izHD	= {	max( 0.1, Local( Bottom ) )  }
	"Set Attic:AirNetIZXFERs[2]:izHD - S"			Attic:AirNetIZXFERs[2]:izHD	= {	max( 0.1, Local( Bottom ) )  }
	"Set Attic:AirNetIZXFERs[3]:izHD - D"			Attic:AirNetIZXFERs[3]:izHD	= {	max( 0.1, Local( Bottom ) )  }

	"Set Attic:AirNetIZXFERs[1]:izNVEff - U"		Attic:AirNetIZXFERs[1]:izNVEff ={	1  }
	"Set Attic:AirNetIZXFERs[2]:izNVEff - S"		Attic:AirNetIZXFERs[2]:izNVEff ={	1  }
	"Set Attic:AirNetIZXFERs[3]:izNVEff - D"		Attic:AirNetIZXFERs[3]:izNVEff ={	1  }

	"Set Attic:AirNetIZXFERs[2]:izCpr - S"			Attic:AirNetIZXFERs[2]:izCpr	= {	-0.65  }
	"Set Attic:AirNetIZXFERs[3]:izCpr - D"			Attic:AirNetIZXFERs[3]:izCpr	= {	-0.30  }
END


;*************************************************************************
RULELIST "Set_ZoneIAQ_SFam"  0 0 0 0
;*************************************************************************
	"Init Zone:IAQCFM_Exhaust[1]"		Zone:IAQCFM_Exhaust[1]	= {	0  }
	"Init Zone:IAQPwr_Exhaust[1]"		Zone:IAQPwr_Exhaust[1]	= {	0  }
	"Init Zone:IAQCFM_Supply[1]"		Zone:IAQCFM_Supply[1]	= {	0  }
	"Init Zone:IAQPwr_Supply[1]"		Zone:IAQPwr_Supply[1]	= {	0  }
   "Init Zone:IAQHRVCFM[1]"  			Zone:IAQHRVCFM[1]			= {	0  }		; SAC 5/20/13
   "Init Zone:IAQHRVPwr[1]"  			Zone:IAQHRVPwr[1]			= {	0  }
   "Init Zone:IAQBalCFM[1]"  			Zone:IAQBalCFM[1]			= {	0  }		; SAC 7/25/20
   "Init Zone:IAQBalPwr[1]"  			Zone:IAQBalPwr[1]			= {	0  }
   "Init Zone:IAQHRVCFMxRcvEff[1]"  Zone:IAQHRVCFMxRcvEff[1] ={	0  }
   "Init Zone:IAQHRVCFMxSRE[1]"  Zone:IAQHRVCFMxSRE[1] ={	0  }
   "Init Zone:IAQHRVCFMxASRE[1]"  Zone:IAQHRVCFMxASRE[1] ={	0  }

	"Init Zone:IAQCFM_Exhaust[2]"		Zone:IAQCFM_Exhaust[2]	= {	0  }
	"Init Zone:IAQPwr_Exhaust[2]"		Zone:IAQPwr_Exhaust[2]	= {	0  }
	"Init Zone:IAQCFM_Supply[2]"		Zone:IAQCFM_Supply[2]	= {	0  }
	"Init Zone:IAQPwr_Supply[2]"		Zone:IAQPwr_Supply[2]	= {	0  }
   "Init Zone:IAQHRVCFM[2]"  			Zone:IAQHRVCFM[2]			= {	0  }		; SAC 5/20/13
   "Init Zone:IAQHRVPwr[2]"  			Zone:IAQHRVPwr[2]			= {	0  }
   "Init Zone:IAQBalCFM[2]"  			Zone:IAQBalCFM[2]			= {	0  }		; SAC 7/25/20
   "Init Zone:IAQBalPwr[2]"  			Zone:IAQBalPwr[2]			= {	0  }
   "Init Zone:IAQHRVCFMxRcvEff[2]"  Zone:IAQHRVCFMxRcvEff[2] ={	0  }
   "Init Zone:IAQHRVCFMxSRE[2]"  Zone:IAQHRVCFMxSRE[2] ={	0  }
   "Init Zone:IAQHRVCFMxASRE[2]"  Zone:IAQHRVCFMxASRE[2] ={	0  }

	"Setup remaining IAQ if not disabled"	Proj:Action	= {	if (IAQDisabled < 0.5) then  EvalRulelist( "Set_ZoneIAQ_SFam_Details" )  else  UNCHANGED  endif  }
END

;*************************************************************************
RULELIST "Set_ZoneIAQ_SFam_Details"  0 0 0 0
   "Set Proj:ForceStdIAQFanPwr"  Proj:ForceStdIAQFanPwr =   ; SAC 09/01/20   ; added logic to reference Proj:StdDesignIAQFanPwr[1] - SAC 04/02/21   ; ApplyStdDesignIAQFromTable - SAC 04/03/21
      {  if (Proj:ApplyStdDesignIAQFromTable .AND. Proj:StdDesignFuel >= 11 .AND.
             IfValidAnd( Proj:StdDesignIAQFanPwr[1] > 0 ))
         then  Proj:StdDesignIAQFanPwr[1]
         else if (IfValidAnd( BypassRuleLimits > 0 ) .AND. IfValidAnd( Proj:AnalysisVersion >= 190200 ) .AND.
                  IfValidAnd( StdDesignIAQWperCFM > 0 ) .AND. LocalStatus( StdDesignIAQWperCFM ) > 5 .AND.
                  (IsStdOrSMFRun .OR. (RunAbbrev == "dr" .AND. IfValidAnd( ApplyStdIAQMaxPwrToDRtg > 0 ))))
         then  StdDesignIAQWperCFM
         else  UNDEFINED  endif endif  }
   "Set Proj:UseMaxIAQFanPwr"    Proj:UseMaxIAQFanPwr =     ; SAC 08/28/20
      {  if (IfValidAnd( BypassRuleLimits > 0 ) .AND. IfValidAnd( StdDesignIAQWperCFM > 0 ) .AND.
             (IsStdOrSMFRun .OR. (RunAbbrev == "dr" .AND. IfValidAnd( ApplyStdIAQMaxPwrToDRtg > 0 ))))
         then  StdDesignIAQWperCFM  else  9999  endif  }
  ; Fan #1
   ; SAC 8/12/16 - revised rules to reference new Proj:DefaultSimIAQCFM, in place of Proj:UnitMinIAQCFM[1], to use proper simulated value for addition alone analyses (tic #729) 
   ; added reference to new UnitIAQFan*[*]:FanHeatRecovMult & FanPowerMult - SAC 7/20/20 (tic #1174)
   ; revised to reference StdDesignIAQType, StdDesignIAQCFM & StdIAQCFMScaleFactor when BypassRuleLimits activated - SAC 08/27/20
   ; added AllowStdDesignFuel logic - SAC 04/02/21   ; ApplyStdDesignIAQFromTable - SAC 04/03/21
   "Set Proj:UnitIAQZone1[1]:IAQCFM_Exhaust[1]"    Proj:UnitIAQZone1[1]:IAQCFM_Exhaust[1]   =      ; revised for verified-existing fans - SAC 04/09/24 (tic #1304)
      {  if (UnitIAQOption[1] == 1 .AND. ((IfValidAnd( BypassRuleLimits > 0 ) .AND. IfValidAnd( AnalysisVersion >= 190200 )) .OR. Proj:ApplyStdDesignIAQFromTable) .AND.
             IfValidAnd( StdDesignIAQType[1] > 0 ) .AND. (IsStdOrSMFRun))
         then  if (IfValidAnd( StdDesignIAQType[1] = 1 ))
               then  if (IfValidAnd( StdDesignIAQCFM[1] > 0 ))
                     then  StdDesignIAQCFM[1]
                     else  ValidOr( StdIAQCFMScaleFactor[1], 1 ) * ValidOr( MinUnbalIAQCFM[1], 0 )
                     endif
               else  UNCHANGED
               endif
         else if (UnitIAQOption[1] == 1) then  DefaultSimIAQCFM[1]
         else if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan1[1] ) > 0.5)
         then  if (UnitIAQUseVerifExFan1[1] == 1 .AND. IfValidAnd( UnitIAQExFan1[1]:IAQFanType = 1 ))
               then  min( UnitIAQExFan1[1]:IAQCFM, UnitIAQFan1[1]:IAQCFM ) * UnitIAQFanCnt1[1]
               else if (UnitIAQUseVerifExFan1[1] == 0 .AND. UnitIAQFan1[1]:IAQFanType == 1)
               then  UnitIAQFan1[1]:IAQCFM * UnitIAQFanCnt1[1]
               else  UNCHANGED  endif endif
         else  UNCHANGED  endif endif endif  }
   "Set Proj:UnitIAQZone1[1]:IAQPwr_Exhaust[1]"    Proj:UnitIAQZone1[1]:IAQPwr_Exhaust[1]   =         ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/05/24 (tic #1304)
      {  if (UnitIAQOption[1] == 1 .AND. ((IfValidAnd( BypassRuleLimits > 0 ) .AND. IfValidAnd( AnalysisVersion >= 190200 )) .OR. Proj:ApplyStdDesignIAQFromTable) .AND.
             IfValidAnd( StdDesignIAQType[1] > 0 ) .AND. (IsStdOrSMFRun))
         then  if (IfValidAnd( StdDesignIAQType[1] = 1 ))
               then  UnitIAQZone1[1]:IAQCFM_Exhaust[1] * ValidOr( ForceStdIAQFanPwr, min( UseMaxIAQFanPwr, min( DefaultIAQFanPwr, ValidOr( StdDesignIAQWperCFM, 9999 ) ) ) )
               else  UNCHANGED
               endif
         else if (UnitIAQOption[1] == 1) then  DefaultSimIAQCFM[1] * ValidOr( ForceStdIAQFanPwr, min( UseMaxIAQFanPwr, Proj:DefaultIAQFanPwr ) )
         else if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan1[1] ) > 0.5)
         then  if (UnitIAQUseVerifExFan1[1] == 1 .AND. IfValidAnd( UnitIAQExFan1[1]:IAQFanType = 1 ))
               then  min( UnitIAQExFan1[1]:IAQCFM, UnitIAQFan1[1]:IAQCFM ) * UnitIAQFanCnt1[1] * UnitIAQExFan1[1]:WperCFMIAQ
               else if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan1[1]:Status == 1 ) .AND.
                        UnitIAQUseVerifExFan1[1] == 0 .AND. UnitIAQFan1[1]:IAQFanType == 1 .AND. IfValidAnd( UnitIAQFan1[1]:WperCFMIAQ > 0 ))
               then  UnitIAQFan1[1]:IAQCFM * UnitIAQFanCnt1[1] * UnitIAQFan1[1]:WperCFMIAQ
               else if (UnitIAQUseVerifExFan1[1] == 0 .AND. UnitIAQFan1[1]:IAQFanType == 1)
               then  UnitIAQFan1[1]:IAQCFM * UnitIAQFanCnt1[1] * ValidOr( ForceStdIAQFanPwr, min( UseMaxIAQFanPwr, UnitIAQFan1[1]:WperCFMIAQ ) ) * UnitIAQFan1[1]:FanPowerMult
               else  UNCHANGED  endif endif endif
         else  UNCHANGED  endif endif endif  }
   "Set Proj:UnitIAQZone1[1]:IAQCFM_Supply[1]"     Proj:UnitIAQZone1[1]:IAQCFM_Supply[1]   =
      {  if (UnitIAQOption[1] == 1 .AND. ((IfValidAnd( BypassRuleLimits > 0 ) .AND. IfValidAnd( AnalysisVersion >= 190200 )) .OR. Proj:ApplyStdDesignIAQFromTable) .AND.
             IfValidAnd( StdDesignIAQType[1] > 0 ) .AND. (IsStdOrSMFRun))
         then  if (IfValidAnd( StdDesignIAQType[1] = 2 ))
               then  if (IfValidAnd( StdDesignIAQCFM[1] > 0 ))
                     then  StdDesignIAQCFM[1]
                     else  ValidOr( StdIAQCFMScaleFactor[1], 1 ) * ValidOr( MinUnbalIAQCFM[1], 0 )
                     endif
               else  UNCHANGED
               endif
         else if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan1[1] ) > 0.5)
         then  if (UnitIAQUseVerifExFan1[1] == 1 .AND. IfValidAnd( UnitIAQExFan1[1]:IAQFanType = 2 ))
               then  min( UnitIAQExFan1[1]:IAQCFM, UnitIAQFan1[1]:IAQCFM ) * UnitIAQFanCnt1[1]
               else if (UnitIAQUseVerifExFan1[1] == 0 .AND. UnitIAQFan1[1]:IAQFanType == 2)
               then  UnitIAQFan1[1]:IAQCFM * UnitIAQFanCnt1[1]
               else  UNCHANGED  endif endif
         else  UNCHANGED  endif endif  }
   "Set Proj:UnitIAQZone1[1]:IAQPwr_Supply[1]"     Proj:UnitIAQZone1[1]:IAQPwr_Supply[1]   =    ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/04/24 (tic #1304)
      {  if (UnitIAQOption[1] == 1 .AND. ((IfValidAnd( BypassRuleLimits > 0 ) .AND. IfValidAnd( AnalysisVersion >= 190200 )) .OR. Proj:ApplyStdDesignIAQFromTable) .AND.
             IfValidAnd( StdDesignIAQType[1] > 0 ) .AND. (IsStdOrSMFRun))
         then  if (IfValidAnd( StdDesignIAQType[1] = 2 ))
               then  UnitIAQZone1[1]:IAQCFM_Supply[1] * ValidOr( ForceStdIAQFanPwr, min( UseMaxIAQFanPwr, min( DefaultIAQFanPwr, ValidOr( StdDesignIAQWperCFM, 9999 ) ) ) )
               else  UNCHANGED
               endif
         else if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan1[1] ) > 0.5)
         then  if (UnitIAQUseVerifExFan1[1] == 1 .AND. IfValidAnd( UnitIAQExFan1[1]:IAQFanType = 2 ))
               then  min( UnitIAQExFan1[1]:IAQCFM, UnitIAQFan1[1]:IAQCFM ) * UnitIAQFanCnt1[1] * UnitIAQExFan1[1]:WperCFMIAQ
               else if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan1[1]:Status == 1 ) .AND.
                        UnitIAQUseVerifExFan1[1] == 0 .AND. UnitIAQFan1[1]:IAQFanType == 2 .AND. IfValidAnd( UnitIAQFan1[1]:WperCFMIAQ > 0 ))
               then  UnitIAQFan1[1]:IAQCFM * UnitIAQFanCnt1[1] * UnitIAQFan1[1]:WperCFMIAQ
               else if (UnitIAQUseVerifExFan1[1] == 0 .AND. UnitIAQFan1[1]:IAQFanType == 2)
               then  UnitIAQFan1[1]:IAQCFM * UnitIAQFanCnt1[1] * ValidOr( ForceStdIAQFanPwr, min( UseMaxIAQFanPwr, UnitIAQFan1[1]:WperCFMIAQ ) ) * UnitIAQFan1[1]:FanPowerMult
               else  UNCHANGED  endif endif endif
         else  UNCHANGED  endif endif  }
   "Set Proj:UnitIAQZone1[1]:IAQHRVCFM[1]"           Proj:UnitIAQZone1[1]:IAQHRVCFM[1]      =
      {  if (UnitIAQOption[1] == 1 .AND. ((IfValidAnd( BypassRuleLimits > 0 ) .AND. IfValidAnd( AnalysisVersion >= 190200 )) .OR. Proj:ApplyStdDesignIAQFromTable) .AND.
             IfValidAnd( StdDesignIAQType[1] > 0 ) .AND. IsStdOrSMFRun)
         then  if (IfValidAnd( StdDesignIAQType[1] >= 3 ))
               then  if (IfValidAnd( StdDesignIAQCFM[1] > 0 ))
                     then  StdDesignIAQCFM[1]
                     else  ValidOr( StdIAQCFMScaleFactor[1], 1 ) * ValidOr( MinBalancedIAQCFM[1], 0 )
                     endif
               else  UNCHANGED
               endif
         else if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan1[1] ) > 0.5)
         then  if (UnitIAQUseVerifExFan1[1] == 1 .AND. IfValidAnd( UnitIAQExFan1[1]:IAQFanType = 3 ))
               then  min( UnitIAQExFan1[1]:IAQCFM, UnitIAQFan1[1]:IAQCFM ) * UnitIAQFanCnt1[1]
               else if (UnitIAQUseVerifExFan1[1] == 0 .AND. UnitIAQFan1[1]:IAQFanType == 3)
               then  UnitIAQFan1[1]:IAQCFM * UnitIAQFanCnt1[1]
               else  UNCHANGED  endif endif
         else   UNCHANGED  endif endif  }
   "Set Proj:UnitIAQZone1[1]:IAQHRVPwr[1]"           Proj:UnitIAQZone1[1]:IAQHRVPwr[1]      =         ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/05/24 (tic #1304)
      {  if (UnitIAQOption[1] == 1 .AND. ((IfValidAnd( BypassRuleLimits > 0 ) .AND. IfValidAnd( AnalysisVersion >= 190200 )) .OR. Proj:ApplyStdDesignIAQFromTable) .AND.
             IfValidAnd( StdDesignIAQType[1] > 0 ) .AND. IsStdOrSMFRun)
         then  if (IfValidAnd( StdDesignIAQType[1] >= 3 ))
               then  UnitIAQZone1[1]:IAQHRVCFM[1] * ValidOr( ForceStdIAQFanPwr, min( UseMaxIAQFanPwr, min( 0.6, ValidOr( StdDesignIAQWperCFM, 9999 ) ) ) )
               else  UNCHANGED
               endif
         else if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan1[1] ) > 0.5)
         then  if (UnitIAQUseVerifExFan1[1] == 1 .AND. IfValidAnd( UnitIAQExFan1[1]:IAQFanType = 3 ) .AND. IfValidAnd( UnitIAQFan1[1]:WperCFMIAQ > 0 ))
               then  min( UnitIAQExFan1[1]:IAQCFM, UnitIAQFan1[1]:IAQCFM ) * UnitIAQFanCnt1[1] * UnitIAQFan1[1]:WperCFMIAQ
               else if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan1[1]:Status == 1 ) .AND. 
                        UnitIAQFan1[1]:IAQFanType == 3 .AND. UnitIAQUseVerifExFan1[1] == 0 .AND. IfValidAnd( UnitIAQFan1[1]:WperCFMIAQ > 0 ))
               then  UnitIAQFan1[1]:IAQCFM * UnitIAQFanCnt1[1] * UnitIAQFan1[1]:WperCFMIAQ
               else if (UnitIAQFan1[1]:IAQFanType == 3 .AND. UnitIAQUseVerifExFan1[1] == 0)
               then  UnitIAQFan1[1]:IAQCFM * UnitIAQFanCnt1[1] * ValidOr( ForceStdIAQFanPwr, min( UseMaxIAQFanPwr, UnitIAQFan1[1]:WperCFMIAQ ) ) * UnitIAQFan1[1]:FanPowerMult
               else  UNCHANGED  endif endif endif
         else  UNCHANGED  endif endif  }
   "Set Proj:UnitIAQZone1[1]:IAQBalCFM[1]"           Proj:UnitIAQZone1[1]:IAQBalCFM[1]      =
      {  if (UnitIAQOption[1] == 1 .AND. ((IfValidAnd( BypassRuleLimits > 0 ) .AND. IfValidAnd( AnalysisVersion >= 190200 )) .OR. Proj:ApplyStdDesignIAQFromTable) .AND.
             IfValidAnd( StdDesignIAQType[1] > 0 ) .AND. IsStdOrSMFRun)
         then  if (IfValidAnd( StdDesignIAQType[1] >= 3 ))
               then  if (IfValidAnd( StdDesignIAQCFM[1] > 0 ))
                     then  StdDesignIAQCFM[1]
                     else  ValidOr( StdIAQCFMScaleFactor[1], 1 ) * ValidOr( MinBalancedIAQCFM[1], 0 )
                     endif
               else  UNCHANGED
               endif
         else if (UnitIAQOption[1] == 2 .AND. UnitIAQUseVerifExFan1[1] == 1 .AND. IfValidAnd( UnitIAQExFan1[1]:IAQFanType = 3 ) .AND.
                  IfValidAnd( AnalysisVersion >= 220301 )==0 .AND. IfValidAnd( UnitIAQExFan1[1]:IncludesRecov > 0 )==0)
         then  UnitIAQZone1[1]:IAQBalCFM[1]  + (min( UnitIAQExFan1[1]:IAQCFM, UnitIAQFan1[1]:IAQCFM ) * UnitIAQFanCnt1[1])
         else if (UnitIAQOption[1] == 2 .AND. UnitIAQUseVerifExFan1[1] == 0 .AND. IfValidAnd( UnitIAQFan1[1]:IAQFanType = 3 ) .AND.
             ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( UnitIAQFan1[1]:IAQRecovEffect = 0 )) .OR.
               (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( UnitIAQFan1[1]:IncludesRecov  = 0 )) ))
         then  UnitIAQZone1[1]:IAQBalCFM[1]  + (UnitIAQFan1[1]:IAQCFM * UnitIAQFanCnt1[1])
         else  UNCHANGED  endif endif endif  }
   "Set Proj:UnitIAQZone1[1]:IAQBalPwr[1]"           Proj:UnitIAQZone1[1]:IAQBalPwr[1]      =         ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/05/24 (tic #1304)
      {  if (UnitIAQOption[1] == 1 .AND. ((IfValidAnd( BypassRuleLimits > 0 ) .AND. IfValidAnd( AnalysisVersion >= 190200 )) .OR. Proj:ApplyStdDesignIAQFromTable) .AND.
             IfValidAnd( StdDesignIAQType[1] > 0 ) .AND. IsStdOrSMFRun)
         then  if (IfValidAnd( StdDesignIAQType[1] >= 3 ))
               then  UnitIAQZone1[1]:IAQBalCFM[1] * ValidOr( ForceStdIAQFanPwr, min( UseMaxIAQFanPwr, min( 0.6, ValidOr( StdDesignIAQWperCFM, 9999 ) ) ) )
               else  UNCHANGED
               endif
         else if (UnitIAQOption[1] == 2 .AND. UnitIAQUseVerifExFan1[1] == 1 .AND. IfValidAnd( UnitIAQExFan1[1]:IAQFanType = 3 ) .AND.
                  IfValidAnd( AnalysisVersion >= 220301 )==0 .AND. IfValidAnd( UnitIAQExFan1[1]:IncludesRecov > 0 )==0)
         then        UnitIAQZone1[1]:IAQBalPwr[1]  + (min( UnitIAQExFan1[1]:IAQCFM, UnitIAQFan1[1]:IAQCFM ) * UnitIAQFanCnt1[1] * UnitIAQExFan1[1]:WperCFMIAQ)
         else if (UnitIAQOption[1] == 2 .AND. UnitIAQUseVerifExFan1[1] == 0 .AND. IfValidAnd( UnitIAQFan1[1]:IAQFanType = 3 ) .AND.
                  ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( UnitIAQFan1[1]:IAQRecovEffect = 0 )) .OR.
                    (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( UnitIAQFan1[1]:IncludesRecov  = 0 )) ))
         then  if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan1[1]:Status == 1 ))
               then  UnitIAQZone1[1]:IAQBalPwr[1]  + (UnitIAQFan1[1]:IAQCFM * UnitIAQFanCnt1[1] * UnitIAQFan1[1]:WperCFMIAQ)
               else  UnitIAQZone1[1]:IAQBalPwr[1]  + (UnitIAQFan1[1]:IAQCFM * UnitIAQFanCnt1[1] * ValidOr( ForceStdIAQFanPwr, min( UseMaxIAQFanPwr, UnitIAQFan1[1]:WperCFMIAQ ) ) * UnitIAQFan1[1]:FanPowerMult)
               endif
         else  UNCHANGED  endif endif endif  }
   "Set Proj:UnitIAQZone1[1]:IAQHRVCFMxRcvEff[1]"  Proj:UnitIAQZone1[1]:IAQHRVCFMxRcvEff[1]   =
      {  if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan1[1] ) > 0.5 .AND. IfValidAnd( Proj:AnalysisVersion >= 190200 )==0)
         then   if (UnitIAQFan1[1]:IAQFanType == 3) then  UnitIAQFan1[1]:IAQCFM * UnitIAQFanCnt1[1] * UnitIAQFan1[1]:IAQRecovEffect  else  UNCHANGED  endif
         else   UNCHANGED  endif  }
   "Set Proj:UnitIAQZone1[1]:IAQHRVCFMxSRE[1]"  Proj:UnitIAQZone1[1]:IAQHRVCFMxSRE[1]   =
      {  if (UnitIAQOption[1] == 1 .AND. ((IfValidAnd( BypassRuleLimits > 0 ) .AND. IfValidAnd( AnalysisVersion >= 190200 )) .OR. Proj:ApplyStdDesignIAQFromTable) .AND.
             IfValidAnd( StdDesignIAQType[1] > 0 ) .AND. IsStdOrSMFRun)
         then  if (IfValidAnd( StdDesignIAQType[1] = 4 ) .AND. IfValidAnd( StdIAQHtRec_SRE[1] > 0 ) .AND. IfValidAnd( StdIAQHtRec_ASRE[1] > 0 ))
               then  UnitIAQZone1[1]:IAQHRVCFM[1] * StdIAQHtRec_SRE[1]
               else  UNCHANGED
               endif
         else if (UnitIAQOption[1] == 2 .AND. UnitIAQUseVerifExFan1[1] == 1 .AND. IfValidAnd( UnitIAQExFan1[1]:SensRecovEff > 0 ) .AND.
                  IfValidAnd( AnalysisVersion >= 220301 )==0 .AND. IfValidAnd( UnitIAQExFan1[1]:IncludesRecov > 0 ) .AND. IfValidAnd( UnitIAQExFan1[1]:IAQFanType = 3 ))
         then  min( UnitIAQExFan1[1]:IAQCFM, UnitIAQFan1[1]:IAQCFM ) * UnitIAQFanCnt1[1] * UnitIAQExFan1[1]:SensRecovEff * UnitIAQExFan1[1]:FanHeatRecovMult
         else if (UnitIAQOption[1] == 2 .AND. UnitIAQUseVerifExFan1[1] == 0 .AND. IfValidAnd( UnitIAQFan1[1]:SensRecovEff > 0 ) .AND.
                  (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .OR. IfValidAnd( UnitIAQFan1[1]:IncludesRecov > 0 )) .AND. IfValidAnd( UnitIAQFan1[1]:IAQFanType = 3 ))
         then   UnitIAQFan1[1]:IAQCFM * UnitIAQFanCnt1[1] * UnitIAQFan1[1]:SensRecovEff * UnitIAQFan1[1]:FanHeatRecovMult
         else   UNCHANGED  endif endif endif  }
   "Set Proj:UnitIAQZone1[1]:IAQHRVCFMxASRE[1]"  Proj:UnitIAQZone1[1]:IAQHRVCFMxASRE[1]   =
      {  if (UnitIAQOption[1] == 1 .AND. ((IfValidAnd( BypassRuleLimits > 0 ) .AND. IfValidAnd( AnalysisVersion >= 190200 )) .OR. Proj:ApplyStdDesignIAQFromTable) .AND.
             IfValidAnd( StdDesignIAQType[1] > 0 ) .AND. IsStdOrSMFRun)
         then  if (IfValidAnd( StdDesignIAQType[1] = 4 ) .AND. IfValidAnd( StdIAQHtRec_SRE[1] > 0 ) .AND. IfValidAnd( StdIAQHtRec_ASRE[1] > 0 ))
               then  UnitIAQZone1[1]:IAQHRVCFM[1] * StdIAQHtRec_ASRE[1]
               else  UNCHANGED
               endif
         else if (UnitIAQOption[1] == 2 .AND. UnitIAQUseVerifExFan1[1] == 1 .AND. IfValidAnd( UnitIAQExFan1[1]:AdjSensRecovEff > 0 ) .AND.
                  IfValidAnd( AnalysisVersion >= 220301 )==0 .AND. IfValidAnd( UnitIAQExFan1[1]:IncludesRecov > 0 ) .AND. IfValidAnd( UnitIAQExFan1[1]:IAQFanType = 3 ))
         then  min( UnitIAQExFan1[1]:IAQCFM, UnitIAQFan1[1]:IAQCFM ) * UnitIAQFanCnt1[1] * UnitIAQExFan1[1]:AdjSensRecovEff * UnitIAQExFan1[1]:FanHeatRecovMult
         else if (UnitIAQOption[1] == 2 .AND. UnitIAQUseVerifExFan1[1] == 0 .AND. IfValidAnd( UnitIAQFan1[1]:AdjSensRecovEff > 0 ) .AND.
                  (IfValidAnd( AnalysisVersion >= 190200 )==0 .OR. IfValidAnd( UnitIAQFan1[1]:IncludesRecov > 0 )) .AND. IfValidAnd( UnitIAQFan1[1]:IAQFanType = 3 ))
         then  UnitIAQFan1[1]:IAQCFM * UnitIAQFanCnt1[1] * UnitIAQFan1[1]:AdjSensRecovEff * UnitIAQFan1[1]:FanHeatRecovMult
         else  UNCHANGED  endif endif endif  }

  ; Fans #2-4           ; revised for verified-existing fans and via For loops - SAC 04/09/24 (tic #1304)
   "Set Proj:UnitIAQZone2-4[1]:IAQCFM_Exhaust[1]"    for:#F=(2to4)   Proj:UnitIAQZone#F[1]:IAQCFM_Exhaust[1]   = 
      {  if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan#F[1] ) > 0.5)
         then  if (UnitIAQUseVerifExFan#F[1] == 1 .AND. UnitIAQExFan#F[1]:IAQFanType == 1)
               then  UnitIAQZone#F[1]:IAQCFM_Exhaust[1]  + (min( UnitIAQExFan#F[1]:IAQCFM, UnitIAQFan#F[1]:IAQCFM ) * UnitIAQFanCnt#F[1])
               else if (UnitIAQUseVerifExFan#F[1] == 0 .AND. UnitIAQFan#F[1]:IAQFanType == 1) 
               then  UnitIAQZone#F[1]:IAQCFM_Exhaust[1]  + (UnitIAQFan#F[1]:IAQCFM * UnitIAQFanCnt#F[1])
               else  UNCHANGED  endif endif
         else  UNCHANGED  endif  }
   ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/05/24 (tic #1304)
   "Set Proj:UnitIAQZone2-4[1]:IAQPwr_Exhaust[1]"    for:#F=(2to4)   Proj:UnitIAQZone#F[1]:IAQPwr_Exhaust[1]   = 
      {  if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan#F[1] ) > 0.5)
         then  if (UnitIAQUseVerifExFan#F[1] == 1 .AND. UnitIAQExFan#F[1]:IAQFanType == 1)
               then  UnitIAQZone#F[1]:IAQPwr_Exhaust[1]  + (min( UnitIAQExFan#F[1]:IAQCFM, UnitIAQFan#F[1]:IAQCFM ) * UnitIAQFanCnt#F[1] * UnitIAQFan#F[1]:WperCFMIAQ)
               else if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan#F[1]:Status == 1 ) .AND. UnitIAQUseVerifExFan#F[1] == 0 .AND. 
                        UnitIAQFan#F[1]:IAQFanType == 1 .AND. IfValidAnd( UnitIAQFan#F[1]:WperCFMIAQ > 0 ))
               then  UnitIAQZone#F[1]:IAQPwr_Exhaust[1]  + (UnitIAQFan#F[1]:IAQCFM * UnitIAQFanCnt#F[1] * UnitIAQFan#F[1]:WperCFMIAQ)
               else if (UnitIAQUseVerifExFan#F[1] == 0 .AND. UnitIAQFan#F[1]:IAQFanType == 1) 
               then  UnitIAQZone#F[1]:IAQPwr_Exhaust[1]  + (UnitIAQFan#F[1]:IAQCFM * UnitIAQFanCnt#F[1] * ValidOr( ForceStdIAQFanPwr, min( UseMaxIAQFanPwr, UnitIAQFan#F[1]:WperCFMIAQ ) ) * UnitIAQFan#F[1]:FanPowerMult)
               else  UNCHANGED  endif endif endif
         else  UNCHANGED  endif  }
   "Set Proj:UnitIAQZone2-4[1]:IAQCFM_Supply[1]"     for:#F=(2to4)   Proj:UnitIAQZone#F[1]:IAQCFM_Supply[1]   = 
      {  if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan#F[1] ) > 0.5)
         then  if (UnitIAQUseVerifExFan#F[1] == 1 .AND. UnitIAQExFan#F[1]:IAQFanType == 2)
               then  UnitIAQZone#F[1]:IAQCFM_Supply[1]  + (min( UnitIAQExFan#F[1]:IAQCFM, UnitIAQFan#F[1]:IAQCFM ) * UnitIAQFanCnt#F[1])
               else if (UnitIAQUseVerifExFan#F[1] == 0 .AND. UnitIAQFan#F[1]:IAQFanType == 2) 
               then  UnitIAQZone#F[1]:IAQCFM_Supply[1]  + (UnitIAQFan#F[1]:IAQCFM * UnitIAQFanCnt#F[1])
               else  UNCHANGED  endif endif
         else  UNCHANGED  endif  }
   ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/04/24 (tic #1304)
   "Set Proj:UnitIAQZone2-4[1]:IAQPwr_Supply[1]"     for:#F=(2to4)   Proj:UnitIAQZone#F[1]:IAQPwr_Supply[1]   = 
      {  if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan#F[1] ) > 0.5)
         then  if (UnitIAQUseVerifExFan#F[1] == 1 .AND. UnitIAQExFan#F[1]:IAQFanType == 2)
               then  UnitIAQZone#F[1]:IAQPwr_Supply[1]  + (min( UnitIAQExFan#F[1]:IAQCFM, UnitIAQFan#F[1]:IAQCFM ) * UnitIAQFanCnt#F[1] * UnitIAQExFan#F[1]:WperCFMIAQ)
               else if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan#F[1]:Status == 1 ) .AND. UnitIAQUseVerifExFan#F[1] == 0 .AND. 
                        UnitIAQFan#F[1]:IAQFanType == 2 .AND. IfValidAnd( UnitIAQFan#F[1]:WperCFMIAQ > 0 ))
               then  UnitIAQZone#F[1]:IAQPwr_Supply[1]  + (UnitIAQFan#F[1]:IAQCFM * UnitIAQFanCnt#F[1] * UnitIAQFan#F[1]:WperCFMIAQ)
               else if (UnitIAQUseVerifExFan#F[1] == 0 .AND. UnitIAQFan#F[1]:IAQFanType == 2) 
               then  UnitIAQZone#F[1]:IAQPwr_Supply[1]  + (UnitIAQFan#F[1]:IAQCFM * UnitIAQFanCnt#F[1] * ValidOr( ForceStdIAQFanPwr, min( UseMaxIAQFanPwr, UnitIAQFan#F[1]:WperCFMIAQ ) ) * UnitIAQFan#F[1]:FanPowerMult)
               else  UNCHANGED  endif endif endif
         else  UNCHANGED  endif  }
   "Set Proj:UnitIAQZone2-4[1]:IAQHRVCFM[1]"  			for:#F=(2to4)   Proj:UnitIAQZone#F[1]:IAQHRVCFM[1]		= 
      {  if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan#F[1] ) > 0.5)
         then	if (UnitIAQUseVerifExFan#F[1] == 1 .AND. UnitIAQExFan#F[1]:IAQFanType == 3)
               then  UnitIAQZone#F[1]:IAQHRVCFM[1]  + (min( UnitIAQExFan#F[1]:IAQCFM, UnitIAQFan#F[1]:IAQCFM ) * UnitIAQFanCnt#F[1])
               else if (UnitIAQUseVerifExFan#F[1] == 0 .AND. UnitIAQFan#F[1]:IAQFanType == 3) 
               then  UnitIAQZone#F[1]:IAQHRVCFM[1]  + (UnitIAQFan#F[1]:IAQCFM * UnitIAQFanCnt#F[1])
               else  UNCHANGED  endif endif
         else	UNCHANGED  endif  }
   ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/05/24 (tic #1304)
   "Set Proj:UnitIAQZone2-4[1]:IAQHRVPwr[1]"  			for:#F=(2to4)   Proj:UnitIAQZone#F[1]:IAQHRVPwr[1]		= 
      {  if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan#F[1] ) > 0.5)
         then	if (UnitIAQUseVerifExFan#F[1] == 1 .AND. UnitIAQExFan#F[1]:IAQFanType == 3)
               then  UnitIAQZone#F[1]:IAQHRVPwr[1]  + (min( UnitIAQExFan#F[1]:IAQCFM, UnitIAQFan#F[1]:IAQCFM ) * UnitIAQFanCnt#F[1] * UnitIAQFan#F[1]:WperCFMIAQ)
               else if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan#F[1]:Status == 1 ) .AND. UnitIAQUseVerifExFan#F[1] == 0 .AND. 
                        UnitIAQFan#F[1]:IAQFanType == 3 .AND. IfValidAnd( UnitIAQFan#F[1]:WperCFMIAQ > 0 ))
               then  UnitIAQZone#F[1]:IAQHRVPwr[1]  + (UnitIAQFan#F[1]:IAQCFM * UnitIAQFanCnt#F[1] * UnitIAQFan#F[1]:WperCFMIAQ)
               else if (UnitIAQUseVerifExFan#F[1] == 0 .AND. UnitIAQFan#F[1]:IAQFanType == 3) 
               then  UnitIAQZone#F[1]:IAQHRVPwr[1]  + (UnitIAQFan#F[1]:IAQCFM * UnitIAQFanCnt#F[1] * ValidOr( ForceStdIAQFanPwr, min( UseMaxIAQFanPwr, UnitIAQFan#F[1]:WperCFMIAQ ) ) * UnitIAQFan#F[1]:FanPowerMult)
               else  UNCHANGED  endif endif endif
         else	UNCHANGED  endif  }
   "Set Proj:UnitIAQZone2-4[1]:IAQBalCFM[1]"  			for:#F=(2to4)   Proj:UnitIAQZone#F[1]:IAQBalCFM[1]		= 
      {  if (UnitIAQOption[1] == 2 .AND. UnitIAQUseVerifExFan#F[1] == 1 .AND. IfValidAnd( UnitIAQExFan#F[1]:IAQFanType = 3 ) .AND.
             IfValidAnd( Proj:AnalysisVersion >= 190200 ) .AND. IfValidAnd( UnitIAQExFan#F[1]:IncludesRecov > 0 )==0)
         then  UnitIAQZone#F[1]:IAQBalCFM[1]  + (min( UnitIAQExFan#F[1]:IAQCFM, UnitIAQFan#F[1]:IAQCFM ) * UnitIAQFanCnt#F[1])
         else if (UnitIAQOption[1] == 2 .AND. UnitIAQUseVerifExFan#F[1] == 0 .AND. IfValidAnd( UnitIAQFan#F[1]:IAQFanType = 3 ) .AND.
                  ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( UnitIAQFan#F[1]:IAQRecovEffect = 0 )) .OR.
                    (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( UnitIAQFan#F[1]:IncludesRecov  = 0 )) ))
         then	UnitIAQZone#F[1]:IAQBalCFM[1]  + (UnitIAQFan#F[1]:IAQCFM * UnitIAQFanCnt#F[1])
         else  UNCHANGED  endif endif  }
   ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/05/24 (tic #1304)
   "Set Proj:UnitIAQZone2-4[1]:IAQBalPwr[1]"  			for:#F=(2to4)   Proj:UnitIAQZone#F[1]:IAQBalPwr[1]		= 
      {  if (UnitIAQOption[1] == 2 .AND. UnitIAQUseVerifExFan#F[1] == 1 .AND. IfValidAnd( UnitIAQExFan#F[1]:IAQFanType = 3 ) .AND.
             IfValidAnd( Proj:AnalysisVersion >= 190200 ) .AND. IfValidAnd( UnitIAQExFan#F[1]:IncludesRecov > 0 )==0)
         then  UnitIAQZone#F[1]:IAQBalPwr[1]  + (min( UnitIAQExFan#F[1]:IAQCFM, UnitIAQFan#F[1]:IAQCFM ) * UnitIAQFanCnt#F[1] * UnitIAQExFan#F[1]:WperCFMIAQ)
         else if (UnitIAQOption[1] == 2 .AND. UnitIAQUseVerifExFan#F[1] == 0 .AND. IfValidAnd( UnitIAQFan#F[1]:IAQFanType = 3 ) .AND.
                     ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( UnitIAQFan#F[1]:IAQRecovEffect = 0 )) .OR.
                       (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( UnitIAQFan#F[1]:IncludesRecov  = 0 )) ))
         then	if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan#F[1]:Status == 1 ))
               then  UnitIAQZone#F[1]:IAQBalPwr[1]  + (UnitIAQFan#F[1]:IAQCFM * UnitIAQFanCnt#F[1] * UnitIAQFan#F[1]:WperCFMIAQ)
               else  UnitIAQZone#F[1]:IAQBalPwr[1]  + (UnitIAQFan#F[1]:IAQCFM * UnitIAQFanCnt#F[1] * ValidOr( ForceStdIAQFanPwr, min( UseMaxIAQFanPwr, UnitIAQFan#F[1]:WperCFMIAQ ) ) * UnitIAQFan#F[1]:FanPowerMult)
               endif
         else  UNCHANGED  endif endif  }
   "Set Proj:UnitIAQZone2-4[1]:IAQHRVCFMxRcvEff[1]"  for:#F=(2to4)   Proj:UnitIAQZone#F[1]:IAQHRVCFMxRcvEff[1]	=
      {  if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan#F[1] ) > 0.5 .AND. IfValidAnd( Proj:AnalysisVersion >= 190200 )==0)
         then	if (UnitIAQFan#F[1]:IAQFanType == 3) 
               then  UnitIAQZone#F[1]:IAQHRVCFMxRcvEff[1]  + (UnitIAQFan#F[1]:IAQCFM * UnitIAQFanCnt#F[1] * UnitIAQFan#F[1]:IAQRecovEffect)
               else  UNCHANGED  endif
         else	UNCHANGED  endif  }
   "Set Proj:UnitIAQZone2-4[1]:IAQHRVCFMxSRE[1]"     for:#F=(2to4)   Proj:UnitIAQZone#F[1]:IAQHRVCFMxSRE[1]	=
      {  if (UnitIAQOption[1] == 2 .AND. UnitIAQUseVerifExFan#F[1] == 1 .AND. IfValidAnd( UnitIAQExFan#F[1]:IAQFanType = 3 ) .AND.
             IfValidAnd( Proj:AnalysisVersion >= 190200 ) .AND. IfValidAnd( UnitIAQExFan#F[1]:IncludesRecov > 0 ) .AND. IfValidAnd( UnitIAQExFan#F[1]:SensRecovEff > 0 ))
         then  UnitIAQZone#F[1]:IAQHRVCFMxSRE[1]  + (min( UnitIAQExFan#F[1]:IAQCFM, UnitIAQFan#F[1]:IAQCFM ) * UnitIAQFanCnt#F[1] * UnitIAQExFan#F[1]:SensRecovEff * UnitIAQExFan#F[1]:FanHeatRecovMult)
         else if (UnitIAQOption[1] == 2 .AND. UnitIAQUseVerifExFan#F[1] == 0 .AND. LocalCompAssigned( UnitIAQFan#F[1] ) > 0.5 .AND. IfValidAnd( UnitIAQFan#F[1]:SensRecovEff > 0 ) .AND.
                  (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .OR. IfValidAnd( UnitIAQFan#F[1]:IncludesRecov > 0 )))
         then	if (UnitIAQFan#F[1]:IAQFanType == 3)
               then  UnitIAQZone#F[1]:IAQHRVCFMxSRE[1]  + (UnitIAQFan#F[1]:IAQCFM * UnitIAQFanCnt#F[1] * UnitIAQFan#F[1]:SensRecovEff * UnitIAQFan#F[1]:FanHeatRecovMult)
               else  UNCHANGED  endif
         else	UNCHANGED  endif endif  }
   "Set Proj:UnitIAQZone2-4[1]:IAQHRVCFMxASRE[1]"    for:#F=(2to4)   Proj:UnitIAQZone#F[1]:IAQHRVCFMxASRE[1]	=
      {  if (UnitIAQOption[1] == 2 .AND. UnitIAQUseVerifExFan#F[1] == 1 .AND. IfValidAnd( UnitIAQExFan#F[1]:IAQFanType = 3 ) .AND.
             IfValidAnd( Proj:AnalysisVersion >= 190200 ) .AND. IfValidAnd( UnitIAQExFan#F[1]:IncludesRecov > 0 ) .AND. IfValidAnd( UnitIAQExFan#F[1]:AdjSensRecovEff > 0 ))
         then  UnitIAQZone#F[1]:IAQHRVCFMxASRE[1]  + (min( UnitIAQExFan#F[1]:IAQCFM, UnitIAQFan#F[1]:IAQCFM ) * UnitIAQFanCnt#F[1] * UnitIAQExFan#F[1]:AdjSensRecovEff * UnitIAQExFan#F[1]:FanHeatRecovMult)
         else if (UnitIAQOption[1] == 2 .AND. UnitIAQUseVerifExFan#F[1] == 0 .AND. LocalCompAssigned( UnitIAQFan#F[1] ) > 0.5 .AND. IfValidAnd( UnitIAQFan#F[1]:AdjSensRecovEff > 0 ) .AND.
                  (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .OR. IfValidAnd( UnitIAQFan#F[1]:IncludesRecov > 0 )))
         then	if (UnitIAQFan#F[1]:IAQFanType == 3)
               then  UnitIAQZone#F[1]:IAQHRVCFMxASRE[1]  + (UnitIAQFan#F[1]:IAQCFM * UnitIAQFanCnt#F[1] * UnitIAQFan#F[1]:AdjSensRecovEff * UnitIAQFan#F[1]:FanHeatRecovMult)
               else  UNCHANGED  endif
         else	UNCHANGED  endif endif  }

;  ; Fan #3
;   "Set Proj:UnitIAQZone3[1]:IAQCFM_Exhaust[1]" 	Proj:UnitIAQZone3[1]:IAQCFM_Exhaust[1]	= {	if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan3[1] ) > 0.5)
;																														then	if (UnitIAQFan3[1]:IAQFanType == 1) then  UnitIAQZone3[1]:IAQCFM_Exhaust[1] + (UnitIAQFan3[1]:IAQCFM * UnitIAQFanCnt3[1])  else  UNCHANGED  endif
;																														else	UNCHANGED  endif  }
;   ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/05/24 (tic #1304)
;   "Set Proj:UnitIAQZone3[1]:IAQPwr_Exhaust[1]" 	Proj:UnitIAQZone3[1]:IAQPwr_Exhaust[1]	= {	if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan3[1] ) > 0.5)
;																														then	if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan3[1]:Status == 1 ) .AND.
;                                                                                                    UnitIAQFan3[1]:IAQFanType == 1 .AND. IfValidAnd( UnitIAQFan3[1]:WperCFMIAQ > 0 ))
;                                                                                                then  UnitIAQZone3[1]:IAQPwr_Exhaust[1]  + (UnitIAQFan3[1]:IAQCFM * UnitIAQFanCnt3[1] * UnitIAQFan3[1]:WperCFMIAQ)
;                                                                                                else if (UnitIAQFan3[1]:IAQFanType == 1) then  UnitIAQZone3[1]:IAQPwr_Exhaust[1] + (UnitIAQFan3[1]:IAQCFM * UnitIAQFanCnt3[1] * ValidOr( ForceStdIAQFanPwr, min( UseMaxIAQFanPwr, UnitIAQFan3[1]:WperCFMIAQ ) ) * UnitIAQFan3[1]:FanPowerMult)  else  UNCHANGED  endif endif
;																														else	UNCHANGED  endif  }
;   "Set Proj:UnitIAQZone3[1]:IAQCFM_Supply[1]"  	Proj:UnitIAQZone3[1]:IAQCFM_Supply[1]	= {	if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan3[1] ) > 0.5)
;																														then	if (UnitIAQFan3[1]:IAQFanType == 2) then  UnitIAQZone3[1]:IAQCFM_Supply[1]  + (UnitIAQFan3[1]:IAQCFM * UnitIAQFanCnt3[1])  else  UNCHANGED  endif
;																														else	UNCHANGED  endif  }
;   ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/04/24 (tic #1304)
;   "Set Proj:UnitIAQZone3[1]:IAQPwr_Supply[1]"  	Proj:UnitIAQZone3[1]:IAQPwr_Supply[1]	= {	if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan3[1] ) > 0.5)
;																														then	if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan3[1]:Status == 1 ) .AND.
;                                                                                                    UnitIAQFan3[1]:IAQFanType == 2 .AND. IfValidAnd( UnitIAQFan3[1]:WperCFMIAQ > 0 ))
;                                                                                                then  UnitIAQZone3[1]:IAQPwr_Supply[1]  + (UnitIAQFan3[1]:IAQCFM * UnitIAQFanCnt3[1] * UnitIAQFan3[1]:WperCFMIAQ)
;                                                                                                else if (UnitIAQFan3[1]:IAQFanType == 2) then  UnitIAQZone3[1]:IAQPwr_Supply[1]  + (UnitIAQFan3[1]:IAQCFM * UnitIAQFanCnt3[1] * ValidOr( ForceStdIAQFanPwr, min( UseMaxIAQFanPwr, UnitIAQFan3[1]:WperCFMIAQ ) ) * UnitIAQFan3[1]:FanPowerMult)  else  UNCHANGED  endif endif
;																														else	UNCHANGED  endif  }
;   "Set Proj:UnitIAQZone3[1]:IAQHRVCFM[1]"  			Proj:UnitIAQZone3[1]:IAQHRVCFM[1]		= {	if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan3[1] ) > 0.5)
;																														then	if (UnitIAQFan3[1]:IAQFanType == 3) then  UnitIAQZone3[1]:IAQHRVCFM[1]  + (UnitIAQFan3[1]:IAQCFM * UnitIAQFanCnt3[1])  else  UNCHANGED  endif
;																														else	UNCHANGED  endif  }
;   ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/05/24 (tic #1304)
;   "Set Proj:UnitIAQZone3[1]:IAQHRVPwr[1]"  			Proj:UnitIAQZone3[1]:IAQHRVPwr[1]		= {	if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan3[1] ) > 0.5)
;																														then	if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan3[1]:Status == 1 ) .AND.
;                                                                                                    UnitIAQFan3[1]:IAQFanType == 3 .AND. IfValidAnd( UnitIAQFan3[1]:WperCFMIAQ > 0 ))
;                                                                                                then  UnitIAQZone3[1]:IAQHRVPwr[1]  + (UnitIAQFan3[1]:IAQCFM * UnitIAQFanCnt3[1] * UnitIAQFan3[1]:WperCFMIAQ)
;                                                                                                else if (UnitIAQFan3[1]:IAQFanType == 3) then  UnitIAQZone3[1]:IAQHRVPwr[1]  + (UnitIAQFan3[1]:IAQCFM * UnitIAQFanCnt3[1] * ValidOr( ForceStdIAQFanPwr, min( UseMaxIAQFanPwr, UnitIAQFan3[1]:WperCFMIAQ ) ) * UnitIAQFan3[1]:FanPowerMult)  else  UNCHANGED  endif endif
;																														else	UNCHANGED  endif  }
;   "Set Proj:UnitIAQZone3[1]:IAQBalCFM[1]"  			Proj:UnitIAQZone3[1]:IAQBalCFM[1]		= {	if (UnitIAQOption[1] == 2 .AND. IfValidAnd( UnitIAQFan3[1]:IAQFanType = 3 ) .AND.
;                                                                                                      ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( UnitIAQFan3[1]:IAQRecovEffect = 0 )) .OR.
;                                                                                                        (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( UnitIAQFan3[1]:IncludesRecov  = 0 )) ))
;																														then	UnitIAQZone3[1]:IAQBalCFM[1]  + (UnitIAQFan3[1]:IAQCFM * UnitIAQFanCnt3[1])  else  UNCHANGED  endif  }
;   ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/05/24 (tic #1304)
;   "Set Proj:UnitIAQZone3[1]:IAQBalPwr[1]"  			Proj:UnitIAQZone3[1]:IAQBalPwr[1]		= {	if (UnitIAQOption[1] == 2 .AND. IfValidAnd( UnitIAQFan3[1]:IAQFanType = 3 ) .AND.
;                                                                                                      ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( UnitIAQFan3[1]:IAQRecovEffect = 0 )) .OR.
;                                                                                                        (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( UnitIAQFan3[1]:IncludesRecov  = 0 )) ))
;																														then	if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan3[1]:Status == 1 ))
;                                                                                                then  UnitIAQZone3[1]:IAQBalPwr[1]  + (UnitIAQFan3[1]:IAQCFM * UnitIAQFanCnt3[1] * UnitIAQFan3[1]:WperCFMIAQ)
;                                                                                                else  UnitIAQZone3[1]:IAQBalPwr[1]  + (UnitIAQFan3[1]:IAQCFM * UnitIAQFanCnt3[1] * ValidOr( ForceStdIAQFanPwr, min( UseMaxIAQFanPwr, UnitIAQFan3[1]:WperCFMIAQ ) ) * UnitIAQFan3[1]:FanPowerMult)  endif  else  UNCHANGED  endif  }
;   "Set Proj:UnitIAQZone3[1]:IAQHRVCFMxRcvEff[1]"  Proj:UnitIAQZone3[1]:IAQHRVCFMxRcvEff[1]	={	if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan3[1] ) > 0.5 .AND. IfValidAnd( Proj:AnalysisVersion >= 190200 )==0)
;																														then	if (UnitIAQFan3[1]:IAQFanType == 3) then  UnitIAQZone3[1]:IAQHRVCFMxRcvEff[1]  + (UnitIAQFan3[1]:IAQCFM * UnitIAQFanCnt3[1] * UnitIAQFan3[1]:IAQRecovEffect)  else  UNCHANGED  endif
;																														else	UNCHANGED  endif  }
;   "Set Proj:UnitIAQZone3[1]:IAQHRVCFMxSRE[1]"  Proj:UnitIAQZone3[1]:IAQHRVCFMxSRE[1]	={	if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan3[1] ) > 0.5 .AND. IfValidAnd( UnitIAQFan3[1]:SensRecovEff > 0 ) .AND. (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .OR. IfValidAnd( UnitIAQFan3[1]:IncludesRecov > 0 )))
;																														then	if (UnitIAQFan3[1]:IAQFanType == 3) then  UnitIAQZone3[1]:IAQHRVCFMxSRE[1]  + (UnitIAQFan3[1]:IAQCFM * UnitIAQFanCnt3[1] * UnitIAQFan3[1]:SensRecovEff * UnitIAQFan3[1]:FanHeatRecovMult)  else  UNCHANGED  endif
;																														else	UNCHANGED  endif  }
;   "Set Proj:UnitIAQZone3[1]:IAQHRVCFMxASRE[1]"  Proj:UnitIAQZone3[1]:IAQHRVCFMxASRE[1]	={	if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan3[1] ) > 0.5 .AND. IfValidAnd( UnitIAQFan3[1]:AdjSensRecovEff > 0 ) .AND. (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .OR. IfValidAnd( UnitIAQFan3[1]:IncludesRecov > 0 )))
;																														then	if (UnitIAQFan3[1]:IAQFanType == 3) then  UnitIAQZone3[1]:IAQHRVCFMxASRE[1]  + (UnitIAQFan3[1]:IAQCFM * UnitIAQFanCnt3[1] * UnitIAQFan3[1]:AdjSensRecovEff * UnitIAQFan3[1]:FanHeatRecovMult)  else  UNCHANGED  endif
;																														else	UNCHANGED  endif  }
;  ; Fan #4
;   "Set Proj:UnitIAQZone4[1]:IAQCFM_Exhaust[1]" 	Proj:UnitIAQZone4[1]:IAQCFM_Exhaust[1]	= {	if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan4[1] ) > 0.5)
;																														then	if (UnitIAQFan4[1]:IAQFanType == 1) then  UnitIAQZone4[1]:IAQCFM_Exhaust[1] + (UnitIAQFan4[1]:IAQCFM * UnitIAQFanCnt4[1])  else  UNCHANGED  endif
;																														else	UNCHANGED  endif  }
;   ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/05/24 (tic #1304)
;   "Set Proj:UnitIAQZone4[1]:IAQPwr_Exhaust[1]" 	Proj:UnitIAQZone4[1]:IAQPwr_Exhaust[1]	= {	if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan4[1] ) > 0.5)
;																														then	if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan4[1]:Status == 1 ) .AND.
;                                                                                                    UnitIAQFan4[1]:IAQFanType == 1 .AND. IfValidAnd( UnitIAQFan4[1]:WperCFMIAQ > 0 ))
;                                                                                                then  UnitIAQZone4[1]:IAQPwr_Exhaust[1]  + (UnitIAQFan4[1]:IAQCFM * UnitIAQFanCnt4[1] * UnitIAQFan4[1]:WperCFMIAQ)
;                                                                                                else if (UnitIAQFan4[1]:IAQFanType == 1) then  UnitIAQZone4[1]:IAQPwr_Exhaust[1] + (UnitIAQFan4[1]:IAQCFM * UnitIAQFanCnt4[1] * ValidOr( ForceStdIAQFanPwr, min( UseMaxIAQFanPwr, UnitIAQFan4[1]:WperCFMIAQ ) ) * UnitIAQFan4[1]:FanPowerMult)  else  UNCHANGED  endif endif
;																														else	UNCHANGED  endif  }
;   "Set Proj:UnitIAQZone4[1]:IAQCFM_Supply[1]"  	Proj:UnitIAQZone4[1]:IAQCFM_Supply[1]	= {	if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan4[1] ) > 0.5)
;																														then	if (UnitIAQFan4[1]:IAQFanType == 2) then  UnitIAQZone4[1]:IAQCFM_Supply[1]  + (UnitIAQFan4[1]:IAQCFM * UnitIAQFanCnt4[1])  else  UNCHANGED  endif
;																														else	UNCHANGED  endif  }
;   ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/04/24 (tic #1304)
;   "Set Proj:UnitIAQZone4[1]:IAQPwr_Supply[1]"  	Proj:UnitIAQZone4[1]:IAQPwr_Supply[1]	= {	if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan4[1] ) > 0.5)
;																														then	if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan4[1]:Status == 1 ) .AND.
;                                                                                                    UnitIAQFan4[1]:IAQFanType == 2 .AND. IfValidAnd( UnitIAQFan4[1]:WperCFMIAQ > 0 ))
;                                                                                                then  UnitIAQZone4[1]:IAQPwr_Supply[1]  + (UnitIAQFan4[1]:IAQCFM * UnitIAQFanCnt4[1] * UnitIAQFan4[1]:WperCFMIAQ)
;                                                                                                else if (UnitIAQFan4[1]:IAQFanType == 2) then  UnitIAQZone4[1]:IAQPwr_Supply[1]  + (UnitIAQFan4[1]:IAQCFM * UnitIAQFanCnt4[1] * ValidOr( ForceStdIAQFanPwr, min( UseMaxIAQFanPwr, UnitIAQFan4[1]:WperCFMIAQ ) ) * UnitIAQFan4[1]:FanPowerMult)  else  UNCHANGED  endif endif
;																														else	UNCHANGED  endif  }
;   "Set Proj:UnitIAQZone4[1]:IAQHRVCFM[1]"  			Proj:UnitIAQZone4[1]:IAQHRVCFM[1]		= {	if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan4[1] ) > 0.5)
;																														then	if (UnitIAQFan4[1]:IAQFanType == 3) then  UnitIAQZone4[1]:IAQHRVCFM[1]  + (UnitIAQFan4[1]:IAQCFM * UnitIAQFanCnt4[1])  else  UNCHANGED  endif
;																														else	UNCHANGED  endif  }
;   ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/05/24 (tic #1304)
;   "Set Proj:UnitIAQZone4[1]:IAQHRVPwr[1]"  			Proj:UnitIAQZone4[1]:IAQHRVPwr[1]		= {	if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan4[1] ) > 0.5)
;																														then	if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan4[1]:Status == 1 ) .AND.
;                                                                                                    UnitIAQFan4[1]:IAQFanType == 3 .AND. IfValidAnd( UnitIAQFan4[1]:WperCFMIAQ > 0 ))
;                                                                                                then  UnitIAQZone4[1]:IAQHRVPwr[1]  + (UnitIAQFan4[1]:IAQCFM * UnitIAQFanCnt4[1] * UnitIAQFan4[1]:WperCFMIAQ)
;                                                                                                else if (UnitIAQFan4[1]:IAQFanType == 3) then  UnitIAQZone4[1]:IAQHRVPwr[1]  + (UnitIAQFan4[1]:IAQCFM * UnitIAQFanCnt4[1] * ValidOr( ForceStdIAQFanPwr, min( UseMaxIAQFanPwr, UnitIAQFan4[1]:WperCFMIAQ ) ) * UnitIAQFan4[1]:FanPowerMult)  else  UNCHANGED  endif endif
;																														else	UNCHANGED  endif  }
;   "Set Proj:UnitIAQZone4[1]:IAQBalCFM[1]"  			Proj:UnitIAQZone4[1]:IAQBalCFM[1]		= {	if (UnitIAQOption[1] == 2 .AND. IfValidAnd( UnitIAQFan4[1]:IAQFanType = 3 ) .AND.
;                                                                                                      ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( UnitIAQFan4[1]:IAQRecovEffect = 0 )) .OR.
;                                                                                                        (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( UnitIAQFan4[1]:IncludesRecov  = 0 )) ))
;																														then	UnitIAQZone4[1]:IAQBalCFM[1]  + (UnitIAQFan4[1]:IAQCFM * UnitIAQFanCnt4[1])  else  UNCHANGED  endif  }
;   ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/05/24 (tic #1304)
;   "Set Proj:UnitIAQZone4[1]:IAQBalPwr[1]"  			Proj:UnitIAQZone4[1]:IAQBalPwr[1]		= {	if (UnitIAQOption[1] == 2 .AND. IfValidAnd( UnitIAQFan4[1]:IAQFanType = 3 ) .AND.
;                                                                                                      ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( UnitIAQFan4[1]:IAQRecovEffect = 0 )) .OR.
;                                                                                                        (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( UnitIAQFan4[1]:IncludesRecov  = 0 )) ))
;																														then	if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan4[1]:Status == 1 ))
;                                                                                                then  UnitIAQZone4[1]:IAQBalPwr[1]  + (UnitIAQFan4[1]:IAQCFM * UnitIAQFanCnt4[1] * UnitIAQFan4[1]:WperCFMIAQ)
;                                                                                                else  UnitIAQZone4[1]:IAQBalPwr[1]  + (UnitIAQFan4[1]:IAQCFM * UnitIAQFanCnt4[1] * ValidOr( ForceStdIAQFanPwr, min( UseMaxIAQFanPwr, UnitIAQFan4[1]:WperCFMIAQ ) ) * UnitIAQFan4[1]:FanPowerMult)  endif  else  UNCHANGED  endif  }
;   "Set Proj:UnitIAQZone4[1]:IAQHRVCFMxRcvEff[1]"  Proj:UnitIAQZone4[1]:IAQHRVCFMxRcvEff[1]	={	if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan4[1] ) > 0.5 .AND. IfValidAnd( Proj:AnalysisVersion >= 190200 )==0)
;																														then	if (UnitIAQFan4[1]:IAQFanType == 3) then  UnitIAQZone4[1]:IAQHRVCFMxRcvEff[1]  + (UnitIAQFan4[1]:IAQCFM * UnitIAQFanCnt4[1] * UnitIAQFan4[1]:IAQRecovEffect)  else  UNCHANGED  endif
;																														else	UNCHANGED  endif  }
;   "Set Proj:UnitIAQZone4[1]:IAQHRVCFMxSRE[1]"  Proj:UnitIAQZone4[1]:IAQHRVCFMxSRE[1]	={	if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan4[1] ) > 0.5 .AND. IfValidAnd( UnitIAQFan4[1]:SensRecovEff > 0 ) .AND. (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .OR. IfValidAnd( UnitIAQFan4[1]:IncludesRecov > 0 )))
;																														then	if (UnitIAQFan4[1]:IAQFanType == 3) then  UnitIAQZone4[1]:IAQHRVCFMxSRE[1]  + (UnitIAQFan4[1]:IAQCFM * UnitIAQFanCnt4[1] * UnitIAQFan4[1]:SensRecovEff * UnitIAQFan4[1]:FanHeatRecovMult)  else  UNCHANGED  endif
;																														else	UNCHANGED  endif  }
;   "Set Proj:UnitIAQZone4[1]:IAQHRVCFMxASRE[1]"  Proj:UnitIAQZone4[1]:IAQHRVCFMxASRE[1]	={	if (UnitIAQOption[1] == 2 .AND. LocalCompAssigned( UnitIAQFan4[1] ) > 0.5 .AND. IfValidAnd( UnitIAQFan4[1]:AdjSensRecovEff > 0 ) .AND. (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .OR. IfValidAnd( UnitIAQFan4[1]:IncludesRecov > 0 )))
;																														then	if (UnitIAQFan4[1]:IAQFanType == 3) then  UnitIAQZone4[1]:IAQHRVCFMxASRE[1]  + (UnitIAQFan4[1]:IAQCFM * UnitIAQFanCnt4[1] * UnitIAQFan4[1]:AdjSensRecovEff * UnitIAQFan4[1]:FanHeatRecovMult)  else  UNCHANGED  endif
;																														else	UNCHANGED  endif  }

   ;----------------------------------------------------------------------------
   ; SAC 4/22/19 - add in ADU IAQ (tic #1010)
  ; Fan #1
   ; SAC 8/12/16 - revised rules to reference new Proj:DefaultSimIAQCFM, in place of Proj:UnitMinIAQCFM[1], to use proper simulated value for addition alone analyses (tic #729) 
   "Set Proj:UnitIAQZone1[2]:IAQCFM_Exhaust[2]"    Proj:UnitIAQZone1[2]:IAQCFM_Exhaust[2]   = {  if (UnitIAQOption[2] == 1) then  DefaultSimIAQCFM[2]
                                                                                          else if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan1[2] ) > 0.5)
                                                                                          then  if ( UnitIAQUseVerifExFan1[2] == 1 .AND. IfValidAnd( UnitIAQExFan1[2]:IAQFanType == 1 ))
                                                                                                then  min( UnitIAQExFan1[2]:IAQCFM, UnitIAQFan1[2]:IAQCFM ) * UnitIAQFanCnt1[2]
                                                                                                else if (UnitIAQFan1[2]:IAQFanType == 1 .AND. UnitIAQUseVerifExFan1[2] == 0)
                                                                                                then                                UnitIAQFan1[2]:IAQCFM   * UnitIAQFanCnt1[2]
                                                                                                else  UNCHANGED  endif endif
                                                                                          else  UNCHANGED  endif endif  }
   ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/05/24 (tic #1304)
   "Set Proj:UnitIAQZone1[2]:IAQPwr_Exhaust[2]"    Proj:UnitIAQZone1[2]:IAQPwr_Exhaust[2]   = {  if (UnitIAQOption[2] == 1) then  (DefaultSimIAQCFM[2] * Proj:DefaultIAQFanPwr)
                                                                                          else if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan1[2] ) > 0.5)
                                                                                          then  if ( UnitIAQUseVerifExFan1[2] == 1 .AND. IfValidAnd( UnitIAQExFan1[2]:IAQFanType == 1 ))
                                                                                                then  UnitIAQZone1[2]:IAQPwr_Exhaust[2]  + (min( UnitIAQExFan1[2]:IAQCFM, UnitIAQFan1[2]:IAQCFM ) * UnitIAQFanCnt1[2] * UnitIAQFan1[2]:WperCFMIAQ)
                                                                                                else if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan1[2]:Status == 1 ) .AND. UnitIAQUseVerifExFan1[2] == 0 .AND.
                                                                                                         UnitIAQFan1[2]:IAQFanType == 1 .AND. IfValidAnd( UnitIAQFan1[2]:WperCFMIAQ > 0 ))
                                                                                                then  UnitIAQZone1[2]:IAQPwr_Exhaust[2]  + (UnitIAQFan1[2]:IAQCFM * UnitIAQFanCnt1[2] * UnitIAQFan1[2]:WperCFMIAQ)
                                                                                                else if (UnitIAQFan1[2]:IAQFanType == 1 .AND. UnitIAQUseVerifExFan1[2] == 0)
                                                                                                then  (UnitIAQFan1[2]:IAQCFM * UnitIAQFanCnt1[2] * UnitIAQFan1[2]:WperCFMIAQ * UnitIAQFan1[2]:FanPowerMult)  else  UNCHANGED  endif endif endif
                                                                                          else   UNCHANGED  endif endif  }
   "Set Proj:UnitIAQZone1[2]:IAQCFM_Supply[2]"     Proj:UnitIAQZone1[2]:IAQCFM_Supply[2]   = {  if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan1[2] ) > 0.5)
                                                                                          then  if ( UnitIAQUseVerifExFan1[2] == 1 .AND. IfValidAnd( UnitIAQExFan1[2]:IAQFanType == 2 ))
                                                                                                then  min( UnitIAQExFan1[2]:IAQCFM, UnitIAQFan1[2]:IAQCFM ) * UnitIAQFanCnt1[2]
                                                                                                else if (UnitIAQFan1[2]:IAQFanType == 2 .AND. UnitIAQUseVerifExFan1[2] == 0)
                                                                                                then                                UnitIAQFan1[2]:IAQCFM   * UnitIAQFanCnt1[2]  else  UNCHANGED  endif endif
                                                                                          else  UNCHANGED  endif  }
   ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/04/24 (tic #1304)
   "Set Proj:UnitIAQZone1[2]:IAQPwr_Supply[2]"     Proj:UnitIAQZone1[2]:IAQPwr_Supply[2]   = {  if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan1[2] ) > 0.5)
                                                                                          then  if ( UnitIAQUseVerifExFan1[2] == 1 .AND. IfValidAnd( UnitIAQExFan1[2]:IAQFanType == 2 ))
                                                                                                then  UnitIAQZone1[2]:IAQPwr_Supply[2]  + (min( UnitIAQExFan1[2]:IAQCFM, UnitIAQFan1[2]:IAQCFM ) * UnitIAQFanCnt1[2] * UnitIAQFan1[2]:WperCFMIAQ)
                                                                                                else if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan1[2]:Status == 1 ) .AND. UnitIAQUseVerifExFan1[2] == 0 .AND.
                                                                                                         UnitIAQFan1[2]:IAQFanType == 2 .AND. IfValidAnd( UnitIAQFan1[2]:WperCFMIAQ > 0 ))
                                                                                                then  UnitIAQZone1[2]:IAQPwr_Supply[2]  + (UnitIAQFan1[2]:IAQCFM * UnitIAQFanCnt1[2] * UnitIAQFan1[2]:WperCFMIAQ)
                                                                                                else if (UnitIAQFan1[2]:IAQFanType == 2 .AND. UnitIAQUseVerifExFan1[2] == 0)
                                                                                                then  (UnitIAQFan1[2]:IAQCFM * UnitIAQFanCnt1[2] * UnitIAQFan1[2]:WperCFMIAQ * UnitIAQFan1[2]:FanPowerMult)  else  UNCHANGED  endif endif endif
                                                                                          else  UNCHANGED  endif  }
   "Set Proj:UnitIAQZone1[2]:IAQHRVCFM[2]"           Proj:UnitIAQZone1[2]:IAQHRVCFM[2]     = {  if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan1[2] ) > 0.5)
                                                                                          then  if ( UnitIAQUseVerifExFan1[2] == 1 .AND. IfValidAnd( UnitIAQExFan1[2]:IAQFanType == 3 ))
                                                                                                then  (min( UnitIAQExFan1[2]:IAQCFM, UnitIAQFan1[2]:IAQCFM ) * UnitIAQFanCnt1[2])
                                                                                                else if (UnitIAQFan1[2]:IAQFanType == 3 .AND. UnitIAQUseVerifExFan1[2] == 0)
                                                                                                then                                (UnitIAQFan1[2]:IAQCFM   * UnitIAQFanCnt1[2])  else  UNCHANGED  endif endif
                                                                                          else  UNCHANGED  endif  }
   ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/05/24 (tic #1304)
   "Set Proj:UnitIAQZone1[2]:IAQHRVPwr[2]"           Proj:UnitIAQZone1[2]:IAQHRVPwr[2]     = {  if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan1[2] ) > 0.5)
                                                                                          then  if ( UnitIAQUseVerifExFan1[2] == 1 .AND.
                                                                                                       IfValidAnd( UnitIAQExFan1[2]:IAQFanType == 3 ))
                                                                                                then  UnitIAQZone1[2]:IAQHRVPwr[2]  + (min( UnitIAQExFan1[2]:IAQCFM, UnitIAQFan1[2]:IAQCFM ) * UnitIAQFanCnt1[2] * UnitIAQExFan1[2]:WperCFMIAQ)
                                                                                                else if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan1[2]:Status == 1 ) .AND. UnitIAQUseVerifExFan1[2] == 0 .AND.
                                                                                                         UnitIAQFan1[2]:IAQFanType == 3 .AND. IfValidAnd( UnitIAQFan1[2]:WperCFMIAQ > 0 ))
                                                                                                then  UnitIAQZone1[2]:IAQHRVPwr[2]  + (UnitIAQFan1[2]:IAQCFM * UnitIAQFanCnt1[2] * UnitIAQFan1[2]:WperCFMIAQ)
                                                                                                else if (UnitIAQFan1[2]:IAQFanType == 3 .AND. UnitIAQUseVerifExFan1[2] == 0)
                                                                                                then  (UnitIAQFan1[2]:IAQCFM * UnitIAQFanCnt1[2] * UnitIAQFan1[2]:WperCFMIAQ * UnitIAQFan1[2]:FanPowerMult)  else  UNCHANGED  endif endif endif
                                                                                          else  UNCHANGED  endif  }
   "Set Proj:UnitIAQZone1[2]:IAQBalCFM[2]"           Proj:UnitIAQZone1[2]:IAQBalCFM[2]     = {  if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan1[2] ) > 0.5)
                                                                                          then  if ( UnitIAQUseVerifExFan1[2] == 1 .AND.
                                                                                                     IfValidAnd( Proj:AnalysisVersion >= 190200 ) .AND. IfValidAnd( UnitIAQExFan1[2]:IncludesRecov = 0 ) .AND.
                                                                                                       IfValidAnd( UnitIAQExFan1[2]:IAQFanType = 3 ))
                                                                                                then  UnitIAQZone1[2]:IAQBalCFM[2]  + (min( UnitIAQExFan1[2]:IAQCFM, UnitIAQFan1[2]:IAQCFM ) * UnitIAQFanCnt1[2])
                                                                                                else if (IfValidAnd( UnitIAQFan1[2]:IAQFanType = 3 ) .AND. UnitIAQUseVerifExFan1[2] == 0 .AND.
                                                                                                         ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( UnitIAQFan1[2]:IAQRecovEffect = 0 )) .OR.
                                                                                                           (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( UnitIAQFan1[2]:IncludesRecov  = 0 )) ))
                                                                                                then  UnitIAQZone1[2]:IAQBalCFM[2]  + (UnitIAQFan1[2]:IAQCFM * UnitIAQFanCnt1[2])  else  UNCHANGED  endif endif
                                                                                          else  UNCHANGED  endif  }
   ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/05/24 (tic #1304)
   "Set Proj:UnitIAQZone1[2]:IAQBalPwr[2]"           Proj:UnitIAQZone1[2]:IAQBalPwr[2]     = {  if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan1[2] ) > 0.5)
                                                                                          then  if ( UnitIAQUseVerifExFan1[2] == 1 .AND.
                                                                                                     IfValidAnd( Proj:AnalysisVersion >= 190200 ) .AND. IfValidAnd( UnitIAQExFan1[2]:IncludesRecov = 0 ) .AND.
                                                                                                       IfValidAnd( UnitIAQExFan1[2]:IAQFanType = 3 ))
                                                                                                then        UnitIAQZone1[2]:IAQBalPwr[2]  + (min( UnitIAQExFan1[2]:IAQCFM, UnitIAQFan1[2]:IAQCFM ) * UnitIAQFanCnt1[2] * UnitIAQExFan1[2]:WperCFMIAQ)
                                                                                                else if (IfValidAnd( UnitIAQFan1[2]:IAQFanType = 3 ) .AND. UnitIAQUseVerifExFan1[2] == 0 .AND.
                                                                                                         ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( UnitIAQFan1[2]:IAQRecovEffect = 0 )) .OR.
                                                                                                           (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( UnitIAQFan1[2]:IncludesRecov  = 0 )) ))
                                                                                                then  if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan1[2]:Status == 1 ))
                                                                                                      then  UnitIAQZone1[2]:IAQBalPwr[2]  + (UnitIAQFan1[2]:IAQCFM * UnitIAQFanCnt1[2] * UnitIAQFan1[2]:WperCFMIAQ)
                                                                                                      else  UnitIAQZone1[2]:IAQBalPwr[2]  + (UnitIAQFan1[2]:IAQCFM * UnitIAQFanCnt1[2] * UnitIAQFan1[2]:WperCFMIAQ * UnitIAQFan1[2]:FanPowerMult)  endif
                                                                                                else  UNCHANGED  endif endif
                                                                                          else  UNCHANGED  endif  }
   "Set Proj:UnitIAQZone1[2]:IAQHRVCFMxRcvEff[2]"  Proj:UnitIAQZone1[2]:IAQHRVCFMxRcvEff[2]   ={   if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan1[2] ) > 0.5 .AND. IfValidAnd( Proj:AnalysisVersion >= 190200 )==0)
                                                                                          then   if (UnitIAQFan1[2]:IAQFanType == 3) then  (UnitIAQFan1[2]:IAQCFM * UnitIAQFanCnt1[2] * UnitIAQFan1[2]:IAQRecovEffect)  else  UNCHANGED  endif
                                                                                          else   UNCHANGED  endif  }
   "Set Proj:UnitIAQZone1[2]:IAQHRVCFMxSRE[2]"  Proj:UnitIAQZone1[2]:IAQHRVCFMxSRE[2]   ={   if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan1[2] ) > 0.5)
                                                                                          then  if ( UnitIAQUseVerifExFan1[2] == 1 .AND.
                                                                                                     IfValidAnd( Proj:AnalysisVersion >= 190200 ) .AND. IfValidAnd( UnitIAQExFan1[2]:IncludesRecov > 0 ) .AND.
                                                                                                       IfValidAnd( UnitIAQExFan1[2]:IAQFanType = 3 ) .AND. IfValidAnd( UnitIAQFan1[2]:SensRecovEff > 0 ) )
                                                                                                then               (min( UnitIAQExFan1[2]:IAQCFM, UnitIAQFan1[2]:IAQCFM ) * UnitIAQFanCnt1[2] * UnitIAQExFan1[2]:SensRecovEff * UnitIAQExFan1[2]:FanHeatRecovMult)
                                                                                                else if (IfValidAnd( UnitIAQFan1[2]:SensRecovEff > 0 ) .AND. UnitIAQUseVerifExFan1[2] == 0 .AND.
                                                                                                         (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .OR. IfValidAnd( UnitIAQFan1[2]:IncludesRecov > 0 )))
                                                                                                then   if (UnitIAQFan1[2]:IAQFanType == 3) then  (UnitIAQFan1[2]:IAQCFM   * UnitIAQFanCnt1[2] * UnitIAQFan1[2]:SensRecovEff   * UnitIAQFan1[2]:FanHeatRecovMult)  else  UNCHANGED  endif
                                                                                                else   UNCHANGED  endif endif
                                                                                          else   UNCHANGED  endif  }
   "Set Proj:UnitIAQZone1[2]:IAQHRVCFMxASRE[2]"  Proj:UnitIAQZone1[2]:IAQHRVCFMxASRE[2]  ={  if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan1[2] ) > 0.5)
                                                                                          then  if ( UnitIAQUseVerifExFan1[2] == 1 .AND.
                                                                                                     IfValidAnd( Proj:AnalysisVersion >= 190200 ) .AND. IfValidAnd( UnitIAQExFan1[2]:IncludesRecov > 0 ) .AND.
                                                                                                       IfValidAnd( UnitIAQExFan1[2]:IAQFanType = 3 ) .AND. IfValidAnd( UnitIAQFan1[2]:AdjSensRecovEff > 0 ) )
                                                                                                then               (min( UnitIAQExFan1[2]:IAQCFM, UnitIAQFan1[2]:IAQCFM ) * UnitIAQFanCnt1[2] * UnitIAQExFan1[2]:AdjSensRecovEff * UnitIAQExFan1[2]:FanHeatRecovMult)
                                                                                                else if (IfValidAnd( UnitIAQFan1[2]:AdjSensRecovEff > 0 ) .AND. UnitIAQUseVerifExFan1[2] == 0 .AND.
                                                                                                         (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .OR. IfValidAnd( UnitIAQFan1[2]:IncludesRecov > 0 )))
                                                                                                then   if (UnitIAQFan1[2]:IAQFanType == 3) then  (UnitIAQFan1[2]:IAQCFM   * UnitIAQFanCnt1[2] * UnitIAQFan1[2]:AdjSensRecovEff   * UnitIAQFan1[2]:FanHeatRecovMult)  else  UNCHANGED  endif
                                                                                                else   UNCHANGED  endif endif
                                                                                          else   UNCHANGED  endif  }

  ; Fans #2-4   - converted to for loop and added reference to UnitIAQExFan1-4 - SAC 04/09/24 (tic #1304)
   "Set Proj:UnitIAQZone2-4[2]:IAQCFM_Exhaust[2]" 	For:#F=(2to4)  Proj:UnitIAQZone#F[2]:IAQCFM_Exhaust[2]	=
      {  if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan#F[2] ) > 0.5)
         then	if (UnitIAQUseVerifExFan#F[2] == 1 .AND. UnitIAQExFan#F[2]:IAQFanType == 1)
               then  UnitIAQZone#F[2]:IAQCFM_Exhaust[2] + (UnitIAQExFan#F[2]:IAQCFM * UnitIAQFanCnt#F[2])
               else if (UnitIAQUseVerifExFan#F[2] == 0 .AND. UnitIAQFan#F[2]:IAQFanType == 1)
               then  UnitIAQZone#F[2]:IAQCFM_Exhaust[2] + (UnitIAQFan#F[2]:IAQCFM * UnitIAQFanCnt#F[2])
               else  UNCHANGED  endif endif
         else	UNCHANGED  endif  }
   ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/05/24 (tic #1304)
   "Set Proj:UnitIAQZone2-4[2]:IAQPwr_Exhaust[2]" 	For:#F=(2to4)  Proj:UnitIAQZone#F[2]:IAQPwr_Exhaust[2]	=
      {  if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan#F[2] ) > 0.5)
         then	if (UnitIAQUseVerifExFan#F[2] == 1 .AND. UnitIAQExFan#F[2]:IAQFanType == 1)
               then  UnitIAQZone#F[2]:IAQPwr_Exhaust[2]  + (min( UnitIAQFan#F[2]:IAQCFM, UnitIAQExFan#F[2]:IAQCFM ) * UnitIAQFanCnt#F[2] * UnitIAQExFan#F[2]:WperCFMIAQ)
               else if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan#F[2]:Status == 1 ) .AND. UnitIAQUseVerifExFan#F[2] == 0 .AND.
                        UnitIAQFan#F[2]:IAQFanType == 1 .AND. IfValidAnd( UnitIAQFan#F[2]:WperCFMIAQ > 0 ))
               then  UnitIAQZone#F[2]:IAQPwr_Exhaust[2]  + (UnitIAQFan#F[2]:IAQCFM * UnitIAQFanCnt#F[2] * UnitIAQFan#F[2]:WperCFMIAQ)
               else if (UnitIAQFan#F[2]:IAQFanType == 1 .AND. UnitIAQUseVerifExFan#F[2] == 0)
               then  UnitIAQZone#F[2]:IAQPwr_Exhaust[2]  + (UnitIAQFan#F[2]:IAQCFM * UnitIAQFanCnt#F[2] * UnitIAQFan#F[2]:WperCFMIAQ * UnitIAQFan#F[2]:FanPowerMult)
               else  UNCHANGED  endif endif endif
         else	UNCHANGED  endif  }
   "Set Proj:UnitIAQZone2-4[2]:IAQCFM_Supply[2]"  	For:#F=(2to4)  Proj:UnitIAQZone#F[2]:IAQCFM_Supply[2]	=
      {  if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan#F[2] ) > 0.5)
         then	if (UnitIAQUseVerifExFan#F[2] == 1 .AND. UnitIAQExFan#F[2]:IAQFanType == 2)
               then  UnitIAQZone#F[2]:IAQCFM_Supply[2]  + (min( UnitIAQFan#F[2]:IAQCFM, UnitIAQExFan#F[2]:IAQCFM ) * UnitIAQFanCnt#F[2])
               else if (UnitIAQUseVerifExFan#F[2] == 0 .AND. UnitIAQFan#F[2]:IAQFanType == 2)
               then  UnitIAQZone#F[2]:IAQCFM_Supply[2]  + (UnitIAQFan#F[2]:IAQCFM * UnitIAQFanCnt#F[2])
               else  UNCHANGED  endif endif
         else	UNCHANGED  endif  }
   ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/04/24 (tic #1304)
   "Set Proj:UnitIAQZone2-4[2]:IAQPwr_Supply[2]"  	For:#F=(2to4)  Proj:UnitIAQZone#F[2]:IAQPwr_Supply[2]	=
      {  if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan#F[2] ) > 0.5)
         then	if (UnitIAQUseVerifExFan#F[2] == 1 .AND. UnitIAQExFan#F[2]:IAQFanType == 2)
               then  UnitIAQZone#F[2]:IAQPwr_Supply[2]  + (min( UnitIAQFan#F[2]:IAQCFM, UnitIAQExFan#F[2]:IAQCFM ) * UnitIAQFanCnt#F[2] * UnitIAQExFan#F[2]:WperCFMIAQ)
               else if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan#F[2]:Status == 1 ) .AND. UnitIAQUseVerifExFan#F[2] == 0 .AND.
                        UnitIAQFan#F[2]:IAQFanType == 2 .AND. IfValidAnd( UnitIAQFan#F[2]:WperCFMIAQ > 0 ))
               then  UnitIAQZone#F[2]:IAQPwr_Supply[2]  + (UnitIAQFan#F[2]:IAQCFM * UnitIAQFanCnt#F[2] * UnitIAQFan#F[2]:WperCFMIAQ)
               else if (UnitIAQUseVerifExFan#F[2] == 0 .AND. UnitIAQFan#F[2]:IAQFanType == 2)
               then  UnitIAQZone#F[2]:IAQPwr_Supply[2]  + (UnitIAQFan#F[2]:IAQCFM * UnitIAQFanCnt#F[2] * UnitIAQFan#F[2]:WperCFMIAQ * UnitIAQFan#F[2]:FanPowerMult)
               else  UNCHANGED  endif endif endif
         else	UNCHANGED  endif  }
   "Set Proj:UnitIAQZone2-4[2]:IAQHRVCFM[2]"  		For:#F=(2to4)  Proj:UnitIAQZone#F[2]:IAQHRVCFM[2]		=
      {  if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan#F[2] ) > 0.5)
         then	if (UnitIAQUseVerifExFan#F[2] == 1 .AND. UnitIAQExFan#F[2]:IAQFanType == 3)
               then  UnitIAQZone#F[2]:IAQHRVCFM[2]  + (min( UnitIAQFan#F[2]:IAQCFM, UnitIAQExFan#F[2]:IAQCFM ) * UnitIAQFanCnt#F[2])
               else if (UnitIAQUseVerifExFan#F[2] == 0 .AND. UnitIAQFan#F[2]:IAQFanType == 3)
               then  UnitIAQZone#F[2]:IAQHRVCFM[2]  + (UnitIAQFan#F[2]:IAQCFM * UnitIAQFanCnt#F[2])
               else  UNCHANGED  endif endif
         else	UNCHANGED  endif  }
   ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/05/24 (tic #1304)
   "Set Proj:UnitIAQZone2-4[2]:IAQHRVPwr[2]"  		For:#F=(2to4)  Proj:UnitIAQZone#F[2]:IAQHRVPwr[2]		=
      {  if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan#F[2] ) > 0.5)
         then	if (UnitIAQUseVerifExFan#F[2] == 1 .AND. UnitIAQExFan#F[2]:IAQFanType == 3)
               then  UnitIAQZone#F[2]:IAQHRVPwr[1]  + (min( UnitIAQFan#F[2]:IAQCFM, UnitIAQExFan#F[2]:IAQCFM ) * UnitIAQFanCnt#F[2] * UnitIAQExFan#F[2]:WperCFMIAQ)
               else if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan#F[2]:Status == 1 ) .AND. UnitIAQUseVerifExFan#F[2] == 0 .AND.
                        UnitIAQFan#F[2]:IAQFanType == 3 .AND. IfValidAnd( UnitIAQFan#F[2]:WperCFMIAQ > 0 ))
               then  UnitIAQZone#F[2]:IAQHRVPwr[1]  + (UnitIAQFan#F[2]:IAQCFM * UnitIAQFanCnt#F[2] * UnitIAQFan#F[2]:WperCFMIAQ)
               else if (UnitIAQUseVerifExFan#F[2] == 0 .AND. UnitIAQFan#F[2]:IAQFanType == 3)
               then  UnitIAQZone#F[2]:IAQHRVPwr[2]  + (UnitIAQFan#F[2]:IAQCFM * UnitIAQFanCnt#F[2] * UnitIAQFan#F[2]:WperCFMIAQ * UnitIAQFan#F[2]:FanPowerMult)
               else  UNCHANGED  endif endif endif
         else	UNCHANGED  endif  }
   "Set Proj:UnitIAQZone2-4[2]:IAQBalCFM[2]"  		For:#F=(2to4)  Proj:UnitIAQZone#F[2]:IAQBalCFM[2]		=
      {  if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan#F[2] ) > 0.5)
         then	if (UnitIAQUseVerifExFan#F[2] == 1 .AND. UnitIAQExFan#F[2]:IAQFanType == 3 .AND. IfValidAnd( UnitIAQExFan#F[2]:IncludesRecov > 0 )==0)
               then  UnitIAQZone#F[2]:IAQBalCFM[2]  + (min( UnitIAQFan#F[2]:IAQCFM, UnitIAQExFan#F[2]:IAQCFM ) * UnitIAQFanCnt#F[2])
               else if (UnitIAQOption[2] == 2 .AND. IfValidAnd( UnitIAQFan#F[2]:IAQFanType = 3 ) .AND. UnitIAQUseVerifExFan#F[2] == 0 .AND.
                        ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( UnitIAQFan#F[2]:IAQRecovEffect = 0 )) .OR.
                          (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( UnitIAQFan#F[2]:IncludesRecov  = 0 )) ))
               then	UnitIAQZone#F[2]:IAQBalCFM[2]  + (UnitIAQFan#F[2]:IAQCFM * UnitIAQFanCnt#F[2])
               else  UNCHANGED  endif endif
         else  UNCHANGED  endif  }
   ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/05/24 (tic #1304)
   "Set Proj:UnitIAQZone2-4[2]:IAQBalPwr[2]"  		For:#F=(2to4)  Proj:UnitIAQZone#F[2]:IAQBalPwr[2]		=
      {  if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan#F[2] ) > 0.5)
         then	if (UnitIAQUseVerifExFan#F[2] == 1 .AND. UnitIAQExFan#F[2]:IAQFanType == 3 .AND. IfValidAnd( UnitIAQExFan#F[2]:IncludesRecov > 0 )==0)
               then        UnitIAQZone#F[2]:IAQBalPwr[2]  + (min( UnitIAQFan#F[2]:IAQCFM, UnitIAQExFan#F[2]:IAQCFM ) * UnitIAQFanCnt#F[2] * UnitIAQExFan#F[2]:WperCFMIAQ)
               else if (UnitIAQOption[2] == 2 .AND. IfValidAnd( UnitIAQFan#F[2]:IAQFanType = 3 ) .AND. UnitIAQUseVerifExFan#F[2] == 0 .AND.
                        ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( UnitIAQFan#F[2]:IAQRecovEffect = 0 )) .OR.
                          (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( UnitIAQFan#F[2]:IncludesRecov  = 0 )) ))
               then	if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan#F[2]:Status == 1 ) .AND. UnitIAQUseVerifExFan#F[2] == 0)
                     then  UnitIAQZone#F[2]:IAQBalPwr[1]  + (UnitIAQFan#F[2]:IAQCFM * UnitIAQFanCnt#F[2] * UnitIAQFan#F[2]:WperCFMIAQ)
                     else if (UnitIAQUseVerifExFan#F[2] == 0)
                     then  UnitIAQZone#F[2]:IAQBalPwr[2]  + (UnitIAQFan#F[2]:IAQCFM * UnitIAQFanCnt#F[2] * UnitIAQFan#F[2]:WperCFMIAQ * UnitIAQFan#F[2]:FanPowerMult)
                     else  UNCHANGED  endif endif
               else  UNCHANGED  endif endif
         else  UNCHANGED  endif  }
   "Set Proj:UnitIAQZone2-4[2]:IAQHRVCFMxRcvEff[2]"  For:#F=(2to4)  Proj:UnitIAQZone#F[2]:IAQHRVCFMxRcvEff[2]	=
      {  if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan#F[2] ) > 0.5 .AND. IfValidAnd( Proj:AnalysisVersion >= 190200 )==0)
         then	if (UnitIAQFan#F[2]:IAQFanType == 3) then  UnitIAQZone#F[2]:IAQHRVCFMxRcvEff[2]  + (UnitIAQFan#F[2]:IAQCFM * UnitIAQFanCnt#F[2] * UnitIAQFan#F[2]:IAQRecovEffect)
               else  UNCHANGED  endif
         else	UNCHANGED  endif  }
   "Set Proj:UnitIAQZone2-4[2]:IAQHRVCFMxSRE[2]"   For:#F=(2to4)  Proj:UnitIAQZone#F[2]:IAQHRVCFMxSRE[2]	=
      {  if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan#F[2] ) > 0.5)
         then	if (UnitIAQUseVerifExFan#F[2] == 1 .AND. IfValidAnd( UnitIAQExFan#F[2]:IAQFanType = 3 ) .AND. IfValidAnd( UnitIAQExFan#F[2]:IncludesRecov > 0 ))
               then  UnitIAQZone#F[2]:IAQHRVCFMxSRE[2]  + (min( UnitIAQFan#F[2]:IAQCFM, UnitIAQExFan#F[2]:IAQCFM ) * UnitIAQFanCnt#F[2] * UnitIAQExFan#F[2]:SensRecovEff * UnitIAQExFan#F[2]:FanHeatRecovMult)
               else if (UnitIAQOption[2] == 2 .AND. IfValidAnd( UnitIAQFan#F[2]:SensRecovEff > 0 ) .AND.
                        (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .OR. IfValidAnd( UnitIAQFan#F[2]:IncludesRecov > 0 )) .AND.
                        UnitIAQUseVerifExFan#F[2] == 0 .AND. IfValidAnd( UnitIAQFan#F[2]:IAQFanType = 3 ))
               then	UnitIAQZone#F[2]:IAQHRVCFMxSRE[2]  + (UnitIAQFan#F[2]:IAQCFM * UnitIAQFanCnt#F[2] * UnitIAQFan#F[2]:SensRecovEff * UnitIAQFan#F[2]:FanHeatRecovMult)
               else	UNCHANGED  endif endif
         else	UNCHANGED  endif  }
   "Set Proj:UnitIAQZone2-4[2]:IAQHRVCFMxASRE[2]"  For:#F=(2to4)  Proj:UnitIAQZone#F[2]:IAQHRVCFMxASRE[2]	=
      {  if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan#F[2] ) > 0.5)
         then	if (UnitIAQUseVerifExFan#F[2] == 1 .AND. IfValidAnd( UnitIAQExFan#F[2]:IAQFanType = 3 ) .AND. IfValidAnd( UnitIAQExFan#F[2]:IncludesRecov > 0 ))
               then  UnitIAQZone#F[2]:IAQHRVCFMxASRE[2]  + (min( UnitIAQFan#F[2]:IAQCFM, UnitIAQExFan#F[2]:IAQCFM ) * UnitIAQFanCnt#F[2] * UnitIAQExFan#F[2]:AdjSensRecovEff * UnitIAQExFan#F[2]:FanHeatRecovMult)
               else if (UnitIAQOption[2] == 2 .AND. IfValidAnd( UnitIAQFan#F[2]:AdjSensRecovEff > 0 ) .AND.
                        (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .OR. IfValidAnd( UnitIAQFan#F[2]:IncludesRecov > 0 )) .AND.
                        UnitIAQUseVerifExFan#F[2] == 0 .AND. IfValidAnd( UnitIAQFan#F[2]:IAQFanType = 3 ))
               then	UnitIAQZone#F[2]:IAQHRVCFMxASRE[2]  + (UnitIAQFan#F[2]:IAQCFM * UnitIAQFanCnt#F[2] * UnitIAQFan#F[2]:AdjSensRecovEff * UnitIAQFan#F[2]:FanHeatRecovMult)
               else	UNCHANGED  endif endif
         else	UNCHANGED  endif  }

;  ; Fan #3
;   "Set Proj:UnitIAQZone3[2]:IAQCFM_Exhaust[2]" 	Proj:UnitIAQZone3[2]:IAQCFM_Exhaust[2]	= {	if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan3[2] ) > 0.5)
;																														then	if (UnitIAQFan3[2]:IAQFanType == 1) then  UnitIAQZone3[2]:IAQCFM_Exhaust[2] + (UnitIAQFan3[2]:IAQCFM * UnitIAQFanCnt3[2])  else  UNCHANGED  endif
;																														else	UNCHANGED  endif  }
;   ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/05/24 (tic #1304)
;   "Set Proj:UnitIAQZone3[2]:IAQPwr_Exhaust[2]" 	Proj:UnitIAQZone3[2]:IAQPwr_Exhaust[2]	= {	if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan3[2] ) > 0.5)
;																														then	if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan3[2]:Status == 1 ) .AND.
;                                                                                                    UnitIAQFan3[2]:IAQFanType == 1 .AND. IfValidAnd( UnitIAQFan3[2]:WperCFMIAQ > 0 ))
;                                                                                                then  UnitIAQZone3[2]:IAQPwr_Exhaust[2]  + (UnitIAQFan3[2]:IAQCFM * UnitIAQFanCnt3[2] * UnitIAQFan3[2]:WperCFMIAQ)
;                                                                                                else if (UnitIAQFan3[2]:IAQFanType == 1) then  UnitIAQZone3[2]:IAQPwr_Exhaust[2] + (UnitIAQFan3[2]:IAQCFM * UnitIAQFanCnt3[2] * UnitIAQFan3[2]:WperCFMIAQ * UnitIAQFan3[2]:FanPowerMult)  else  UNCHANGED  endif endif
;																														else	UNCHANGED  endif  }
;   "Set Proj:UnitIAQZone3[2]:IAQCFM_Supply[2]"  	Proj:UnitIAQZone3[2]:IAQCFM_Supply[2]	= {	if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan3[2] ) > 0.5)
;																														then	if (UnitIAQFan3[2]:IAQFanType == 2) then  UnitIAQZone3[2]:IAQCFM_Supply[2]  + (UnitIAQFan3[2]:IAQCFM * UnitIAQFanCnt3[2])  else  UNCHANGED  endif
;																														else	UNCHANGED  endif  }
;   ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/04/24 (tic #1304)
;   "Set Proj:UnitIAQZone3[2]:IAQPwr_Supply[2]"  	Proj:UnitIAQZone3[2]:IAQPwr_Supply[2]	= {	if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan3[2] ) > 0.5)
;																														then	if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan3[2]:Status == 1 ) .AND.
;                                                                                                    UnitIAQFan3[2]:IAQFanType == 2 .AND. IfValidAnd( UnitIAQFan3[2]:WperCFMIAQ > 0 ))
;                                                                                                then  UnitIAQZone3[2]:IAQPwr_Supply[2]  + (UnitIAQFan3[2]:IAQCFM * UnitIAQFanCnt3[2] * UnitIAQFan3[2]:WperCFMIAQ)
;                                                                                                else if (UnitIAQFan3[2]:IAQFanType == 2) then  UnitIAQZone3[2]:IAQPwr_Supply[2]  + (UnitIAQFan3[2]:IAQCFM * UnitIAQFanCnt3[2] * UnitIAQFan3[2]:WperCFMIAQ * UnitIAQFan3[2]:FanPowerMult)  else  UNCHANGED  endif endif
;																														else	UNCHANGED  endif  }
;   "Set Proj:UnitIAQZone3[2]:IAQHRVCFM[2]"  			Proj:UnitIAQZone3[2]:IAQHRVCFM[2]		= {	if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan3[2] ) > 0.5)
;																														then	if (UnitIAQFan3[2]:IAQFanType == 3) then  UnitIAQZone3[2]:IAQHRVCFM[2]  + (UnitIAQFan3[2]:IAQCFM * UnitIAQFanCnt3[2])  else  UNCHANGED  endif
;																														else	UNCHANGED  endif  }
;   ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/05/24 (tic #1304)
;   "Set Proj:UnitIAQZone3[2]:IAQHRVPwr[2]"  			Proj:UnitIAQZone3[2]:IAQHRVPwr[2]		= {	if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan3[2] ) > 0.5)
;																														then	if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan3[2]:Status == 1 ) .AND.
;                                                                                                    UnitIAQFan3[2]:IAQFanType == 3 .AND. IfValidAnd( UnitIAQFan3[2]:WperCFMIAQ > 0 ))
;                                                                                                then  UnitIAQZone3[2]:IAQHRVPwr[1]  + (UnitIAQFan3[2]:IAQCFM * UnitIAQFanCnt3[2] * UnitIAQFan3[2]:WperCFMIAQ)
;                                                                                                else if (UnitIAQFan3[2]:IAQFanType == 3) then  UnitIAQZone3[2]:IAQHRVPwr[2]  + (UnitIAQFan3[2]:IAQCFM * UnitIAQFanCnt3[2] * UnitIAQFan3[2]:WperCFMIAQ * UnitIAQFan3[2]:FanPowerMult)  else  UNCHANGED  endif endif
;																														else	UNCHANGED  endif  }
;   "Set Proj:UnitIAQZone3[2]:IAQBalCFM[2]"  			Proj:UnitIAQZone3[2]:IAQBalCFM[2]		= {	if (UnitIAQOption[2] == 2 .AND. IfValidAnd( UnitIAQFan3[2]:IAQFanType = 3 ) .AND.
;                                                                                                      ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( UnitIAQFan3[2]:IAQRecovEffect = 0 )) .OR.
;                                                                                                        (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( UnitIAQFan3[2]:IncludesRecov  = 0 )) ))
;																														then	UnitIAQZone3[2]:IAQBalCFM[2]  + (UnitIAQFan3[2]:IAQCFM * UnitIAQFanCnt3[2])  else  UNCHANGED  endif  }
;   ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/05/24 (tic #1304)
;   "Set Proj:UnitIAQZone3[2]:IAQBalPwr[2]"  			Proj:UnitIAQZone3[2]:IAQBalPwr[2]		= {	if (UnitIAQOption[2] == 2 .AND. IfValidAnd( UnitIAQFan3[2]:IAQFanType = 3 ) .AND.
;                                                                                                      ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( UnitIAQFan3[2]:IAQRecovEffect = 0 )) .OR.
;                                                                                                        (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( UnitIAQFan3[2]:IncludesRecov  = 0 )) ))
;																														then	if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan3[2]:Status == 1 ))
;                                                                                                then  UnitIAQZone3[2]:IAQBalPwr[1]  + (UnitIAQFan3[2]:IAQCFM * UnitIAQFanCnt3[2] * UnitIAQFan3[2]:WperCFMIAQ)
;                                                                                                else  UnitIAQZone3[2]:IAQBalPwr[2]  + (UnitIAQFan3[2]:IAQCFM * UnitIAQFanCnt3[2] * UnitIAQFan3[2]:WperCFMIAQ * UnitIAQFan3[2]:FanPowerMult)  endif  else  UNCHANGED  endif  }
;   "Set Proj:UnitIAQZone3[2]:IAQHRVCFMxRcvEff[2]"  Proj:UnitIAQZone3[2]:IAQHRVCFMxRcvEff[2]	={	if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan3[2] ) > 0.5 .AND. IfValidAnd( Proj:AnalysisVersion >= 190200 )==0)
;																														then	if (UnitIAQFan3[2]:IAQFanType == 3) then  UnitIAQZone3[2]:IAQHRVCFMxRcvEff[2]  + (UnitIAQFan3[2]:IAQCFM * UnitIAQFanCnt3[2] * UnitIAQFan3[2]:IAQRecovEffect)  else  UNCHANGED  endif
;																														else	UNCHANGED  endif  }
;   "Set Proj:UnitIAQZone3[2]:IAQHRVCFMxSRE[2]"  Proj:UnitIAQZone3[2]:IAQHRVCFMxSRE[2]	={	if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan3[2] ) > 0.5 .AND. IfValidAnd( UnitIAQFan3[2]:SensRecovEff > 0 ) .AND. (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .OR. IfValidAnd( UnitIAQFan3[2]:IncludesRecov > 0 )))
;																														then	if (UnitIAQFan3[2]:IAQFanType == 3) then  UnitIAQZone3[2]:IAQHRVCFMxSRE[2]  + (UnitIAQFan3[2]:IAQCFM * UnitIAQFanCnt3[2] * UnitIAQFan3[2]:SensRecovEff * UnitIAQFan3[2]:FanHeatRecovMult)  else  UNCHANGED  endif
;																														else	UNCHANGED  endif  }
;   "Set Proj:UnitIAQZone3[2]:IAQHRVCFMxASRE[2]"  Proj:UnitIAQZone3[2]:IAQHRVCFMxASRE[2]	={	if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan3[2] ) > 0.5 .AND. IfValidAnd( UnitIAQFan3[2]:AdjSensRecovEff > 0 ) .AND. (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .OR. IfValidAnd( UnitIAQFan3[2]:IncludesRecov > 0 )))
;																														then	if (UnitIAQFan3[2]:IAQFanType == 3) then  UnitIAQZone3[2]:IAQHRVCFMxASRE[2]  + (UnitIAQFan3[2]:IAQCFM * UnitIAQFanCnt3[2] * UnitIAQFan3[2]:AdjSensRecovEff * UnitIAQFan3[2]:FanHeatRecovMult)  else  UNCHANGED  endif
;																														else	UNCHANGED  endif  }
;  ; Fan #4
;   "Set Proj:UnitIAQZone4[2]:IAQCFM_Exhaust[2]" 	Proj:UnitIAQZone4[2]:IAQCFM_Exhaust[2]	= {	if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan4[2] ) > 0.5)
;																														then	if (UnitIAQFan4[2]:IAQFanType == 1) then  UnitIAQZone4[2]:IAQCFM_Exhaust[2] + (UnitIAQFan4[2]:IAQCFM * UnitIAQFanCnt4[2])  else  UNCHANGED  endif
;																														else	UNCHANGED  endif  }
;   ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/05/24 (tic #1304)
;   "Set Proj:UnitIAQZone4[2]:IAQPwr_Exhaust[2]" 	Proj:UnitIAQZone4[2]:IAQPwr_Exhaust[2]	= {	if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan4[2] ) > 0.5)
;																														then	if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan4[2]:Status == 1 ) .AND.
;                                                                                                    UnitIAQFan4[2]:IAQFanType == 1 .AND. IfValidAnd( UnitIAQFan4[2]:WperCFMIAQ > 0 ))
;                                                                                                then  UnitIAQZone4[2]:IAQPwr_Exhaust[2]  + (UnitIAQFan4[2]:IAQCFM * UnitIAQFanCnt4[2] * UnitIAQFan4[2]:WperCFMIAQ)
;                                                                                                else if (UnitIAQFan4[2]:IAQFanType == 1) then  UnitIAQZone4[2]:IAQPwr_Exhaust[2] + (UnitIAQFan4[2]:IAQCFM * UnitIAQFanCnt4[2] * UnitIAQFan4[2]:WperCFMIAQ * UnitIAQFan4[2]:FanPowerMult)  else  UNCHANGED  endif endif
;																														else	UNCHANGED  endif  }
;   "Set Proj:UnitIAQZone4[2]:IAQCFM_Supply[2]"  	Proj:UnitIAQZone4[2]:IAQCFM_Supply[2]	= {	if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan4[2] ) > 0.5)
;																														then	if (UnitIAQFan4[2]:IAQFanType == 2) then  UnitIAQZone4[2]:IAQCFM_Supply[2]  + (UnitIAQFan4[2]:IAQCFM * UnitIAQFanCnt4[2])  else  UNCHANGED  endif
;																														else	UNCHANGED  endif  }
;   ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/04/24 (tic #1304)
;   "Set Proj:UnitIAQZone4[2]:IAQPwr_Supply[2]"  	Proj:UnitIAQZone4[2]:IAQPwr_Supply[2]	= {	if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan4[2] ) > 0.5)
;																														then	if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan4[2]:Status == 1 ) .AND.
;                                                                                                    UnitIAQFan4[2]:IAQFanType == 2 .AND. IfValidAnd( UnitIAQFan4[2]:WperCFMIAQ > 0 ))
;                                                                                                then  UnitIAQZone4[2]:IAQPwr_Supply[2]  + (UnitIAQFan4[2]:IAQCFM * UnitIAQFanCnt4[2] * UnitIAQFan4[2]:WperCFMIAQ)
;                                                                                                else if (UnitIAQFan4[2]:IAQFanType == 2) then  UnitIAQZone4[2]:IAQPwr_Supply[2]  + (UnitIAQFan4[2]:IAQCFM * UnitIAQFanCnt4[2] * UnitIAQFan4[2]:WperCFMIAQ * UnitIAQFan4[2]:FanPowerMult)  else  UNCHANGED  endif endif
;																														else	UNCHANGED  endif  }
;   "Set Proj:UnitIAQZone4[2]:IAQHRVCFM[2]"  			Proj:UnitIAQZone4[2]:IAQHRVCFM[2]		= {	if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan4[2] ) > 0.5)
;																														then	if (UnitIAQFan4[2]:IAQFanType == 3) then  UnitIAQZone4[2]:IAQHRVCFM[2]  + (UnitIAQFan4[2]:IAQCFM * UnitIAQFanCnt4[2])  else  UNCHANGED  endif
;																														else	UNCHANGED  endif  }
;   ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/05/24 (tic #1304)
;   "Set Proj:UnitIAQZone4[2]:IAQHRVPwr[2]"  			Proj:UnitIAQZone4[2]:IAQHRVPwr[2]		= {	if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan4[2] ) > 0.5)
;																														then	if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan4[2]:Status == 1 ) .AND.
;                                                                                                    UnitIAQFan4[2]:IAQFanType == 3 .AND. IfValidAnd( UnitIAQFan4[2]:WperCFMIAQ > 0 ))
;                                                                                                then  UnitIAQZone4[2]:IAQHRVPwr[1]  + (UnitIAQFan4[2]:IAQCFM * UnitIAQFanCnt4[2] * UnitIAQFan4[2]:WperCFMIAQ)
;                                                                                                else if (UnitIAQFan4[2]:IAQFanType == 3) then  UnitIAQZone4[2]:IAQHRVPwr[2]  + (UnitIAQFan4[2]:IAQCFM * UnitIAQFanCnt4[2] * UnitIAQFan4[2]:WperCFMIAQ * UnitIAQFan4[2]:FanPowerMult)  else  UNCHANGED  endif endif
;																														else	UNCHANGED  endif  }
;   "Set Proj:UnitIAQZone4[2]:IAQBalCFM[2]"  			Proj:UnitIAQZone4[2]:IAQBalCFM[2]		= {	if (UnitIAQOption[2] == 2 .AND. IfValidAnd( UnitIAQFan4[2]:IAQFanType = 3 ) .AND.
;                                                                                                      ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( UnitIAQFan4[2]:IAQRecovEffect = 0 )) .OR.
;                                                                                                        (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( UnitIAQFan4[2]:IncludesRecov  = 0 )) ))
;																														then	UnitIAQZone4[2]:IAQBalCFM[2]  + (UnitIAQFan4[2]:IAQCFM * UnitIAQFanCnt4[2])  else  UNCHANGED  endif  }
;   ; use UnitIAQFan1[1]:WperCFMIAQ for Existing fans - SAC 04/05/24 (tic #1304)
;   "Set Proj:UnitIAQZone4[2]:IAQBalPwr[2]"  			Proj:UnitIAQZone4[2]:IAQBalPwr[2]		= {	if (UnitIAQOption[2] == 2 .AND. IfValidAnd( UnitIAQFan4[2]:IAQFanType = 3 ) .AND.
;                                                                                                      ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( UnitIAQFan4[2]:IAQRecovEffect = 0 )) .OR.
;                                                                                                        (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( UnitIAQFan4[2]:IncludesRecov  = 0 )) ))
;																														then	if (IfValidAnd( Proj:RunScope == 2 ) .AND. IfValidAnd( UnitIAQFan4[2]:Status == 1 ))
;                                                                                                then  UnitIAQZone4[2]:IAQBalPwr[1]  + (UnitIAQFan4[2]:IAQCFM * UnitIAQFanCnt4[2] * UnitIAQFan4[2]:WperCFMIAQ)
;                                                                                                else  UnitIAQZone4[2]:IAQBalPwr[2]  + (UnitIAQFan4[2]:IAQCFM * UnitIAQFanCnt4[2] * UnitIAQFan4[2]:WperCFMIAQ * UnitIAQFan4[2]:FanPowerMult)  endif  else  UNCHANGED  endif  }
;   "Set Proj:UnitIAQZone4[2]:IAQHRVCFMxRcvEff[2]"  Proj:UnitIAQZone4[2]:IAQHRVCFMxRcvEff[2]	={	if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan4[2] ) > 0.5 .AND. IfValidAnd( Proj:AnalysisVersion >= 190200 )==0)
;																														then	if (UnitIAQFan4[2]:IAQFanType == 3) then  UnitIAQZone4[2]:IAQHRVCFMxRcvEff[2]  + (UnitIAQFan4[2]:IAQCFM * UnitIAQFanCnt4[2] * UnitIAQFan4[2]:IAQRecovEffect)  else  UNCHANGED  endif
;																														else	UNCHANGED  endif  }
;   "Set Proj:UnitIAQZone4[2]:IAQHRVCFMxSRE[2]"  Proj:UnitIAQZone4[2]:IAQHRVCFMxSRE[2]	={	if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan4[2] ) > 0.5 .AND. IfValidAnd( UnitIAQFan4[2]:SensRecovEff > 0 ) .AND. (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .OR. IfValidAnd( UnitIAQFan4[2]:IncludesRecov > 0 )))
;																														then	if (UnitIAQFan4[2]:IAQFanType == 3) then  UnitIAQZone4[2]:IAQHRVCFMxSRE[2]  + (UnitIAQFan4[2]:IAQCFM * UnitIAQFanCnt4[2] * UnitIAQFan4[2]:SensRecovEff * UnitIAQFan4[2]:FanHeatRecovMult)  else  UNCHANGED  endif
;																														else	UNCHANGED  endif  }
;   "Set Proj:UnitIAQZone4[2]:IAQHRVCFMxASRE[2]"  Proj:UnitIAQZone4[2]:IAQHRVCFMxASRE[2]	={	if (UnitIAQOption[2] == 2 .AND. LocalCompAssigned( UnitIAQFan4[2] ) > 0.5 .AND. IfValidAnd( UnitIAQFan4[2]:AdjSensRecovEff > 0 ) .AND. (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .OR. IfValidAnd( UnitIAQFan4[2]:IncludesRecov > 0 )))
;																														then	if (UnitIAQFan4[2]:IAQFanType == 3) then  UnitIAQZone4[2]:IAQHRVCFMxASRE[2]  + (UnitIAQFan4[2]:IAQCFM * UnitIAQFanCnt4[2] * UnitIAQFan4[2]:AdjSensRecovEff * UnitIAQFan4[2]:FanHeatRecovMult)  else  UNCHANGED  endif
;																														else	UNCHANGED  endif  }
END

;*************************************************************************
RULELIST "Set_ZoneIAQ_MFam"  0 0 0 0
;*************************************************************************
	"Init Zone:IAQCFM_Exhaust[1]"		Zone:IAQCFM_Exhaust[1]	= {	0  }
	"Init Zone:IAQPwr_Exhaust[1]"		Zone:IAQPwr_Exhaust[1]	= {	0  }
	"Init Zone:IAQCFM_Supply[1]"		Zone:IAQCFM_Supply[1]	= {	0  }
	"Init Zone:IAQPwr_Supply[1]"		Zone:IAQPwr_Supply[1]	= {	0  }
   "Init Zone:IAQHRVCFM[1]"  			Zone:IAQHRVCFM[1]			= {	0  }		; SAC 5/20/13
   "Init Zone:IAQHRVPwr[1]"  			Zone:IAQHRVPwr[1]			= {	0  }
   "Init Zone:IAQBalCFM[1]"  			Zone:IAQBalCFM[1]			= {	0  }		; SAC 7/25/20
   "Init Zone:IAQBalPwr[1]"  			Zone:IAQBalPwr[1]			= {	0  }
   "Init Zone:IAQHRVCFMxRcvEff[1]"  Zone:IAQHRVCFMxRcvEff[1] ={	0  }
   "Init Zone:IAQHRVCFMxSRE[1]"   Zone:IAQHRVCFMxSRE[1] ={	0  }
   "Init Zone:IAQHRVCFMxASRE[1]"  Zone:IAQHRVCFMxASRE[1] ={	0  }

	"Init Zone:IAQCFM_Exhaust[2]"		Zone:IAQCFM_Exhaust[2]	= {	0  }
	"Init Zone:IAQPwr_Exhaust[2]"		Zone:IAQPwr_Exhaust[2]	= {	0  }
	"Init Zone:IAQCFM_Supply[2]"		Zone:IAQCFM_Supply[2]	= {	0  }
	"Init Zone:IAQPwr_Supply[2]"		Zone:IAQPwr_Supply[2]	= {	0  }
   "Init Zone:IAQHRVCFM[2]"  			Zone:IAQHRVCFM[2]			= {	0  }		; SAC 5/20/13
   "Init Zone:IAQHRVPwr[2]"  			Zone:IAQHRVPwr[2]			= {	0  }
   "Init Zone:IAQBalCFM[2]"  			Zone:IAQBalCFM[2]			= {	0  }		; SAC 7/25/20
   "Init Zone:IAQBalPwr[2]"  			Zone:IAQBalPwr[2]			= {	0  }
   "Init Zone:IAQHRVCFMxRcvEff[2]"  Zone:IAQHRVCFMxRcvEff[2] ={	0  }
   "Init Zone:IAQHRVCFMxSRE[2]"   Zone:IAQHRVCFMxSRE[2] ={	0  }
   "Init Zone:IAQHRVCFMxASRE[2]"  Zone:IAQHRVCFMxASRE[2] ={	0  }

; SAC 6/24/14 - revisions to enable new DwellUnit objects
   "Set Zone:IAQCFM_Exhaust[1]" 		Zone:IAQCFM_Exhaust[1]		= {	SumChildren( DwellUnit:IAQCFM_Exhaust )  }   ; SAC 11/12/17 - replace TotalIAQCFM with IAQCFM_Exhaust (tic #915)
	"Set Zone:IAQPwr_Exhaust[1]" 		Zone:IAQPwr_Exhaust[1]		= {	SumChildren( DwellUnit:IAQPwr_Exhaust )  }
	"Set Zone:IAQCFM_Supply[1]"  		Zone:IAQCFM_Supply[1]		= {	SumChildren( DwellUnit:IAQCFM_Supply )  }
	"Set Zone:IAQPwr_Supply[1]"  		Zone:IAQPwr_Supply[1]		= {	SumChildren( DwellUnit:IAQPwr_Supply )  }
	"Set Zone:IAQHRVCFM[1]"  			Zone:IAQHRVCFM[1]				= {	SumChildren( DwellUnit:IAQHRVCFM )  }     ; SAC 11/11/17 - added for Balanced IAQ option (heat recovery ventilators) (tic #915)
	"Set Zone:IAQHRVPwr[1]"  			Zone:IAQHRVPwr[1]				= {	SumChildren( DwellUnit:IAQHRVPwr )  }
	"Set Zone:IAQBalCFM[1]"  			Zone:IAQBalCFM[1]				= {	SumChildren( DwellUnit:IAQBalCFM )  }     ; SAC 7/25/20 (tic #1174)
	"Set Zone:IAQBalPwr[1]"  			Zone:IAQBalPwr[1]				= {	SumChildren( DwellUnit:IAQBalPwr )  }
	"Set Zone:IAQHRVCFMxRcvEff[1]"	Zone:IAQHRVCFMxRcvEff[1]	= {	SumChildren( DwellUnit:IAQHRVCFMxRcvEff )  }
	"Set Zone:IAQHRVCFMxSRE[1]"	Zone:IAQHRVCFMxSRE[1]	= {	SumChildren( DwellUnit:IAQHRVCFMxSRE )  }
	"Set Zone:IAQHRVCFMxASRE[1]"	Zone:IAQHRVCFMxASRE[1]	= {	SumChildren( DwellUnit:IAQHRVCFMxASRE )  }
   "Set Zone:StdDesignIAQCFM"       Zone:StdDesignIAQCFM       = {   SumChildren( DwellUnit:StdDesignIAQCFM )  }  ; SAC 12/15/19
   "Set Zone:MaxStdDesignIAQPower"  Zone:MaxStdDesignIAQPower  = {   SumChildren( DwellUnit:MaxStdDesignIAQPower )  } 

;	"Init OtherZone:IAQCFM_Exhaust"		OtherZone:IAQCFM_Exhaust	= {	0  }     ; SAC 9/20/19 - OtherZone (MFamProto)
;	"Init OtherZone:IAQPwr_Exhaust"		OtherZone:IAQPwr_Exhaust	= {	0  }
;	"Init OtherZone:IAQCFM_Supply"		OtherZone:IAQCFM_Supply		= {	0  }
;	"Init OtherZone:IAQPwr_Supply"		OtherZone:IAQPwr_Supply		= {	0  }
;   "Init OtherZone:IAQHRVCFM"  			OtherZone:IAQHRVCFM			= {	0  }
;   "Init OtherZone:IAQHRVPwr"  			OtherZone:IAQHRVPwr			= {	0  }
;   "Init OtherZone:IAQHRVCFMxRcvEff"   OtherZone:IAQHRVCFMxRcvEff ={	0  }
;   "Init OtherZone:IAQHRVCFMxSRE"   OtherZone:IAQHRVCFMxSRE ={	0  }
;   "Init OtherZone:IAQHRVCFMxASRE"   OtherZone:IAQHRVCFMxASRE ={	0  }
END
;*************************************************************************

;*************************************************************************
RULELIST "Default_ZoneIZXFER" 1 0 0 0
;*************************************************************************
	"Set cseIZXFER:izNVType"	cseIZXFER:izNVType	= {	4  }		; "AIRNETEXT"
	"Set cseIZXFER:izNVEff"		cseIZXFER:izNVEff 	= {	1  }
	"Set cseIZXFER:izExp"		cseIZXFER:izExp   	= {	0.65  }
	"Set cseIZXFER:izCpr"		cseIZXFER:izCpr   	= {	0.6  }
END

;*************************************************************************
RULELIST "Default_AtticIZXFER" 1 0 0 0
;*************************************************************************
	"Set cseIZXFER:izNVType"	cseIZXFER:izNVType	= {	4     }		; "AIRNETEXT"
	"Set cseIZXFER:izNVEff"		cseIZXFER:izNVEff 	= {	0.6   }
	"Set cseIZXFER:izExp"		cseIZXFER:izExp   	= {	0.65  }
	"Set cseIZXFER:izCpr"		cseIZXFER:izCpr   	= {	0.6   }
END

;*************************************************************************
RULELIST "Default_ZoneWinIZXFER" 1 0 0 0
;*************************************************************************
	"Set cseIZXFER:izNVType"	cseIZXFER:izNVType	= {	4  }		; "AIRNETEXT"
	"Set cseIZXFER:izALo"		cseIZXFER:izALo   	= {	0 }
	"Set cseIZXFER:izNVEff"		cseIZXFER:izNVEff   	= {	0.5  }
	"Set cseIZXFER:izCpr"		cseIZXFER:izCpr   	= {	0.6  }
	"Set cseIZXFER:izAFCat"		cseIZXFER:izAFCat   	= {	"VentEx"  }    ; SAC 09/17/20 (tic #1247)

;           "izNVType",          BEMP_Sym,  1, "",                 0, "",         0, "",             1801, "Choice determining interzone ventilation"    
;           "izZn1",             BEMP_Obj,  1, "",                 0, "cseZONE",  0, "",             7010, "Name of primary zone (flow rates > 0 are into the primary zone)" 
;           "izZn2",             BEMP_Obj,  1, "",                 0, "cseZONE",  0, "",             7010, "Name of secondary zone" 
;           "izALo",             BEMP_Flt,  1, "ft2",              0, "",         0, "",             3008, "Area of low or only vent (typically VentOff)"    
;           "izAHi",             BEMP_Flt,  1, "ft2",              0, "",         0, "",             3008, "Additional vent area (high vent or VentOn)"    
;           "izL1",              BEMP_Flt,  1, "ft",               0, "",         0, "",             3008, "Length or width of AIRNETHORIZ opening"    
;           "izL2",              BEMP_Flt,  1, "ft",               0, "",         0, "",             3008, "Width or length of AIRNETHORIZ opening"    
;           "izHD",              BEMP_Flt,  1, "ft",               0, "",         0, "",             3008, "Vent center-to-center height difference (for TWOWAY) or vent height above nominal 0 level (for AirNet types)"
;           "izNVEff",           BEMP_Flt,  1, "",                 0, "",         0, "",             3008, "Vent discharge coefficient coefficient"
;           "izFanVfDs",         BEMP_Flt,  1, "cfm",              0, "",         0, "",             3008, "Fan design or rated flow at rated pressure"
;           "izCpr",             BEMP_Flt,  1, "",                 0, "",         0, "",             3008, "Wind pressure coefficient (for AIRNETEXT)"
;           "izExp",             BEMP_Flt,  1, "",                 0, "",         0, "",             3008, "Opening exponent"
END
;*************************************************************************

; SAC 2/5/20 - setup HRV IAQ IZXFERs for individual fans (SFam-MainHome) (tic #1174)
;*************************************************************************
RULELIST "Setup_HRVIAQ_IZXFERs_SFamZone" 1 0 0 0
;*************************************************************************
; in the process of calling this rulelist, the Zone being operated on will be stored to Proj:HRVIAQ_IZXFER_ZoneRef...
   "Dereference all IAQFan:HRV_IZXFERRef"    IAQFan:HRV_IZXFERRef  = {  UNDEFINED  }

   ; added reference to new UnitIAQFan*[*]:FanHeatRecovMult & FanPowerMult - SAC 7/20/20 (tic #1174)
   ; IAQ HRV Fans
   ; revised for VerifiedExisting fans and to execute via For loop - SAC 04/08/24 (tic #1304)
   "Create HRV IAQ IZXFER for main home Fan #1-4"    for:#F=(1to4)	Proj:UnitIAQFan#F[1]:HRV_IZXFERRef  =
      {  if ( UnitIAQFan#F[1]:IAQFanType == 3 .AND. IfValidAnd( UnitIAQFanCnt#F[1] > 0 ) .AND.
              IfValidAnd( UnitIAQZone#F[1] = HRVIAQ_IZXFER_ZoneRef) .AND. UnitIAQFan#F[1]:IncludesRecov > 0 .AND.
              IfValidAnd( UnitIAQFan#F[1]:SensRecovEff > 0 ) .AND. IfValidAnd( UnitIAQFan#F[1]:AdjSensRecovEff > 0 ) .AND.
              UnitIAQUseVerifExFan#F[1] == 0 )
         then  CreateComp( cseIZXFER, substr( UnitIAQZone#F[1], 0, 28 ) + "-1-" + substr( UnitIAQFan#F[1]:Name, 0, 28 ) + "-IAQHRV" )
         else  UNDEFINED  endif  }
   "Set Proj:UnitIAQFan#F[1]:HRV_IZXFERRef:izNVType"      for:#F=(1to4)  Proj:UnitIAQFan#F[1]:HRV_IZXFERRef:izNVType     = {  10  }      ; AIRNETHERV  - IAQ balanced / heat recovery ventilator
   "Set Proj:UnitIAQFan#F[1]:HRV_IZXFERRef:izZn1"         for:#F=(1to4)  Proj:UnitIAQFan#F[1]:HRV_IZXFERRef:izZn1        = {  HRVIAQ_IZXFER_ZoneRef:CSE_ZONE  }
;"dbg" Proj:Action = { PostMessageToLog( "   setting Proj:UnitIAQFan1[1]:HRV_IZXFERRef:izFanVfDs based on:  IAQCFM %g / UnitIAQFanCnt1 %g / IAQCFMFracHRVCompat %g / IAQFanCFMMult %g", UnitIAQFan1[1]:IAQCFM, UnitIAQFanCnt1[1], ValidOr( IAQCFMFracHRVCompat[1], 1 ), ValidOr( IAQFanCFMMult[1], 1 ) ) }
   "Set Proj:UnitIAQFan#F[1]:HRV_IZXFERRef:izFanVfDs"     for:#F=(1to4)  Proj:UnitIAQFan#F[1]:HRV_IZXFERRef:izFanVfDs    = {  UnitIAQFan#F[1]:IAQCFM * UnitIAQFanCnt#F[1] * ValidOr( IAQCFMFracHRVCompat[1], 1 ) * ValidOr( IAQFanCFMMult[1], 1 )  }   ; SAC 08/29/20
   "Set Proj:UnitIAQFan#F[1]:HRV_IZXFERRef:izFanElecPwr"  for:#F=(1to4)  Proj:UnitIAQFan#F[1]:HRV_IZXFERRef:izFanElecPwr = {  UnitIAQFan#F[1]:WperCFMIAQ * UnitIAQFan#F[1]:FanPowerMult  }
   "Set Proj:UnitIAQFan#F[1]:HRV_IZXFERRef:izSRE"         for:#F=(1to4)  Proj:UnitIAQFan#F[1]:HRV_IZXFERRef:izSRE        = {  UnitIAQFan#F[1]:SensRecovEff    * UnitIAQFan#F[1]:FanHeatRecovMult / 100  }
   "Set Proj:UnitIAQFan#F[1]:HRV_IZXFERRef:izASRE"        for:#F=(1to4)  Proj:UnitIAQFan#F[1]:HRV_IZXFERRef:izASRE       = {  UnitIAQFan#F[1]:AdjSensRecovEff * UnitIAQFan#F[1]:FanHeatRecovMult / 100  }
   "Set Proj:UnitIAQFan#F[1]:HRV_IZXFERRef:izFanMtr"      for:#F=(1to4)  Proj:UnitIAQFan#F[1]:HRV_IZXFERRef:izFanMtr     = {  Proj:CSE_ElecMETER  }
   "Set Proj:UnitIAQFan#F[1]:HRV_IZXFERRef:izFanEndUse"   for:#F=(1to4)  Proj:UnitIAQFan#F[1]:HRV_IZXFERRef:izFanEndUse  = {  "FANV"  }

   ; IAQ HRV Fan #2
   ;"Create HRV IAQ IZXFER for main home Fan #2"    Proj:UnitIAQFan2[1]:HRV_IZXFERRef  =
   ;   {  if (UnitIAQFan2[1]:IAQFanType == 3 .AND. IfValidAnd( UnitIAQFanCnt2[1] > 0 ) .AND.
   ;          IfValidAnd( UnitIAQZone2[1] = HRVIAQ_IZXFER_ZoneRef) .AND. UnitIAQFan2[1]:IncludesRecov > 0 .AND.
   ;          IfValidAnd( UnitIAQFan2[1]:SensRecovEff > 0 ) .AND. IfValidAnd( UnitIAQFan2[1]:AdjSensRecovEff > 0 ))
   ;      then  CreateComp( cseIZXFER, substr( UnitIAQZone2[1], 0, 28 ) + "-2-" + substr( UnitIAQFan2[1]:Name, 0, 28 ) + "-IAQHRV" )
   ;      else  UNDEFINED  endif  }
   ;"Set Proj:UnitIAQFan2[1]:HRV_IZXFERRef:izNVType"      Proj:UnitIAQFan2[1]:HRV_IZXFERRef:izNVType     = {  10  }      ; AIRNETHERV  - IAQ balanced / heat recovery ventilator
   ;"Set Proj:UnitIAQFan2[1]:HRV_IZXFERRef:izZn1"         Proj:UnitIAQFan2[1]:HRV_IZXFERRef:izZn1        = {  HRVIAQ_IZXFER_ZoneRef:CSE_ZONE  }
   ;"Set Proj:UnitIAQFan2[1]:HRV_IZXFERRef:izFanVfDs"     Proj:UnitIAQFan2[1]:HRV_IZXFERRef:izFanVfDs    = {  UnitIAQFan2[1]:IAQCFM * UnitIAQFanCnt2[1] * ValidOr( IAQCFMFracHRVCompat[1], 1 ) * ValidOr( IAQFanCFMMult[1], 1 )  }   ; SAC 08/29/20
   ;"Set Proj:UnitIAQFan2[1]:HRV_IZXFERRef:izFanElecPwr"  Proj:UnitIAQFan2[1]:HRV_IZXFERRef:izFanElecPwr = {  UnitIAQFan2[1]:WperCFMIAQ * UnitIAQFan2[1]:FanPowerMult  }
   ;"Set Proj:UnitIAQFan2[1]:HRV_IZXFERRef:izSRE"         Proj:UnitIAQFan2[1]:HRV_IZXFERRef:izSRE        = {  UnitIAQFan2[1]:SensRecovEff    * UnitIAQFan2[1]:FanHeatRecovMult / 100  }
   ;"Set Proj:UnitIAQFan2[1]:HRV_IZXFERRef:izASRE"        Proj:UnitIAQFan2[1]:HRV_IZXFERRef:izASRE       = {  UnitIAQFan2[1]:AdjSensRecovEff * UnitIAQFan2[1]:FanHeatRecovMult / 100  }
   ;"Set Proj:UnitIAQFan2[1]:HRV_IZXFERRef:izFanMtr"      Proj:UnitIAQFan2[1]:HRV_IZXFERRef:izFanMtr     = {  Proj:CSE_ElecMETER  }
   ;"Set Proj:UnitIAQFan2[1]:HRV_IZXFERRef:izFanEndUse"   Proj:UnitIAQFan2[1]:HRV_IZXFERRef:izFanEndUse  = {  "FANV"  }

   ; IAQ HRV Fan #3
   ;"Create HRV IAQ IZXFER for main home Fan #3"    Proj:UnitIAQFan3[1]:HRV_IZXFERRef  =
   ;   {  if (UnitIAQFan3[1]:IAQFanType == 3 .AND. IfValidAnd( UnitIAQFanCnt3[1] > 0 ) .AND.
   ;          IfValidAnd( UnitIAQZone3[1] = HRVIAQ_IZXFER_ZoneRef) .AND. UnitIAQFan3[1]:IncludesRecov > 0 .AND.
   ;          IfValidAnd( UnitIAQFan3[1]:SensRecovEff > 0 ) .AND. IfValidAnd( UnitIAQFan3[1]:AdjSensRecovEff > 0 ))
   ;      then  CreateComp( cseIZXFER, substr( UnitIAQZone3[1], 0, 28 ) + "-3-" + substr( UnitIAQFan3[1]:Name, 0, 28 ) + "-IAQHRV" )
   ;      else  UNDEFINED  endif  }
   ;"Set Proj:UnitIAQFan3[1]:HRV_IZXFERRef:izNVType"      Proj:UnitIAQFan3[1]:HRV_IZXFERRef:izNVType     = {  10  }      ; AIRNETHERV  - IAQ balanced / heat recovery ventilator
   ;"Set Proj:UnitIAQFan3[1]:HRV_IZXFERRef:izZn1"         Proj:UnitIAQFan3[1]:HRV_IZXFERRef:izZn1        = {  HRVIAQ_IZXFER_ZoneRef:CSE_ZONE  }
   ;"Set Proj:UnitIAQFan3[1]:HRV_IZXFERRef:izFanVfDs"     Proj:UnitIAQFan3[1]:HRV_IZXFERRef:izFanVfDs    = {  UnitIAQFan3[1]:IAQCFM * UnitIAQFanCnt3[1] * ValidOr( IAQCFMFracHRVCompat[1], 1 ) * ValidOr( IAQFanCFMMult[1], 1 )  }   ; SAC 08/29/20
   ;"Set Proj:UnitIAQFan3[1]:HRV_IZXFERRef:izFanElecPwr"  Proj:UnitIAQFan3[1]:HRV_IZXFERRef:izFanElecPwr = {  UnitIAQFan3[1]:WperCFMIAQ * UnitIAQFan3[1]:FanPowerMult  }
   ;"Set Proj:UnitIAQFan3[1]:HRV_IZXFERRef:izSRE"         Proj:UnitIAQFan3[1]:HRV_IZXFERRef:izSRE        = {  UnitIAQFan3[1]:SensRecovEff    * UnitIAQFan3[1]:FanHeatRecovMult / 100  }
   ;"Set Proj:UnitIAQFan3[1]:HRV_IZXFERRef:izASRE"        Proj:UnitIAQFan3[1]:HRV_IZXFERRef:izASRE       = {  UnitIAQFan3[1]:AdjSensRecovEff * UnitIAQFan3[1]:FanHeatRecovMult / 100  }
   ;"Set Proj:UnitIAQFan3[1]:HRV_IZXFERRef:izFanMtr"      Proj:UnitIAQFan3[1]:HRV_IZXFERRef:izFanMtr     = {  Proj:CSE_ElecMETER  }
   ;"Set Proj:UnitIAQFan3[1]:HRV_IZXFERRef:izFanEndUse"   Proj:UnitIAQFan3[1]:HRV_IZXFERRef:izFanEndUse  = {  "FANV"  }

   ; IAQ HRV Fan #4
   ;"Create HRV IAQ IZXFER for main home Fan #4"    Proj:UnitIAQFan4[1]:HRV_IZXFERRef  =
   ;   {  if (UnitIAQFan4[1]:IAQFanType == 3 .AND. IfValidAnd( UnitIAQFanCnt4[1] > 0 ) .AND.
   ;          IfValidAnd( UnitIAQZone4[1] = HRVIAQ_IZXFER_ZoneRef) .AND. UnitIAQFan4[1]:IncludesRecov > 0 .AND.
   ;          IfValidAnd( UnitIAQFan4[1]:SensRecovEff > 0 ) .AND. IfValidAnd( UnitIAQFan4[1]:AdjSensRecovEff > 0 ))
   ;      then  CreateComp( cseIZXFER, substr( UnitIAQZone4[1], 0, 28 ) + "-4-" + substr( UnitIAQFan4[1]:Name, 0, 28 ) + "-IAQHRV" )
   ;      else  UNDEFINED  endif  }
   ;"Set Proj:UnitIAQFan4[1]:HRV_IZXFERRef:izNVType"      Proj:UnitIAQFan4[1]:HRV_IZXFERRef:izNVType     = {  10  }      ; AIRNETHERV  - IAQ balanced / heat recovery ventilator
   ;"Set Proj:UnitIAQFan4[1]:HRV_IZXFERRef:izZn1"         Proj:UnitIAQFan4[1]:HRV_IZXFERRef:izZn1        = {  HRVIAQ_IZXFER_ZoneRef:CSE_ZONE  }
   ;"Set Proj:UnitIAQFan4[1]:HRV_IZXFERRef:izFanVfDs"     Proj:UnitIAQFan4[1]:HRV_IZXFERRef:izFanVfDs    = {  UnitIAQFan4[1]:IAQCFM * UnitIAQFanCnt4[1] * ValidOr( IAQCFMFracHRVCompat[1], 1 ) * ValidOr( IAQFanCFMMult[1], 1 )  }   ; SAC 08/29/20
   ;"Set Proj:UnitIAQFan4[1]:HRV_IZXFERRef:izFanElecPwr"  Proj:UnitIAQFan4[1]:HRV_IZXFERRef:izFanElecPwr = {  UnitIAQFan4[1]:WperCFMIAQ * UnitIAQFan4[1]:FanPowerMult  }
   ;"Set Proj:UnitIAQFan4[1]:HRV_IZXFERRef:izSRE"         Proj:UnitIAQFan4[1]:HRV_IZXFERRef:izSRE        = {  UnitIAQFan4[1]:SensRecovEff    * UnitIAQFan4[1]:FanHeatRecovMult / 100  }
   ;"Set Proj:UnitIAQFan4[1]:HRV_IZXFERRef:izASRE"        Proj:UnitIAQFan4[1]:HRV_IZXFERRef:izASRE       = {  UnitIAQFan4[1]:AdjSensRecovEff * UnitIAQFan4[1]:FanHeatRecovMult / 100  }
   ;"Set Proj:UnitIAQFan4[1]:HRV_IZXFERRef:izFanMtr"      Proj:UnitIAQFan4[1]:HRV_IZXFERRef:izFanMtr     = {  Proj:CSE_ElecMETER  }
   ;"Set Proj:UnitIAQFan4[1]:HRV_IZXFERRef:izFanEndUse"   Proj:UnitIAQFan4[1]:HRV_IZXFERRef:izFanEndUse  = {  "FANV"  }

   ; Verified-Existing IAQ HRV Fans
   "Create HRV IAQ IZXFER for main home Verified-Existing Fan #1-4"    for:#F=(1to4)	Proj:UnitIAQExFan#F[1]:HRV_IZXFERRef  =     ; SAC 04/08/24 (tic #1304)
      {  if ( UnitIAQExFan#F[1]:IAQFanType == 3 .AND. IfValidAnd( UnitIAQFanCnt#F[1] > 0 ) .AND.
              IfValidAnd( UnitIAQZone#F[1] = HRVIAQ_IZXFER_ZoneRef) .AND. UnitIAQExFan#F[1]:IncludesRecov > 0 .AND.
              IfValidAnd( UnitIAQExFan#F[1]:SensRecovEff > 0 ) .AND. IfValidAnd( UnitIAQExFan#F[1]:AdjSensRecovEff > 0 ) .AND.
              UnitIAQUseVerifExFan#F[1] == 1 )
         then  CreateComp( cseIZXFER, substr( UnitIAQZone#F[1], 0, 28 ) + "-1-" + substr( UnitIAQExFan#F[1]:Name, 0, 28 ) + "-IAQHRV" )
         else  UNDEFINED  endif  }
   "Set Proj:UnitIAQExFan#F[1]:HRV_IZXFERRef:izNVType"      for:#F=(1to4)  Proj:UnitIAQExFan#F[1]:HRV_IZXFERRef:izNVType     = {  10  }      ; AIRNETHERV  - IAQ balanced / heat recovery ventilator
   "Set Proj:UnitIAQExFan#F[1]:HRV_IZXFERRef:izZn1"         for:#F=(1to4)  Proj:UnitIAQExFan#F[1]:HRV_IZXFERRef:izZn1        = {  HRVIAQ_IZXFER_ZoneRef:CSE_ZONE  }
;"dbg" Proj:Action = { PostMessageToLog( "   setting Proj:UnitIAQExFan1[1]:HRV_IZXFERRef:izFanVfDs based on:  IAQCFM %g / UnitIAQFanCnt1 %g / IAQCFMFracHRVCompat %g / IAQFanCFMMult %g", UnitIAQExFan1[1]:IAQCFM, UnitIAQFanCnt1[1], ValidOr( IAQCFMFracHRVCompat[1], 1 ), ValidOr( IAQFanCFMMult[1], 1 ) ) }
   "Set Proj:UnitIAQExFan#F[1]:HRV_IZXFERRef:izFanVfDs"     for:#F=(1to4)  Proj:UnitIAQExFan#F[1]:HRV_IZXFERRef:izFanVfDs    = {  min( UnitIAQFan#F[1]:IAQCFM, UnitIAQExFan#F[1]:IAQCFM ) * UnitIAQFanCnt#F[1] * ValidOr( IAQCFMFracHRVCompat[1], 1 ) * ValidOr( IAQFanCFMMult[1], 1 )  }   ; SAC 08/29/20
   "Set Proj:UnitIAQExFan#F[1]:HRV_IZXFERRef:izFanElecPwr"  for:#F=(1to4)  Proj:UnitIAQExFan#F[1]:HRV_IZXFERRef:izFanElecPwr = {  UnitIAQExFan#F[1]:WperCFMIAQ * UnitIAQExFan#F[1]:FanPowerMult  }
   "Set Proj:UnitIAQExFan#F[1]:HRV_IZXFERRef:izSRE"         for:#F=(1to4)  Proj:UnitIAQExFan#F[1]:HRV_IZXFERRef:izSRE        = {  UnitIAQExFan#F[1]:SensRecovEff    * UnitIAQExFan#F[1]:FanHeatRecovMult / 100  }
   "Set Proj:UnitIAQExFan#F[1]:HRV_IZXFERRef:izASRE"        for:#F=(1to4)  Proj:UnitIAQExFan#F[1]:HRV_IZXFERRef:izASRE       = {  UnitIAQExFan#F[1]:AdjSensRecovEff * UnitIAQExFan#F[1]:FanHeatRecovMult / 100  }
   "Set Proj:UnitIAQExFan#F[1]:HRV_IZXFERRef:izFanMtr"      for:#F=(1to4)  Proj:UnitIAQExFan#F[1]:HRV_IZXFERRef:izFanMtr     = {  Proj:CSE_ElecMETER  }
   "Set Proj:UnitIAQExFan#F[1]:HRV_IZXFERRef:izFanEndUse"   for:#F=(1to4)  Proj:UnitIAQExFan#F[1]:HRV_IZXFERRef:izFanEndUse  = {  "FANV"  }

; removed rule creating above max HRV IAQ fans (as non-HRV) - SAC 7/21/20 (tic #1174) 
;   "second round of IZXFER creation if too much IAQ CFM to allow all HRV"     Proj:Action  = 
;      {  if (IfValidAnd( IAQCFMFracHRVCompat[1] < 1 ))
;         then  EvalRulelist( "Setup_nonHRVIAQ_IZXFERs_SFamZone" )
;         else  UNCHANGED  endif  }

   "blast Proj:HRVIAQ_IZXFER_ZoneRef assignment"   Proj:HRVIAQ_IZXFER_ZoneRef  = {  UNDEFINED  }
END
; removed rulelist creating above max HRV IAQ fans (as non-HRV) - SAC 7/21/20 (tic #1174) 
;;************************************************************************* SAC 2/5/20 (tic #1174)
;RULELIST "Setup_nonHRVIAQ_IZXFERs_SFamZone" 1 0 0 0
;;*************************************************************************
;   "Dereference all IAQFan:HRV_IZXFERRef"    IAQFan:HRV_IZXFERRef  = {  UNDEFINED  }
;
;   ; IAQ non-HRV Fan #1
;   "Create non-HRV IAQ IZXFER for main home Fan #1"    Proj:UnitIAQFan1[1]:HRV_IZXFERRef  =
;      {  if (UnitIAQFan1[1]:IAQFanType == 3 .AND. IfValidAnd( UnitIAQFanCnt1[1] > 0 ) .AND.
;             IfValidAnd( UnitIAQZone1[1] = HRVIAQ_IZXFER_ZoneRef) .AND. UnitIAQFan1[1]:IncludesRecov > 0 .AND.
;             IfValidAnd( UnitIAQFan1[1]:SensRecovEff > 0 ) .AND. IfValidAnd( UnitIAQFan1[1]:AdjSensRecovEff > 0 ))
;         then  CreateComp( cseIZXFER, UnitIAQZone1[1] + "-1-" + UnitIAQFan1[1]:Name + "-IAQ" )
;         else  UNDEFINED  endif  }
;   "Set Proj:UnitIAQFan1[1]:HRV_IZXFERRef:izNVType"      Proj:UnitIAQFan1[1]:HRV_IZXFERRef:izNVType     = {  10  }      ; AIRNETHERV  - IAQ balanced / heat recovery ventilator
;   "Set Proj:UnitIAQFan1[1]:HRV_IZXFERRef:izZn1"         Proj:UnitIAQFan1[1]:HRV_IZXFERRef:izZn1        = {  HRVIAQ_IZXFER_ZoneRef:CSE_ZONE  }
;   "Set Proj:UnitIAQFan1[1]:HRV_IZXFERRef:izFanVfDs"     Proj:UnitIAQFan1[1]:HRV_IZXFERRef:izFanVfDs    = {  UnitIAQFan1[1]:IAQCFM * UnitIAQFanCnt1[1] * (1-IAQCFMFracHRVCompat[1])  }
;   "Set Proj:UnitIAQFan1[1]:HRV_IZXFERRef:izFanElecPwr"  Proj:UnitIAQFan1[1]:HRV_IZXFERRef:izFanElecPwr = {  UnitIAQFan1[1]:WperCFMIAQ * UnitIAQFan1[1]:FanPowerMult  }
;                     ; exclude specification of izSRE & izASRE
;   "Set Proj:UnitIAQFan1[1]:HRV_IZXFERRef:izFanMtr"      Proj:UnitIAQFan1[1]:HRV_IZXFERRef:izFanMtr     = {  Proj:CSE_ElecMETER  }
;   "Set Proj:UnitIAQFan1[1]:HRV_IZXFERRef:izFanEndUse"   Proj:UnitIAQFan1[1]:HRV_IZXFERRef:izFanEndUse  = {  "FANV"  }
;
;   ; IAQ non-HRV Fan #2
;   "Create non-HRV IAQ IZXFER for main home Fan #2"    Proj:UnitIAQFan2[1]:HRV_IZXFERRef  =
;      {  if (UnitIAQFan2[1]:IAQFanType == 3 .AND. IfValidAnd( UnitIAQFanCnt2[1] > 0 ) .AND.
;             IfValidAnd( UnitIAQZone2[1] = HRVIAQ_IZXFER_ZoneRef) .AND. UnitIAQFan2[1]:IncludesRecov > 0 .AND.
;             IfValidAnd( UnitIAQFan2[1]:SensRecovEff > 0 ) .AND. IfValidAnd( UnitIAQFan2[1]:AdjSensRecovEff > 0 ))
;         then  CreateComp( cseIZXFER, UnitIAQZone2[1] + "-2-" + UnitIAQFan2[1]:Name + "-IAQ" )
;         else  UNDEFINED  endif  }
;   "Set Proj:UnitIAQFan2[1]:HRV_IZXFERRef:izNVType"      Proj:UnitIAQFan2[1]:HRV_IZXFERRef:izNVType     = {  10  }      ; AIRNETHERV  - IAQ balanced / heat recovery ventilator
;   "Set Proj:UnitIAQFan2[1]:HRV_IZXFERRef:izZn1"         Proj:UnitIAQFan2[1]:HRV_IZXFERRef:izZn1        = {  HRVIAQ_IZXFER_ZoneRef:CSE_ZONE  }
;   "Set Proj:UnitIAQFan2[1]:HRV_IZXFERRef:izFanVfDs"     Proj:UnitIAQFan2[1]:HRV_IZXFERRef:izFanVfDs    = {  UnitIAQFan2[1]:IAQCFM * UnitIAQFanCnt2[1] * (1-IAQCFMFracHRVCompat[1])  }
;   "Set Proj:UnitIAQFan2[1]:HRV_IZXFERRef:izFanElecPwr"  Proj:UnitIAQFan2[1]:HRV_IZXFERRef:izFanElecPwr = {  UnitIAQFan2[1]:WperCFMIAQ * UnitIAQFan2[1]:FanPowerMult  }
;                     ; exclude specification of izSRE & izASRE
;   "Set Proj:UnitIAQFan2[1]:HRV_IZXFERRef:izFanMtr"      Proj:UnitIAQFan2[1]:HRV_IZXFERRef:izFanMtr     = {  Proj:CSE_ElecMETER  }
;   "Set Proj:UnitIAQFan2[1]:HRV_IZXFERRef:izFanEndUse"   Proj:UnitIAQFan2[1]:HRV_IZXFERRef:izFanEndUse  = {  "FANV"  }
;
;   ; IAQ non-HRV Fan #3
;   "Create non-HRV IAQ IZXFER for main home Fan #3"    Proj:UnitIAQFan3[1]:HRV_IZXFERRef  =
;      {  if (UnitIAQFan3[1]:IAQFanType == 3 .AND. IfValidAnd( UnitIAQFanCnt3[1] > 0 ) .AND.
;             IfValidAnd( UnitIAQZone3[1] = HRVIAQ_IZXFER_ZoneRef) .AND. UnitIAQFan3[1]:IncludesRecov > 0 .AND.
;             IfValidAnd( UnitIAQFan3[1]:SensRecovEff > 0 ) .AND. IfValidAnd( UnitIAQFan3[1]:AdjSensRecovEff > 0 ))
;         then  CreateComp( cseIZXFER, UnitIAQZone3[1] + "-3-" + UnitIAQFan3[1]:Name + "-IAQ" )
;         else  UNDEFINED  endif  }
;   "Set Proj:UnitIAQFan3[1]:HRV_IZXFERRef:izNVType"      Proj:UnitIAQFan3[1]:HRV_IZXFERRef:izNVType     = {  10  }      ; AIRNETHERV  - IAQ balanced / heat recovery ventilator
;   "Set Proj:UnitIAQFan3[1]:HRV_IZXFERRef:izZn1"         Proj:UnitIAQFan3[1]:HRV_IZXFERRef:izZn1        = {  HRVIAQ_IZXFER_ZoneRef:CSE_ZONE  }
;   "Set Proj:UnitIAQFan3[1]:HRV_IZXFERRef:izFanVfDs"     Proj:UnitIAQFan3[1]:HRV_IZXFERRef:izFanVfDs    = {  UnitIAQFan3[1]:IAQCFM * UnitIAQFanCnt3[1] * (1-IAQCFMFracHRVCompat[1])  }
;   "Set Proj:UnitIAQFan3[1]:HRV_IZXFERRef:izFanElecPwr"  Proj:UnitIAQFan3[1]:HRV_IZXFERRef:izFanElecPwr = {  UnitIAQFan3[1]:WperCFMIAQ * UnitIAQFan3[1]:FanPowerMult  }
;                     ; exclude specification of izSRE & izASRE
;   "Set Proj:UnitIAQFan3[1]:HRV_IZXFERRef:izFanMtr"      Proj:UnitIAQFan3[1]:HRV_IZXFERRef:izFanMtr     = {  Proj:CSE_ElecMETER  }
;   "Set Proj:UnitIAQFan3[1]:HRV_IZXFERRef:izFanEndUse"   Proj:UnitIAQFan3[1]:HRV_IZXFERRef:izFanEndUse  = {  "FANV"  }
;
;   ; IAQ non-HRV Fan #4
;   "Create non-HRV IAQ IZXFER for main home Fan #4"    Proj:UnitIAQFan4[1]:HRV_IZXFERRef  =
;      {  if (UnitIAQFan4[1]:IAQFanType == 3 .AND. IfValidAnd( UnitIAQFanCnt4[1] > 0 ) .AND.
;             IfValidAnd( UnitIAQZone4[1] = HRVIAQ_IZXFER_ZoneRef) .AND. UnitIAQFan4[1]:IncludesRecov > 0 .AND.
;             IfValidAnd( UnitIAQFan4[1]:SensRecovEff > 0 ) .AND. IfValidAnd( UnitIAQFan4[1]:AdjSensRecovEff > 0 ))
;         then  CreateComp( cseIZXFER, UnitIAQZone4[1] + "-4-" + UnitIAQFan4[1]:Name + "-IAQ" )
;         else  UNDEFINED  endif  }
;   "Set Proj:UnitIAQFan4[1]:HRV_IZXFERRef:izNVType"      Proj:UnitIAQFan4[1]:HRV_IZXFERRef:izNVType     = {  10  }      ; AIRNETHERV  - IAQ balanced / heat recovery ventilator
;   "Set Proj:UnitIAQFan4[1]:HRV_IZXFERRef:izZn1"         Proj:UnitIAQFan4[1]:HRV_IZXFERRef:izZn1        = {  HRVIAQ_IZXFER_ZoneRef:CSE_ZONE  }
;   "Set Proj:UnitIAQFan4[1]:HRV_IZXFERRef:izFanVfDs"     Proj:UnitIAQFan4[1]:HRV_IZXFERRef:izFanVfDs    = {  UnitIAQFan4[1]:IAQCFM * UnitIAQFanCnt4[1] * (1-IAQCFMFracHRVCompat[1])  }
;   "Set Proj:UnitIAQFan4[1]:HRV_IZXFERRef:izFanElecPwr"  Proj:UnitIAQFan4[1]:HRV_IZXFERRef:izFanElecPwr = {  UnitIAQFan4[1]:WperCFMIAQ * UnitIAQFan4[1]:FanPowerMult  }
;                     ; exclude specification of izSRE & izASRE
;   "Set Proj:UnitIAQFan4[1]:HRV_IZXFERRef:izFanMtr"      Proj:UnitIAQFan4[1]:HRV_IZXFERRef:izFanMtr     = {  Proj:CSE_ElecMETER  }
;   "Set Proj:UnitIAQFan4[1]:HRV_IZXFERRef:izFanEndUse"   Proj:UnitIAQFan4[1]:HRV_IZXFERRef:izFanEndUse  = {  "FANV"  }
;
;END
;;*************************************************************************

; SAC 2/6/20 - setup HRV IAQ IZXFERs for individual fans (SFam-MainHome) (tic #1174)
;*************************************************************************
RULELIST "Setup_HRVIAQ_IZXFERs_SFamADUZone" 1 0 0 0
;*************************************************************************
; in the process of calling this rulelist, the Zone being operated on will be stored to Proj:HRVIAQ_IZXFER_ZoneRef...
   "Dereference all IAQFan:HRV_IZXFERRef"    IAQFan:HRV_IZXFERRef  = {  UNDEFINED  }

   ; ADU IAQ HRV Fans
   ; revised for VerifiedExisting fans and to execute via For loop - SAC 04/08/24 (tic #1304)
   "Create HRV IAQ IZXFER for SFam ADU Fan #1-4"  for:#F=(1to4)  Proj:UnitIAQFan#F[2]:HRV_IZXFERRef  =
      {  if (UnitIAQFan#F[2]:IAQFanType == 3 .AND. IfValidAnd( UnitIAQFanCnt#F[2] > 0 ) .AND.
             IfValidAnd( UnitIAQZone#F[2] = HRVIAQ_IZXFER_ZoneRef) .AND. UnitIAQFan#F[2]:IncludesRecov > 0 .AND.
             IfValidAnd( UnitIAQFan#F[2]:SensRecovEff > 0 ) .AND. IfValidAnd( UnitIAQFan#F[2]:AdjSensRecovEff > 0 ) .AND.
             UnitIAQUseVerifExFan#F[2] == 0)
         then  CreateComp( cseIZXFER, substr( UnitIAQZone#F[2], 0, 28 ) + "-1-" + substr( UnitIAQFan#F[2]:Name, 0, 28 ) + "-ADUIAQHRV" )
         else  UNDEFINED  endif  }
   "Set Proj:UnitIAQFan#F[2]:HRV_IZXFERRef:izNVType"      for:#F=(1to4)  Proj:UnitIAQFan#F[2]:HRV_IZXFERRef:izNVType     = {  10  }      ; AIRNETHERV  - IAQ balanced / heat recovery ventilator
   "Set Proj:UnitIAQFan#F[2]:HRV_IZXFERRef:izZn1"         for:#F=(1to4)  Proj:UnitIAQFan#F[2]:HRV_IZXFERRef:izZn1        = {  HRVIAQ_IZXFER_ZoneRef:CSE_ZONE  }
   "Set Proj:UnitIAQFan#F[2]:HRV_IZXFERRef:izFanVfDs"     for:#F=(1to4)  Proj:UnitIAQFan#F[2]:HRV_IZXFERRef:izFanVfDs    = {  UnitIAQFan#F[2]:IAQCFM * UnitIAQFanCnt#F[2] * ValidOr( IAQCFMFracHRVCompat[2], 1 )  }
   "Set Proj:UnitIAQFan#F[2]:HRV_IZXFERRef:izFanElecPwr"  for:#F=(1to4)  Proj:UnitIAQFan#F[2]:HRV_IZXFERRef:izFanElecPwr = {  UnitIAQFan#F[2]:WperCFMIAQ * UnitIAQFan#F[2]:FanPowerMult  }
   "Set Proj:UnitIAQFan#F[2]:HRV_IZXFERRef:izSRE"         for:#F=(1to4)  Proj:UnitIAQFan#F[2]:HRV_IZXFERRef:izSRE        = {  UnitIAQFan#F[2]:SensRecovEff    * UnitIAQFan#F[2]:FanHeatRecovMult / 100  }
   "Set Proj:UnitIAQFan#F[2]:HRV_IZXFERRef:izASRE"        for:#F=(1to4)  Proj:UnitIAQFan#F[2]:HRV_IZXFERRef:izASRE       = {  UnitIAQFan#F[2]:AdjSensRecovEff * UnitIAQFan#F[2]:FanHeatRecovMult / 100  }
   "Set Proj:UnitIAQFan#F[2]:HRV_IZXFERRef:izFanMtr"      for:#F=(1to4)  Proj:UnitIAQFan#F[2]:HRV_IZXFERRef:izFanMtr     = {  Proj:CSE_ElecMETER  }
   "Set Proj:UnitIAQFan#F[2]:HRV_IZXFERRef:izFanEndUse"   for:#F=(1to4)  Proj:UnitIAQFan#F[2]:HRV_IZXFERRef:izFanEndUse  = {  "FANV"  }

   ;; ADU IAQ HRV Fan #2
   ;"Create HRV IAQ IZXFER for SFam ADU Fan #2"    Proj:UnitIAQFan2[2]:HRV_IZXFERRef  =
   ;   {  if (UnitIAQFan2[2]:IAQFanType == 3 .AND. IfValidAnd( UnitIAQFanCnt2[2] > 0 ) .AND.
   ;          IfValidAnd( UnitIAQZone2[2] = HRVIAQ_IZXFER_ZoneRef) .AND. UnitIAQFan2[2]:IncludesRecov > 0 .AND.
   ;          IfValidAnd( UnitIAQFan2[2]:SensRecovEff > 0 ) .AND. IfValidAnd( UnitIAQFan2[2]:AdjSensRecovEff > 0 ))
   ;      then  CreateComp( cseIZXFER, substr( UnitIAQZone2[2], 0, 28 ) + "-2-" + substr( UnitIAQFan2[2]:Name, 0, 28 ) + "-ADUIAQHRV" )
   ;      else  UNDEFINED  endif  }
   ;"Set Proj:UnitIAQFan2[2]:HRV_IZXFERRef:izNVType"      Proj:UnitIAQFan2[2]:HRV_IZXFERRef:izNVType     = {  10  }      ; AIRNETHERV  - IAQ balanced / heat recovery ventilator
   ;"Set Proj:UnitIAQFan2[2]:HRV_IZXFERRef:izZn1"         Proj:UnitIAQFan2[2]:HRV_IZXFERRef:izZn1        = {  HRVIAQ_IZXFER_ZoneRef:CSE_ZONE  }
   ;"Set Proj:UnitIAQFan2[2]:HRV_IZXFERRef:izFanVfDs"     Proj:UnitIAQFan2[2]:HRV_IZXFERRef:izFanVfDs    = {  UnitIAQFan2[2]:IAQCFM * UnitIAQFanCnt2[2] * ValidOr( IAQCFMFracHRVCompat[2], 1 )  }
   ;"Set Proj:UnitIAQFan2[2]:HRV_IZXFERRef:izFanElecPwr"  Proj:UnitIAQFan2[2]:HRV_IZXFERRef:izFanElecPwr = {  UnitIAQFan2[2]:WperCFMIAQ * UnitIAQFan2[2]:FanPowerMult  }
   ;"Set Proj:UnitIAQFan2[2]:HRV_IZXFERRef:izSRE"         Proj:UnitIAQFan2[2]:HRV_IZXFERRef:izSRE        = {  UnitIAQFan2[2]:SensRecovEff    * UnitIAQFan1[2]:FanHeatRecovMult / 100  }
   ;"Set Proj:UnitIAQFan2[2]:HRV_IZXFERRef:izASRE"        Proj:UnitIAQFan2[2]:HRV_IZXFERRef:izASRE       = {  UnitIAQFan2[2]:AdjSensRecovEff * UnitIAQFan1[2]:FanHeatRecovMult / 100  }
   ;"Set Proj:UnitIAQFan2[2]:HRV_IZXFERRef:izFanMtr"      Proj:UnitIAQFan2[2]:HRV_IZXFERRef:izFanMtr     = {  Proj:CSE_ElecMETER  }
   ;"Set Proj:UnitIAQFan2[2]:HRV_IZXFERRef:izFanEndUse"   Proj:UnitIAQFan2[2]:HRV_IZXFERRef:izFanEndUse  = {  "FANV"  }

   ;; ADU IAQ HRV Fan #3
   ;"Create HRV IAQ IZXFER for SFam ADU Fan #3"    Proj:UnitIAQFan3[2]:HRV_IZXFERRef  =
   ;   {  if (UnitIAQFan3[2]:IAQFanType == 3 .AND. IfValidAnd( UnitIAQFanCnt3[2] > 0 ) .AND.
   ;          IfValidAnd( UnitIAQZone3[2] = HRVIAQ_IZXFER_ZoneRef) .AND. UnitIAQFan3[2]:IncludesRecov > 0 .AND.
   ;          IfValidAnd( UnitIAQFan3[2]:SensRecovEff > 0 ) .AND. IfValidAnd( UnitIAQFan3[2]:AdjSensRecovEff > 0 ))
   ;      then  CreateComp( cseIZXFER, substr( UnitIAQZone3[2], 0, 28 ) + "-3-" + substr( UnitIAQFan3[2]:Name, 0, 28 ) + "-ADUIAQHRV" )
   ;      else  UNDEFINED  endif  }
   ;"Set Proj:UnitIAQFan3[2]:HRV_IZXFERRef:izNVType"      Proj:UnitIAQFan3[2]:HRV_IZXFERRef:izNVType     = {  10  }      ; AIRNETHERV  - IAQ balanced / heat recovery ventilator
   ;"Set Proj:UnitIAQFan3[2]:HRV_IZXFERRef:izZn1"         Proj:UnitIAQFan3[2]:HRV_IZXFERRef:izZn1        = {  HRVIAQ_IZXFER_ZoneRef:CSE_ZONE  }
   ;"Set Proj:UnitIAQFan3[2]:HRV_IZXFERRef:izFanVfDs"     Proj:UnitIAQFan3[2]:HRV_IZXFERRef:izFanVfDs    = {  UnitIAQFan3[2]:IAQCFM * UnitIAQFanCnt3[2] * ValidOr( IAQCFMFracHRVCompat[2], 1 )  }
   ;"Set Proj:UnitIAQFan3[2]:HRV_IZXFERRef:izFanElecPwr"  Proj:UnitIAQFan3[2]:HRV_IZXFERRef:izFanElecPwr = {  UnitIAQFan3[2]:WperCFMIAQ * UnitIAQFan3[2]:FanPowerMult  }
   ;"Set Proj:UnitIAQFan3[2]:HRV_IZXFERRef:izSRE"         Proj:UnitIAQFan3[2]:HRV_IZXFERRef:izSRE        = {  UnitIAQFan3[2]:SensRecovEff    * UnitIAQFan1[2]:FanHeatRecovMult / 100  }
   ;"Set Proj:UnitIAQFan3[2]:HRV_IZXFERRef:izASRE"        Proj:UnitIAQFan3[2]:HRV_IZXFERRef:izASRE       = {  UnitIAQFan3[2]:AdjSensRecovEff * UnitIAQFan1[2]:FanHeatRecovMult / 100  }
   ;"Set Proj:UnitIAQFan3[2]:HRV_IZXFERRef:izFanMtr"      Proj:UnitIAQFan3[2]:HRV_IZXFERRef:izFanMtr     = {  Proj:CSE_ElecMETER  }
   ;"Set Proj:UnitIAQFan3[2]:HRV_IZXFERRef:izFanEndUse"   Proj:UnitIAQFan3[2]:HRV_IZXFERRef:izFanEndUse  = {  "FANV"  }

   ;; ADU IAQ HRV Fan #4
   ;"Create HRV IAQ IZXFER for SFam ADU Fan #4"    Proj:UnitIAQFan4[2]:HRV_IZXFERRef  =
   ;   {  if (UnitIAQFan4[2]:IAQFanType == 3 .AND. IfValidAnd( UnitIAQFanCnt4[2] > 0 ) .AND.
   ;          IfValidAnd( UnitIAQZone4[2] = HRVIAQ_IZXFER_ZoneRef) .AND. UnitIAQFan4[2]:IncludesRecov > 0 .AND.
   ;          IfValidAnd( UnitIAQFan4[2]:SensRecovEff > 0 ) .AND. IfValidAnd( UnitIAQFan4[2]:AdjSensRecovEff > 0 ))
   ;      then  CreateComp( cseIZXFER, substr( UnitIAQZone4[2], 0, 28 ) + "-4-" + substr( UnitIAQFan4[2]:Name, 0, 28 ) + "-ADUIAQHRV" )
   ;      else  UNDEFINED  endif  }
   ;"Set Proj:UnitIAQFan4[2]:HRV_IZXFERRef:izNVType"      Proj:UnitIAQFan4[2]:HRV_IZXFERRef:izNVType     = {  10  }      ; AIRNETHERV  - IAQ balanced / heat recovery ventilator
   ;"Set Proj:UnitIAQFan4[2]:HRV_IZXFERRef:izZn1"         Proj:UnitIAQFan4[2]:HRV_IZXFERRef:izZn1        = {  HRVIAQ_IZXFER_ZoneRef:CSE_ZONE  }
   ;"Set Proj:UnitIAQFan4[2]:HRV_IZXFERRef:izFanVfDs"     Proj:UnitIAQFan4[2]:HRV_IZXFERRef:izFanVfDs    = {  UnitIAQFan4[2]:IAQCFM * UnitIAQFanCnt4[2] * ValidOr( IAQCFMFracHRVCompat[2], 1 )  }
   ;"Set Proj:UnitIAQFan4[2]:HRV_IZXFERRef:izFanElecPwr"  Proj:UnitIAQFan4[2]:HRV_IZXFERRef:izFanElecPwr = {  UnitIAQFan4[2]:WperCFMIAQ * UnitIAQFan4[2]:FanPowerMult  }
   ;"Set Proj:UnitIAQFan4[2]:HRV_IZXFERRef:izSRE"         Proj:UnitIAQFan4[2]:HRV_IZXFERRef:izSRE        = {  UnitIAQFan4[2]:SensRecovEff    * UnitIAQFan1[2]:FanHeatRecovMult / 100  }
   ;"Set Proj:UnitIAQFan4[2]:HRV_IZXFERRef:izASRE"        Proj:UnitIAQFan4[2]:HRV_IZXFERRef:izASRE       = {  UnitIAQFan4[2]:AdjSensRecovEff * UnitIAQFan1[2]:FanHeatRecovMult / 100  }
   ;"Set Proj:UnitIAQFan4[2]:HRV_IZXFERRef:izFanMtr"      Proj:UnitIAQFan4[2]:HRV_IZXFERRef:izFanMtr     = {  Proj:CSE_ElecMETER  }
   ;"Set Proj:UnitIAQFan4[2]:HRV_IZXFERRef:izFanEndUse"   Proj:UnitIAQFan4[2]:HRV_IZXFERRef:izFanEndUse  = {  "FANV"  }

   ; ADU IAQ HRV Verified-Existing Fans
   ; revised for VerifiedExisting fans and to execute via For loop - SAC 04/08/24 (tic #1304)
   "Create HRV IAQ IZXFER for SFam ADU VerEx Fan #1-4"  for:#F=(1to4)  Proj:UnitIAQExFan#F[2]:HRV_IZXFERRef  =
      {  if (UnitIAQExFan#F[2]:IAQFanType == 3 .AND. IfValidAnd( UnitIAQFanCnt#F[2] > 0 ) .AND.
             IfValidAnd( UnitIAQZone#F[2] = HRVIAQ_IZXFER_ZoneRef) .AND. UnitIAQExFan#F[2]:IncludesRecov > 0 .AND.
             IfValidAnd( UnitIAQExFan#F[2]:SensRecovEff > 0 ) .AND. IfValidAnd( UnitIAQExFan#F[2]:AdjSensRecovEff > 0 ) .AND.
             UnitIAQUseVerifExFan#F[2] == 1)
         then  CreateComp( cseIZXFER, substr( UnitIAQZone#F[2], 0, 28 ) + "-1-" + substr( UnitIAQExFan#F[2]:Name, 0, 28 ) + "-ADUIAQHRV" )
         else  UNDEFINED  endif  }
   "Set Proj:UnitIAQExFan#F[2]:HRV_IZXFERRef:izNVType"      for:#F=(1to4)  Proj:UnitIAQExFan#F[2]:HRV_IZXFERRef:izNVType     = {  10  }      ; AIRNETHERV  - IAQ balanced / heat recovery ventilator
   "Set Proj:UnitIAQExFan#F[2]:HRV_IZXFERRef:izZn1"         for:#F=(1to4)  Proj:UnitIAQExFan#F[2]:HRV_IZXFERRef:izZn1        = {  HRVIAQ_IZXFER_ZoneRef:CSE_ZONE  }
   "Set Proj:UnitIAQExFan#F[2]:HRV_IZXFERRef:izFanVfDs"     for:#F=(1to4)  Proj:UnitIAQExFan#F[2]:HRV_IZXFERRef:izFanVfDs    = {  min( UnitIAQFan#F[2]:IAQCFM, UnitIAQExFan#F[2]:IAQCFM ) * UnitIAQFanCnt#F[2] * ValidOr( IAQCFMFracHRVCompat[2], 1 )  }
   "Set Proj:UnitIAQExFan#F[2]:HRV_IZXFERRef:izFanElecPwr"  for:#F=(1to4)  Proj:UnitIAQExFan#F[2]:HRV_IZXFERRef:izFanElecPwr = {  UnitIAQExFan#F[2]:WperCFMIAQ * UnitIAQExFan#F[2]:FanPowerMult  }
   "Set Proj:UnitIAQExFan#F[2]:HRV_IZXFERRef:izSRE"         for:#F=(1to4)  Proj:UnitIAQExFan#F[2]:HRV_IZXFERRef:izSRE        = {  UnitIAQExFan#F[2]:SensRecovEff    * UnitIAQExFan#F[2]:FanHeatRecovMult / 100  }
   "Set Proj:UnitIAQExFan#F[2]:HRV_IZXFERRef:izASRE"        for:#F=(1to4)  Proj:UnitIAQExFan#F[2]:HRV_IZXFERRef:izASRE       = {  UnitIAQExFan#F[2]:AdjSensRecovEff * UnitIAQExFan#F[2]:FanHeatRecovMult / 100  }
   "Set Proj:UnitIAQExFan#F[2]:HRV_IZXFERRef:izFanMtr"      for:#F=(1to4)  Proj:UnitIAQExFan#F[2]:HRV_IZXFERRef:izFanMtr     = {  Proj:CSE_ElecMETER  }
   "Set Proj:UnitIAQExFan#F[2]:HRV_IZXFERRef:izFanEndUse"   for:#F=(1to4)  Proj:UnitIAQExFan#F[2]:HRV_IZXFERRef:izFanEndUse  = {  "FANV"  }

; removed rule creating above max HRV IAQ fans (as non-HRV) - SAC 7/21/20 (tic #1174) 
;   "second round of IZXFER creation if too much IAQ CFM to allow all ADU HRV"     Proj:Action  = 
;      {  if (IfValidAnd( IAQCFMFracHRVCompat[2] < 1 ))
;         then  EvalRulelist( "Setup_nonHRVIAQ_IZXFERs_SFamADUZone" )
;         else  UNCHANGED  endif  }

   "blast Proj:HRVIAQ_IZXFER_ZoneRef assignment"   Proj:HRVIAQ_IZXFER_ZoneRef  = {  UNDEFINED  }
END
; removed rulelist creating above max HRV IAQ fans (as non-HRV) - SAC 7/21/20 (tic #1174) 
;;************************************************************************* SAC 2/6/20 (tic #1174)
;RULELIST "Setup_nonHRVIAQ_IZXFERs_SFamADUZone" 1 0 0 0
;;*************************************************************************
;   "Dereference all IAQFan:HRV_IZXFERRef"    IAQFan:HRV_IZXFERRef  = {  UNDEFINED  }
;
;   ; ADU IAQ non-HRV Fan #1
;   "Create non-HRV IAQ IZXFER for SFam ADU Fan #1"    Proj:UnitIAQFan1[2]:HRV_IZXFERRef  =
;      {  if (UnitIAQFan1[2]:IAQFanType == 3 .AND. IfValidAnd( UnitIAQFanCnt1[2] > 0 ) .AND.
;             IfValidAnd( UnitIAQZone1[2] = HRVIAQ_IZXFER_ZoneRef) .AND. UnitIAQFan1[2]:IncludesRecov > 0 .AND.
;             IfValidAnd( UnitIAQFan1[2]:SensRecovEff > 0 ) .AND. IfValidAnd( UnitIAQFan1[2]:AdjSensRecovEff > 0 ))
;         then  CreateComp( cseIZXFER, UnitIAQZone1[2] + "-1-" + UnitIAQFan1[2]:Name + "-ADUIAQ" )
;         else  UNDEFINED  endif  }
;   "Set Proj:UnitIAQFan1[2]:HRV_IZXFERRef:izNVType"      Proj:UnitIAQFan1[2]:HRV_IZXFERRef:izNVType     = {  10  }      ; AIRNETHERV  - IAQ balanced / heat recovery ventilator
;   "Set Proj:UnitIAQFan1[2]:HRV_IZXFERRef:izZn1"         Proj:UnitIAQFan1[2]:HRV_IZXFERRef:izZn1        = {  HRVIAQ_IZXFER_ZoneRef:CSE_ZONE  }
;   "Set Proj:UnitIAQFan1[2]:HRV_IZXFERRef:izFanVfDs"     Proj:UnitIAQFan1[2]:HRV_IZXFERRef:izFanVfDs    = {  UnitIAQFan1[2]:IAQCFM * UnitIAQFanCnt1[2] * (1-IAQCFMFracHRVCompat[2])  }
;   "Set Proj:UnitIAQFan1[2]:HRV_IZXFERRef:izFanElecPwr"  Proj:UnitIAQFan1[2]:HRV_IZXFERRef:izFanElecPwr = {  UnitIAQFan1[2]:WperCFMIAQ * UnitIAQFan1[2]:FanPowerMult  }
;                     ; exclude specification of izSRE & izASRE
;   "Set Proj:UnitIAQFan1[2]:HRV_IZXFERRef:izFanMtr"      Proj:UnitIAQFan1[2]:HRV_IZXFERRef:izFanMtr     = {  Proj:CSE_ElecMETER  }
;   "Set Proj:UnitIAQFan1[2]:HRV_IZXFERRef:izFanEndUse"   Proj:UnitIAQFan1[2]:HRV_IZXFERRef:izFanEndUse  = {  "FANV"  }
;
;   ; ADU IAQ non-HRV Fan #2
;   "Create non-HRV IAQ IZXFER for SFam ADU Fan #2"    Proj:UnitIAQFan2[2]:HRV_IZXFERRef  =
;      {  if (UnitIAQFan2[2]:IAQFanType == 3 .AND. IfValidAnd( UnitIAQFanCnt2[2] > 0 ) .AND.
;             IfValidAnd( UnitIAQZone2[2] = HRVIAQ_IZXFER_ZoneRef) .AND. UnitIAQFan2[2]:IncludesRecov > 0 .AND.
;             IfValidAnd( UnitIAQFan2[2]:SensRecovEff > 0 ) .AND. IfValidAnd( UnitIAQFan2[2]:AdjSensRecovEff > 0 ))
;         then  CreateComp( cseIZXFER, UnitIAQZone2[2] + "-2-" + UnitIAQFan2[2]:Name + "-ADUIAQ" )
;         else  UNDEFINED  endif  }
;   "Set Proj:UnitIAQFan2[2]:HRV_IZXFERRef:izNVType"      Proj:UnitIAQFan2[2]:HRV_IZXFERRef:izNVType     = {  10  }      ; AIRNETHERV  - IAQ balanced / heat recovery ventilator
;   "Set Proj:UnitIAQFan2[2]:HRV_IZXFERRef:izZn1"         Proj:UnitIAQFan2[2]:HRV_IZXFERRef:izZn1        = {  HRVIAQ_IZXFER_ZoneRef:CSE_ZONE  }
;   "Set Proj:UnitIAQFan2[2]:HRV_IZXFERRef:izFanVfDs"     Proj:UnitIAQFan2[2]:HRV_IZXFERRef:izFanVfDs    = {  UnitIAQFan2[2]:IAQCFM * UnitIAQFanCnt2[2] * (1-IAQCFMFracHRVCompat[2])  }
;   "Set Proj:UnitIAQFan2[2]:HRV_IZXFERRef:izFanElecPwr"  Proj:UnitIAQFan2[2]:HRV_IZXFERRef:izFanElecPwr = {  UnitIAQFan2[2]:WperCFMIAQ * UnitIAQFan2[2]:FanPowerMult  }
;                     ; exclude specification of izSRE & izASRE
;   "Set Proj:UnitIAQFan2[2]:HRV_IZXFERRef:izFanMtr"      Proj:UnitIAQFan2[2]:HRV_IZXFERRef:izFanMtr     = {  Proj:CSE_ElecMETER  }
;   "Set Proj:UnitIAQFan2[2]:HRV_IZXFERRef:izFanEndUse"   Proj:UnitIAQFan2[2]:HRV_IZXFERRef:izFanEndUse  = {  "FANV"  }
;
;   ; ADU IAQ non-HRV Fan #3
;   "Create non-HRV IAQ IZXFER for SFam ADU Fan #3"    Proj:UnitIAQFan3[2]:HRV_IZXFERRef  =
;      {  if (UnitIAQFan3[2]:IAQFanType == 3 .AND. IfValidAnd( UnitIAQFanCnt3[2] > 0 ) .AND.
;             IfValidAnd( UnitIAQZone3[2] = HRVIAQ_IZXFER_ZoneRef) .AND. UnitIAQFan3[2]:IncludesRecov > 0 .AND.
;             IfValidAnd( UnitIAQFan3[2]:SensRecovEff > 0 ) .AND. IfValidAnd( UnitIAQFan3[2]:AdjSensRecovEff > 0 ))
;         then  CreateComp( cseIZXFER, UnitIAQZone3[2] + "-3-" + UnitIAQFan3[2]:Name + "-ADUIAQ" )
;         else  UNDEFINED  endif  }
;   "Set Proj:UnitIAQFan3[2]:HRV_IZXFERRef:izNVType"      Proj:UnitIAQFan3[2]:HRV_IZXFERRef:izNVType     = {  10  }      ; AIRNETHERV  - IAQ balanced / heat recovery ventilator
;   "Set Proj:UnitIAQFan3[2]:HRV_IZXFERRef:izZn1"         Proj:UnitIAQFan3[2]:HRV_IZXFERRef:izZn1        = {  HRVIAQ_IZXFER_ZoneRef:CSE_ZONE  }
;   "Set Proj:UnitIAQFan3[2]:HRV_IZXFERRef:izFanVfDs"     Proj:UnitIAQFan3[2]:HRV_IZXFERRef:izFanVfDs    = {  UnitIAQFan3[2]:IAQCFM * UnitIAQFanCnt3[2] * (1-IAQCFMFracHRVCompat[2])  }
;   "Set Proj:UnitIAQFan3[2]:HRV_IZXFERRef:izFanElecPwr"  Proj:UnitIAQFan3[2]:HRV_IZXFERRef:izFanElecPwr = {  UnitIAQFan3[2]:WperCFMIAQ * UnitIAQFan3[2]:FanPowerMult  }
;                     ; exclude specification of izSRE & izASRE
;   "Set Proj:UnitIAQFan3[2]:HRV_IZXFERRef:izFanMtr"      Proj:UnitIAQFan3[2]:HRV_IZXFERRef:izFanMtr     = {  Proj:CSE_ElecMETER  }
;   "Set Proj:UnitIAQFan3[2]:HRV_IZXFERRef:izFanEndUse"   Proj:UnitIAQFan3[2]:HRV_IZXFERRef:izFanEndUse  = {  "FANV"  }
;
;   ; ADU IAQ non-HRV Fan #4
;   "Create non-HRV IAQ IZXFER for SFam ADU Fan #4"    Proj:UnitIAQFan4[2]:HRV_IZXFERRef  =
;      {  if (UnitIAQFan4[2]:IAQFanType == 3 .AND. IfValidAnd( UnitIAQFanCnt4[2] > 0 ) .AND.
;             IfValidAnd( UnitIAQZone4[2] = HRVIAQ_IZXFER_ZoneRef) .AND. UnitIAQFan4[2]:IncludesRecov > 0 .AND.
;             IfValidAnd( UnitIAQFan4[2]:SensRecovEff > 0 ) .AND. IfValidAnd( UnitIAQFan4[2]:AdjSensRecovEff > 0 ))
;         then  CreateComp( cseIZXFER, UnitIAQZone4[2] + "-4-" + UnitIAQFan4[2]:Name + "-ADUIAQ" )
;         else  UNDEFINED  endif  }
;   "Set Proj:UnitIAQFan4[2]:HRV_IZXFERRef:izNVType"      Proj:UnitIAQFan4[2]:HRV_IZXFERRef:izNVType     = {  10  }      ; AIRNETHERV  - IAQ balanced / heat recovery ventilator
;   "Set Proj:UnitIAQFan4[2]:HRV_IZXFERRef:izZn1"         Proj:UnitIAQFan4[2]:HRV_IZXFERRef:izZn1        = {  HRVIAQ_IZXFER_ZoneRef:CSE_ZONE  }
;   "Set Proj:UnitIAQFan4[2]:HRV_IZXFERRef:izFanVfDs"     Proj:UnitIAQFan4[2]:HRV_IZXFERRef:izFanVfDs    = {  UnitIAQFan4[2]:IAQCFM * UnitIAQFanCnt4[2] * (1-IAQCFMFracHRVCompat[2])  }
;   "Set Proj:UnitIAQFan4[2]:HRV_IZXFERRef:izFanElecPwr"  Proj:UnitIAQFan4[2]:HRV_IZXFERRef:izFanElecPwr = {  UnitIAQFan4[2]:WperCFMIAQ * UnitIAQFan4[2]:FanPowerMult  }
;                     ; exclude specification of izSRE & izASRE
;   "Set Proj:UnitIAQFan4[2]:HRV_IZXFERRef:izFanMtr"      Proj:UnitIAQFan4[2]:HRV_IZXFERRef:izFanMtr     = {  Proj:CSE_ElecMETER  }
;   "Set Proj:UnitIAQFan4[2]:HRV_IZXFERRef:izFanEndUse"   Proj:UnitIAQFan4[2]:HRV_IZXFERRef:izFanEndUse  = {  "FANV"  }
;
;END
;;*************************************************************************


; SAC 2/6/20 - setup HRV IAQ IZXFERs for individual fans (MFam-DwellUnit) (tic #1174)
;*************************************************************************
RULELIST "Setup_HRVIAQ_IZXFERs_MFamDwellUnit" 1 0 0 0
;*************************************************************************
; in the process of calling this rulelist, the DwellUnit being operated on will be stored to Proj:HRVIAQ_IZXFER_DwellUnitRef...
   "Dereference all IAQFan:HRV_IZXFERRef"    IAQFan:HRV_IZXFERRef  = {  UNDEFINED  }

   "Set Proj:HRVIAQ_IZXFER_ZoneRef assignment"     Proj:HRVIAQ_IZXFER_ZoneRef  = {  HRVIAQ_IZXFER_DwellUnitRef:Parent  }

   ; DU IAQ HRV Fan #1
   "Create HRV IAQ IZXFER for DwellUnit Fan #1"    Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef  =
      {  if (HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:IAQFanType == 3 .AND.
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:IncludesRecov > 0 .AND.
             IfValidAnd( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanCnt[1] > 0 ) .AND.
             IfValidAnd( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:SensRecovEff > 0 ) .AND.
             IfValidAnd( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:AdjSensRecovEff > 0 ))
         then  CreateComp( cseIZXFER, substr( HRVIAQ_IZXFER_DwellUnitRef:Name, 0, 28 ) + "-1-" +
                                      substr( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:Name, 0, 28 ) + "-IAQHRV" )
         else  UNDEFINED  endif  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef:izNVType"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef:izNVType     = {  10  }      ; AIRNETHERV  - IAQ balanced / heat recovery ventilator
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef:izZn1" 
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef:izZn1        =
          {  HRVIAQ_IZXFER_ZoneRef:CSE_ZONE  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef:izFanVfDs"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef:izFanVfDs    =       ; SAC 08/29/20
          {  HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:IAQCFM *
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanCnt[1] *
             ValidOr( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanCFMMult, 1 ) *
             ValidOr( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQCFMFracHRVCompat, 1 ) * HRVIAQ_IZXFER_DwellUnitRef:Count  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef:izFanElecPwr"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef:izFanElecPwr =
          {  HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:WperCFMIAQ *
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:FanPowerMult  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef:izSRE" 
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef:izSRE        =
          {  HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:SensRecovEff *
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:FanHeatRecovMult / 100  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef:izASRE"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef:izASRE       =
          {  HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:AdjSensRecovEff *
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:FanHeatRecovMult / 100  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef:izFanMtr"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef:izFanMtr     = {  Proj:CSE_ElecMETER  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef:izFanEndUse"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef:izFanEndUse  = {  "FANV"  }

   ; DU IAQ HRV Fan #2
   "Create HRV IAQ IZXFER for DwellUnit Fan #2"    Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef  =
      {  if (HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:IAQFanType == 3 .AND.
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:IncludesRecov > 0 .AND.
             IfValidAnd( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanCnt[2] > 0 ) .AND.
             IfValidAnd( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:SensRecovEff > 0 ) .AND.
             IfValidAnd( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:AdjSensRecovEff > 0 ))
         then  CreateComp( cseIZXFER, substr( HRVIAQ_IZXFER_DwellUnitRef:Name, 0, 28 ) + "-2-" +
                                      substr( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:Name, 0, 28 ) + "-IAQHRV" )
         else  UNDEFINED  endif  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef:izNVType"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef:izNVType     = {  10  }      ; AIRNETHERV  - IAQ balanced / heat recovery ventilator
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef:izZn1" 
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef:izZn1        =
          {  HRVIAQ_IZXFER_ZoneRef:CSE_ZONE  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef:izFanVfDs"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef:izFanVfDs    =       ; SAC 08/29/20
          {  HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:IAQCFM *
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanCnt[2] *
             ValidOr( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanCFMMult, 1 ) *
             ValidOr( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQCFMFracHRVCompat, 1 ) * HRVIAQ_IZXFER_DwellUnitRef:Count  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef:izFanElecPwr"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef:izFanElecPwr =
          {  HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:WperCFMIAQ *
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:FanPowerMult  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef:izSRE" 
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef:izSRE        =
          {  HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:SensRecovEff *
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:FanHeatRecovMult / 100  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef:izASRE"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef:izASRE       =
          {  HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:AdjSensRecovEff *
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:FanHeatRecovMult / 100  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef:izFanMtr"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef:izFanMtr     = {  Proj:CSE_ElecMETER  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef:izFanEndUse"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef:izFanEndUse  = {  "FANV"  }

   ; DU IAQ HRV Fan #3
   "Create HRV IAQ IZXFER for DwellUnit Fan #3"    Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef  =
      {  if (HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:IAQFanType == 3 .AND.
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:IncludesRecov > 0 .AND.
             IfValidAnd( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanCnt[3] > 0 ) .AND.
             IfValidAnd( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:SensRecovEff > 0 ) .AND.
             IfValidAnd( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:AdjSensRecovEff > 0 ))
         then  CreateComp( cseIZXFER, substr( HRVIAQ_IZXFER_DwellUnitRef:Name, 0, 28 ) + "-3-" +
                                      substr( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:Name, 0, 28 ) + "-IAQHRV" )
         else  UNDEFINED  endif  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef:izNVType"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef:izNVType     = {  10  }      ; AIRNETHERV  - IAQ balanced / heat recovery ventilator
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef:izZn1" 
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef:izZn1        =
          {  HRVIAQ_IZXFER_ZoneRef:CSE_ZONE  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef:izFanVfDs"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef:izFanVfDs    =       ; SAC 08/29/20
          {  HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:IAQCFM *
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanCnt[3] *
             ValidOr( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanCFMMult, 1 ) *
             ValidOr( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQCFMFracHRVCompat, 1 ) * HRVIAQ_IZXFER_DwellUnitRef:Count  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef:izFanElecPwr"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef:izFanElecPwr =
          {  HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:WperCFMIAQ *
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:FanPowerMult  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef:izSRE" 
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef:izSRE        =
          {  HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:SensRecovEff *
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:FanHeatRecovMult / 100  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef:izASRE"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef:izASRE       =
          {  HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:AdjSensRecovEff *
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:FanHeatRecovMult / 100  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef:izFanMtr"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef:izFanMtr     = {  Proj:CSE_ElecMETER  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef:izFanEndUse"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef:izFanEndUse  = {  "FANV"  }

   ; DU IAQ HRV Fan #4
   "Create HRV IAQ IZXFER for DwellUnit Fan #4"    Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef  =
      {  if (HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:IAQFanType == 3 .AND.
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:IncludesRecov > 0 .AND.
             IfValidAnd( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanCnt[4] > 0 ) .AND.
             IfValidAnd( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:SensRecovEff > 0 ) .AND.
             IfValidAnd( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:AdjSensRecovEff > 0 ))
         then  CreateComp( cseIZXFER, substr( HRVIAQ_IZXFER_DwellUnitRef:Name, 0, 28 ) + "-4-" +
                                      substr( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:Name, 0, 28 ) + "-IAQHRV" )
         else  UNDEFINED  endif  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef:izNVType"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef:izNVType     = {  10  }      ; AIRNETHERV  - IAQ balanced / heat recovery ventilator
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef:izZn1" 
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef:izZn1        =
          {  HRVIAQ_IZXFER_ZoneRef:CSE_ZONE  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef:izFanVfDs"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef:izFanVfDs    =       ; SAC 08/29/20
          {  HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:IAQCFM *
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanCnt[4] *
             ValidOr( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanCFMMult, 1 ) *
             ValidOr( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQCFMFracHRVCompat, 1 ) * HRVIAQ_IZXFER_DwellUnitRef:Count  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef:izFanElecPwr"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef:izFanElecPwr =
          {  HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:WperCFMIAQ *
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:FanPowerMult  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef:izSRE" 
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef:izSRE        =
          {  HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:SensRecovEff *
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:FanHeatRecovMult / 100  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef:izASRE"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef:izASRE       =
          {  HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:AdjSensRecovEff *
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:FanHeatRecovMult / 100  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef:izFanMtr"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef:izFanMtr     = {  Proj:CSE_ElecMETER  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef:izFanEndUse"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef:izFanEndUse  = {  "FANV"  }

   "second round of IZXFER creation if too much IAQ CFM to allow all DwellUnit HRV"    Proj:Action  = 
      {  if (IfValidAnd( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQCFMFracHRVCompat < 1 ))
         then  EvalRulelist( "Setup_nonHRVIAQ_IZXFERs_MFamDwellUnit" )
         else  UNCHANGED  endif  }

   "blast Proj:HRVIAQ_IZXFER_ZoneRef assignment"         Proj:HRVIAQ_IZXFER_ZoneRef       = {  UNDEFINED  }
   "blast Proj:HRVIAQ_IZXFER_DwellUnitRef assignment"    Proj:HRVIAQ_IZXFER_DwellUnitRef  = {  UNDEFINED  }
END
;************************************************************************* SAC 2/6/20 (tic #1174)
RULELIST "Setup_nonHRVIAQ_IZXFERs_MFamDwellUnit" 1 0 0 0
;*************************************************************************
   "Dereference all IAQFan:HRV_IZXFERRef"    IAQFan:HRV_IZXFERRef  = {  UNDEFINED  }

   ; DU IAQ non-HRV Fan #1
   "Create non-HRV IAQ IZXFER for DwellUnit Fan #1"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef  =
      {  if (HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:IAQFanType == 3 .AND.
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:IncludesRecov > 0 .AND.
             IfValidAnd( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanCnt[1] > 0 ) .AND.
             IfValidAnd( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:SensRecovEff > 0 ) .AND.
             IfValidAnd( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:AdjSensRecovEff > 0 ))
         then  CreateComp( cseIZXFER, substr( HRVIAQ_IZXFER_DwellUnitRef:Name, 0, 28 ) + "-1-" +
                                      substr( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:Name, 0, 28 ) + "-IAQ" )
         else  UNDEFINED  endif  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef:izNVType"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef:izNVType     = {  10  }      ; AIRNETHERV  - IAQ balanced / heat recovery ventilator
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef:izZn1" 
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef:izZn1        =
          {  HRVIAQ_IZXFER_ZoneRef:CSE_ZONE  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef:izFanVfDs"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef:izFanVfDs    =
          {  HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:IAQCFM *
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanCnt[1] *
          (1-ValidOr( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQCFMFracHRVCompat, 1 )) * HRVIAQ_IZXFER_DwellUnitRef:Count  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef:izFanElecPwr"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef:izFanElecPwr =
          {  HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:WperCFMIAQ *
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:FanPowerMult  }
                     ; exclude specification of izSRE & izASRE
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef:izFanMtr"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef:izFanMtr     = {  Proj:CSE_ElecMETER  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef:izFanEndUse"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[1]:HRV_IZXFERRef:izFanEndUse  = {  "FANV"  }

   ; DU IAQ non-HRV Fan #2
   "Create non-HRV IAQ IZXFER for DwellUnit Fan #2"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef  =
      {  if (HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:IAQFanType == 3 .AND.
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:IncludesRecov > 0 .AND.
             IfValidAnd( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanCnt[2] > 0 ) .AND.
             IfValidAnd( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:SensRecovEff > 0 ) .AND.
             IfValidAnd( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:AdjSensRecovEff > 0 ))
         then  CreateComp( cseIZXFER, substr( HRVIAQ_IZXFER_DwellUnitRef:Name, 0, 28 ) + "-2-" +
                                      substr( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:Name, 0, 28 ) + "-IAQ" )
         else  UNDEFINED  endif  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef:izNVType"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef:izNVType     = {  10  }      ; AIRNETHERV  - IAQ balanced / heat recovery ventilator
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef:izZn1" 
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef:izZn1        =
          {  HRVIAQ_IZXFER_ZoneRef:CSE_ZONE  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef:izFanVfDs"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef:izFanVfDs    =
          {  HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:IAQCFM *
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanCnt[2] *
          (1-ValidOr( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQCFMFracHRVCompat, 1 )) * HRVIAQ_IZXFER_DwellUnitRef:Count  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef:izFanElecPwr"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef:izFanElecPwr =
          {  HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:WperCFMIAQ *
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:FanPowerMult  }
                     ; exclude specification of izSRE & izASRE
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef:izFanMtr"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef:izFanMtr     = {  Proj:CSE_ElecMETER  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef:izFanEndUse"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[2]:HRV_IZXFERRef:izFanEndUse  = {  "FANV"  }

   ; DU IAQ non-HRV Fan #3
   "Create non-HRV IAQ IZXFER for DwellUnit Fan #3"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef  =
      {  if (HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:IAQFanType == 3 .AND.
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:IncludesRecov > 0 .AND.
             IfValidAnd( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanCnt[3] > 0 ) .AND.
             IfValidAnd( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:SensRecovEff > 0 ) .AND.
             IfValidAnd( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:AdjSensRecovEff > 0 ))
         then  CreateComp( cseIZXFER, substr( HRVIAQ_IZXFER_DwellUnitRef:Name, 0, 28 ) + "-3-" +
                                      substr( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:Name, 0, 28 ) + "-IAQ" )
         else  UNDEFINED  endif  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef:izNVType"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef:izNVType     = {  10  }      ; AIRNETHERV  - IAQ balanced / heat recovery ventilator
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef:izZn1" 
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef:izZn1        =
          {  HRVIAQ_IZXFER_ZoneRef:CSE_ZONE  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef:izFanVfDs"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef:izFanVfDs    =
          {  HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:IAQCFM *
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanCnt[3] *
          (1-ValidOr( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQCFMFracHRVCompat, 1 )) * HRVIAQ_IZXFER_DwellUnitRef:Count  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef:izFanElecPwr"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef:izFanElecPwr =
          {  HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:WperCFMIAQ *
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:FanPowerMult  }
                     ; exclude specification of izSRE & izASRE
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef:izFanMtr"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef:izFanMtr     = {  Proj:CSE_ElecMETER  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef:izFanEndUse"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[3]:HRV_IZXFERRef:izFanEndUse  = {  "FANV"  }

   ; DU IAQ non-HRV Fan #4
   "Create non-HRV IAQ IZXFER for DwellUnit Fan #4"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef  =
      {  if (HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:IAQFanType == 3 .AND.
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:IncludesRecov > 0 .AND.
             IfValidAnd( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanCnt[4] > 0 ) .AND.
             IfValidAnd( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:SensRecovEff > 0 ) .AND.
             IfValidAnd( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:AdjSensRecovEff > 0 ))
         then  CreateComp( cseIZXFER, substr( HRVIAQ_IZXFER_DwellUnitRef:Name, 0, 28 ) + "-4-" +
                                      substr( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:Name, 0, 28 ) + "-IAQ" )
         else  UNDEFINED  endif  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef:izNVType"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef:izNVType     = {  10  }      ; AIRNETHERV  - IAQ balanced / heat recovery ventilator
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef:izZn1" 
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef:izZn1        =
          {  HRVIAQ_IZXFER_ZoneRef:CSE_ZONE  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef:izFanVfDs"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef:izFanVfDs    =
          {  HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:IAQCFM *
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanCnt[4] *
          (1-ValidOr( HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQCFMFracHRVCompat, 1 )) * HRVIAQ_IZXFER_DwellUnitRef:Count  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef:izFanElecPwr"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef:izFanElecPwr =
          {  HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:WperCFMIAQ *
             HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:FanPowerMult  }
                     ; exclude specification of izSRE & izASRE
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef:izFanMtr"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef:izFanMtr     = {  Proj:CSE_ElecMETER  }
   "Set Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef:izFanEndUse"
        Proj:HRVIAQ_IZXFER_DwellUnitRef:DwellUnitTypeRef:IAQFanRef[4]:HRV_IZXFERRef:izFanEndUse  = {  "FANV"  }
END
;*************************************************************************



;*************************************************************************
;*************************************************************************

ENDFILE
