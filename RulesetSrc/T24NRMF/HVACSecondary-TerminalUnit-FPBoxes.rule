// TerminalUnit - Fan Powered Boxes
//
// -------------------------------------------------------------------------
//  Copyright (c) 2014-2017, California Energy Commission
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//    * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in
//  the documentation and/or other materials provided with the
//  distribution.
//    * Neither the name of the California Energy Commission nor the names of its
//  contributors may be used to endorse or promote products
//  derived from this software without specific prior written
//  permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
//  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION
//  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
//  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -------------------------------------------------------------------------
//  

//  This rule file addresses the following building descriptors:
//  Section 5.6.5.2 - Fan Powered Boxes
//      Fan Powered Box Type

// ---------- System 15 PFPB Switching Rules -----------------------------------
RULE NEW TrmlUnit:ExtZnSys15CapSim
  DATATYPE
    Float
  LONGFORM
    ExteriorZoneSystem15CapacitySimulated
  INPUTCLASS 
    NotInput
  ANNUAL
    if( BaseSysNum = 15 .AND. ZnServedRef:IsExtZn > 0 )
    then  CoilHtgRef:CapTotGrossRtdSim
    else  UNDEFINED
    endif
ENDRULE

RULE AirSys:Action
  ANNUAL
    if( Bldg:PredominantFuncGrp = "Office" .AND.
        Proj:CliZnNum > 6 .AND. Proj:CliZnNum < 16 .AND.
        SumChildren( TrmlUnit:ExtZnSys15CapSim ) > 0 )
    then  SetObjectFlagBySum( "TrmlUnit", "ExtZnSys15CapSim", "StdToPFPB",
                              SumChildren( TrmlUnit:ExtZnSys15CapSim ) * 0.25, "GE" )
    else  UNCHANGED
    endif
ENDRULE

RULE TrmlUnit:StdToPFPB
  ANNUAL
   if( Bldg:PredominantFuncGrp = "Office" .AND.
       Proj:CliZnNum > 6 .AND. Proj:CliZnNum < 16 )
   then  UNCHANGED  //  Set by the previous rule
   else if( IfValidAnd( ExtZnSys15CapSim > 0 ) )
   then  1  // 100% perimeter zone
   else  UNDEFINED
   endif endif
ENDRULE

RULE TrmlUnit:Type
  ANNUAL
    if( IfValidAnd( StdToPFPB > 0 ) )
    then  "ParallelFanBox"
    else  UNCHANGED
    endif
ENDRULE

RULE TrmlUnit:FanRef
  ANNUAL
    if( IfValidAnd( StdToPFPB > 0 ) )
    then  RuleLibrary( Fan, "BasePFPB Fan", 0, Name )
    else  UNCHANGED
    endif
ENDRULE

RULE TrmlUnit:Fan:SysCnt
  ANNUAL
    if( IfValidAnd( StdToPFPB > 0 ) )
    then  TrmlUnit:SysCnt
    else  UNCHANGED
    endif
ENDRULE

RULE TrmlUnit:ReheatCtrlMthd
  ANNUAL
    if( IfValidAnd( StdToPFPB > 0 ) )
    then  UNDEFINED
    else  UNCHANGED
    endif
ENDRULE

RULE TrmlUnit:HtgAirFlowMaxSim
  ANNUAL
    if( IfValidAnd( StdToPFPB > 0 ) )
    then  UNDEFINED
    else  UNCHANGED
    endif
ENDRULE

// ---------- Section 5.6.5.2 - Fan Powered Boxes -----------------------------------
RULE NEW TrmlUnit:IsFanBox
  DATATYPE
    Integer	
  DESCRIPTION
    "A flag that indicates whether the TerminalUnit is a fan-powered box."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( Type = "ParallelFanBox" .OR. Type = "SeriesFanBox" )
    then  1
    else  0
    endif
  SIZING
    if( Type = "ParallelFanBox" .OR. Type = "SeriesFanBox" )
    then  1
    else  0
    endif
  ANNUAL
    if( Type = "ParallelFanBox" .OR. Type = "SeriesFanBox" )
    then  1
    else  0
    endif
ENDRULE

RULE NEW TrmlUnit:FanFlowCap
  DATATYPE
    Float
  LONGFORM
    FanFlowCapacity
  DESCRIPTION
    "The flow capacity of the Fan for fan-powered TerminalUnits."    
  INPUTCLASS
    NotInput
  UNITS 
    cfm
  DEFAULT
    SumChildren( Fan:FlowCap ) * Cnt
  SIZING
    UNDEFINED
  ANNUAL
    if( IfValidAnd( StdToPFPB > 0 ) )
    then  PriAirFlowMax * Cnt * 0.5
    else  SumChildren( Fan:FlowCap ) * Cnt
    endif
ENDRULE


// ********** Induction Ratio ********************************************
RULE TrmlUnit:InductionRat
  DESCRIPTION
    "The ratio primary airflow to the air flow induced by the terminal from
     the plenum or the room, to the primary air flow delivered to the terminal,
     at design conditions."
  HELP
    "For 'ParallelFanBox' terminals, this is the ratio of the parallel fan
     flow capacity to the primary supply air flow from the main air handler.
    
     For 'ActiveBeam' terminals, this is the ratio of the air flow induced 
     from the zone through the coils, to the primary supply air flow from
     the main air handler."
  INPUTCLASS 
    Default
  MINIMUM
    0
  COMMONMAXIMUM
    0.6
  COMMONMAXIMUM
    1.0
  REPORTPRECISION
    2
  DEFAULT
    if( Type = "ParallelFanBox" )
    then 0.5
    else
    if( IfValidAnd( IsActiveBeam > 0 ) .AND. 
        IfValidAnd ( PriAirFlowMax > 0 ) )  
    then SumChildren( CoilClg:ChBeamInducedFlow ) / PriAirFlowMax
    else UNDEFINED
    endif endif
  CHECKSIM
    if( Type = "ParallelFanBox" .AND. LocalStatus( InductionRat ) = 0 )
    then
      PostError("Induction ratio is required for TerminalUnit '%s'", Name )
    else UNCHANGED
    endif 
  SIZING
    if( Type = "ParallelFanBox" .AND. BaseSysNum > 0 )
    then 0.5 // For 90.1
    else
    if( IfValidAnd( IsActiveBeam > 0 ) )
    then SumChildren( CoilClg:ChBeamInducedFlow ) / PriAirFlowMax
    else
    if( Type = "ParallelFanBox" )
    then InductionRat
    else UNDEFINED
    endif endif endif
  ANNUAL
    if( IfValidAnd( StdToPFPB > 0 ) )
    then  0.5 // For T24N
    else  UNCHANGED
    endif
ENDRULE

RULE AirSys:TrmlUnit:Fan:FlowCap
// Fan flow capacity for fan-powered boxes
  REPORTPRECISION
    0
  DEFAULT
    if( TrmlUnit:IsFanBox .AND. IfValidAnd( TrmlUnit:PriAirFlowMax > 0 ) )
    then
      if( TrmlUnit:Type = "ParallelFanBox" .AND. 
          IfValidAnd( TrmlUnit:InductionRat > 0 ) )
      then // Paralell box
        TrmlUnit:PriAirFlowMax * TrmlUnit:InductionRat
      else // Series box
        TrmlUnit:PriAirFlowMax
      endif
    else UNDEFINED
    endif
  CHECKSIM
    if( TrmlUnit:IsFanBox .AND. LocalStatus( FlowCap ) = 0 )
    then
      PostError("Fan:FlowCapacity is required for the fan in TerminalUnit '%s'.
                 Make sure all required TerminalUnit properties are defined and
                 if fan properties are user-defined, remove these inputs and
                 this error remains, contact support.", Name )
    else UNCHANGED
    endif
  ANNUAL
    if( TrmlUnit:IsFanBox = 1 )
    then  if( TrmlUnit:Type = "ParallelFanBox" ) 
          then  // Parallel box
                TrmlUnit:PriAirFlowMax * TrmlUnit:InductionRat
          else  // Series box
                TrmlUnit:PriAirFlowMax
          endif
    else  UNDEFINED
    endif
ENDRULE


// ********** Fan Powered Box Induced Air Zone *********************************
RULE TrmlUnit:InducedAirZnRef
  DESCRIPTION
    "The ThermalZone from which a series, parallel fan-powered box, or active
     beam draws its air."
  HELP
    "The induced air zone is defaulted to be same zone that the box serves.
     A plenum zone or other zone not directly served by an HVAC system can be
     can be specified. However, another 'Conditioned' ThermalZone cannot be
     referenced. For active beams, the induced air zone must alwasy be the zone
     the beam serves."
  INPUTCLASS 
    CondRequired
  DEFAULT
    if( IsFanBox .AND. LocalCompAssigned( ZnServedRef ) )
    then ZnServedRef
    // TO DO: Add logic to only set to plenum if plenum is only referenced by one PIU terminal
    ;     if( IfValidAnd( ZnServedRef:IsPlenumRet > 0 ) )
    ;     then ZnServedRef:RetPlenumZnRef
    ;     else if( IfValidAnd( ZnServedRef:IsPlenumSup > 0 ) )
    ;     then ZnServedRef:SupPlenumZnRef 
    ;     else ZnServedRef
    ;     endif endif
    else
    if( IfValidAnd( IsActiveBeam > 0 ) .AND. 
        LocalCompAssigned( ZnServedRef ) ) 
    then ZnServedRef
    else UNDEFINED
    endif endif
  CHECKSIM
    if( IsFanBox )
    then
      if( LocalCompAssigned( InducedAirZnRef ) = 0 )
      then
        PostError("InducedAirZoneReference is required for TerminalUnit '%s'", Name )
      else if( IfValidAnd( InducedAirZnRef:Name != ZnServedRef:Name ) .AND.
               IfValidAnd( InducedAirZnRef:Type = "Conditioned" ) )
      then
        PostError("TerminalUnit '%s' has an InducedAirZoneReference that is another
                   'Conditioned' ThermalZone. This is not supported.", Name )
      else if( LocalCompAssigned( ZnServedRef:RetPlenumZnRef ) )
      then 
        if( IfValidAnd( InducedAirZnRef:Name = ZnServedRef:RetPlenumZnRef:Name ) )
        then
          PostWarning("TerminalUnit '%s' has an InducedAirZoneReference that is a
                     return air plenum. This may result in unmet load hours.
                     Revising the InducedAirZone to the same zone that the terminal
                     serves (ZoneServedRef) may fix the unmet load issue.", Name )
         else UNCHANGED
         endif
      else if( LocalCompAssigned( ZnServedRef:SupPlenumZnRef ) )
      then 
        if( IfValidAnd( InducedAirZnRef:Name = ZnServedRef:SupPlenumZnRef:Name ) )
        then
          PostWarning("TerminalUnit '%s' has an InducedAirZoneReference that is a
                     supply air plenum. This may result in unmet load hours.
                     Revising the InducedAirZone to the same zone that the terminal
                     serves (ZoneServedRef) may fix the unmet load issue.", Name )
         else UNCHANGED 
         endif
      else UNCHANGED
      endif endif endif endif
    else UNCHANGED
    endif 
  SIZING
    if( IsFanBox )
    then  if( BaseSysNum > 0 )
          then  if( ZnServedRef:IsPlenumRet > 0 )
                then  ZnServedRef:RetPlenumZnRef
                else  ZnServedRef
                endif
          else  InducedAirZnRef
          endif
    else if( IfValidAnd( IsActiveBeam > 0 ) )
    then  ZnServedRef
    else  UNDEFINED
    endif endif
  ANNUAL
    if( IfValidAnd( StdToPFPB > 0 ) )
    then  if( ZnServedRef:IsPlenumRet > 0 )
          then  ZnServedRef:RetPlenumZnRef
          else  ZnServedRef
          endif
    else  UNCHANGED
    endif
ENDRULE


// ********** Fan Powered Box Power ********************************************
RULE TrmlUnit:FanPwrPerFlow
  DESCRIPTION
    "The flow normalized fan power of the fan-powered box."
  HELP
    "This property is used to define the fan power of fan powered TerminalUnits.
     The child Fan object power inputs are defaulted based on this input and therefore
     (currently) not editable when used in this application."
  INPUTCLASS 
    Default
  UNITS
    W/cfm
  MINIMUM 
    0
  COMMONMINIMUM
    0.15
  COMMONMAXIMUM
    0.4
  REPORTPRECISION
    3
  DEFAULT
    if( IsFanBox )
    then 0.35 // Nominal default assumption
    else UNDEFINED
    endif
  CHECKSIM
    if( IsFanBox .AND. LocalStatus( FanPwrPerFlow ) = 0 )
    then
      PostError("The fan power per flow is required for TerminalUnit '%s'.", Name )
    else UNCHANGED
    endif 
  SIZING
    if( IsFanBox )
    then  if( BaseSysNum > 0 )
          then  0.35 // For 90.1
          else  FanPwrPerFlow
          endif
    else  UNDEFINED
    endif
  ANNUAL
    if( IfValidAnd( StdToPFPB > 0 ) )
    then  0.3 // For T24N
    else  UNCHANGED
    endif
ENDRULE

RULE AirSys:TrmlUnit:Fan:CtrlMthd
  DEFAULT
    "ConstantVolume" 
  SIZING
    if( IsFanBox )
    then "ConstantVolume"
    else UNDEFINED
    endif
  ANNUAL
    if( IsFanBox )
    then "ConstantVolume"
    else UNDEFINED
    endif
ENDRULE

RULE AirSys:TrmlUnit:Fan:PwrIdx
  DEFAULT
    if( IfValidAnd( TrmlUnit:FanPwrPerFlow > 0 ) )
    then TrmlUnit:FanPwrPerFlow
    else UNDEFINED
    endif
  SIZING
    if( IsFanBox )
    then TrmlUnit:FanPwrPerFlow
    else UNDEFINED
    endif
  ANNUAL
    if( IsFanBox )
    then TrmlUnit:FanPwrPerFlow
    else UNDEFINED
    endif
ENDRULE

RULE AirSys:TrmlUnit:Fan:FlowEff
  REPORTPRECISION
    3
  DEFAULT
    0.5    
  SIZING
    if( TrmlUnit:IsFanBox )
    then 0.5
    else UNDEFINED 
    endif
  ANNUAL
    if( TrmlUnit:IsFanBox )
    then 0.5
    else UNDEFINED 
    endif
ENDRULE

RULE AirSys:TrmlUnit:Fan:MtrEff
  REPORTPRECISION
    3
  DEFAULT
    if( IfValidAnd( PwrIdx >= 0 ) )
    then 0.855
    else UNDEFINED 
    endif 
  SIZING
    if( IfValidAnd( PwrIdx >= 0 ) )
    then 0.855
    else UNDEFINED 
    endif 
  ANNUAL
    if( IfValidAnd( PwrIdx >= 0 ) )
    then 0.855
    else UNDEFINED 
    endif 
ENDRULE

RULE AirSys:TrmlUnit:Fan:TotEff
  REPORTPRECISION
    3
  DEFAULT
    if( IfValidAnd( FlowEff >= 0 ) .AND. IfValidAnd( MtrEff > 0 ) )
    then FlowEff * MtrEff
    else UNDEFINED 
    endif 
  SIZING
    if( IfValidAnd( FlowEff >= 0 ) .AND. IfValidAnd( MtrEff > 0 ) )
    then FlowEff * MtrEff
    else UNDEFINED 
    endif 
  ANNUAL
    if( IfValidAnd( FlowEff >= 0 ) .AND. IfValidAnd( MtrEff > 0 ) )
    then FlowEff * MtrEff
    else UNDEFINED 
    endif 
ENDRULE

RULE AirSys:TrmlUnit:Fan:TotStaticPress
  REPORTPRECISION
    2
  DEFAULT 
    if( IfValidAnd( PwrIdx > 0 ) .AND. IfValidAnd( TotEff > 0 ) )
    then PwrIdx * ( TotEff / 0.1175 )   
    else UNDEFINED
    endif
  SIZING
    if( IfValidAnd( PwrIdx > 0 ) .AND. IfValidAnd( TotEff > 0 ) )
    then PwrIdx * ( TotEff / 0.1175 )   
    else UNDEFINED
    endif
  ANNUAL
    if( IfValidAnd( PwrIdx > 0 ) .AND. IfValidAnd( TotEff > 0 ) )
    then PwrIdx * ( TotEff / 0.1175 )   
    else UNDEFINED
    endif
ENDRULE

RULE AirSys:TrmlUnit:Fan:MtrHP
  REPORTPRECISION
    3
  DEFAULT
    if( IfValidAnd( Pwr >= 0 ) )
    then StdElecMtrSize:MotorHPValue("InputMotorHP", Pwr / 1000 / 745.6 )
    else UNDEFINED 
    endif 
  SIZING
    if( IfValidAnd( Pwr >= 0 ) )
    then StdElecMtrSize:MotorHPValue("InputMotorHP", Pwr / 1000 / 745.6 )
    else UNDEFINED 
    endif 
  ANNUAL
    if( IfValidAnd( Pwr >= 0 ) )
    then StdElecMtrSize:MotorHPValue("InputMotorHP", Pwr / 1000 / 745.6 )
    else UNDEFINED 
    endif 
ENDRULE


// ********** Parallel Fan Box Control Method **********************************
RULE TrmlUnit:ParallelBoxFanCtrlMthd
  DESCRIPTION
    "The control scheme used to define when a parallel fan-powered box fans operate."
  HELP
    "Currently only 'FlowFraction' is supported."
  INPUTCLASS 
    NotInput
  OPTION
    FlowFraction
    ;    ThermostatOffset     // Not supported
    ;    TemperatureSchedule  // Not supported
  DEFAULT
    if( Type = "ParallelFanBox" )
    then "FlowFraction"
    else UNDEFINED
    endif
  SIZING
    if( Type != "ParallelFanBox" )
    then UNDEFINED
    else "FlowFraction"
    endif
  ANNUAL
    if( Type != "ParallelFanBox" )
    then UNDEFINED
    else "FlowFraction"
    endif
ENDRULE


// ********** Parallel Fan Box Flow Fraction ***********************************
RULE TrmlUnit:ParallelBoxFanFlowFrac
  DESCRIPTION
    "The fraction of the primary air flow at which parallel fan turns on."
  HELP
    // As of E+ 8.7, parallel box fans can now be operated to only turn on the fan for heating
    // if the flow fraction is set to 0.
    "For parallel fan boxes, the fan operation is intermittent. If the primary air
     flow is above this fraction, the fan is off. Otherwise the
     parallel box fan will run according to the TerminalUnit availability schedule,
     unless it is over-ridden by night-cycle control. If the fraction is set to 0,
     the fan will only run when there is a call for heating in the zone."
  INPUTCLASS 
    Default
  MINIMUM
    0
  COMMONMAXIMUM
    0.5
  MAXIMUM
    1.0
  REPORTPRECISION
    2
  DEFAULT
    if( Type = "ParallelFanBox" .AND.
        IfValidAnd( PriAirFlowMin > 0 ) .AND.
        IfValidAnd( PriAirFlowMax > 0 ) )
    then // Fan powered box to turn on at the minimum air flow fraction
      Min( ( PriAirFlowMin / PriAirFlowMax ), 1.0 )
    else UNDEFINED
    endif
  CHECKSIM
    if( Type = "ParallelFanBox" .AND. LocalStatus( ParallelBoxFanFlowFrac ) = 0 )
    then
      PostError("ParallelBoxFanFlowFraction is required for TerminalUnit '%s'.", Name )
    else UNCHANGED
    endif 
  SIZING
    if( Type != "ParallelFanBox" )
    then UNDEFINED
    else if( BaseSysNum > 0 )
    then UNDEFINED // Box flow for sizing is unknown
    else ParallelBoxFanFlowFrac
    endif endif
  ANNUAL
    if( Type != "ParallelFanBox" )
    then  UNDEFINED
    else if( IfValidAnd( StdToPFPB > 0 ) )
    then  0
    else if( BaseSysNum > 0 )
    then  Min( ( PriAirFlowMin / PriAirFlowMax ), 1.0 ) // For 90.1, see GC issue 806
    else  z:ParallelBoxFanFlowFrac
    endif endif endif
ENDRULE


// ********** Simulated Capacities *********************************************
RULE AirSys:TrmlUnit:Fan:FlowCapSim
  ANNUAL
    if( IfValidAnd( FlowCap > 0 ) )
    then FlowCap * SysCnt
    else 0
    endif
ENDRULE



// ** debugging rule evaluation duration **
RULE NEW Proj:RuleEvalDuration
  DEFAULT 
    LogDuration( "            time to evaluate Secondary HVAC DEFAULT rules:  %.3f seconds" )
  SIZING_PROPOSED 
    LogDuration( "            time to evaluate HVAC Secondary SIZING_PROPOSED rules:  %.3f seconds" )
  SIZING_BASELINE
    LogDuration( "            time to evaluate HVAC Secondary SIZING_BASELINE rules:  %.3f seconds" )
  ANNUAL_PROPOSED
    LogDuration( "            time to evaluate HVAC Secondary ANNUAL_BASELINE rules:  %.3f seconds" )
  ANNUAL_BASELINE
    LogDuration( "            time to evaluate HVAC Secondary ANNUAL_BASELINE rules:  %.3f seconds" )
ENDRULE
