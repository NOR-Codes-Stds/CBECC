; -------------------------------------------------------------------------
; Rules pertaining to:   CEC Existing EDR Defaulting rules
; CEC Title-24 Residential Energy Code
; -------------------------------------------------------------------------
; Copyright (c) 2012-2017, California Energy Commission
; Copyright (c) 2012-2017, Wrightsoft Corporation
; All rights reserved.
; Redistribution and use in source and binary forms, with or without modification,
; are permitted provided that the following conditions are met:
; - Redistributions of source code must retain the above copyright notice, this
;   list of conditions and the following disclaimer.
; - Redistributions in binary form must reproduce the above copyright notice, this
;   list of conditions, the following disclaimer in the documentation and/or other
;   materials provided with the distribution.
; - Neither the name of the California Energy Commission nor the names of its
;   contributors may be used to endorse or promote products derived from this
;   software without specific prior written permission.
; DISCLAIMER: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
; THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
; NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION,
; WRIGHTSOFT CORPORATION, ITRON, INC. OR ANY OTHER AUTHOR OR COPYRIGHT HOLDER OF
; THIS SOFTWARE (COLLECTIVELY, THE "AUTHORS") BE LIABLE FOR ANY DIRECT, INDIRECT,
; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
; OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
; OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  EACH LICENSEE AND SUBLICENSEE OF THE
; SOFTWARE AGREES NOT TO ASSERT ANY CLAIM AGAINST ANY OF THE AUTHORS RELATING TO
; THIS SOFTWARE, WHETHER DUE TO PERFORMANCE ISSUES, TITLE OR INFRINGEMENT ISSUES,
;STRICT LIABILITY OR OTHERWISE.
; -------------------------------------------------------------------------

; SAC 5/24/17 - added ExEDR Cons:CavityLayer defaulting
;*************************************************************************
RULELIST "ExEDRDefault_Cons_CavityLayer" 0 0 0 0
;*************************************************************************
	"Default Cons:CavityLayer (ExEDR)"     Cons:CavityLayer	= {
         switch (CanAssignTo)
            case  0  :  ;  Exterior Walls
                     if (ExEDR_ExtWallCavityRValue:CavRVal( "Year", Proj:YearEnvelope, "ClimZone", Proj:ClimateZone ) > 0)
                     then  int( ExEDR_ExtWallCavityRValue:CavRVal( "Year", Proj:YearEnvelope, "ClimZone", Proj:ClimateZone ) + 0.5 )
                     else  100401  endif  ; empty vertical cavity
            case  3  :  ;  Ceilings (below attic)
                     if (ExEDR_AtticFloorInsulationDepth:InsDp( "Year", Proj:YearRoof, "ClimZone", Proj:ClimateZone ) > 0)
                     then  ; RVal/Inch here based on that defined in the ExEDR_AtticFloorInsulationDepth lookup table
                           int( (ExEDR_AtticFloorInsulationDepth:InsDp( "Year", Proj:YearRoof, "ClimZone", Proj:ClimateZone ) * 3) + 0.5 )
                     else  0  endif
            case  2  :  ;  Cathedral Ceilings   - assumed to be same insul as ClgBlwAttic ??
                     if (ExEDR_AtticFloorInsulationDepth:InsDp( "Year", Proj:YearRoof, "ClimZone", Proj:ClimateZone ) > 0)
                     then  ; RVal/Inch here based on that defined in the ExEDR_AtticFloorInsulationDepth lookup table
                           int( (ExEDR_AtticFloorInsulationDepth:InsDp( "Year", Proj:YearRoof, "ClimZone", Proj:ClimateZone ) * 3) + 0.5 )
                     else  0  endif
            case  5  :  ;  Exterior Floors
                     if (ExEDR_ExtFloorCavityRValue:CavRVal( "Year", Proj:YearEnvelope, "ClimZone", Proj:ClimateZone ) > 0)
                     then  int( ExEDR_ExtFloorCavityRValue:CavRVal( "Year", Proj:YearEnvelope, "ClimZone", Proj:ClimateZone ) + 0.5 )
                     else  0  endif
            case  6  :  ;  Floors Over Crawlspace  (same as Exterior Floors)
                     if (ExEDR_ExtFloorCavityRValue:CavRVal( "Year", Proj:YearEnvelope, "ClimZone", Proj:ClimateZone ) > 0)
                     then  int( ExEDR_ExtFloorCavityRValue:CavRVal( "Year", Proj:YearEnvelope, "ClimZone", Proj:ClimateZone ) + 0.5 )
                     else  0  endif
            case 10  :  ;  Interior Walls
                        100401  ; empty vertical cavity
            default  :  0
         endswitch  }
END
;*************************************************************************

; SAC 5/24/17 - added ExEDR Proj:DefaultACH50 defaulting
;*************************************************************************
RULELIST "ExEDRDefault_Proj_DefaultACH50" 0 0 0 0
;*************************************************************************
	"Default Proj:DefaultACH50 (ExEDR)"    Proj:DefaultACH50	= {
	      ExEDR_EnvelopeAirChanges:ACH50( "Year", Proj:YearEnvelope, "ClimZone", Proj:ClimateZone )  }
END
;*************************************************************************

; SAC 5/24/17 - added ExEDR Proj:DfltExWinPanes & DfltExWinFrameType defaulting
;*************************************************************************
RULELIST "ExEDRDefault_Proj_DfltWinProperties" 0 0 0 0
;*************************************************************************
   "Set Proj:DfltExWinPanes"        Proj:DfltExWinPanes  = {
         if (IfValidAnd( YearWindows > 0 ))
         then  ExEDR_WindowProperties:Panes( "Year", YearWindows )
         else  "Single Pane"  endif  }
   "Set Proj:DfltExWinFrameType"    Proj:DfltExWinFrameType  = {
         if (IfValidAnd( YearWindows > 0 ))
         then  ExEDR_WindowProperties:Frame( "Year", YearWindows )
         else  "Aluminum"  endif  }
END
;*************************************************************************


; SAC 5/24/17 - added ExEDR Proj:DfltExWinPanes & DfltExWinFrameType defaulting
;*************************************************************************
RULELIST "ExEDRDefault_Win_NFRCProperties" 0 0 0 0
;*************************************************************************
	"Default Win:NFRCUfactor for existing homes"
		Win:NFRCUfactor	= {
			if (IfValidAnd( Proj:DfltExWinPanes > 0 ) .AND. IfValidAnd( Proj:DfltExWinFrameType > 0 ))
			then  if (  ExEDR_WindowPerformance:Ufactor( "Panes", EnumString( Proj:DfltExWinPanes ), "Frame", EnumString( Proj:DfltExWinFrameType ) ) > 0)
               then  ExEDR_WindowPerformance:Ufactor( "Panes", EnumString( Proj:DfltExWinPanes ), "Frame", EnumString( Proj:DfltExWinFrameType ) )
               else  UNCHANGED  endif
			else  UNCHANGED  endif  }
	"Default Win:NFRCSHGC for existing homes"
		Win:NFRCSHGC		= {
			if (IfValidAnd( Proj:DfltExWinPanes > 0 ) .AND. IfValidAnd( Proj:DfltExWinFrameType > 0 ))
			then  if (  ExEDR_WindowPerformance:SHGC( "Panes", EnumString( Proj:DfltExWinPanes ), "Frame", EnumString( Proj:DfltExWinFrameType ) ) > 0)
               then  ExEDR_WindowPerformance:SHGC( "Panes", EnumString( Proj:DfltExWinPanes ), "Frame", EnumString( Proj:DfltExWinFrameType ) )
               else  UNCHANGED  endif
			else  UNCHANGED  endif  }
END
;*************************************************************************

; SAC 5/24/17 - added ExEDR WindowType defaulting
;*************************************************************************
RULELIST "ExEDRDefault_WindowType_Properties" 0 0 0 0
;*************************************************************************
   "Default WindowType:WinPanes"       WindowType:WinPanes  = {
         if (IfValidAnd( Proj:YearWindows > 0 ))
         then  ExEDR_WindowProperties:Panes( "Year", Proj:YearWindows )
         else  "Single Pane"  endif  }
   "Default WindowType:WinFrameType"   WindowType:WinFrameType  = {
         if (IfValidAnd( Proj:YearWindows > 0 ))
         then  ExEDR_WindowProperties:Frame( "Year", Proj:YearWindows )
         else  "Aluminum"  endif  }

   "Default WindowType:NFRCUfactor"    WindowType:NFRCUfactor  = {
         if (  ExEDR_WindowPerformance:Ufactor( "Panes", EnumString( WinPanes ), "Frame", EnumString( WinFrameType ) ) > 0)
         then  ExEDR_WindowPerformance:Ufactor( "Panes", EnumString( WinPanes ), "Frame", EnumString( WinFrameType ) )
         else  UNDEFINED  endif  }
   "Default WindowType:NFRCSHGC"       WindowType:NFRCSHGC  = {
         if (  ExEDR_WindowPerformance:SHGC( "Panes", EnumString( WinPanes ), "Frame", EnumString( WinFrameType ) ) > 0)
         then  ExEDR_WindowPerformance:SHGC( "Panes", EnumString( WinPanes ), "Frame", EnumString( WinFrameType ) )
         else  UNDEFINED  endif  }
END
;*************************************************************************


; SAC 6/20/17 - added ExEDR HVACHeat:AFUE defaulting
;*************************************************************************
RULELIST "ExEDRDefault_HVACHeat_AFUE" 0 0 0 0
;*************************************************************************
	"Default HVACHeat:AFUE (via ExEDR tables)"		HVACHeat:AFUE  = {
         switch (Local( Type ))
            case  1 :  100 * ExEDR_CentralFurnace:AFUE( "Year", Proj:YearHVAC )        ; CntrlFurnace
            case  2 :  100 * ExEDR_WallFurnaceFan:AFUE( "Year", Proj:YearHVAC )        ; WallFurnaceFan
            case  3 :  100 * ExEDR_GasWaterBoiler:AFUE( "Year", Proj:YearHVAC )        ; Boiler
            case 17 :  UNCHANGED                                                       ; WoodHeat
            case 14 :  100 * ExEDR_WallFurnaceGravity:AFUE( "Year", Proj:YearHVAC )    ; WallFurnaceGravity
            case 15 :  100 * ExEDR_CentralFurnace:AFUE( "Year", Proj:YearHVAC )        ; FloorFurnace
            case 16 :  100 * ExEDR_RoomFurnace:AFUE( "Year", Proj:YearHVAC )           ; RoomHeater
            case  8 :  UNCHANGED                                                       ; Electric
            case  9 :  UNCHANGED                                                       ; CombHydro
            default :  UNCHANGED                                                       ; unknown
         endswitch  }
END
;*************************************************************************


; SAC 9/27/17 - added ExEDR HVACHtPump:HSPF defaulting
;*************************************************************************
RULELIST "ExEDRDefault_HVACHtPump_HSPF" 0 0 0 0
;*************************************************************************
	"Default HVACHtPump:HSPF (via ExEDR tables)"		HVACHtPump:HSPF  = {
         switch (Local( Type ))
            case  4 :  ExEDR_SplitHeatPump:HSPF( "Year", Proj:YearHVAC )      ; SplitHeatPump
            case 26 :  ExEDR_SplitHeatPump:HSPF( "Year", Proj:YearHVAC )      ; PkgTermHeatPump          ; SAC 6/22/20 (tic #1225) 
            case 24 :  ExEDR_SplitHeatPump:HSPF( "Year", Proj:YearHVAC )      ; SglPkgVertHeatPump       ; SAC 6/22/20 (tic #1226) 
            case 19 :  if (Proj:YearHVAC > 2014)
                       then  min(  ExEDR_PackagedHeatPump:HSPF( "Year", Proj:YearHVAC ),
	                                T24RHeatingEquipment:HSPF( "CodeBase", Proj:StdDesignBase, "StdVer", Proj:StandardsVersion, "SysType", TypeAbbrevStr ) )
                       else  min(  ExEDR_PackagedHeatPump:HSPF( "Year", Proj:YearHVAC ),
	                                T24RHeatingEquipment:HSPF( "CodeBase", 2013, "StdVer", 2014, "SysType", "SDHVSplitHeatPump" ) )  endif     ; SDHVSplitHeatPump
            case 10 :  ExEDR_SplitHeatPump:HSPF( "Year", Proj:YearHVAC )      ; DuctlessMiniSplitHeatPump
            case 20 :  ExEDR_SplitHeatPump:HSPF( "Year", Proj:YearHVAC )      ; DuctlessMultiSplitHeatPump
            case 21 :  ExEDR_SplitHeatPump:HSPF( "Year", Proj:YearHVAC )      ; DuctlessVRFHeatPump
            case 28 :  ExEDR_SplitHeatPump:HSPF( "Year", Proj:YearHVAC )      ; DuctedMiniSplitHeatPump                 ; SAC 6/22/20 (tic #1229)
            case 30 :  ExEDR_SplitHeatPump:HSPF( "Year", Proj:YearHVAC )      ; DuctedMultiSplitHeatPump                ; SAC 6/22/20 (tic #1229)
            case 32 :  ExEDR_SplitHeatPump:HSPF( "Year", Proj:YearHVAC )      ; Ducted+DuctlessMultiSplitHeatPump       ; SAC 6/22/20 (tic #1229)
            case  5 :  ExEDR_PackagedHeatPump:HSPF( "Year", Proj:YearHVAC )   ; PkgHeatPump
            case  6 :  UNCHANGED   ; LrgPkgHeatPump
            case  7 :  UNCHANGED   ; RoomHeatPump
            case 11 :  UNCHANGED   ; AirToWaterHeatPump
            case 12 :  ExEDR_SplitHeatPump:HSPF( "Year", Proj:YearHVAC )      ; GroundSourceHeatPump
            default :  UNCHANGED                                              ; unknown
         endswitch  }
END
;*************************************************************************


;*************************************************************************
;*************************************************************************

ENDFILE














